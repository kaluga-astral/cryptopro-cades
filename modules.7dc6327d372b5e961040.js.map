{"version":3,"file":"modules.7dc6327d372b5e961040.js","mappings":"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","sources":["webpack://cryptopro-cades-example/../../node_modules/asn1js/build/index.es.js","webpack://cryptopro-cades-example/../../node_modules/base64-js/index.js","webpack://cryptopro-cades-example/../../node_modules/buffer/index.js","webpack://cryptopro-cades-example/../../node_modules/ieee754/index.js","webpack://cryptopro-cades-example/../../node_modules/bytestreamjs/build/mjs/byte_stream.js","webpack://cryptopro-cades-example/../../node_modules/bytestreamjs/build/mjs/seq_stream.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/build/index.es.js","webpack://cryptopro-cades-example/../../node_modules/pvtsutils/build/index.js","webpack://cryptopro-cades-example/../../node_modules/pvutils/build/utils.es.js","webpack://cryptopro-cades-example/../../node_modules/scheduler/cjs/scheduler.production.min.js","webpack://cryptopro-cades-example/../../node_modules/scheduler/index.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/construct.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js"],"sourcesContent":["/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\r\n    if (typeof BigInt === \"undefined\") {\r\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\r\n    }\r\n}\r\nfunction concat(buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retView = new Uint8Array(outputLength);\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retView.buffer;\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof Uint8Array)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\nclass ViewWriter {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    write(buf) {\r\n        this.items.push(buf);\r\n    }\r\n    final() {\r\n        return concat(this.items);\r\n    }\r\n}\n\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\nconst NAME = \"name\";\r\nconst VALUE_HEX_VIEW = \"valueHexView\";\r\nconst IS_HEX_ONLY = \"isHexOnly\";\r\nconst ID_BLOCK = \"idBlock\";\r\nconst TAG_CLASS = \"tagClass\";\r\nconst TAG_NUMBER = \"tagNumber\";\r\nconst IS_CONSTRUCTED = \"isConstructed\";\r\nconst FROM_BER = \"fromBER\";\r\nconst TO_BER = \"toBER\";\r\nconst LOCAL = \"local\";\r\nconst EMPTY_STRING = \"\";\r\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_VIEW = new Uint8Array(0);\r\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\r\nconst OCTET_STRING_NAME = \"OCTET STRING\";\r\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\r\n    var _a;\r\n    return _a = class Some extends BaseClass {\r\n            constructor(...args) {\r\n                var _a;\r\n                super(...args);\r\n                const params = args[0] || {};\r\n                this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\r\n            }\r\n            get valueHex() {\r\n                return this.valueHexView.slice().buffer;\r\n            }\r\n            set valueHex(value) {\r\n                this.valueHexView = new Uint8Array(value);\r\n            }\r\n            fromBER(inputBuffer, inputOffset, inputLength) {\r\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n                    return -1;\r\n                }\r\n                const endLength = inputOffset + inputLength;\r\n                this.valueHexView = view.subarray(inputOffset, endLength);\r\n                if (!this.valueHexView.length) {\r\n                    this.warnings.push(\"Zero buffer length\");\r\n                    return inputOffset;\r\n                }\r\n                this.blockLength = inputLength;\r\n                return endLength;\r\n            }\r\n            toBER(sizeOnly = false) {\r\n                if (!this.isHexOnly) {\r\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\r\n                    return EMPTY_BUFFER;\r\n                }\r\n                if (sizeOnly) {\r\n                    return new ArrayBuffer(this.valueHexView.byteLength);\r\n                }\r\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\r\n                    ? this.valueHexView.buffer\r\n                    : this.valueHexView.slice().buffer;\r\n            }\r\n            toJSON() {\r\n                return {\r\n                    ...super.toJSON(),\r\n                    isHexOnly: this.isHexOnly,\r\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\r\n                };\r\n            }\r\n        },\r\n        _a.NAME = \"hexBlock\",\r\n        _a;\r\n}\n\nclass LocalBaseBlock {\r\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\r\n        this.blockLength = blockLength;\r\n        this.error = error;\r\n        this.warnings = warnings;\r\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\r\n    }\r\n    static blockName() {\r\n        return this.NAME;\r\n    }\r\n    get valueBeforeDecode() {\r\n        return this.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    set valueBeforeDecode(value) {\r\n        this.valueBeforeDecodeView = new Uint8Array(value);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            blockName: this.constructor.NAME,\r\n            blockLength: this.blockLength,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\r\n        };\r\n    }\r\n}\r\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n}\r\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ idBlock = {}, } = {}) {\r\n        var _a, _b, _c, _d;\r\n        super();\r\n        if (idBlock) {\r\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n            this.valueHexView = idBlock.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\r\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\r\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\r\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\r\n        }\r\n        else {\r\n            this.tagClass = -1;\r\n            this.tagNumber = -1;\r\n            this.isConstructed = false;\r\n        }\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let firstOctet = 0;\r\n        switch (this.tagClass) {\r\n            case 1:\r\n                firstOctet |= 0x00;\r\n                break;\r\n            case 2:\r\n                firstOctet |= 0x40;\r\n                break;\r\n            case 3:\r\n                firstOctet |= 0x80;\r\n                break;\r\n            case 4:\r\n                firstOctet |= 0xC0;\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return EMPTY_BUFFER;\r\n        }\r\n        if (this.isConstructed)\r\n            firstOctet |= 0x20;\r\n        if (this.tagNumber < 31 && !this.isHexOnly) {\r\n            const retView = new Uint8Array(1);\r\n            if (!sizeOnly) {\r\n                let number = this.tagNumber;\r\n                number &= 0x1F;\r\n                firstOctet |= number;\r\n                retView[0] = firstOctet;\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        if (!this.isHexOnly) {\r\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const size = encodedBuf.byteLength;\r\n            const retView = new Uint8Array(size + 1);\r\n            retView[0] = (firstOctet | 0x1F);\r\n            if (!sizeOnly) {\r\n                for (let i = 0; i < (size - 1); i++)\r\n                    retView[i + 1] = encodedView[i] | 0x80;\r\n                retView[size] = encodedView[size - 1];\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\r\n        retView[0] = (firstOctet | 0x1F);\r\n        if (!sizeOnly) {\r\n            const curView = this.valueHexView;\r\n            for (let i = 0; i < (curView.length - 1); i++)\r\n                retView[i + 1] = curView[i] | 0x80;\r\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        const tagClassMask = intBuffer[0] & 0xC0;\r\n        switch (tagClassMask) {\r\n            case 0x00:\r\n                this.tagClass = (1);\r\n                break;\r\n            case 0x40:\r\n                this.tagClass = (2);\r\n                break;\r\n            case 0x80:\r\n                this.tagClass = (3);\r\n                break;\r\n            case 0xC0:\r\n                this.tagClass = (4);\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return -1;\r\n        }\r\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n        this.isHexOnly = false;\r\n        const tagNumberMask = intBuffer[0] & 0x1F;\r\n        if (tagNumberMask !== 0x1F) {\r\n            this.tagNumber = (tagNumberMask);\r\n            this.blockLength = 1;\r\n        }\r\n        else {\r\n            let count = 1;\r\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\r\n            let tagNumberBufferMaxLength = 255;\r\n            while (intBuffer[count] & 0x80) {\r\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n                count++;\r\n                if (count >= intBuffer.length) {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return -1;\r\n                }\r\n                if (count === tagNumberBufferMaxLength) {\r\n                    tagNumberBufferMaxLength += 255;\r\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\r\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\r\n                        tempBufferView[i] = intTagNumberBuffer[i];\r\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\r\n                }\r\n            }\r\n            this.blockLength = (count + 1);\r\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n            const tempBufferView = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++)\r\n                tempBufferView[i] = intTagNumberBuffer[i];\r\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\r\n            intTagNumberBuffer.set(tempBufferView);\r\n            if (this.blockLength <= 9)\r\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\r\n            else {\r\n                this.isHexOnly = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n        }\r\n        if (((this.tagClass === 1)) &&\r\n            (this.isConstructed)) {\r\n            switch (this.tagNumber) {\r\n                case 1:\r\n                case 2:\r\n                case 5:\r\n                case 6:\r\n                case 9:\r\n                case 13:\r\n                case 14:\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return -1;\r\n            }\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            tagClass: this.tagClass,\r\n            tagNumber: this.tagNumber,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\r\n    constructor({ lenBlock = {}, } = {}) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\r\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\r\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        if (intBuffer[0] === 0xFF) {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return -1;\r\n        }\r\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\r\n        if (this.isIndefiniteForm) {\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\r\n        if (this.longFormUsed === false) {\r\n            this.length = (intBuffer[0]);\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        const count = intBuffer[0] & 0x7F;\r\n        if (count > 8) {\r\n            this.error = \"Too big integer\";\r\n            return -1;\r\n        }\r\n        if ((count + 1) > intBuffer.length) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        const lenOffset = inputOffset + 1;\r\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\r\n        if (lengthBufferView[count - 1] === 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\r\n        if (this.longFormUsed && (this.length <= 127))\r\n            this.warnings.push(\"Unnecessary usage of long length form\");\r\n        this.blockLength = count + 1;\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let retBuf;\r\n        let retView;\r\n        if (this.length > 127)\r\n            this.longFormUsed = true;\r\n        if (this.isIndefiniteForm) {\r\n            retBuf = new ArrayBuffer(1);\r\n            if (sizeOnly === false) {\r\n                retView = new Uint8Array(retBuf);\r\n                retView[0] = 0x80;\r\n            }\r\n            return retBuf;\r\n        }\r\n        if (this.longFormUsed) {\r\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\r\n            if (encodedBuf.byteLength > 127) {\r\n                this.error = \"Too big length\";\r\n                return (EMPTY_BUFFER);\r\n            }\r\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n            if (sizeOnly)\r\n                return retBuf;\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = encodedBuf.byteLength | 0x80;\r\n            for (let i = 0; i < encodedBuf.byteLength; i++)\r\n                retView[i + 1] = encodedView[i];\r\n            return retBuf;\r\n        }\r\n        retBuf = new ArrayBuffer(1);\r\n        if (sizeOnly === false) {\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = this.length;\r\n        }\r\n        return retBuf;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            longFormUsed: this.longFormUsed,\r\n            length: this.length,\r\n        };\r\n    }\r\n}\r\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\r\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\r\n        super(parameters);\r\n        this.name = name;\r\n        this.optional = optional;\r\n        if (primitiveSchema) {\r\n            this.primitiveSchema = primitiveSchema;\r\n        }\r\n        this.idBlock = new LocalIdentificationBlock(parameters);\r\n        this.lenBlock = new LocalLengthBlock(parameters);\r\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        if (!writer) {\r\n            prepareIndefiniteForm(this);\r\n        }\r\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n        _writer.write(idBlockBuf);\r\n        if (this.lenBlock.isIndefiniteForm) {\r\n            _writer.write(new Uint8Array([0x80]).buffer);\r\n            this.valueBlock.toBER(sizeOnly, _writer);\r\n            _writer.write(new ArrayBuffer(2));\r\n        }\r\n        else {\r\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n            this.lenBlock.length = valueBlockBuf.byteLength;\r\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n            _writer.write(lenBlockBuf);\r\n            _writer.write(valueBlockBuf);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            idBlock: this.idBlock.toJSON(),\r\n            lenBlock: this.lenBlock.toJSON(),\r\n            valueBlock: this.valueBlock.toJSON(),\r\n            name: this.name,\r\n            optional: this.optional,\r\n        };\r\n        if (this.primitiveSchema)\r\n            object.primitiveSchema = this.primitiveSchema.toJSON();\r\n        return object;\r\n    }\r\n    toString(encoding = \"ascii\") {\r\n        if (encoding === \"ascii\") {\r\n            return this.onAsciiEncoding();\r\n        }\r\n        return pvtsutils.Convert.ToHex(this.toBER());\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\r\n    }\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof this.constructor)) {\r\n            return false;\r\n        }\r\n        const thisRaw = this.toBER();\r\n        const otherRaw = other.toBER();\r\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\r\n    }\r\n}\r\nBaseBlock.NAME = \"BaseBlock\";\r\nfunction prepareIndefiniteForm(baseBlock) {\r\n    if (baseBlock instanceof typeStore.Constructed) {\r\n        for (const value of baseBlock.valueBlock.value) {\r\n            if (prepareIndefiniteForm(value)) {\r\n                baseBlock.lenBlock.isIndefiniteForm = true;\r\n            }\r\n        }\r\n    }\r\n    return !!baseBlock.lenBlock.isIndefiniteForm;\r\n}\n\nclass BaseStringBlock extends BaseBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\r\n        super(parameters, stringValueBlockType);\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        this.fromBuffer(this.valueBlock.valueHexView);\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\r\n    }\r\n}\r\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ isHexOnly = true, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = isHexOnly;\r\n    }\r\n}\r\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\r\nclass Primitive extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalPrimitiveValueBlock);\r\n        this.idBlock.isConstructed = false;\r\n    }\r\n}\r\n_a$w = Primitive;\r\n(() => {\r\n    typeStore.Primitive = _a$w;\r\n})();\r\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\r\n    if (inputObject instanceof newType) {\r\n        return inputObject;\r\n    }\r\n    const newObject = new newType();\r\n    newObject.idBlock = inputObject.idBlock;\r\n    newObject.lenBlock = inputObject.lenBlock;\r\n    newObject.warnings = inputObject.warnings;\r\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\r\n    return newObject;\r\n}\r\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\r\n    const incomingOffset = inputOffset;\r\n    let returnObject = new BaseBlock({}, ValueBlock);\r\n    const baseBlock = new LocalBaseBlock();\r\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\r\n        returnObject.error = baseBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\r\n    if (!intBuffer.length) {\r\n        returnObject.error = \"Zero buffer length\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.idBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.idBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.idBlock.blockLength;\r\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.lenBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.lenBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.lenBlock.blockLength;\r\n    if (!returnObject.idBlock.isConstructed &&\r\n        returnObject.lenBlock.isIndefiniteForm) {\r\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let newASN1Type = BaseBlock;\r\n    switch (returnObject.idBlock.tagClass) {\r\n        case 1:\r\n            if ((returnObject.idBlock.tagNumber >= 37) &&\r\n                (returnObject.idBlock.isHexOnly === false)) {\r\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                return {\r\n                    offset: -1,\r\n                    result: returnObject\r\n                };\r\n            }\r\n            switch (returnObject.idBlock.tagNumber) {\r\n                case 0:\r\n                    if ((returnObject.idBlock.isConstructed) &&\r\n                        (returnObject.lenBlock.length > 0)) {\r\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                        return {\r\n                            offset: -1,\r\n                            result: returnObject\r\n                        };\r\n                    }\r\n                    newASN1Type = typeStore.EndOfContent;\r\n                    break;\r\n                case 1:\r\n                    newASN1Type = typeStore.Boolean;\r\n                    break;\r\n                case 2:\r\n                    newASN1Type = typeStore.Integer;\r\n                    break;\r\n                case 3:\r\n                    newASN1Type = typeStore.BitString;\r\n                    break;\r\n                case 4:\r\n                    newASN1Type = typeStore.OctetString;\r\n                    break;\r\n                case 5:\r\n                    newASN1Type = typeStore.Null;\r\n                    break;\r\n                case 6:\r\n                    newASN1Type = typeStore.ObjectIdentifier;\r\n                    break;\r\n                case 10:\r\n                    newASN1Type = typeStore.Enumerated;\r\n                    break;\r\n                case 12:\r\n                    newASN1Type = typeStore.Utf8String;\r\n                    break;\r\n                case 13:\r\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\r\n                    break;\r\n                case 14:\r\n                    newASN1Type = typeStore.TIME;\r\n                    break;\r\n                case 15:\r\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: -1,\r\n                        result: returnObject\r\n                    };\r\n                case 16:\r\n                    newASN1Type = typeStore.Sequence;\r\n                    break;\r\n                case 17:\r\n                    newASN1Type = typeStore.Set;\r\n                    break;\r\n                case 18:\r\n                    newASN1Type = typeStore.NumericString;\r\n                    break;\r\n                case 19:\r\n                    newASN1Type = typeStore.PrintableString;\r\n                    break;\r\n                case 20:\r\n                    newASN1Type = typeStore.TeletexString;\r\n                    break;\r\n                case 21:\r\n                    newASN1Type = typeStore.VideotexString;\r\n                    break;\r\n                case 22:\r\n                    newASN1Type = typeStore.IA5String;\r\n                    break;\r\n                case 23:\r\n                    newASN1Type = typeStore.UTCTime;\r\n                    break;\r\n                case 24:\r\n                    newASN1Type = typeStore.GeneralizedTime;\r\n                    break;\r\n                case 25:\r\n                    newASN1Type = typeStore.GraphicString;\r\n                    break;\r\n                case 26:\r\n                    newASN1Type = typeStore.VisibleString;\r\n                    break;\r\n                case 27:\r\n                    newASN1Type = typeStore.GeneralString;\r\n                    break;\r\n                case 28:\r\n                    newASN1Type = typeStore.UniversalString;\r\n                    break;\r\n                case 29:\r\n                    newASN1Type = typeStore.CharacterString;\r\n                    break;\r\n                case 30:\r\n                    newASN1Type = typeStore.BmpString;\r\n                    break;\r\n                case 31:\r\n                    newASN1Type = typeStore.DATE;\r\n                    break;\r\n                case 32:\r\n                    newASN1Type = typeStore.TimeOfDay;\r\n                    break;\r\n                case 33:\r\n                    newASN1Type = typeStore.DateTime;\r\n                    break;\r\n                case 34:\r\n                    newASN1Type = typeStore.Duration;\r\n                    break;\r\n                default: {\r\n                    const newObject = returnObject.idBlock.isConstructed\r\n                        ? new typeStore.Constructed()\r\n                        : new typeStore.Primitive();\r\n                    newObject.idBlock = returnObject.idBlock;\r\n                    newObject.lenBlock = returnObject.lenBlock;\r\n                    newObject.warnings = returnObject.warnings;\r\n                    returnObject = newObject;\r\n                }\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        default: {\r\n            newASN1Type = returnObject.idBlock.isConstructed\r\n                ? typeStore.Constructed\r\n                : typeStore.Primitive;\r\n        }\r\n    }\r\n    returnObject = localChangeType(returnObject, newASN1Type);\r\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\r\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\r\n    return {\r\n        offset: resultOffset,\r\n        result: returnObject\r\n    };\r\n}\r\nfunction fromBER(inputBuffer) {\r\n    if (!inputBuffer.byteLength) {\r\n        const result = new BaseBlock({}, ValueBlock);\r\n        result.error = \"Input buffer has zero length\";\r\n        return {\r\n            offset: -1,\r\n            result\r\n        };\r\n    }\r\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\r\n}\n\nfunction checkLen(indefiniteLength, length) {\r\n    if (indefiniteLength) {\r\n        return 1;\r\n    }\r\n    return length;\r\n}\r\nclass LocalConstructedValueBlock extends ValueBlock {\r\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.isIndefiniteForm = isIndefiniteForm;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (this.valueBeforeDecodeView.length === 0) {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return inputOffset;\r\n        }\r\n        let currentOffset = inputOffset;\r\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\r\n            const returnObject = localFromBER(view, currentOffset, inputLength);\r\n            if (returnObject.offset === -1) {\r\n                this.error = returnObject.result.error;\r\n                this.warnings.concat(returnObject.result.warnings);\r\n                return -1;\r\n            }\r\n            currentOffset = returnObject.offset;\r\n            this.blockLength += returnObject.result.blockLength;\r\n            inputLength -= returnObject.result.blockLength;\r\n            this.value.push(returnObject.result);\r\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\r\n                break;\r\n            }\r\n        }\r\n        if (this.isIndefiniteForm) {\r\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\r\n                this.value.pop();\r\n            }\r\n            else {\r\n                this.warnings.push(\"No EndOfContent block encoded\");\r\n            }\r\n        }\r\n        return currentOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            this.value[i].toBER(sizeOnly, _writer);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            value: [],\r\n        };\r\n        for (const value of this.value) {\r\n            object.value.push(value.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\r\nclass Constructed extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalConstructedValueBlock);\r\n        this.idBlock.isConstructed = true;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        const values = [];\r\n        for (const value of this.valueBlock.value) {\r\n            values.push(value.toString(\"ascii\").split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\r\n        }\r\n        const blockName = this.idBlock.tagClass === 3\r\n            ? `[${this.idBlock.tagNumber}]`\r\n            : this.constructor.NAME;\r\n        return values.length\r\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\r\n            : `${blockName} :`;\r\n    }\r\n}\r\n_a$v = Constructed;\r\n(() => {\r\n    typeStore.Constructed = _a$v;\r\n})();\r\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        return inputOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return EMPTY_BUFFER;\r\n    }\r\n}\r\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\r\nclass EndOfContent extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalEndOfContentValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 0;\r\n    }\r\n}\r\n_a$u = EndOfContent;\r\n(() => {\r\n    typeStore.EndOfContent = _a$u;\r\n})();\r\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\r\nclass Null extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, ValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 5;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (this.lenBlock.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for Null type\");\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        this.blockLength += inputLength;\r\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return -1;\r\n        }\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuf = new ArrayBuffer(2);\r\n        if (!sizeOnly) {\r\n            const retView = new Uint8Array(retBuf);\r\n            retView[0] = 0x05;\r\n            retView[1] = 0x00;\r\n        }\r\n        if (writer) {\r\n            writer.write(retBuf);\r\n        }\r\n        return retBuf;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME}`;\r\n    }\r\n}\r\n_a$t = Null;\r\n(() => {\r\n    typeStore.Null = _a$t;\r\n})();\r\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        if (parameters.valueHex) {\r\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\r\n        }\r\n        else {\r\n            this.valueHexView = new Uint8Array(1);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    get value() {\r\n        for (const octet of this.valueHexView) {\r\n            if (octet > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    set value(value) {\r\n        this.valueHexView[0] = value ? 0xFF : 0x00;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (inputLength > 1)\r\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n        this.isHexOnly = true;\r\n        pvutils.utilDecodeTC.call(this);\r\n        this.blockLength = inputLength;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER() {\r\n        return this.valueHexView.slice();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\r\nclass Boolean extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalBooleanValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 1;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.getValue}`;\r\n    }\r\n}\r\n_a$s = Boolean;\r\n(() => {\r\n    typeStore.Boolean = _a$s;\r\n})();\r\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isConstructed = isConstructed;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = 0;\r\n        if (this.isConstructed) {\r\n            this.isHexOnly = false;\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const currentBlockName = this.value[i].constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== OCTET_STRING_NAME) {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isHexOnly = true;\r\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n            this.blockLength = inputLength;\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed)\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.byteLength)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\r\nclass OctetString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalOctetStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 4;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        if (inputLength === 0) {\r\n            if (this.idBlock.error.length === 0)\r\n                this.blockLength += this.idBlock.blockLength;\r\n            if (this.lenBlock.error.length === 0)\r\n                this.blockLength += this.lenBlock.blockLength;\r\n            return inputOffset;\r\n        }\r\n        if (!this.valueBlock.isConstructed) {\r\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\r\n                        this.valueBlock.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueHexView)}`;\r\n    }\r\n    getValue() {\r\n        if (!this.idBlock.isConstructed) {\r\n            return this.valueBlock.valueHexView.slice().buffer;\r\n        }\r\n        const array = [];\r\n        for (const content of this.valueBlock.value) {\r\n            if (content instanceof OctetString) {\r\n                array.push(content.valueBlock.valueHexView);\r\n            }\r\n        }\r\n        return pvtsutils.BufferSourceConverter.concat(array);\r\n    }\r\n}\r\n_a$r = OctetString;\r\n(() => {\r\n    typeStore.OctetString = _a$r;\r\n})();\r\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.unusedBits = unusedBits;\r\n        this.isConstructed = isConstructed;\r\n        this.blockLength = this.valueHexView.byteLength;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        let resultOffset = -1;\r\n        if (this.isConstructed) {\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (const value of this.value) {\r\n                const currentBlockName = value.constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== BIT_STRING_NAME) {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return -1;\r\n                }\r\n                const valueBlock = value.valueBlock;\r\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\r\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return -1;\r\n                }\r\n                this.unusedBits = valueBlock.unusedBits;\r\n            }\r\n            return resultOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.unusedBits = intBuffer[0];\r\n        if (this.unusedBits > 7) {\r\n            this.error = \"Unused bits for BitString must be in range 0-7\";\r\n            return -1;\r\n        }\r\n        if (!this.unusedBits) {\r\n            const buf = intBuffer.subarray(1);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\r\n                        this.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.valueHexView = intBuffer.subarray(1);\r\n        this.blockLength = intBuffer.length;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed) {\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        }\r\n        if (sizeOnly) {\r\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\r\n        }\r\n        if (!this.valueHexView.byteLength) {\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.length + 1);\r\n        retView[0] = this.unusedBits;\r\n        retView.set(this.valueHexView, 1);\r\n        return retView.buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            unusedBits: this.unusedBits,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\r\nclass BitString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalBitStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 3;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        else {\r\n            const bits = [];\r\n            const valueHex = this.valueBlock.valueHexView;\r\n            for (const byte of valueHex) {\r\n                bits.push(byte.toString(2).padStart(8, \"0\"));\r\n            }\r\n            const bitsStr = bits.join(\"\");\r\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\r\n        }\r\n    }\r\n}\r\n_a$q = BitString;\r\n(() => {\r\n    typeStore.BitString = _a$q;\r\n})();\r\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\r\nfunction viewAdd(first, second) {\r\n    const c = new Uint8Array([0]);\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    let firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value = 0;\r\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n    let counter = 0;\r\n    for (let i = max; i >= 0; i--, counter++) {\r\n        switch (true) {\r\n            case (counter < secondViewCopy.length):\r\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n                break;\r\n            default:\r\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n        }\r\n        c[0] = value / 10;\r\n        switch (true) {\r\n            case (counter >= firstViewCopy.length):\r\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n                break;\r\n            default:\r\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n        }\r\n    }\r\n    if (c[0] > 0)\r\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\r\n    return firstViewCopy;\r\n}\r\nfunction power2(n) {\r\n    if (n >= powers2.length) {\r\n        for (let p = powers2.length; p <= n; p++) {\r\n            const c = new Uint8Array([0]);\r\n            let digits = (powers2[p - 1]).slice(0);\r\n            for (let i = (digits.length - 1); i >= 0; i--) {\r\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n                c[0] = newValue[0] / 10;\r\n                digits[i] = newValue[0] % 10;\r\n            }\r\n            if (c[0] > 0)\r\n                digits = pvutils.utilConcatView(c, digits);\r\n            powers2.push(digits);\r\n        }\r\n    }\r\n    return powers2[n];\r\n}\r\nfunction viewSub(first, second) {\r\n    let b = 0;\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    const firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value;\r\n    let counter = 0;\r\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\r\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n        switch (true) {\r\n            case (value < 0):\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n                break;\r\n            default:\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n        }\r\n    }\r\n    if (b > 0) {\r\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\r\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\r\n            if (value < 0) {\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n            }\r\n            else {\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return firstViewCopy.slice();\r\n}\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        this._valueDec = 0;\r\n        if (parameters.valueHex) {\r\n            this.setValueHex();\r\n        }\r\n        if (value !== undefined) {\r\n            this.valueDec = value;\r\n        }\r\n    }\r\n    setValueHex() {\r\n        if (this.valueHexView.length >= 4) {\r\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\r\n            this.isHexOnly = true;\r\n            this._valueDec = 0;\r\n        }\r\n        else {\r\n            this.isHexOnly = false;\r\n            if (this.valueHexView.length > 0) {\r\n                this._valueDec = pvutils.utilDecodeTC.call(this);\r\n            }\r\n        }\r\n    }\r\n    set valueDec(v) {\r\n        this._valueDec = v;\r\n        this.isHexOnly = false;\r\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\r\n    }\r\n    get valueDec() {\r\n        return this._valueDec;\r\n    }\r\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\r\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (offset === -1)\r\n            return offset;\r\n        const view = this.valueHexView;\r\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\r\n            this.valueHexView = view.subarray(1);\r\n        }\r\n        else {\r\n            if (expectedLength !== 0) {\r\n                if (view.length < expectedLength) {\r\n                    if ((expectedLength - view.length) > 1)\r\n                        expectedLength = view.length + 1;\r\n                    this.valueHexView = view.subarray(expectedLength - view.length);\r\n                }\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    toDER(sizeOnly = false) {\r\n        const view = this.valueHexView;\r\n        switch (true) {\r\n            case ((view[0] & 0x80) !== 0):\r\n                {\r\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\r\n                    updatedView[0] = 0x00;\r\n                    updatedView.set(view, 1);\r\n                    this.valueHexView = updatedView;\r\n                }\r\n                break;\r\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n                {\r\n                    this.valueHexView = this.valueHexView.subarray(1);\r\n                }\r\n                break;\r\n        }\r\n        return this.toBER(sizeOnly);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (resultOffset === -1) {\r\n            return resultOffset;\r\n        }\r\n        this.setValueHex();\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.length)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n    toString() {\r\n        const firstBit = (this.valueHexView.length * 8) - 1;\r\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\r\n        let bitNumber = 0;\r\n        let currentByte;\r\n        const asn1View = this.valueHexView;\r\n        let result = \"\";\r\n        let flag = false;\r\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\r\n            currentByte = asn1View[byteNumber];\r\n            for (let i = 0; i < 8; i++) {\r\n                if ((currentByte & 1) === 1) {\r\n                    switch (bitNumber) {\r\n                        case firstBit:\r\n                            digits = viewSub(power2(bitNumber), digits);\r\n                            result = \"-\";\r\n                            break;\r\n                        default:\r\n                            digits = viewAdd(digits, power2(bitNumber));\r\n                    }\r\n                }\r\n                bitNumber++;\r\n                currentByte >>= 1;\r\n            }\r\n        }\r\n        for (let i = 0; i < digits.length; i++) {\r\n            if (digits[i])\r\n                flag = true;\r\n            if (flag)\r\n                result += digitsString.charAt(digits[i]);\r\n        }\r\n        if (flag === false)\r\n            result += digitsString.charAt(0);\r\n        return result;\r\n    }\r\n}\r\n_a$p = LocalIntegerValueBlock;\r\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\r\n(() => {\r\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\r\n        set: function (v) {\r\n            this.valueHexView = new Uint8Array(v);\r\n            this.setValueHex();\r\n        },\r\n        get: function () {\r\n            return this.valueHexView.slice().buffer;\r\n        },\r\n    });\r\n})();\n\nvar _a$o;\r\nclass Integer extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalIntegerValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 2;\r\n    }\r\n    toBigInt() {\r\n        assertBigInt();\r\n        return BigInt(this.valueBlock.toString());\r\n    }\r\n    static fromBigInt(value) {\r\n        assertBigInt();\r\n        const bigIntValue = BigInt(value);\r\n        const writer = new ViewWriter();\r\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\r\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\r\n        if (bigIntValue < 0) {\r\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\r\n            first[0] |= 0x80;\r\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\r\n            const secondInt = firstInt + bigIntValue;\r\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\r\n            second[0] |= 0x80;\r\n            writer.write(second);\r\n        }\r\n        else {\r\n            if (view[0] & 0x80) {\r\n                writer.write(new Uint8Array([0]));\r\n            }\r\n            writer.write(view);\r\n        }\r\n        const res = new Integer({\r\n            valueHex: writer.final(),\r\n        });\r\n        return res;\r\n    }\r\n    convertToDER() {\r\n        const integer = new Integer({ valueHex: this.valueBlock.valueHexView });\r\n        integer.valueBlock.toDER();\r\n        return integer;\r\n    }\r\n    convertFromDER() {\r\n        return new Integer({\r\n            valueHex: this.valueBlock.valueHexView[0] === 0\r\n                ? this.valueBlock.valueHexView.subarray(1)\r\n                : this.valueBlock.valueHexView,\r\n        });\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\r\n    }\r\n}\r\n_a$o = Integer;\r\n(() => {\r\n    typeStore.Integer = _a$o;\r\n})();\r\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\r\nclass Enumerated extends Integer {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 10;\r\n    }\r\n}\r\n_a$n = Enumerated;\r\n(() => {\r\n    typeStore.Enumerated = _a$n;\r\n})();\r\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n        this.isFirstSid = isFirstSid;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++) {\r\n            tempView[i] = this.valueHexView[i];\r\n        }\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    set valueBigInt(value) {\r\n        assertBigInt();\r\n        let bits = BigInt(value).toString(2);\r\n        while (bits.length % 7) {\r\n            bits = \"0\" + bits;\r\n        }\r\n        const bytes = new Uint8Array(bits.length / 7);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\r\n        }\r\n        this.fromBER(bytes.buffer, 0, bytes.length);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            if (this.isFirstSid) {\r\n                let sidValue = this.valueDec;\r\n                if (this.valueDec <= 39)\r\n                    result = \"0.\";\r\n                else {\r\n                    if (this.valueDec <= 79) {\r\n                        result = \"1.\";\r\n                        sidValue -= 40;\r\n                    }\r\n                    else {\r\n                        result = \"2.\";\r\n                        sidValue -= 80;\r\n                    }\r\n                }\r\n                result += sidValue.toString();\r\n            }\r\n            else\r\n                result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n            isFirstSid: this.isFirstSid,\r\n        };\r\n    }\r\n}\r\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            if (this.value.length === 0)\r\n                sidBlock.isFirstSid = true;\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        let flag = false;\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            if (flag) {\r\n                const sidBlock = this.value[0];\r\n                let plus = 0;\r\n                switch (sidBlock.valueDec) {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = [];\r\n                        return;\r\n                }\r\n                const parsedSID = parseInt(sid, 10);\r\n                if (isNaN(parsedSID))\r\n                    return;\r\n                sidBlock.valueDec = parsedSID + plus;\r\n                flag = false;\r\n            }\r\n            else {\r\n                const sidBlock = new LocalSidValueBlock();\r\n                if (sid > Number.MAX_SAFE_INTEGER) {\r\n                    assertBigInt();\r\n                    const sidValue = BigInt(sid);\r\n                    sidBlock.valueBigInt = sidValue;\r\n                }\r\n                else {\r\n                    sidBlock.valueDec = parseInt(sid, 10);\r\n                    if (isNaN(sidBlock.valueDec))\r\n                        return;\r\n                }\r\n                if (!this.value.length) {\r\n                    sidBlock.isFirstSid = true;\r\n                    flag = true;\r\n                }\r\n                this.value.push(sidBlock);\r\n            }\r\n        } while (pos2 !== -1);\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                if (this.value[i].isFirstSid)\r\n                    result = `2.{${sidStr} - 80}`;\r\n                else\r\n                    result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\r\nclass ObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 6;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$m = ObjectIdentifier;\r\n(() => {\r\n    typeStore.ObjectIdentifier = _a$m;\r\n})();\r\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ valueDec = 0, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (inputLength === 0)\r\n            return inputOffset;\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\r\n            return -1;\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++)\r\n            tempView[i] = this.valueHexView[i];\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n}\r\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            sidBlock.valueDec = parseInt(sid, 10);\r\n            if (isNaN(sidBlock.valueDec))\r\n                return true;\r\n            this.value.push(sidBlock);\r\n        } while (pos2 !== -1);\r\n        return true;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++)\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        return object;\r\n    }\r\n}\r\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\r\nclass RelativeObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 13;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$l = RelativeObjectIdentifier;\r\n(() => {\r\n    typeStore.RelativeObjectIdentifier = _a$l;\r\n})();\r\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\r\nclass Sequence extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 16;\r\n    }\r\n}\r\n_a$k = Sequence;\r\n(() => {\r\n    typeStore.Sequence = _a$k;\r\n})();\r\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\r\nclass Set extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 17;\r\n    }\r\n}\r\n_a$j = Set;\r\n(() => {\r\n    typeStore.Set = _a$j;\r\n})();\r\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = true;\r\n        this.value = EMPTY_STRING;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\r\n}\r\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters, LocalSimpleStringValueBlock);\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLen = inputString.length;\r\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\r\n        for (let i = 0; i < strLen; i++)\r\n            view[i] = inputString.charCodeAt(i);\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        try {\r\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\r\n        }\r\n        catch (ex) {\r\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\r\n        }\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\r\nclass Utf8String extends LocalUtf8StringValueBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 12;\r\n    }\r\n}\r\n_a$i = Utf8String;\r\n(() => {\r\n    typeStore.Utf8String = _a$i;\r\n})();\r\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.value = inputString;\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\r\n    }\r\n}\r\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\r\nclass BmpString extends LocalBmpStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 30;\r\n    }\r\n}\r\n_a$h = BmpString;\r\n(() => {\r\n    typeStore.BmpString = _a$h;\r\n})();\r\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\r\n        const valueView = new Uint8Array(copyBuffer);\r\n        for (let i = 0; i < valueView.length; i += 4) {\r\n            valueView[i] = valueView[i + 3];\r\n            valueView[i + 1] = valueView[i + 2];\r\n            valueView[i + 2] = 0x00;\r\n            valueView[i + 3] = 0x00;\r\n        }\r\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLength = inputString.length;\r\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\r\n        for (let i = 0; i < strLength; i++) {\r\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\r\n            const codeView = new Uint8Array(codeBuf);\r\n            if (codeView.length > 4)\r\n                continue;\r\n            const dif = 4 - codeView.length;\r\n            for (let j = (codeView.length - 1); j >= 0; j--)\r\n                valueHexView[i * 4 + j + dif] = codeView[j];\r\n        }\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\r\nclass UniversalString extends LocalUniversalStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 28;\r\n    }\r\n}\r\n_a$g = UniversalString;\r\n(() => {\r\n    typeStore.UniversalString = _a$g;\r\n})();\r\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\r\nclass NumericString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 18;\r\n    }\r\n}\r\n_a$f = NumericString;\r\n(() => {\r\n    typeStore.NumericString = _a$f;\r\n})();\r\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\r\nclass PrintableString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 19;\r\n    }\r\n}\r\n_a$e = PrintableString;\r\n(() => {\r\n    typeStore.PrintableString = _a$e;\r\n})();\r\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\r\nclass TeletexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 20;\r\n    }\r\n}\r\n_a$d = TeletexString;\r\n(() => {\r\n    typeStore.TeletexString = _a$d;\r\n})();\r\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\r\nclass VideotexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 21;\r\n    }\r\n}\r\n_a$c = VideotexString;\r\n(() => {\r\n    typeStore.VideotexString = _a$c;\r\n})();\r\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\r\nclass IA5String extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 22;\r\n    }\r\n}\r\n_a$b = IA5String;\r\n(() => {\r\n    typeStore.IA5String = _a$b;\r\n})();\r\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\r\nclass GraphicString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 25;\r\n    }\r\n}\r\n_a$a = GraphicString;\r\n(() => {\r\n    typeStore.GraphicString = _a$a;\r\n})();\r\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\r\nclass VisibleString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 26;\r\n    }\r\n}\r\n_a$9 = VisibleString;\r\n(() => {\r\n    typeStore.VisibleString = _a$9;\r\n})();\r\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\r\nclass GeneralString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 27;\r\n    }\r\n}\r\n_a$8 = GeneralString;\r\n(() => {\r\n    typeStore.GeneralString = _a$8;\r\n})();\r\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\r\nclass CharacterString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 29;\r\n    }\r\n}\r\n_a$7 = CharacterString;\r\n(() => {\r\n    typeStore.CharacterString = _a$7;\r\n})();\r\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\r\nclass UTCTime extends VisibleString {\r\n    constructor({ value, valueDate, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        if (value) {\r\n            this.fromString(value);\r\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\r\n            for (let i = 0; i < value.length; i++)\r\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\r\n        }\r\n        if (valueDate) {\r\n            this.fromDate(valueDate);\r\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\r\n        }\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 23;\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\r\n    }\r\n    toBuffer() {\r\n        const str = this.toString();\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new Uint8Array(buffer);\r\n        for (let i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n        return buffer;\r\n    }\r\n    fromDate(inputDate) {\r\n        this.year = inputDate.getUTCFullYear();\r\n        this.month = inputDate.getUTCMonth() + 1;\r\n        this.day = inputDate.getUTCDate();\r\n        this.hour = inputDate.getUTCHours();\r\n        this.minute = inputDate.getUTCMinutes();\r\n        this.second = inputDate.getUTCSeconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    }\r\n    fromString(inputString) {\r\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        const parserArray = parser.exec(inputString);\r\n        if (parserArray === null) {\r\n            this.error = \"Wrong input string for conversion\";\r\n            return;\r\n        }\r\n        const year = parseInt(parserArray[1], 10);\r\n        if (year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n        this.month = parseInt(parserArray[2], 10);\r\n        this.day = parseInt(parserArray[3], 10);\r\n        this.hour = parseInt(parserArray[4], 10);\r\n        this.minute = parseInt(parserArray[5], 10);\r\n        this.second = parseInt(parserArray[6], 10);\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = new Array(7);\r\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n            outputArray[1] = pvutils.padNumber(this.month, 2);\r\n            outputArray[2] = pvutils.padNumber(this.day, 2);\r\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\r\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\r\n            outputArray[5] = pvutils.padNumber(this.second, 2);\r\n            outputArray[6] = \"Z\";\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            year: this.year,\r\n            month: this.month,\r\n            day: this.day,\r\n            hour: this.hour,\r\n            minute: this.minute,\r\n            second: this.second,\r\n        };\r\n    }\r\n}\r\n_a$6 = UTCTime;\r\n(() => {\r\n    typeStore.UTCTime = _a$6;\r\n})();\r\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\r\nclass GeneralizedTime extends UTCTime {\r\n    constructor(parameters = {}) {\r\n        var _b;\r\n        super(parameters);\r\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 24;\r\n    }\r\n    fromDate(inputDate) {\r\n        super.fromDate(inputDate);\r\n        this.millisecond = inputDate.getUTCMilliseconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    }\r\n    fromString(inputString) {\r\n        let isUTC = false;\r\n        let timeString = \"\";\r\n        let dateTimeString = \"\";\r\n        let fractionPart = 0;\r\n        let parser;\r\n        let hourDifference = 0;\r\n        let minuteDifference = 0;\r\n        if (inputString[inputString.length - 1] === \"Z\") {\r\n            timeString = inputString.substring(0, inputString.length - 1);\r\n            isUTC = true;\r\n        }\r\n        else {\r\n            const number = new Number(inputString[inputString.length - 1]);\r\n            if (isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            timeString = inputString;\r\n        }\r\n        if (isUTC) {\r\n            if (timeString.indexOf(\"+\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            if (timeString.indexOf(\"-\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        else {\r\n            let multiplier = 1;\r\n            let differencePosition = timeString.indexOf(\"+\");\r\n            let differenceString = \"\";\r\n            if (differencePosition === -1) {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = -1;\r\n            }\r\n            if (differencePosition !== -1) {\r\n                differenceString = timeString.substring(differencePosition + 1);\r\n                timeString = timeString.substring(0, differencePosition);\r\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                let number = parseInt(differenceString.substring(0, 2), 10);\r\n                if (isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                hourDifference = multiplier * number;\r\n                if (differenceString.length === 4) {\r\n                    number = parseInt(differenceString.substring(2, 4), 10);\r\n                    if (isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for conversion\");\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        let fractionPointPosition = timeString.indexOf(\".\");\r\n        if (fractionPointPosition === -1)\r\n            fractionPointPosition = timeString.indexOf(\",\");\r\n        if (fractionPointPosition !== -1) {\r\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\r\n            if (isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            fractionPart = fractionPartCheck.valueOf();\r\n            dateTimeString = timeString.substring(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        switch (true) {\r\n            case (dateTimeString.length === 8):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1)\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                break;\r\n            case (dateTimeString.length === 10):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 12):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 14):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    const fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        const parserArray = parser.exec(dateTimeString);\r\n        if (parserArray === null)\r\n            throw new Error(\"Wrong input string for conversion\");\r\n        for (let j = 1; j < parserArray.length; j++) {\r\n            switch (j) {\r\n                case 1:\r\n                    this.year = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parserArray[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n            }\r\n        }\r\n        if (isUTC === false) {\r\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = [];\r\n            outputArray.push(pvutils.padNumber(this.year, 4));\r\n            outputArray.push(pvutils.padNumber(this.month, 2));\r\n            outputArray.push(pvutils.padNumber(this.day, 2));\r\n            outputArray.push(pvutils.padNumber(this.hour, 2));\r\n            outputArray.push(pvutils.padNumber(this.minute, 2));\r\n            outputArray.push(pvutils.padNumber(this.second, 2));\r\n            if (this.millisecond !== 0) {\r\n                outputArray.push(\".\");\r\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\r\n            }\r\n            outputArray.push(\"Z\");\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            millisecond: this.millisecond,\r\n        };\r\n    }\r\n}\r\n_a$5 = GeneralizedTime;\r\n(() => {\r\n    typeStore.GeneralizedTime = _a$5;\r\n})();\r\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\r\nclass DATE extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 31;\r\n    }\r\n}\r\n_a$4 = DATE;\r\n(() => {\r\n    typeStore.DATE = _a$4;\r\n})();\r\nDATE.NAME = \"DATE\";\n\nvar _a$3;\r\nclass TimeOfDay extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 32;\r\n    }\r\n}\r\n_a$3 = TimeOfDay;\r\n(() => {\r\n    typeStore.TimeOfDay = _a$3;\r\n})();\r\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\r\nclass DateTime extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 33;\r\n    }\r\n}\r\n_a$2 = DateTime;\r\n(() => {\r\n    typeStore.DateTime = _a$2;\r\n})();\r\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\r\nclass Duration extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 34;\r\n    }\r\n}\r\n_a$1 = Duration;\r\n(() => {\r\n    typeStore.Duration = _a$1;\r\n})();\r\nDuration.NAME = \"Duration\";\n\nvar _a;\r\nclass TIME extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 14;\r\n    }\r\n}\r\n_a = TIME;\r\n(() => {\r\n    typeStore.TIME = _a;\r\n})();\r\nTIME.NAME = \"TIME\";\n\nclass Any {\r\n    constructor({ name = EMPTY_STRING, optional = false, } = {}) {\r\n        this.name = name;\r\n        this.optional = optional;\r\n    }\r\n}\n\nclass Choice extends Any {\r\n    constructor({ value = [], ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n    }\r\n}\n\nclass Repeated extends Any {\r\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.local = local;\r\n    }\r\n}\n\nclass RawData {\r\n    constructor({ data = EMPTY_VIEW } = {}) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\r\n    }\r\n    get data() {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n    set data(value) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const endLength = inputOffset + inputLength;\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\r\n        return endLength;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\r\n    if (inputSchema instanceof Choice) {\r\n        for (let j = 0; j < inputSchema.value.length; j++) {\r\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\r\n            if (result.verified) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n        {\r\n            const _result = {\r\n                verified: false,\r\n                result: {\r\n                    error: \"Wrong values for Choice type\"\r\n                },\r\n            };\r\n            if (inputSchema.hasOwnProperty(NAME))\r\n                _result.name = inputSchema.name;\r\n            return _result;\r\n        }\r\n    }\r\n    if (inputSchema instanceof Any) {\r\n        if (inputSchema.hasOwnProperty(NAME))\r\n            root[inputSchema.name] = inputData;\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if ((root instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong root object\" }\r\n        };\r\n    }\r\n    if ((inputData instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 data\" }\r\n        };\r\n    }\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((ID_BLOCK in inputSchema) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((FROM_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((TO_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    const encodedId = inputSchema.idBlock.toBER(false);\r\n    if (encodedId.byteLength === 0) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n    if (decodedOffset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly) {\r\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        }\r\n        const schemaView = inputSchema.idBlock.valueHexView;\r\n        const asn1View = inputData.idBlock.valueHexView;\r\n        if (schemaView.length !== asn1View.length) {\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < schemaView.length; i++) {\r\n            if (schemaView[i] !== asn1View[1]) {\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (inputSchema.name) {\r\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n        if (inputSchema.name)\r\n            root[inputSchema.name] = inputData;\r\n    }\r\n    if (inputSchema instanceof typeStore.Constructed) {\r\n        let admission = 0;\r\n        let result = {\r\n            verified: false,\r\n            result: {\r\n                error: \"Unknown error\",\r\n            }\r\n        };\r\n        let maxLength = inputSchema.valueBlock.value.length;\r\n        if (maxLength > 0) {\r\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                maxLength = inputData.valueBlock.value.length;\r\n            }\r\n        }\r\n        if (maxLength === 0) {\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        if ((inputData.valueBlock.value.length === 0) &&\r\n            (inputSchema.valueBlock.value.length !== 0)) {\r\n            let _optional = true;\r\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n            if (_optional) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name)\r\n                    delete root[inputSchema.name];\r\n            }\r\n            root.error = \"Inconsistent object length\";\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < maxLength; i++) {\r\n            if ((i - admission) >= inputData.valueBlock.value.length) {\r\n                if (inputSchema.valueBlock.value[i].optional === false) {\r\n                    const _result = {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n                    if (inputSchema.name) {\r\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                        if (inputSchema.name) {\r\n                            delete root[inputSchema.name];\r\n                            _result.name = inputSchema.name;\r\n                        }\r\n                    }\r\n                    return _result;\r\n                }\r\n            }\r\n            else {\r\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[0].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\r\n                        let arrayRoot = {};\r\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\r\n                            arrayRoot = inputData;\r\n                        else\r\n                            arrayRoot = root;\r\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[i].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (result.verified === false) {\r\n            const _result = {\r\n                verified: false,\r\n                result: root\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.primitiveSchema &&\r\n        (VALUE_HEX_VIEW in inputData.valueBlock)) {\r\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\r\n        if (asn1.offset === -1) {\r\n            const _result = {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n    }\r\n    return {\r\n        verified: true,\r\n        result: root\r\n    };\r\n}\r\nfunction verifySchema(inputBuffer, inputSchema) {\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema type\" }\r\n        };\r\n    }\r\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    if (asn1.offset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: asn1.result\r\n        };\r\n    }\r\n    return compareSchema(asn1.result, asn1.result, inputSchema);\r\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","export class ByteStream {\n    constructor(parameters = {}) {\n        if (\"view\" in parameters) {\n            this.fromUint8Array(parameters.view);\n        }\n        else if (\"buffer\" in parameters) {\n            this.fromArrayBuffer(parameters.buffer);\n        }\n        else if (\"string\" in parameters) {\n            this.fromString(parameters.string);\n        }\n        else if (\"hexstring\" in parameters) {\n            this.fromHexString(parameters.hexstring);\n        }\n        else {\n            if (\"length\" in parameters && parameters.length > 0) {\n                this.length = parameters.length;\n                if (parameters.stub) {\n                    for (let i = 0; i < this._view.length; i++) {\n                        this._view[i] = parameters.stub;\n                    }\n                }\n            }\n            else {\n                this.length = 0;\n            }\n        }\n    }\n    set buffer(value) {\n        this._buffer = value;\n        this._view = new Uint8Array(this._buffer);\n    }\n    get buffer() {\n        return this._buffer;\n    }\n    set view(value) {\n        this._buffer = new ArrayBuffer(value.length);\n        this._view = new Uint8Array(this._buffer);\n        this._view.set(value);\n    }\n    get view() {\n        return this._view;\n    }\n    get length() {\n        return this.view.byteLength;\n    }\n    set length(value) {\n        this._buffer = new ArrayBuffer(value);\n        this._view = new Uint8Array(this._buffer);\n    }\n    clear() {\n        this._buffer = new ArrayBuffer(0);\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromArrayBuffer(array) {\n        this._buffer = array;\n        this._view = new Uint8Array(this._buffer);\n    }\n    fromUint8Array(array) {\n        this.fromArrayBuffer(new Uint8Array(array).buffer);\n    }\n    fromString(string) {\n        const stringLength = string.length;\n        this.length = stringLength;\n        for (let i = 0; i < stringLength; i++)\n            this.view[i] = string.charCodeAt(i);\n    }\n    toString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++)\n            result += String.fromCharCode(this.view[i]);\n        return result;\n    }\n    fromHexString(hexString) {\n        const stringLength = hexString.length;\n        this.buffer = new ArrayBuffer(stringLength >> 1);\n        this.view = new Uint8Array(this.buffer);\n        const hexMap = new Map();\n        hexMap.set(\"0\", 0x00);\n        hexMap.set(\"1\", 0x01);\n        hexMap.set(\"2\", 0x02);\n        hexMap.set(\"3\", 0x03);\n        hexMap.set(\"4\", 0x04);\n        hexMap.set(\"5\", 0x05);\n        hexMap.set(\"6\", 0x06);\n        hexMap.set(\"7\", 0x07);\n        hexMap.set(\"8\", 0x08);\n        hexMap.set(\"9\", 0x09);\n        hexMap.set(\"A\", 0x0A);\n        hexMap.set(\"a\", 0x0A);\n        hexMap.set(\"B\", 0x0B);\n        hexMap.set(\"b\", 0x0B);\n        hexMap.set(\"C\", 0x0C);\n        hexMap.set(\"c\", 0x0C);\n        hexMap.set(\"D\", 0x0D);\n        hexMap.set(\"d\", 0x0D);\n        hexMap.set(\"E\", 0x0E);\n        hexMap.set(\"e\", 0x0E);\n        hexMap.set(\"F\", 0x0F);\n        hexMap.set(\"f\", 0x0F);\n        let j = 0;\n        let temp = 0x00;\n        for (let i = 0; i < stringLength; i++) {\n            if (!(i % 2)) {\n                temp = hexMap.get(hexString.charAt(i)) << 4;\n            }\n            else {\n                temp |= hexMap.get(hexString.charAt(i));\n                this.view[j] = temp;\n                j++;\n            }\n        }\n    }\n    toHexString(start = 0, length = (this.view.length - start)) {\n        let result = \"\";\n        if ((start >= this.view.length) || (start < 0)) {\n            start = 0;\n        }\n        if ((length >= this.view.length) || (length < 0)) {\n            length = this.view.length - start;\n        }\n        for (let i = start; i < (start + length); i++) {\n            const str = this.view[i].toString(16).toUpperCase();\n            result = result + ((str.length == 1) ? \"0\" : \"\") + str;\n        }\n        return result;\n    }\n    copy(start = 0, length = (this.length - start)) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, start + length)\n        });\n        return stream;\n    }\n    slice(start = 0, end = this.length) {\n        if (!start && !this.length) {\n            return new ByteStream();\n        }\n        if ((start < 0) || (start > (this.length - 1))) {\n            throw new Error(`Wrong start position: ${start}`);\n        }\n        const stream = new ByteStream({\n            buffer: this._buffer.slice(start, end),\n        });\n        return stream;\n    }\n    realloc(size) {\n        const buffer = new ArrayBuffer(size);\n        const view = new Uint8Array(buffer);\n        if (size > this._view.length)\n            view.set(this._view);\n        else {\n            view.set(new Uint8Array(this._buffer, 0, size));\n        }\n        this._buffer = buffer;\n        this._view = new Uint8Array(this._buffer);\n    }\n    append(stream) {\n        const initialSize = this.length;\n        const streamViewLength = stream.length;\n        const subarrayView = stream._view.subarray();\n        this.realloc(initialSize + streamViewLength);\n        this._view.set(subarrayView, initialSize);\n    }\n    insert(stream, start = 0, length = (this.length - start)) {\n        if (start > (this.length - 1))\n            return false;\n        if (length > (this.length - start)) {\n            length = this.length - start;\n        }\n        if (length > stream.length) {\n            length = stream.length;\n        }\n        if (length == stream.length)\n            this._view.set(stream._view, start);\n        else {\n            this._view.set(stream._view.subarray(0, length), start);\n        }\n        return true;\n    }\n    isEqual(stream) {\n        if (this.length != stream.length)\n            return false;\n        for (let i = 0; i < stream.length; i++) {\n            if (this.view[i] != stream.view[i])\n                return false;\n        }\n        return true;\n    }\n    isEqualView(view) {\n        if (view.length != this.view.length)\n            return false;\n        for (let i = 0; i < view.length; i++) {\n            if (this.view[i] != view[i])\n                return false;\n        }\n        return true;\n    }\n    findPattern(pattern, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = [];\n        for (let i = 0; i < patternLength; i++)\n            patternArray.push(pattern.view[i]);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = (backward) ? (start - patternLength - i) : (start + i);\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                return (backward) ? (start - patternLength - i) : (start + patternLength + i);\n            }\n        }\n        return (-1);\n    }\n    findFirstIn(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            id: (-1),\n            position: (backward) ? 0 : (start + length),\n            length: 0\n        };\n        for (let i = 0; i < patterns.length; i++) {\n            const position = this.findPattern(patterns[i], start, length, backward);\n            if (position != (-1)) {\n                let valid = false;\n                const patternLength = patterns[i].length;\n                if (backward) {\n                    if ((position - patternLength) >= (result.position - result.length))\n                        valid = true;\n                }\n                else {\n                    if ((position - patternLength) <= (result.position - result.length))\n                        valid = true;\n                }\n                if (valid) {\n                    result.position = position;\n                    result.id = i;\n                    result.length = patternLength;\n                }\n            }\n        }\n        return result;\n    }\n    findAllIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            id: (-1),\n            position: start\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstIn(patterns, patternFound.position, length);\n            if (patternFound.id == (-1)) {\n                break;\n            }\n            length -= (patternFound.position - position);\n            result.push({\n                id: patternFound.id,\n                position: patternFound.position\n            });\n        } while (true);\n        return result;\n    }\n    findAllPatternIn(pattern, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        const patternLength = pattern.length;\n        if (patternLength > length) {\n            return (-1);\n        }\n        const patternArray = Array.from(pattern.view);\n        for (let i = 0; i <= (length - patternLength); i++) {\n            let equal = true;\n            const equalStart = start + i;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patternArray[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                result.push(start + patternLength + i);\n                i += (patternLength - 1);\n            }\n        }\n        return result;\n    }\n    findFirstNotIn(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const result = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: 0\n            },\n            value: new ByteStream()\n        };\n        let currentLength = length;\n        while (currentLength > 0) {\n            result.right = this.findFirstIn(patterns, (backward) ? (start - length + currentLength) : (start + length - currentLength), currentLength, backward);\n            if (result.right.id == (-1)) {\n                length = currentLength;\n                if (backward) {\n                    start -= length;\n                }\n                else {\n                    start = result.left.position;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            if (result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].length) : (result.left.position + patterns[result.right.id].length))) {\n                if (backward) {\n                    start = result.right.position + patterns[result.right.id].length;\n                    length = result.left.position - result.right.position - patterns[result.right.id].length;\n                }\n                else {\n                    start = result.left.position;\n                    length = result.right.position - result.left.position - patterns[result.right.id].length;\n                }\n                result.value = new ByteStream({\n                    buffer: this._buffer.slice(start, start + length),\n                });\n                break;\n            }\n            result.left = result.right;\n            currentLength -= patterns[result.right.id].length;\n        }\n        if (backward) {\n            const temp = result.right;\n            result.right = result.left;\n            result.left = temp;\n        }\n        return result;\n    }\n    findAllNotIn(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            left: {\n                id: (-1),\n                position: start\n            },\n            right: {\n                id: (-1),\n                position: start\n            },\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.right.position;\n            patternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\n            length -= (patternFound.right.position - position);\n            result.push({\n                left: {\n                    id: patternFound.left.id,\n                    position: patternFound.left.position\n                },\n                right: {\n                    id: patternFound.right.id,\n                    position: patternFound.right.position\n                },\n                value: patternFound.value\n            });\n        } while (patternFound.right.id != (-1));\n        return result;\n    }\n    findFirstSequence(patterns, start_, length_, backward_) {\n        let { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        const firstIn = this.skipNotPatterns(patterns, start, length, backward);\n        if (firstIn == (-1)) {\n            return {\n                position: (-1),\n                value: new ByteStream()\n            };\n        }\n        const firstNotIn = this.skipPatterns(patterns, firstIn, length - ((backward) ? (start - firstIn) : (firstIn - start)), backward);\n        if (backward) {\n            start = firstNotIn;\n            length = (firstIn - firstNotIn);\n        }\n        else {\n            start = firstIn;\n            length = (firstNotIn - firstIn);\n        }\n        const value = new ByteStream({\n            buffer: this._buffer.slice(start, start + length),\n        });\n        return {\n            position: firstNotIn,\n            value\n        };\n    }\n    findAllSequences(patterns, start_, length_) {\n        let { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let patternFound = {\n            position: start,\n            value: new ByteStream()\n        };\n        do {\n            const position = patternFound.position;\n            patternFound = this.findFirstSequence(patterns, patternFound.position, length);\n            if (patternFound.position != (-1)) {\n                length -= (patternFound.position - position);\n                result.push({\n                    position: patternFound.position,\n                    value: patternFound.value,\n                });\n            }\n        } while (patternFound.position != (-1));\n        return result;\n    }\n    findPairedPatterns(leftPattern, rightPattern, start_, length_) {\n        const result = [];\n        if (leftPattern.isEqual(rightPattern))\n            return result;\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllPatternIn(leftPattern, start, length);\n        if (!Array.isArray(leftPatterns) || leftPatterns.length == 0) {\n            return result;\n        }\n        const rightPatterns = this.findAllPatternIn(rightPattern, start, length);\n        if (!Array.isArray(rightPatterns) || rightPatterns.length == 0) {\n            return result;\n        }\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0] == rightPatterns[0]) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft] > rightPatterns[0]) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft] < rightPatterns[0]) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left - b.left));\n        return result;\n    }\n    findPairedArrays(inputLeftPatterns, inputRightPatterns, start_, length_) {\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        const result = [];\n        let currentPositionLeft = 0;\n        const leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\n        if (leftPatterns.length == 0)\n            return result;\n        const rightPatterns = this.findAllIn(inputRightPatterns, start, length);\n        if (rightPatterns.length == 0)\n            return result;\n        while (currentPositionLeft < leftPatterns.length) {\n            if (rightPatterns.length == 0) {\n                break;\n            }\n            if (leftPatterns[0].position == rightPatterns[0].position) {\n                result.push({\n                    left: leftPatterns[0],\n                    right: rightPatterns[0]\n                });\n                leftPatterns.splice(0, 1);\n                rightPatterns.splice(0, 1);\n                continue;\n            }\n            if (leftPatterns[currentPositionLeft].position > rightPatterns[0].position) {\n                break;\n            }\n            while (leftPatterns[currentPositionLeft].position < rightPatterns[0].position) {\n                currentPositionLeft++;\n                if (currentPositionLeft >= leftPatterns.length) {\n                    break;\n                }\n            }\n            result.push({\n                left: leftPatterns[currentPositionLeft - 1],\n                right: rightPatterns[0]\n            });\n            leftPatterns.splice(currentPositionLeft - 1, 1);\n            rightPatterns.splice(0, 1);\n            currentPositionLeft = 0;\n        }\n        result.sort((a, b) => (a.left.position - b.left.position));\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern, start_, length_, findAllResult = null) {\n        let result = [];\n        let i;\n        const output = {\n            status: (-1),\n            searchPatternPositions: [],\n            replacePatternPositions: []\n        };\n        const { start, length } = this.prepareFindParameters(start_, length_);\n        if (findAllResult == null) {\n            result = this.findAllIn([searchPattern], start, length);\n            if (result.length == 0) {\n                return output;\n            }\n        }\n        else {\n            result = findAllResult;\n        }\n        output.searchPatternPositions.push(...Array.from(result, element => element.position));\n        const patternDifference = searchPattern.length - replacePattern.length;\n        const changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\n        const changedView = new Uint8Array(changedBuffer);\n        changedView.set(new Uint8Array(this.buffer, 0, start));\n        for (i = 0; i < result.length; i++) {\n            const currentPosition = (i == 0) ? start : result[i - 1].position;\n            changedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.length - currentPosition), currentPosition - i * patternDifference);\n            changedView.set(replacePattern.view, result[i].position - searchPattern.length - i * patternDifference);\n            output.replacePatternPositions.push(result[i].position - searchPattern.length - i * patternDifference);\n        }\n        i--;\n        changedView.set(new Uint8Array(this.buffer, result[i].position, this.length - result[i].position), result[i].position - searchPattern.length + replacePattern.length - i * patternDifference);\n        this.buffer = changedBuffer;\n        this.view = new Uint8Array(this.buffer);\n        output.status = 1;\n        return output;\n    }\n    skipPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = start;\n        for (let k = 0; k < patterns.length; k++) {\n            const patternLength = patterns[k].length;\n            const equalStart = (backward) ? (result - patternLength) : (result);\n            let equal = true;\n            for (let j = 0; j < patternLength; j++) {\n                if (this.view[j + equalStart] != patterns[k].view[j]) {\n                    equal = false;\n                    break;\n                }\n            }\n            if (equal) {\n                k = (-1);\n                if (backward) {\n                    result -= patternLength;\n                    if (result <= 0)\n                        return result;\n                }\n                else {\n                    result += patternLength;\n                    if (result >= (start + length))\n                        return result;\n                }\n            }\n        }\n        return result;\n    }\n    skipNotPatterns(patterns, start_, length_, backward_) {\n        const { start, length, backward } = this.prepareFindParameters(start_, length_, backward_);\n        let result = (-1);\n        for (let i = 0; i < length; i++) {\n            for (let k = 0; k < patterns.length; k++) {\n                const patternLength = patterns[k].length;\n                const equalStart = (backward) ? (start - i - patternLength) : (start + i);\n                let equal = true;\n                for (let j = 0; j < patternLength; j++) {\n                    if (this.view[j + equalStart] != patterns[k].view[j]) {\n                        equal = false;\n                        break;\n                    }\n                }\n                if (equal) {\n                    result = (backward) ? (start - i) : (start + i);\n                    break;\n                }\n            }\n            if (result != (-1)) {\n                break;\n            }\n        }\n        return result;\n    }\n    prepareFindParameters(start = null, length = null, backward = false) {\n        if (start === null) {\n            start = (backward) ? this.length : 0;\n        }\n        if (start > this.length) {\n            start = this.length;\n        }\n        if (backward) {\n            if (length === null) {\n                length = start;\n            }\n            if (length > start) {\n                length = start;\n            }\n        }\n        else {\n            if (length === null) {\n                length = this.length - start;\n            }\n            if (length > (this.length - start)) {\n                length = this.length - start;\n            }\n        }\n        return { start, length, backward };\n    }\n}\n","import { ByteStream } from \"./byte_stream\";\nconst pow2_24 = 16777216;\nexport class SeqStream {\n    constructor(parameters = {}) {\n        this._stream = new ByteStream();\n        this._length = 0;\n        this._start = 0;\n        this.backward = false;\n        this.appendBlock = 0;\n        this.prevLength = 0;\n        this.prevStart = 0;\n        if (\"view\" in parameters) {\n            this.stream = new ByteStream({ view: parameters.view });\n        }\n        else if (\"buffer\" in parameters) {\n            this.stream = new ByteStream({ buffer: parameters.buffer });\n        }\n        else if (\"string\" in parameters) {\n            this.stream = new ByteStream({ string: parameters.string });\n        }\n        else if (\"hexstring\" in parameters) {\n            this.stream = new ByteStream({ hexstring: parameters.hexstring });\n        }\n        else if (\"stream\" in parameters) {\n            this.stream = parameters.stream.slice();\n        }\n        else {\n            this.stream = new ByteStream();\n        }\n        if (\"backward\" in parameters && parameters.backward) {\n            this.backward = parameters.backward;\n            this._start = this.stream.length;\n        }\n        if (\"length\" in parameters && parameters.length > 0) {\n            this._length = parameters.length;\n        }\n        if (\"start\" in parameters && parameters.start && parameters.start > 0) {\n            this._start = parameters.start;\n        }\n        if (\"appendBlock\" in parameters && parameters.appendBlock && parameters.appendBlock > 0) {\n            this.appendBlock = parameters.appendBlock;\n        }\n    }\n    set stream(value) {\n        this._stream = value;\n        this.prevLength = this._length;\n        this._length = value.length;\n        this.prevStart = this._start;\n        this._start = 0;\n    }\n    get stream() {\n        return this._stream;\n    }\n    set length(value) {\n        this.prevLength = this._length;\n        this._length = value;\n    }\n    get length() {\n        if (this.appendBlock) {\n            return this.start;\n        }\n        return this._length;\n    }\n    set start(value) {\n        if (value > this.stream.length)\n            return;\n        this.prevStart = this._start;\n        this.prevLength = this._length;\n        this._length -= (this.backward) ? (this._start - value) : (value - this._start);\n        this._start = value;\n    }\n    get start() {\n        return this._start;\n    }\n    get buffer() {\n        return this._stream.buffer.slice(0, this._length);\n    }\n    resetPosition() {\n        this._start = this.prevStart;\n        this._length = this.prevLength;\n    }\n    findPattern(pattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\n        if (result == (-1))\n            return result;\n        if (this.backward) {\n            if (result < (this.start - pattern.length - gap)) {\n                return (-1);\n            }\n        }\n        else {\n            if (result > (this.start + pattern.length + gap)) {\n                return (-1);\n            }\n        }\n        this.start = result;\n        return result;\n    }\n    findFirstIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\n        if (result.id == (-1))\n            return result;\n        if (this.backward) {\n            if (result.position < (this.start - patterns[result.id].length - gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        else {\n            if (result.position > (this.start + patterns[result.id].length + gap)) {\n                return {\n                    id: (-1),\n                    position: (this.backward) ? 0 : (this.start + this.length)\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllIn(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllIn(patterns, start, this.length);\n    }\n    findFirstNotIn(patterns, gap = null) {\n        if ((gap == null) || (gap > this._length)) {\n            gap = this._length;\n        }\n        const result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\n        if ((result.left.id == (-1)) && (result.right.id == (-1))) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.right.id != (-1)) {\n                if (result.right.position < (this._start - patterns[result.right.id].length - gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        else {\n            if (result.left.id != (-1)) {\n                if (result.left.position > (this._start + patterns[result.left.id].length + gap)) {\n                    return {\n                        left: {\n                            id: (-1),\n                            position: this._start\n                        },\n                        right: {\n                            id: (-1),\n                            position: 0\n                        },\n                        value: new ByteStream()\n                    };\n                }\n            }\n        }\n        if (this.backward) {\n            if (result.left.id == (-1)) {\n                this.start = 0;\n            }\n            else {\n                this.start = result.left.position;\n            }\n        }\n        else {\n            if (result.right.id == (-1)) {\n                this.start = (this._start + this._length);\n            }\n            else {\n                this.start = result.right.position;\n            }\n        }\n        return result;\n    }\n    findAllNotIn(patterns) {\n        const start = (this.backward) ? (this._start - this._length) : this._start;\n        return this._stream.findAllNotIn(patterns, start, this._length);\n    }\n    findFirstSequence(patterns, length = null, gap = null) {\n        if ((length == null) || (length > this._length)) {\n            length = this._length;\n        }\n        if ((gap == null) || (gap > length)) {\n            gap = length;\n        }\n        const result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\n        if (result.value.length == 0) {\n            return result;\n        }\n        if (this.backward) {\n            if (result.position < (this._start - result.value.length - gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        else {\n            if (result.position > (this._start + result.value.length + gap)) {\n                return {\n                    position: (-1),\n                    value: new ByteStream()\n                };\n            }\n        }\n        this.start = result.position;\n        return result;\n    }\n    findAllSequences(patterns) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.findAllSequences(patterns, start, this.length);\n    }\n    findPairedPatterns(leftPattern, rightPattern, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right < (this.start - rightPattern.length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left > (this.start + leftPattern.length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    findPairedArrays(leftPatterns, rightPatterns, gap = null) {\n        if ((gap == null) || (gap > this.length)) {\n            gap = this.length;\n        }\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        const result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\n        if (result.length) {\n            if (this.backward) {\n                if (result[0].right.position < (this.start - rightPatterns[result[0].right.id].length - gap)) {\n                    return [];\n                }\n            }\n            else {\n                if (result[0].left.position > (this.start + leftPatterns[result[0].left.id].length + gap)) {\n                    return [];\n                }\n            }\n        }\n        return result;\n    }\n    replacePattern(searchPattern, replacePattern) {\n        const start = (this.backward) ? (this.start - this.length) : this.start;\n        return this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\n    }\n    skipPatterns(patterns) {\n        const result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\n        this.start = result;\n        return result;\n    }\n    skipNotPatterns(patterns) {\n        const result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\n        if (result == (-1))\n            return (-1);\n        this.start = result;\n        return result;\n    }\n    append(stream) {\n        this.beforeAppend(stream.length);\n        this._stream.view.set(stream.view, this._start);\n        this._length += (stream.length * 2);\n        this.start = (this._start + stream.length);\n        this.prevLength -= (stream.length * 2);\n    }\n    appendView(view) {\n        this.beforeAppend(view.length);\n        this._stream.view.set(view, this._start);\n        this._length += (view.length * 2);\n        this.start = (this._start + view.length);\n        this.prevLength -= (view.length * 2);\n    }\n    appendChar(char) {\n        this.beforeAppend(1);\n        this._stream.view[this._start] = char;\n        this._length += 2;\n        this.start = (this._start + 1);\n        this.prevLength -= 2;\n    }\n    appendUint16(number) {\n        this.beforeAppend(2);\n        const value = new Uint16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this.stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = this._start + 2;\n        this.prevLength -= 4;\n    }\n    appendUint24(number) {\n        this.beforeAppend(3);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[2];\n        this._stream.view[this._start + 1] = view[1];\n        this._stream.view[this._start + 2] = view[0];\n        this._length += 6;\n        this.start = (this._start + 3);\n        this.prevLength -= 6;\n    }\n    appendUint32(number) {\n        this.beforeAppend(4);\n        const value = new Uint32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    appendInt16(number) {\n        this.beforeAppend(2);\n        const value = new Int16Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[1];\n        this._stream.view[this._start + 1] = view[0];\n        this._length += 4;\n        this.start = (this._start + 2);\n        this.prevLength -= 4;\n    }\n    appendInt32(number) {\n        this.beforeAppend(4);\n        const value = new Int32Array([number]);\n        const view = new Uint8Array(value.buffer);\n        this._stream.view[this._start] = view[3];\n        this._stream.view[this._start + 1] = view[2];\n        this._stream.view[this._start + 2] = view[1];\n        this._stream.view[this._start + 3] = view[0];\n        this._length += 8;\n        this.start = (this._start + 4);\n        this.prevLength -= 8;\n    }\n    getBlock(size, changeLength = true) {\n        if (this._length <= 0) {\n            return new Uint8Array(0);\n        }\n        if (this._length < size) {\n            size = this._length;\n        }\n        let result;\n        if (this.backward) {\n            const view = this._stream.view.subarray(this._length - size, this._length);\n            result = new Uint8Array(size);\n            for (let i = 0; i < size; i++) {\n                result[size - 1 - i] = view[i];\n            }\n        }\n        else {\n            result = this._stream.view.subarray(this._start, this._start + size);\n        }\n        if (changeLength) {\n            this.start += ((this.backward) ? ((-1) * size) : size);\n        }\n        return result;\n    }\n    getUint16(changeLength = true) {\n        const block = this.getBlock(2, changeLength);\n        if (block.length < 2)\n            return 0;\n        return (block[0] << 8) | block[1];\n    }\n    getInt16(changeLength = true) {\n        const num = this.getUint16(changeLength);\n        const negative = 0x8000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    getUint24(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 3)\n            return 0;\n        return (block[0] << 16) |\n            (block[1] << 8) |\n            block[2];\n    }\n    getUint32(changeLength = true) {\n        const block = this.getBlock(4, changeLength);\n        if (block.length < 4)\n            return 0;\n        return (block[0] * pow2_24) +\n            (block[1] << 16) +\n            (block[2] << 8) +\n            block[3];\n    }\n    getInt32(changeLength = true) {\n        const num = this.getUint32(changeLength);\n        const negative = 0x80000000;\n        if (num & negative) {\n            return -(negative - (num ^ negative));\n        }\n        return num;\n    }\n    beforeAppend(size) {\n        if ((this._start + size) > this._stream.length) {\n            if (size > this.appendBlock) {\n                this.appendBlock = size + SeqStream.APPEND_BLOCK;\n            }\n            this._stream.realloc(this._stream.length + this.appendBlock);\n        }\n    }\n}\nSeqStream.APPEND_BLOCK = 1000;\n","/*!\n * Copyright (c) 2014, GlobalSign\n * Copyright (c) 2015-2019, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the {organization} nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as asn1js from 'asn1js';\nimport * as pvtsutils from 'pvtsutils';\nimport { BufferSourceConverter } from 'pvtsutils';\nimport * as pvutils from 'pvutils';\nimport * as bs from 'bytestreamjs';\n\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_STRING = \"\";\n\nclass ArgumentError extends TypeError {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.name = ArgumentError.NAME;\r\n    }\r\n    static isType(value, type) {\r\n        if (typeof type === \"string\") {\r\n            if (type === \"Array\" && Array.isArray(value)) {\r\n                return true;\r\n            }\r\n            else if (type === \"ArrayBuffer\" && value instanceof ArrayBuffer) {\r\n                return true;\r\n            }\r\n            else if (type === \"ArrayBufferView\" && ArrayBuffer.isView(value)) {\r\n                return true;\r\n            }\r\n            else if (typeof value === type) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (value instanceof type) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    static assert(value, name, ...types) {\r\n        for (const type of types) {\r\n            if (this.isType(value, type)) {\r\n                return;\r\n            }\r\n        }\r\n        const typeNames = types.map(o => o instanceof Function && \"name\" in o ? o.name : `${o}`);\r\n        throw new ArgumentError(`Parameter '${name}' is not of type ${typeNames.length > 1 ? `(${typeNames.join(\" or \")})` : typeNames[0]}`);\r\n    }\r\n}\r\nArgumentError.NAME = \"ArgumentError\";\n\nclass ParameterError extends TypeError {\r\n    constructor(field, target = null, message) {\r\n        super();\r\n        this.name = ParameterError.NAME;\r\n        this.field = field;\r\n        if (target) {\r\n            this.target = target;\r\n        }\r\n        if (message) {\r\n            this.message = message;\r\n        }\r\n        else {\r\n            this.message = `Absent mandatory parameter '${field}' ${target ? ` in '${target}'` : EMPTY_STRING}`;\r\n        }\r\n    }\r\n    static assert(...args) {\r\n        let target = null;\r\n        let params;\r\n        let fields;\r\n        if (typeof args[0] === \"string\") {\r\n            target = args[0];\r\n            params = args[1];\r\n            fields = args.slice(2);\r\n        }\r\n        else {\r\n            params = args[0];\r\n            fields = args.slice(1);\r\n        }\r\n        ArgumentError.assert(params, \"parameters\", \"object\");\r\n        for (const field of fields) {\r\n            const value = params[field];\r\n            if (value === undefined || value === null) {\r\n                throw new ParameterError(field, target);\r\n            }\r\n        }\r\n    }\r\n    static assertEmpty(value, name, target) {\r\n        if (value === undefined || value === null) {\r\n            throw new ParameterError(name, target);\r\n        }\r\n    }\r\n}\r\nParameterError.NAME = \"ParameterError\";\n\nclass AsnError extends Error {\r\n    static assertSchema(asn1, target) {\r\n        if (!asn1.verified) {\r\n            throw new Error(`Object's schema was not verified against input data for ${target}`);\r\n        }\r\n    }\r\n    static assert(asn, target) {\r\n        if (asn.offset === -1) {\r\n            throw new AsnError(`Error during parsing of ASN.1 data. Data is not correct for '${target}'.`);\r\n        }\r\n    }\r\n    constructor(message) {\r\n        super(message);\r\n        this.name = \"AsnError\";\r\n    }\r\n}\n\nclass PkiObject {\r\n    static blockName() {\r\n        return this.CLASS_NAME;\r\n    }\r\n    static fromBER(raw) {\r\n        const asn1 = asn1js.fromBER(raw);\r\n        AsnError.assert(asn1, this.name);\r\n        try {\r\n            return new this({ schema: asn1.result });\r\n        }\r\n        catch (e) {\r\n            throw new AsnError(`Cannot create '${this.CLASS_NAME}' from ASN.1 object`);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        throw new Error(`Invalid member name for ${this.CLASS_NAME} class: ${memberName}`);\r\n    }\r\n    static schema(parameters = {}) {\r\n        throw new Error(`Method '${this.CLASS_NAME}.schema' should be overridden`);\r\n    }\r\n    get className() {\r\n        return this.constructor.CLASS_NAME;\r\n    }\r\n    toString(encoding = \"hex\") {\r\n        let schema;\r\n        try {\r\n            schema = this.toSchema();\r\n        }\r\n        catch {\r\n            schema = this.toSchema(true);\r\n        }\r\n        return pvtsutils.Convert.ToString(schema.toBER(), encoding);\r\n    }\r\n}\r\nPkiObject.CLASS_NAME = \"PkiObject\";\n\nfunction stringPrep(inputString) {\r\n    let isSpace = false;\r\n    let cutResult = EMPTY_STRING;\r\n    const result = inputString.trim();\r\n    for (let i = 0; i < result.length; i++) {\r\n        if (result.charCodeAt(i) === 32) {\r\n            if (isSpace === false)\r\n                isSpace = true;\r\n        }\r\n        else {\r\n            if (isSpace) {\r\n                cutResult += \" \";\r\n                isSpace = false;\r\n            }\r\n            cutResult += result[i];\r\n        }\r\n    }\r\n    return cutResult.toLowerCase();\r\n}\n\nconst TYPE$5 = \"type\";\r\nconst VALUE$6 = \"value\";\r\nclass AttributeTypeAndValue extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.type = pvutils.getParametersValue(parameters, TYPE$5, AttributeTypeAndValue.defaultValues(TYPE$5));\r\n        this.value = pvutils.getParametersValue(parameters, VALUE$6, AttributeTypeAndValue.defaultValues(VALUE$6));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE$5:\r\n                return EMPTY_STRING;\r\n            case VALUE$6:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\r\n                new asn1js.Any({ name: (names.value || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            TYPE$5,\r\n            \"typeValue\"\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeTypeAndValue.schema({\r\n            names: {\r\n                type: TYPE$5,\r\n                value: \"typeValue\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.type = asn1.result.type.valueBlock.toString();\r\n        this.value = asn1.result.typeValue;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.type }),\r\n                this.value\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const _object = {\r\n            type: this.type\r\n        };\r\n        if (Object.keys(this.value).length !== 0) {\r\n            _object.value = (this.value).toJSON();\r\n        }\r\n        else {\r\n            _object.value = this.value;\r\n        }\r\n        return _object;\r\n    }\r\n    isEqual(compareTo) {\r\n        const stringBlockNames = [\r\n            asn1js.Utf8String.blockName(),\r\n            asn1js.BmpString.blockName(),\r\n            asn1js.UniversalString.blockName(),\r\n            asn1js.NumericString.blockName(),\r\n            asn1js.PrintableString.blockName(),\r\n            asn1js.TeletexString.blockName(),\r\n            asn1js.VideotexString.blockName(),\r\n            asn1js.IA5String.blockName(),\r\n            asn1js.GraphicString.blockName(),\r\n            asn1js.VisibleString.blockName(),\r\n            asn1js.GeneralString.blockName(),\r\n            asn1js.CharacterString.blockName()\r\n        ];\r\n        if (compareTo instanceof ArrayBuffer) {\r\n            return pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo);\r\n        }\r\n        if (compareTo.constructor.blockName() === AttributeTypeAndValue.blockName()) {\r\n            if (this.type !== compareTo.type)\r\n                return false;\r\n            const isStringPair = [false, false];\r\n            const thisName = this.value.constructor.blockName();\r\n            for (const name of stringBlockNames) {\r\n                if (thisName === name) {\r\n                    isStringPair[0] = true;\r\n                }\r\n                if (compareTo.value.constructor.blockName() === name) {\r\n                    isStringPair[1] = true;\r\n                }\r\n            }\r\n            if (isStringPair[0] !== isStringPair[1]) {\r\n                return false;\r\n            }\r\n            const isString = (isStringPair[0] && isStringPair[1]);\r\n            if (isString) {\r\n                const value1 = stringPrep(this.value.valueBlock.value);\r\n                const value2 = stringPrep(compareTo.value.valueBlock.value);\r\n                if (value1.localeCompare(value2) !== 0)\r\n                    return false;\r\n            }\r\n            else {\r\n                if (!pvtsutils.BufferSourceConverter.isEqual(this.value.valueBeforeDecodeView, compareTo.value.valueBeforeDecodeView))\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\nAttributeTypeAndValue.CLASS_NAME = \"AttributeTypeAndValue\";\n\nconst TYPE_AND_VALUES = \"typesAndValues\";\r\nconst VALUE_BEFORE_DECODE = \"valueBeforeDecode\";\r\nconst RDN = \"RDN\";\r\nclass RelativeDistinguishedNames extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.typesAndValues = pvutils.getParametersValue(parameters, TYPE_AND_VALUES, RelativeDistinguishedNames.defaultValues(TYPE_AND_VALUES));\r\n        this.valueBeforeDecode = pvutils.getParametersValue(parameters, VALUE_BEFORE_DECODE, RelativeDistinguishedNames.defaultValues(VALUE_BEFORE_DECODE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE_AND_VALUES:\r\n                return [];\r\n            case VALUE_BEFORE_DECODE:\r\n                return EMPTY_BUFFER;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TYPE_AND_VALUES:\r\n                return (memberValue.length === 0);\r\n            case VALUE_BEFORE_DECODE:\r\n                return (memberValue.byteLength === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.repeatedSequence || EMPTY_STRING),\r\n                    value: new asn1js.Set({\r\n                        value: [\r\n                            new asn1js.Repeated({\r\n                                name: (names.repeatedSet || EMPTY_STRING),\r\n                                value: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n                            })\r\n                        ]\r\n                    })\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            RDN,\r\n            TYPE_AND_VALUES\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RelativeDistinguishedNames.schema({\r\n            names: {\r\n                blockName: RDN,\r\n                repeatedSet: TYPE_AND_VALUES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (TYPE_AND_VALUES in asn1.result) {\r\n            this.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n        }\r\n        this.valueBeforeDecode = asn1.result.RDN.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    toSchema() {\r\n        if (this.valueBeforeDecode.byteLength === 0) {\r\n            return (new asn1js.Sequence({\r\n                value: [new asn1js.Set({\r\n                        value: Array.from(this.typesAndValues, o => o.toSchema())\r\n                    })]\r\n            }));\r\n        }\r\n        const asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n        AsnError.assert(asn1, \"RelativeDistinguishedNames\");\r\n        if (!(asn1.result instanceof asn1js.Sequence)) {\r\n            throw new Error(\"ASN.1 result should be SEQUENCE\");\r\n        }\r\n        return asn1.result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            typesAndValues: Array.from(this.typesAndValues, o => o.toJSON())\r\n        };\r\n    }\r\n    isEqual(compareTo) {\r\n        if (compareTo instanceof RelativeDistinguishedNames) {\r\n            if (this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n                return false;\r\n            for (const [index, typeAndValue] of this.typesAndValues.entries()) {\r\n                if (typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n                    return false;\r\n            }\r\n            return true;\r\n        }\r\n        if (compareTo instanceof ArrayBuffer) {\r\n            return pvutils.isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n        }\r\n        return false;\r\n    }\r\n}\r\nRelativeDistinguishedNames.CLASS_NAME = \"RelativeDistinguishedNames\";\n\nconst TYPE$4 = \"type\";\r\nconst VALUE$5 = \"value\";\r\nfunction builtInStandardAttributes(parameters = {}, optional = false) {\r\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n    return (new asn1js.Sequence({\r\n        optional,\r\n        value: [\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 2,\r\n                    tagNumber: 1\r\n                },\r\n                name: (names.country_name || EMPTY_STRING),\r\n                value: [\r\n                    new asn1js.Choice({\r\n                        value: [\r\n                            new asn1js.NumericString(),\r\n                            new asn1js.PrintableString()\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 2,\r\n                    tagNumber: 2\r\n                },\r\n                name: (names.administration_domain_name || EMPTY_STRING),\r\n                value: [\r\n                    new asn1js.Choice({\r\n                        value: [\r\n                            new asn1js.NumericString(),\r\n                            new asn1js.PrintableString()\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                name: (names.network_address || EMPTY_STRING),\r\n                isHexOnly: true\r\n            }),\r\n            new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                name: (names.terminal_identifier || EMPTY_STRING),\r\n                isHexOnly: true\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                name: (names.private_domain_name || EMPTY_STRING),\r\n                value: [\r\n                    new asn1js.Choice({\r\n                        value: [\r\n                            new asn1js.NumericString(),\r\n                            new asn1js.PrintableString()\r\n                        ]\r\n                    })\r\n                ]\r\n            }),\r\n            new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 3\r\n                },\r\n                name: (names.organization_name || EMPTY_STRING),\r\n                isHexOnly: true\r\n            }),\r\n            new asn1js.Primitive({\r\n                optional: true,\r\n                name: (names.numeric_user_identifier || EMPTY_STRING),\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 4\r\n                },\r\n                isHexOnly: true\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                name: (names.personal_name || EMPTY_STRING),\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 5\r\n                },\r\n                value: [\r\n                    new asn1js.Primitive({\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: 0\r\n                        },\r\n                        isHexOnly: true\r\n                    }),\r\n                    new asn1js.Primitive({\r\n                        optional: true,\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: 1\r\n                        },\r\n                        isHexOnly: true\r\n                    }),\r\n                    new asn1js.Primitive({\r\n                        optional: true,\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: 2\r\n                        },\r\n                        isHexOnly: true\r\n                    }),\r\n                    new asn1js.Primitive({\r\n                        optional: true,\r\n                        idBlock: {\r\n                            tagClass: 3,\r\n                            tagNumber: 3\r\n                        },\r\n                        isHexOnly: true\r\n                    })\r\n                ]\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                name: (names.organizational_unit_names || EMPTY_STRING),\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 6\r\n                },\r\n                value: [\r\n                    new asn1js.Repeated({\r\n                        value: new asn1js.PrintableString()\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    }));\r\n}\r\nfunction builtInDomainDefinedAttributes(optional = false) {\r\n    return (new asn1js.Sequence({\r\n        optional,\r\n        value: [\r\n            new asn1js.PrintableString(),\r\n            new asn1js.PrintableString()\r\n        ]\r\n    }));\r\n}\r\nfunction extensionAttributes(optional = false) {\r\n    return (new asn1js.Set({\r\n        optional,\r\n        value: [\r\n            new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                isHexOnly: true\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [new asn1js.Any()]\r\n            })\r\n        ]\r\n    }));\r\n}\r\nclass GeneralName extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.type = pvutils.getParametersValue(parameters, TYPE$4, GeneralName.defaultValues(TYPE$4));\r\n        this.value = pvutils.getParametersValue(parameters, VALUE$5, GeneralName.defaultValues(VALUE$5));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE$4:\r\n                return 9;\r\n            case VALUE$5:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TYPE$4:\r\n                return (memberValue === GeneralName.defaultValues(memberName));\r\n            case VALUE$5:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    value: [\r\n                        new asn1js.ObjectIdentifier(),\r\n                        new asn1js.Constructed({\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                            value: [new asn1js.Any()]\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 3\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    value: [\r\n                        builtInStandardAttributes((names.builtInStandardAttributes || {}), false),\r\n                        builtInDomainDefinedAttributes(true),\r\n                        extensionAttributes(true)\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 4\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    value: [RelativeDistinguishedNames.schema(names.directoryName || {})]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 5\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    value: [\r\n                        new asn1js.Constructed({\r\n                            optional: true,\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                            value: [\r\n                                new asn1js.Choice({\r\n                                    value: [\r\n                                        new asn1js.TeletexString(),\r\n                                        new asn1js.PrintableString(),\r\n                                        new asn1js.UniversalString(),\r\n                                        new asn1js.Utf8String(),\r\n                                        new asn1js.BmpString()\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        }),\r\n                        new asn1js.Constructed({\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 1\r\n                            },\r\n                            value: [\r\n                                new asn1js.Choice({\r\n                                    value: [\r\n                                        new asn1js.TeletexString(),\r\n                                        new asn1js.PrintableString(),\r\n                                        new asn1js.UniversalString(),\r\n                                        new asn1js.Utf8String(),\r\n                                        new asn1js.BmpString()\r\n                                    ]\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 6\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 7\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 8\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            \"blockName\",\r\n            \"otherName\",\r\n            \"rfc822Name\",\r\n            \"dNSName\",\r\n            \"x400Address\",\r\n            \"directoryName\",\r\n            \"ediPartyName\",\r\n            \"uniformResourceIdentifier\",\r\n            \"iPAddress\",\r\n            \"registeredID\"\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralName.schema({\r\n            names: {\r\n                blockName: \"blockName\",\r\n                otherName: \"otherName\",\r\n                rfc822Name: \"rfc822Name\",\r\n                dNSName: \"dNSName\",\r\n                x400Address: \"x400Address\",\r\n                directoryName: {\r\n                    names: {\r\n                        blockName: \"directoryName\"\r\n                    }\r\n                },\r\n                ediPartyName: \"ediPartyName\",\r\n                uniformResourceIdentifier: \"uniformResourceIdentifier\",\r\n                iPAddress: \"iPAddress\",\r\n                registeredID: \"registeredID\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.type = asn1.result.blockName.idBlock.tagNumber;\r\n        switch (this.type) {\r\n            case 0:\r\n                this.value = asn1.result.blockName;\r\n                break;\r\n            case 1:\r\n            case 2:\r\n            case 6:\r\n                {\r\n                    const value = asn1.result.blockName;\r\n                    value.idBlock.tagClass = 1;\r\n                    value.idBlock.tagNumber = 22;\r\n                    const valueBER = value.toBER(false);\r\n                    const asnValue = asn1js.fromBER(valueBER);\r\n                    AsnError.assert(asnValue, \"GeneralName value\");\r\n                    this.value = asnValue.result.valueBlock.value;\r\n                }\r\n                break;\r\n            case 3:\r\n                this.value = asn1.result.blockName;\r\n                break;\r\n            case 4:\r\n                this.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\r\n                break;\r\n            case 5:\r\n                this.value = asn1.result.ediPartyName;\r\n                break;\r\n            case 7:\r\n                this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\r\n                break;\r\n            case 8:\r\n                {\r\n                    const value = asn1.result.blockName;\r\n                    value.idBlock.tagClass = 1;\r\n                    value.idBlock.tagNumber = 6;\r\n                    const valueBER = value.toBER(false);\r\n                    const asnValue = asn1js.fromBER(valueBER);\r\n                    AsnError.assert(asnValue, \"GeneralName registeredID\");\r\n                    this.value = asnValue.result.valueBlock.toString();\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    toSchema() {\r\n        switch (this.type) {\r\n            case 0:\r\n            case 3:\r\n            case 5:\r\n                return new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: this.type\r\n                    },\r\n                    value: [\r\n                        this.value\r\n                    ]\r\n                });\r\n            case 1:\r\n            case 2:\r\n            case 6:\r\n                {\r\n                    const value = new asn1js.IA5String({ value: this.value });\r\n                    value.idBlock.tagClass = 3;\r\n                    value.idBlock.tagNumber = this.type;\r\n                    return value;\r\n                }\r\n            case 4:\r\n                return new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 4\r\n                    },\r\n                    value: [this.value.toSchema()]\r\n                });\r\n            case 7:\r\n                {\r\n                    const value = this.value;\r\n                    value.idBlock.tagClass = 3;\r\n                    value.idBlock.tagNumber = this.type;\r\n                    return value;\r\n                }\r\n            case 8:\r\n                {\r\n                    const value = new asn1js.ObjectIdentifier({ value: this.value });\r\n                    value.idBlock.tagClass = 3;\r\n                    value.idBlock.tagNumber = this.type;\r\n                    return value;\r\n                }\r\n            default:\r\n                return GeneralName.schema();\r\n        }\r\n    }\r\n    toJSON() {\r\n        const _object = {\r\n            type: this.type,\r\n            value: EMPTY_STRING\r\n        };\r\n        if ((typeof this.value) === \"string\")\r\n            _object.value = this.value;\r\n        else {\r\n            try {\r\n                _object.value = this.value.toJSON();\r\n            }\r\n            catch (ex) {\r\n            }\r\n        }\r\n        return _object;\r\n    }\r\n}\r\nGeneralName.CLASS_NAME = \"GeneralName\";\n\nconst ACCESS_METHOD = \"accessMethod\";\r\nconst ACCESS_LOCATION = \"accessLocation\";\r\nconst CLEAR_PROPS$1v = [\r\n    ACCESS_METHOD,\r\n    ACCESS_LOCATION,\r\n];\r\nclass AccessDescription extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.accessMethod = pvutils.getParametersValue(parameters, ACCESS_METHOD, AccessDescription.defaultValues(ACCESS_METHOD));\r\n        this.accessLocation = pvutils.getParametersValue(parameters, ACCESS_LOCATION, AccessDescription.defaultValues(ACCESS_LOCATION));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ACCESS_METHOD:\r\n                return EMPTY_STRING;\r\n            case ACCESS_LOCATION:\r\n                return new GeneralName();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.accessMethod || EMPTY_STRING) }),\r\n                GeneralName.schema(names.accessLocation || {})\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1v);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AccessDescription.schema({\r\n            names: {\r\n                accessMethod: ACCESS_METHOD,\r\n                accessLocation: {\r\n                    names: {\r\n                        blockName: ACCESS_LOCATION\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.accessMethod = asn1.result.accessMethod.valueBlock.toString();\r\n        this.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.accessMethod }),\r\n                this.accessLocation.toSchema()\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            accessMethod: this.accessMethod,\r\n            accessLocation: this.accessLocation.toJSON()\r\n        };\r\n    }\r\n}\r\nAccessDescription.CLASS_NAME = \"AccessDescription\";\n\nconst SECONDS = \"seconds\";\r\nconst MILLIS = \"millis\";\r\nconst MICROS = \"micros\";\r\nclass Accuracy extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (SECONDS in parameters) {\r\n            this.seconds = pvutils.getParametersValue(parameters, SECONDS, Accuracy.defaultValues(SECONDS));\r\n        }\r\n        if (MILLIS in parameters) {\r\n            this.millis = pvutils.getParametersValue(parameters, MILLIS, Accuracy.defaultValues(MILLIS));\r\n        }\r\n        if (MICROS in parameters) {\r\n            this.micros = pvutils.getParametersValue(parameters, MICROS, Accuracy.defaultValues(MICROS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SECONDS:\r\n            case MILLIS:\r\n            case MICROS:\r\n                return 0;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SECONDS:\r\n            case MILLIS:\r\n            case MICROS:\r\n                return (memberValue === Accuracy.defaultValues(memberName));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            optional: true,\r\n            value: [\r\n                new asn1js.Integer({\r\n                    optional: true,\r\n                    name: (names.seconds || EMPTY_STRING)\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.millis || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.micros || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            SECONDS,\r\n            MILLIS,\r\n            MICROS,\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Accuracy.schema({\r\n            names: {\r\n                seconds: SECONDS,\r\n                millis: MILLIS,\r\n                micros: MICROS,\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (\"seconds\" in asn1.result) {\r\n            this.seconds = asn1.result.seconds.valueBlock.valueDec;\r\n        }\r\n        if (\"millis\" in asn1.result) {\r\n            const intMillis = new asn1js.Integer({ valueHex: asn1.result.millis.valueBlock.valueHex });\r\n            this.millis = intMillis.valueBlock.valueDec;\r\n        }\r\n        if (\"micros\" in asn1.result) {\r\n            const intMicros = new asn1js.Integer({ valueHex: asn1.result.micros.valueBlock.valueHex });\r\n            this.micros = intMicros.valueBlock.valueDec;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.seconds !== undefined)\r\n            outputArray.push(new asn1js.Integer({ value: this.seconds }));\r\n        if (this.millis !== undefined) {\r\n            const intMillis = new asn1js.Integer({ value: this.millis });\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                valueHex: intMillis.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        if (this.micros !== undefined) {\r\n            const intMicros = new asn1js.Integer({ value: this.micros });\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                valueHex: intMicros.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const _object = {};\r\n        if (this.seconds !== undefined)\r\n            _object.seconds = this.seconds;\r\n        if (this.millis !== undefined)\r\n            _object.millis = this.millis;\r\n        if (this.micros !== undefined)\r\n            _object.micros = this.micros;\r\n        return _object;\r\n    }\r\n}\r\nAccuracy.CLASS_NAME = \"Accuracy\";\n\nconst ALGORITHM_ID = \"algorithmId\";\r\nconst ALGORITHM_PARAMS = \"algorithmParams\";\r\nconst ALGORITHM$2 = \"algorithm\";\r\nconst PARAMS = \"params\";\r\nconst CLEAR_PROPS$1u = [\r\n    ALGORITHM$2,\r\n    PARAMS\r\n];\r\nclass AlgorithmIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.algorithmId = pvutils.getParametersValue(parameters, ALGORITHM_ID, AlgorithmIdentifier.defaultValues(ALGORITHM_ID));\r\n        if (ALGORITHM_PARAMS in parameters) {\r\n            this.algorithmParams = pvutils.getParametersValue(parameters, ALGORITHM_PARAMS, AlgorithmIdentifier.defaultValues(ALGORITHM_PARAMS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ALGORITHM_ID:\r\n                return EMPTY_STRING;\r\n            case ALGORITHM_PARAMS:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ALGORITHM_ID:\r\n                return (memberValue === EMPTY_STRING);\r\n            case ALGORITHM_PARAMS:\r\n                return (memberValue instanceof asn1js.Any);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            optional: (names.optional || false),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || EMPTY_STRING) }),\r\n                new asn1js.Any({ name: (names.algorithmParams || EMPTY_STRING), optional: true })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1u);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AlgorithmIdentifier.schema({\r\n            names: {\r\n                algorithmIdentifier: ALGORITHM$2,\r\n                algorithmParams: PARAMS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n        if (PARAMS in asn1.result) {\r\n            this.algorithmParams = asn1.result.params;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\r\n            outputArray.push(this.algorithmParams);\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            algorithmId: this.algorithmId\r\n        };\r\n        if (this.algorithmParams && !(this.algorithmParams instanceof asn1js.Any)) {\r\n            object.algorithmParams = this.algorithmParams.toJSON();\r\n        }\r\n        return object;\r\n    }\r\n    isEqual(algorithmIdentifier) {\r\n        if (!(algorithmIdentifier instanceof AlgorithmIdentifier)) {\r\n            return false;\r\n        }\r\n        if (this.algorithmId !== algorithmIdentifier.algorithmId) {\r\n            return false;\r\n        }\r\n        if (this.algorithmParams) {\r\n            if (algorithmIdentifier.algorithmParams) {\r\n                return JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n            }\r\n            return false;\r\n        }\r\n        if (algorithmIdentifier.algorithmParams) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nAlgorithmIdentifier.CLASS_NAME = \"AlgorithmIdentifier\";\n\nconst ALT_NAMES = \"altNames\";\r\nconst CLEAR_PROPS$1t = [\r\n    ALT_NAMES\r\n];\r\nclass AltName extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.altNames = pvutils.getParametersValue(parameters, ALT_NAMES, AltName.defaultValues(ALT_NAMES));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ALT_NAMES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.altNames || EMPTY_STRING),\r\n                    value: GeneralName.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1t);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AltName.schema({\r\n            names: {\r\n                altNames: ALT_NAMES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (ALT_NAMES in asn1.result) {\r\n            this.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.altNames, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            altNames: Array.from(this.altNames, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nAltName.CLASS_NAME = \"AltName\";\n\nconst TYPE$3 = \"type\";\r\nconst VALUES$1 = \"values\";\r\nconst CLEAR_PROPS$1s = [\r\n    TYPE$3,\r\n    VALUES$1\r\n];\r\nclass Attribute extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.type = pvutils.getParametersValue(parameters, TYPE$3, Attribute.defaultValues(TYPE$3));\r\n        this.values = pvutils.getParametersValue(parameters, VALUES$1, Attribute.defaultValues(VALUES$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE$3:\r\n                return EMPTY_STRING;\r\n            case VALUES$1:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TYPE$3:\r\n                return (memberValue === EMPTY_STRING);\r\n            case VALUES$1:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.type || EMPTY_STRING) }),\r\n                new asn1js.Set({\r\n                    name: (names.setName || EMPTY_STRING),\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.values || EMPTY_STRING),\r\n                            value: new asn1js.Any()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1s);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Attribute.schema({\r\n            names: {\r\n                type: TYPE$3,\r\n                values: VALUES$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.type = asn1.result.type.valueBlock.toString();\r\n        this.values = asn1.result.values;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.type }),\r\n                new asn1js.Set({\r\n                    value: this.values\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: this.type,\r\n            values: Array.from(this.values, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nAttribute.CLASS_NAME = \"Attribute\";\n\nconst NOT_BEFORE_TIME = \"notBeforeTime\";\r\nconst NOT_AFTER_TIME = \"notAfterTime\";\r\nconst CLEAR_PROPS$1r = [\r\n    NOT_BEFORE_TIME,\r\n    NOT_AFTER_TIME,\r\n];\r\nclass AttCertValidityPeriod extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.notBeforeTime = pvutils.getParametersValue(parameters, NOT_BEFORE_TIME, AttCertValidityPeriod.defaultValues(NOT_BEFORE_TIME));\r\n        this.notAfterTime = pvutils.getParametersValue(parameters, NOT_AFTER_TIME, AttCertValidityPeriod.defaultValues(NOT_AFTER_TIME));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case NOT_BEFORE_TIME:\r\n            case NOT_AFTER_TIME:\r\n                return new Date(0, 0, 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.GeneralizedTime({ name: (names.notBeforeTime || EMPTY_STRING) }),\r\n                new asn1js.GeneralizedTime({ name: (names.notAfterTime || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1r);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttCertValidityPeriod.schema({\r\n            names: {\r\n                notBeforeTime: NOT_BEFORE_TIME,\r\n                notAfterTime: NOT_AFTER_TIME\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.notBeforeTime = asn1.result.notBeforeTime.toDate();\r\n        this.notAfterTime = asn1.result.notAfterTime.toDate();\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.GeneralizedTime({ valueDate: this.notBeforeTime }),\r\n                new asn1js.GeneralizedTime({ valueDate: this.notAfterTime }),\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            notBeforeTime: this.notBeforeTime,\r\n            notAfterTime: this.notAfterTime\r\n        };\r\n    }\r\n}\r\nAttCertValidityPeriod.CLASS_NAME = \"AttCertValidityPeriod\";\n\nconst NAMES = \"names\";\r\nconst GENERAL_NAMES = \"generalNames\";\r\nclass GeneralNames extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.names = pvutils.getParametersValue(parameters, NAMES, GeneralNames.defaultValues(NAMES));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case \"names\":\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}, optional = false) {\r\n        const names = pvutils.getParametersValue(parameters, NAMES, {});\r\n        return (new asn1js.Sequence({\r\n            optional,\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.generalNames || EMPTY_STRING),\r\n                    value: GeneralName.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            NAMES,\r\n            GENERAL_NAMES\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralNames.schema({\r\n            names: {\r\n                blockName: NAMES,\r\n                generalNames: GENERAL_NAMES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.names, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            names: Array.from(this.names, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nGeneralNames.CLASS_NAME = \"GeneralNames\";\n\nconst id_SubjectDirectoryAttributes = \"2.5.29.9\";\r\nconst id_SubjectKeyIdentifier = \"2.5.29.14\";\r\nconst id_KeyUsage = \"2.5.29.15\";\r\nconst id_PrivateKeyUsagePeriod = \"2.5.29.16\";\r\nconst id_SubjectAltName = \"2.5.29.17\";\r\nconst id_IssuerAltName = \"2.5.29.18\";\r\nconst id_BasicConstraints = \"2.5.29.19\";\r\nconst id_CRLNumber = \"2.5.29.20\";\r\nconst id_BaseCRLNumber = \"2.5.29.27\";\r\nconst id_CRLReason = \"2.5.29.21\";\r\nconst id_InvalidityDate = \"2.5.29.24\";\r\nconst id_IssuingDistributionPoint = \"2.5.29.28\";\r\nconst id_CertificateIssuer = \"2.5.29.29\";\r\nconst id_NameConstraints = \"2.5.29.30\";\r\nconst id_CRLDistributionPoints = \"2.5.29.31\";\r\nconst id_FreshestCRL = \"2.5.29.46\";\r\nconst id_CertificatePolicies = \"2.5.29.32\";\r\nconst id_AnyPolicy = \"2.5.29.32.0\";\r\nconst id_MicrosoftAppPolicies = \"1.3.6.1.4.1.311.21.10\";\r\nconst id_PolicyMappings = \"2.5.29.33\";\r\nconst id_AuthorityKeyIdentifier = \"2.5.29.35\";\r\nconst id_PolicyConstraints = \"2.5.29.36\";\r\nconst id_ExtKeyUsage = \"2.5.29.37\";\r\nconst id_InhibitAnyPolicy = \"2.5.29.54\";\r\nconst id_AuthorityInfoAccess = \"1.3.6.1.5.5.7.1.1\";\r\nconst id_SubjectInfoAccess = \"1.3.6.1.5.5.7.1.11\";\r\nconst id_SignedCertificateTimestampList = \"1.3.6.1.4.1.11129.2.4.2\";\r\nconst id_MicrosoftCertTemplateV1 = \"1.3.6.1.4.1.311.20.2\";\r\nconst id_MicrosoftPrevCaCertHash = \"1.3.6.1.4.1.311.21.2\";\r\nconst id_MicrosoftCertTemplateV2 = \"1.3.6.1.4.1.311.21.7\";\r\nconst id_MicrosoftCaVersion = \"1.3.6.1.4.1.311.21.1\";\r\nconst id_QCStatements = \"1.3.6.1.5.5.7.1.3\";\r\nconst id_ContentType_Data = \"1.2.840.113549.1.7.1\";\r\nconst id_ContentType_SignedData = \"1.2.840.113549.1.7.2\";\r\nconst id_ContentType_EnvelopedData = \"1.2.840.113549.1.7.3\";\r\nconst id_ContentType_EncryptedData = \"1.2.840.113549.1.7.6\";\r\nconst id_eContentType_TSTInfo = \"1.2.840.113549.1.9.16.1.4\";\r\nconst id_CertBag_X509Certificate = \"1.2.840.113549.1.9.22.1\";\r\nconst id_CertBag_SDSICertificate = \"1.2.840.113549.1.9.22.2\";\r\nconst id_CertBag_AttributeCertificate = \"1.2.840.113549.1.9.22.3\";\r\nconst id_CRLBag_X509CRL = \"1.2.840.113549.1.9.23.1\";\r\nconst id_pkix = \"1.3.6.1.5.5.7\";\r\nconst id_ad = `${id_pkix}.48`;\r\nconst id_PKIX_OCSP_Basic = `${id_ad}.1.1`;\r\nconst id_ad_caIssuers = `${id_ad}.2`;\r\nconst id_ad_ocsp = `${id_ad}.1`;\r\nconst id_sha1 = \"1.3.14.3.2.26\";\r\nconst id_sha256 = \"2.16.840.1.101.3.4.2.1\";\r\nconst id_sha384 = \"2.16.840.1.101.3.4.2.2\";\r\nconst id_sha512 = \"2.16.840.1.101.3.4.2.3\";\n\nconst KEY_IDENTIFIER$1 = \"keyIdentifier\";\r\nconst AUTHORITY_CERT_ISSUER = \"authorityCertIssuer\";\r\nconst AUTHORITY_CERT_SERIAL_NUMBER = \"authorityCertSerialNumber\";\r\nconst CLEAR_PROPS$1q = [\r\n    KEY_IDENTIFIER$1,\r\n    AUTHORITY_CERT_ISSUER,\r\n    AUTHORITY_CERT_SERIAL_NUMBER,\r\n];\r\nclass AuthorityKeyIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (KEY_IDENTIFIER$1 in parameters) {\r\n            this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER$1, AuthorityKeyIdentifier.defaultValues(KEY_IDENTIFIER$1));\r\n        }\r\n        if (AUTHORITY_CERT_ISSUER in parameters) {\r\n            this.authorityCertIssuer = pvutils.getParametersValue(parameters, AUTHORITY_CERT_ISSUER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_ISSUER));\r\n        }\r\n        if (AUTHORITY_CERT_SERIAL_NUMBER in parameters) {\r\n            this.authorityCertSerialNumber = pvutils.getParametersValue(parameters, AUTHORITY_CERT_SERIAL_NUMBER, AuthorityKeyIdentifier.defaultValues(AUTHORITY_CERT_SERIAL_NUMBER));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_IDENTIFIER$1:\r\n                return new asn1js.OctetString();\r\n            case AUTHORITY_CERT_ISSUER:\r\n                return [];\r\n            case AUTHORITY_CERT_SERIAL_NUMBER:\r\n                return new asn1js.Integer();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Primitive({\r\n                    name: (names.keyIdentifier || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.authorityCertIssuer || EMPTY_STRING),\r\n                            value: GeneralName.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.authorityCertSerialNumber || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1q);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AuthorityKeyIdentifier.schema({\r\n            names: {\r\n                keyIdentifier: KEY_IDENTIFIER$1,\r\n                authorityCertIssuer: AUTHORITY_CERT_ISSUER,\r\n                authorityCertSerialNumber: AUTHORITY_CERT_SERIAL_NUMBER\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (KEY_IDENTIFIER$1 in asn1.result)\r\n            this.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n        if (AUTHORITY_CERT_ISSUER in asn1.result)\r\n            this.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, o => new GeneralName({ schema: o }));\r\n        if (AUTHORITY_CERT_SERIAL_NUMBER in asn1.result)\r\n            this.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.keyIdentifier) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                valueHex: this.keyIdentifier.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        if (this.authorityCertIssuer) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.authorityCertIssuer, o => o.toSchema())\r\n            }));\r\n        }\r\n        if (this.authorityCertSerialNumber) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                valueHex: this.authorityCertSerialNumber.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {};\r\n        if (this.keyIdentifier) {\r\n            object.keyIdentifier = this.keyIdentifier.toJSON();\r\n        }\r\n        if (this.authorityCertIssuer) {\r\n            object.authorityCertIssuer = Array.from(this.authorityCertIssuer, o => o.toJSON());\r\n        }\r\n        if (this.authorityCertSerialNumber) {\r\n            object.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n        }\r\n        return object;\r\n    }\r\n}\r\nAuthorityKeyIdentifier.CLASS_NAME = \"AuthorityKeyIdentifier\";\n\nconst PATH_LENGTH_CONSTRAINT = \"pathLenConstraint\";\r\nconst CA = \"cA\";\r\nclass BasicConstraints extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.cA = pvutils.getParametersValue(parameters, CA, false);\r\n        if (PATH_LENGTH_CONSTRAINT in parameters) {\r\n            this.pathLenConstraint = pvutils.getParametersValue(parameters, PATH_LENGTH_CONSTRAINT, 0);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CA:\r\n                return false;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Boolean({\r\n                    optional: true,\r\n                    name: (names.cA || EMPTY_STRING)\r\n                }),\r\n                new asn1js.Integer({\r\n                    optional: true,\r\n                    name: (names.pathLenConstraint || EMPTY_STRING)\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            CA,\r\n            PATH_LENGTH_CONSTRAINT\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, BasicConstraints.schema({\r\n            names: {\r\n                cA: CA,\r\n                pathLenConstraint: PATH_LENGTH_CONSTRAINT\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (CA in asn1.result) {\r\n            this.cA = asn1.result.cA.valueBlock.value;\r\n        }\r\n        if (PATH_LENGTH_CONSTRAINT in asn1.result) {\r\n            if (asn1.result.pathLenConstraint.valueBlock.isHexOnly) {\r\n                this.pathLenConstraint = asn1.result.pathLenConstraint;\r\n            }\r\n            else {\r\n                this.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\r\n            }\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.cA !== BasicConstraints.defaultValues(CA))\r\n            outputArray.push(new asn1js.Boolean({ value: this.cA }));\r\n        if (PATH_LENGTH_CONSTRAINT in this) {\r\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\r\n                outputArray.push(this.pathLenConstraint);\r\n            }\r\n            else {\r\n                outputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\r\n            }\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {};\r\n        if (this.cA !== BasicConstraints.defaultValues(CA)) {\r\n            object.cA = this.cA;\r\n        }\r\n        if (PATH_LENGTH_CONSTRAINT in this) {\r\n            if (this.pathLenConstraint instanceof asn1js.Integer) {\r\n                object.pathLenConstraint = this.pathLenConstraint.toJSON();\r\n            }\r\n            else {\r\n                object.pathLenConstraint = this.pathLenConstraint;\r\n            }\r\n        }\r\n        return object;\r\n    }\r\n}\r\nBasicConstraints.CLASS_NAME = \"BasicConstraints\";\n\nconst CERTIFICATE_INDEX = \"certificateIndex\";\r\nconst KEY_INDEX = \"keyIndex\";\r\nclass CAVersion extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.certificateIndex = pvutils.getParametersValue(parameters, CERTIFICATE_INDEX, CAVersion.defaultValues(CERTIFICATE_INDEX));\r\n        this.keyIndex = pvutils.getParametersValue(parameters, KEY_INDEX, CAVersion.defaultValues(KEY_INDEX));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERTIFICATE_INDEX:\r\n            case KEY_INDEX:\r\n                return 0;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema() {\r\n        return (new asn1js.Integer());\r\n    }\r\n    fromSchema(schema) {\r\n        if (schema.constructor.blockName() !== asn1js.Integer.blockName()) {\r\n            throw new Error(\"Object's schema was not verified against input data for CAVersion\");\r\n        }\r\n        let value = schema.valueBlock.valueHex.slice(0);\r\n        const valueView = new Uint8Array(value);\r\n        switch (true) {\r\n            case (value.byteLength < 4):\r\n                {\r\n                    const tempValue = new ArrayBuffer(4);\r\n                    const tempValueView = new Uint8Array(tempValue);\r\n                    tempValueView.set(valueView, 4 - value.byteLength);\r\n                    value = tempValue.slice(0);\r\n                }\r\n                break;\r\n            case (value.byteLength > 4):\r\n                {\r\n                    const tempValue = new ArrayBuffer(4);\r\n                    const tempValueView = new Uint8Array(tempValue);\r\n                    tempValueView.set(valueView.slice(0, 4));\r\n                    value = tempValue.slice(0);\r\n                }\r\n                break;\r\n        }\r\n        const keyIndexBuffer = value.slice(0, 2);\r\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\r\n        let temp = keyIndexView8[0];\r\n        keyIndexView8[0] = keyIndexView8[1];\r\n        keyIndexView8[1] = temp;\r\n        const keyIndexView16 = new Uint16Array(keyIndexBuffer);\r\n        this.keyIndex = keyIndexView16[0];\r\n        const certificateIndexBuffer = value.slice(2);\r\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\r\n        temp = certificateIndexView8[0];\r\n        certificateIndexView8[0] = certificateIndexView8[1];\r\n        certificateIndexView8[1] = temp;\r\n        const certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\r\n        this.certificateIndex = certificateIndexView16[0];\r\n    }\r\n    toSchema() {\r\n        const certificateIndexBuffer = new ArrayBuffer(2);\r\n        const certificateIndexView = new Uint16Array(certificateIndexBuffer);\r\n        certificateIndexView[0] = this.certificateIndex;\r\n        const certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\r\n        let temp = certificateIndexView8[0];\r\n        certificateIndexView8[0] = certificateIndexView8[1];\r\n        certificateIndexView8[1] = temp;\r\n        const keyIndexBuffer = new ArrayBuffer(2);\r\n        const keyIndexView = new Uint16Array(keyIndexBuffer);\r\n        keyIndexView[0] = this.keyIndex;\r\n        const keyIndexView8 = new Uint8Array(keyIndexBuffer);\r\n        temp = keyIndexView8[0];\r\n        keyIndexView8[0] = keyIndexView8[1];\r\n        keyIndexView8[1] = temp;\r\n        return (new asn1js.Integer({\r\n            valueHex: pvutils.utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            certificateIndex: this.certificateIndex,\r\n            keyIndex: this.keyIndex\r\n        };\r\n    }\r\n}\r\nCAVersion.CLASS_NAME = \"CAVersion\";\n\nconst POLICY_QUALIFIER_ID = \"policyQualifierId\";\r\nconst QUALIFIER = \"qualifier\";\r\nconst CLEAR_PROPS$1p = [\r\n    POLICY_QUALIFIER_ID,\r\n    QUALIFIER\r\n];\r\nclass PolicyQualifierInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.policyQualifierId = pvutils.getParametersValue(parameters, POLICY_QUALIFIER_ID, PolicyQualifierInfo.defaultValues(POLICY_QUALIFIER_ID));\r\n        this.qualifier = pvutils.getParametersValue(parameters, QUALIFIER, PolicyQualifierInfo.defaultValues(QUALIFIER));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case POLICY_QUALIFIER_ID:\r\n                return EMPTY_STRING;\r\n            case QUALIFIER:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.policyQualifierId || EMPTY_STRING) }),\r\n                new asn1js.Any({ name: (names.qualifier || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1p);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyQualifierInfo.schema({\r\n            names: {\r\n                policyQualifierId: POLICY_QUALIFIER_ID,\r\n                qualifier: QUALIFIER\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\r\n        this.qualifier = asn1.result.qualifier;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\r\n                this.qualifier\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            policyQualifierId: this.policyQualifierId,\r\n            qualifier: this.qualifier.toJSON()\r\n        };\r\n    }\r\n}\r\nPolicyQualifierInfo.CLASS_NAME = \"PolicyQualifierInfo\";\n\nconst POLICY_IDENTIFIER = \"policyIdentifier\";\r\nconst POLICY_QUALIFIERS = \"policyQualifiers\";\r\nconst CLEAR_PROPS$1o = [\r\n    POLICY_IDENTIFIER,\r\n    POLICY_QUALIFIERS\r\n];\r\nclass PolicyInformation extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.policyIdentifier = pvutils.getParametersValue(parameters, POLICY_IDENTIFIER, PolicyInformation.defaultValues(POLICY_IDENTIFIER));\r\n        if (POLICY_QUALIFIERS in parameters) {\r\n            this.policyQualifiers = pvutils.getParametersValue(parameters, POLICY_QUALIFIERS, PolicyInformation.defaultValues(POLICY_QUALIFIERS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case POLICY_IDENTIFIER:\r\n                return EMPTY_STRING;\r\n            case POLICY_QUALIFIERS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.policyIdentifier || EMPTY_STRING) }),\r\n                new asn1js.Sequence({\r\n                    optional: true,\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.policyQualifiers || EMPTY_STRING),\r\n                            value: PolicyQualifierInfo.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1o);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyInformation.schema({\r\n            names: {\r\n                policyIdentifier: POLICY_IDENTIFIER,\r\n                policyQualifiers: POLICY_QUALIFIERS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n        if (POLICY_QUALIFIERS in asn1.result) {\r\n            this.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n        if (this.policyQualifiers) {\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.policyQualifiers, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            policyIdentifier: this.policyIdentifier\r\n        };\r\n        if (this.policyQualifiers)\r\n            res.policyQualifiers = Array.from(this.policyQualifiers, o => o.toJSON());\r\n        return res;\r\n    }\r\n}\r\nPolicyInformation.CLASS_NAME = \"PolicyInformation\";\n\nconst CERTIFICATE_POLICIES = \"certificatePolicies\";\r\nconst CLEAR_PROPS$1n = [\r\n    CERTIFICATE_POLICIES,\r\n];\r\nclass CertificatePolicies extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.certificatePolicies = pvutils.getParametersValue(parameters, CERTIFICATE_POLICIES, CertificatePolicies.defaultValues(CERTIFICATE_POLICIES));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERTIFICATE_POLICIES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.certificatePolicies || EMPTY_STRING),\r\n                    value: PolicyInformation.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1n);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertificatePolicies.schema({\r\n            names: {\r\n                certificatePolicies: CERTIFICATE_POLICIES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.certificatePolicies, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            certificatePolicies: Array.from(this.certificatePolicies, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nCertificatePolicies.CLASS_NAME = \"CertificatePolicies\";\n\nconst TEMPLATE_ID = \"templateID\";\r\nconst TEMPLATE_MAJOR_VERSION = \"templateMajorVersion\";\r\nconst TEMPLATE_MINOR_VERSION = \"templateMinorVersion\";\r\nconst CLEAR_PROPS$1m = [\r\n    TEMPLATE_ID,\r\n    TEMPLATE_MAJOR_VERSION,\r\n    TEMPLATE_MINOR_VERSION\r\n];\r\nclass CertificateTemplate extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.templateID = pvutils.getParametersValue(parameters, TEMPLATE_ID, CertificateTemplate.defaultValues(TEMPLATE_ID));\r\n        if (TEMPLATE_MAJOR_VERSION in parameters) {\r\n            this.templateMajorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MAJOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MAJOR_VERSION));\r\n        }\r\n        if (TEMPLATE_MINOR_VERSION in parameters) {\r\n            this.templateMinorVersion = pvutils.getParametersValue(parameters, TEMPLATE_MINOR_VERSION, CertificateTemplate.defaultValues(TEMPLATE_MINOR_VERSION));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TEMPLATE_ID:\r\n                return EMPTY_STRING;\r\n            case TEMPLATE_MAJOR_VERSION:\r\n            case TEMPLATE_MINOR_VERSION:\r\n                return 0;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.templateID || EMPTY_STRING) }),\r\n                new asn1js.Integer({\r\n                    name: (names.templateMajorVersion || EMPTY_STRING),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Integer({\r\n                    name: (names.templateMinorVersion || EMPTY_STRING),\r\n                    optional: true\r\n                }),\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1m);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateTemplate.schema({\r\n            names: {\r\n                templateID: TEMPLATE_ID,\r\n                templateMajorVersion: TEMPLATE_MAJOR_VERSION,\r\n                templateMinorVersion: TEMPLATE_MINOR_VERSION\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.templateID = asn1.result.templateID.valueBlock.toString();\r\n        if (TEMPLATE_MAJOR_VERSION in asn1.result) {\r\n            this.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\r\n        }\r\n        if (TEMPLATE_MINOR_VERSION in asn1.result) {\r\n            this.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\r\n        if (TEMPLATE_MAJOR_VERSION in this) {\r\n            outputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\r\n        }\r\n        if (TEMPLATE_MINOR_VERSION in this) {\r\n            outputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            templateID: this.templateID\r\n        };\r\n        if (TEMPLATE_MAJOR_VERSION in this)\r\n            res.templateMajorVersion = this.templateMajorVersion;\r\n        if (TEMPLATE_MINOR_VERSION in this)\r\n            res.templateMinorVersion = this.templateMinorVersion;\r\n        return res;\r\n    }\r\n}\n\nconst DISTRIBUTION_POINT$1 = \"distributionPoint\";\r\nconst DISTRIBUTION_POINT_NAMES$1 = \"distributionPointNames\";\r\nconst REASONS = \"reasons\";\r\nconst CRL_ISSUER = \"cRLIssuer\";\r\nconst CRL_ISSUER_NAMES = \"cRLIssuerNames\";\r\nconst CLEAR_PROPS$1l = [\r\n    DISTRIBUTION_POINT$1,\r\n    DISTRIBUTION_POINT_NAMES$1,\r\n    REASONS,\r\n    CRL_ISSUER,\r\n    CRL_ISSUER_NAMES,\r\n];\r\nclass DistributionPoint extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (DISTRIBUTION_POINT$1 in parameters) {\r\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT$1, DistributionPoint.defaultValues(DISTRIBUTION_POINT$1));\r\n        }\r\n        if (REASONS in parameters) {\r\n            this.reasons = pvutils.getParametersValue(parameters, REASONS, DistributionPoint.defaultValues(REASONS));\r\n        }\r\n        if (CRL_ISSUER in parameters) {\r\n            this.cRLIssuer = pvutils.getParametersValue(parameters, CRL_ISSUER, DistributionPoint.defaultValues(CRL_ISSUER));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case DISTRIBUTION_POINT$1:\r\n                return [];\r\n            case REASONS:\r\n                return new asn1js.BitString();\r\n            case CRL_ISSUER:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Choice({\r\n                            value: [\r\n                                new asn1js.Constructed({\r\n                                    name: (names.distributionPoint || EMPTY_STRING),\r\n                                    optional: true,\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 0\r\n                                    },\r\n                                    value: [\r\n                                        new asn1js.Repeated({\r\n                                            name: (names.distributionPointNames || EMPTY_STRING),\r\n                                            value: GeneralName.schema()\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                                new asn1js.Constructed({\r\n                                    name: (names.distributionPoint || EMPTY_STRING),\r\n                                    optional: true,\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 1\r\n                                    },\r\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.reasons || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.cRLIssuer || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.cRLIssuerNames || EMPTY_STRING),\r\n                            value: GeneralName.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1l);\r\n        const asn1 = asn1js.compareSchema(schema, schema, DistributionPoint.schema({\r\n            names: {\r\n                distributionPoint: DISTRIBUTION_POINT$1,\r\n                distributionPointNames: DISTRIBUTION_POINT_NAMES$1,\r\n                reasons: REASONS,\r\n                cRLIssuer: CRL_ISSUER,\r\n                cRLIssuerNames: CRL_ISSUER_NAMES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (DISTRIBUTION_POINT$1 in asn1.result) {\r\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 0) {\r\n                this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\r\n            }\r\n            if (asn1.result.distributionPoint.idBlock.tagNumber === 1) {\r\n                this.distributionPoint = new RelativeDistinguishedNames({\r\n                    schema: new asn1js.Sequence({\r\n                        value: asn1.result.distributionPoint.valueBlock.value\r\n                    })\r\n                });\r\n            }\r\n        }\r\n        if (REASONS in asn1.result) {\r\n            this.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\r\n        }\r\n        if (CRL_ISSUER in asn1.result) {\r\n            this.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.distributionPoint) {\r\n            let internalValue;\r\n            if (this.distributionPoint instanceof Array) {\r\n                internalValue = new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\r\n                });\r\n            }\r\n            else {\r\n                internalValue = new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [this.distributionPoint.toSchema()]\r\n                });\r\n            }\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [internalValue]\r\n            }));\r\n        }\r\n        if (this.reasons) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                valueHex: this.reasons.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        if (this.cRLIssuer) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                value: Array.from(this.cRLIssuer, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {};\r\n        if (this.distributionPoint) {\r\n            if (this.distributionPoint instanceof Array) {\r\n                object.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\r\n            }\r\n            else {\r\n                object.distributionPoint = this.distributionPoint.toJSON();\r\n            }\r\n        }\r\n        if (this.reasons) {\r\n            object.reasons = this.reasons.toJSON();\r\n        }\r\n        if (this.cRLIssuer) {\r\n            object.cRLIssuer = Array.from(this.cRLIssuer, o => o.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nDistributionPoint.CLASS_NAME = \"DistributionPoint\";\n\nconst DISTRIBUTION_POINTS = \"distributionPoints\";\r\nconst CLEAR_PROPS$1k = [\r\n    DISTRIBUTION_POINTS\r\n];\r\nclass CRLDistributionPoints extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.distributionPoints = pvutils.getParametersValue(parameters, DISTRIBUTION_POINTS, CRLDistributionPoints.defaultValues(DISTRIBUTION_POINTS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case DISTRIBUTION_POINTS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.distributionPoints || EMPTY_STRING),\r\n                    value: DistributionPoint.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1k);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CRLDistributionPoints.schema({\r\n            names: {\r\n                distributionPoints: DISTRIBUTION_POINTS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.distributionPoints, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            distributionPoints: Array.from(this.distributionPoints, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nCRLDistributionPoints.CLASS_NAME = \"CRLDistributionPoints\";\n\nconst KEY_PURPOSES = \"keyPurposes\";\r\nconst CLEAR_PROPS$1j = [\r\n    KEY_PURPOSES,\r\n];\r\nclass ExtKeyUsage extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.keyPurposes = pvutils.getParametersValue(parameters, KEY_PURPOSES, ExtKeyUsage.defaultValues(KEY_PURPOSES));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_PURPOSES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.keyPurposes || EMPTY_STRING),\r\n                    value: new asn1js.ObjectIdentifier()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1j);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ExtKeyUsage.schema({\r\n            names: {\r\n                keyPurposes: KEY_PURPOSES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.keyPurposes = Array.from(asn1.result.keyPurposes, (element) => element.valueBlock.toString());\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            keyPurposes: Array.from(this.keyPurposes)\r\n        };\r\n    }\r\n}\r\nExtKeyUsage.CLASS_NAME = \"ExtKeyUsage\";\n\nconst ACCESS_DESCRIPTIONS = \"accessDescriptions\";\r\nclass InfoAccess extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.accessDescriptions = pvutils.getParametersValue(parameters, ACCESS_DESCRIPTIONS, InfoAccess.defaultValues(ACCESS_DESCRIPTIONS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ACCESS_DESCRIPTIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.accessDescriptions || EMPTY_STRING),\r\n                    value: AccessDescription.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            ACCESS_DESCRIPTIONS\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, InfoAccess.schema({\r\n            names: {\r\n                accessDescriptions: ACCESS_DESCRIPTIONS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.accessDescriptions, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            accessDescriptions: Array.from(this.accessDescriptions, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nInfoAccess.CLASS_NAME = \"InfoAccess\";\n\nconst DISTRIBUTION_POINT = \"distributionPoint\";\r\nconst DISTRIBUTION_POINT_NAMES = \"distributionPointNames\";\r\nconst ONLY_CONTAINS_USER_CERTS = \"onlyContainsUserCerts\";\r\nconst ONLY_CONTAINS_CA_CERTS = \"onlyContainsCACerts\";\r\nconst ONLY_SOME_REASON = \"onlySomeReasons\";\r\nconst INDIRECT_CRL = \"indirectCRL\";\r\nconst ONLY_CONTAINS_ATTRIBUTE_CERTS = \"onlyContainsAttributeCerts\";\r\nconst CLEAR_PROPS$1i = [\r\n    DISTRIBUTION_POINT,\r\n    DISTRIBUTION_POINT_NAMES,\r\n    ONLY_CONTAINS_USER_CERTS,\r\n    ONLY_CONTAINS_CA_CERTS,\r\n    ONLY_SOME_REASON,\r\n    INDIRECT_CRL,\r\n    ONLY_CONTAINS_ATTRIBUTE_CERTS,\r\n];\r\nclass IssuingDistributionPoint extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (DISTRIBUTION_POINT in parameters) {\r\n            this.distributionPoint = pvutils.getParametersValue(parameters, DISTRIBUTION_POINT, IssuingDistributionPoint.defaultValues(DISTRIBUTION_POINT));\r\n        }\r\n        this.onlyContainsUserCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_USER_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS));\r\n        this.onlyContainsCACerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_CA_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS));\r\n        if (ONLY_SOME_REASON in parameters) {\r\n            this.onlySomeReasons = pvutils.getParametersValue(parameters, ONLY_SOME_REASON, IssuingDistributionPoint.defaultValues(ONLY_SOME_REASON));\r\n        }\r\n        this.indirectCRL = pvutils.getParametersValue(parameters, INDIRECT_CRL, IssuingDistributionPoint.defaultValues(INDIRECT_CRL));\r\n        this.onlyContainsAttributeCerts = pvutils.getParametersValue(parameters, ONLY_CONTAINS_ATTRIBUTE_CERTS, IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case DISTRIBUTION_POINT:\r\n                return [];\r\n            case ONLY_CONTAINS_USER_CERTS:\r\n                return false;\r\n            case ONLY_CONTAINS_CA_CERTS:\r\n                return false;\r\n            case ONLY_SOME_REASON:\r\n                return 0;\r\n            case INDIRECT_CRL:\r\n                return false;\r\n            case ONLY_CONTAINS_ATTRIBUTE_CERTS:\r\n                return false;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Choice({\r\n                            value: [\r\n                                new asn1js.Constructed({\r\n                                    name: (names.distributionPoint || EMPTY_STRING),\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 0\r\n                                    },\r\n                                    value: [\r\n                                        new asn1js.Repeated({\r\n                                            name: (names.distributionPointNames || EMPTY_STRING),\r\n                                            value: GeneralName.schema()\r\n                                        })\r\n                                    ]\r\n                                }),\r\n                                new asn1js.Constructed({\r\n                                    name: (names.distributionPoint || EMPTY_STRING),\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 1\r\n                                    },\r\n                                    value: RelativeDistinguishedNames.schema().valueBlock.value\r\n                                })\r\n                            ]\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.onlyContainsUserCerts || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.onlyContainsCACerts || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.onlySomeReasons || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 3\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.indirectCRL || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 4\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.onlyContainsAttributeCerts || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 5\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1i);\r\n        const asn1 = asn1js.compareSchema(schema, schema, IssuingDistributionPoint.schema({\r\n            names: {\r\n                distributionPoint: DISTRIBUTION_POINT,\r\n                distributionPointNames: DISTRIBUTION_POINT_NAMES,\r\n                onlyContainsUserCerts: ONLY_CONTAINS_USER_CERTS,\r\n                onlyContainsCACerts: ONLY_CONTAINS_CA_CERTS,\r\n                onlySomeReasons: ONLY_SOME_REASON,\r\n                indirectCRL: INDIRECT_CRL,\r\n                onlyContainsAttributeCerts: ONLY_CONTAINS_ATTRIBUTE_CERTS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (DISTRIBUTION_POINT in asn1.result) {\r\n            switch (true) {\r\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 0):\r\n                    this.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\r\n                    break;\r\n                case (asn1.result.distributionPoint.idBlock.tagNumber === 1):\r\n                    {\r\n                        this.distributionPoint = new RelativeDistinguishedNames({\r\n                            schema: new asn1js.Sequence({\r\n                                value: asn1.result.distributionPoint.valueBlock.value\r\n                            })\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\r\n            }\r\n        }\r\n        if (ONLY_CONTAINS_USER_CERTS in asn1.result) {\r\n            const view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\r\n            this.onlyContainsUserCerts = (view[0] !== 0x00);\r\n        }\r\n        if (ONLY_CONTAINS_CA_CERTS in asn1.result) {\r\n            const view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\r\n            this.onlyContainsCACerts = (view[0] !== 0x00);\r\n        }\r\n        if (ONLY_SOME_REASON in asn1.result) {\r\n            const view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\r\n            this.onlySomeReasons = view[0];\r\n        }\r\n        if (INDIRECT_CRL in asn1.result) {\r\n            const view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\r\n            this.indirectCRL = (view[0] !== 0x00);\r\n        }\r\n        if (ONLY_CONTAINS_ATTRIBUTE_CERTS in asn1.result) {\r\n            const view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\r\n            this.onlyContainsAttributeCerts = (view[0] !== 0x00);\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.distributionPoint) {\r\n            let value;\r\n            if (this.distributionPoint instanceof Array) {\r\n                value = new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: Array.from(this.distributionPoint, o => o.toSchema())\r\n                });\r\n            }\r\n            else {\r\n                value = this.distributionPoint.toSchema();\r\n                value.idBlock.tagClass = 3;\r\n                value.idBlock.tagNumber = 1;\r\n            }\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [value]\r\n            }));\r\n        }\r\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                valueHex: (new Uint8Array([0xFF])).buffer\r\n            }));\r\n        }\r\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                valueHex: (new Uint8Array([0xFF])).buffer\r\n            }));\r\n        }\r\n        if (this.onlySomeReasons !== undefined) {\r\n            const buffer = new ArrayBuffer(1);\r\n            const view = new Uint8Array(buffer);\r\n            view[0] = this.onlySomeReasons;\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 3\r\n                },\r\n                valueHex: buffer\r\n            }));\r\n        }\r\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 4\r\n                },\r\n                valueHex: (new Uint8Array([0xFF])).buffer\r\n            }));\r\n        }\r\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 5\r\n                },\r\n                valueHex: (new Uint8Array([0xFF])).buffer\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const obj = {};\r\n        if (this.distributionPoint) {\r\n            if (this.distributionPoint instanceof Array) {\r\n                obj.distributionPoint = Array.from(this.distributionPoint, o => o.toJSON());\r\n            }\r\n            else {\r\n                obj.distributionPoint = this.distributionPoint.toJSON();\r\n            }\r\n        }\r\n        if (this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_USER_CERTS)) {\r\n            obj.onlyContainsUserCerts = this.onlyContainsUserCerts;\r\n        }\r\n        if (this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_CA_CERTS)) {\r\n            obj.onlyContainsCACerts = this.onlyContainsCACerts;\r\n        }\r\n        if (ONLY_SOME_REASON in this) {\r\n            obj.onlySomeReasons = this.onlySomeReasons;\r\n        }\r\n        if (this.indirectCRL !== IssuingDistributionPoint.defaultValues(INDIRECT_CRL)) {\r\n            obj.indirectCRL = this.indirectCRL;\r\n        }\r\n        if (this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(ONLY_CONTAINS_ATTRIBUTE_CERTS)) {\r\n            obj.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\r\n        }\r\n        return obj;\r\n    }\r\n}\r\nIssuingDistributionPoint.CLASS_NAME = \"IssuingDistributionPoint\";\n\nconst BASE = \"base\";\r\nconst MINIMUM = \"minimum\";\r\nconst MAXIMUM = \"maximum\";\r\nconst CLEAR_PROPS$1h = [\r\n    BASE,\r\n    MINIMUM,\r\n    MAXIMUM\r\n];\r\nclass GeneralSubtree extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.base = pvutils.getParametersValue(parameters, BASE, GeneralSubtree.defaultValues(BASE));\r\n        this.minimum = pvutils.getParametersValue(parameters, MINIMUM, GeneralSubtree.defaultValues(MINIMUM));\r\n        if (MAXIMUM in parameters) {\r\n            this.maximum = pvutils.getParametersValue(parameters, MAXIMUM, GeneralSubtree.defaultValues(MAXIMUM));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case BASE:\r\n                return new GeneralName();\r\n            case MINIMUM:\r\n                return 0;\r\n            case MAXIMUM:\r\n                return 0;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                GeneralName.schema(names.base || {}),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Integer({ name: (names.minimum || EMPTY_STRING) })]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [new asn1js.Integer({ name: (names.maximum || EMPTY_STRING) })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1h);\r\n        const asn1 = asn1js.compareSchema(schema, schema, GeneralSubtree.schema({\r\n            names: {\r\n                base: {\r\n                    names: {\r\n                        blockName: BASE\r\n                    }\r\n                },\r\n                minimum: MINIMUM,\r\n                maximum: MAXIMUM\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.base = new GeneralName({ schema: asn1.result.base });\r\n        if (MINIMUM in asn1.result) {\r\n            if (asn1.result.minimum.valueBlock.isHexOnly)\r\n                this.minimum = asn1.result.minimum;\r\n            else\r\n                this.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n        }\r\n        if (MAXIMUM in asn1.result) {\r\n            if (asn1.result.maximum.valueBlock.isHexOnly)\r\n                this.maximum = asn1.result.maximum;\r\n            else\r\n                this.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.base.toSchema());\r\n        if (this.minimum !== 0) {\r\n            let valueMinimum = 0;\r\n            if (this.minimum instanceof asn1js.Integer) {\r\n                valueMinimum = this.minimum;\r\n            }\r\n            else {\r\n                valueMinimum = new asn1js.Integer({ value: this.minimum });\r\n            }\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [valueMinimum]\r\n            }));\r\n        }\r\n        if (MAXIMUM in this) {\r\n            let valueMaximum = 0;\r\n            if (this.maximum instanceof asn1js.Integer) {\r\n                valueMaximum = this.maximum;\r\n            }\r\n            else {\r\n                valueMaximum = new asn1js.Integer({ value: this.maximum });\r\n            }\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [valueMaximum]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            base: this.base.toJSON()\r\n        };\r\n        if (this.minimum !== 0) {\r\n            if (typeof this.minimum === \"number\") {\r\n                res.minimum = this.minimum;\r\n            }\r\n            else {\r\n                res.minimum = this.minimum.toJSON();\r\n            }\r\n        }\r\n        if (this.maximum !== undefined) {\r\n            if (typeof this.maximum === \"number\") {\r\n                res.maximum = this.maximum;\r\n            }\r\n            else {\r\n                res.maximum = this.maximum.toJSON();\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\nGeneralSubtree.CLASS_NAME = \"GeneralSubtree\";\n\nconst PERMITTED_SUBTREES = \"permittedSubtrees\";\r\nconst EXCLUDED_SUBTREES = \"excludedSubtrees\";\r\nconst CLEAR_PROPS$1g = [\r\n    PERMITTED_SUBTREES,\r\n    EXCLUDED_SUBTREES\r\n];\r\nclass NameConstraints extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (PERMITTED_SUBTREES in parameters) {\r\n            this.permittedSubtrees = pvutils.getParametersValue(parameters, PERMITTED_SUBTREES, NameConstraints.defaultValues(PERMITTED_SUBTREES));\r\n        }\r\n        if (EXCLUDED_SUBTREES in parameters) {\r\n            this.excludedSubtrees = pvutils.getParametersValue(parameters, EXCLUDED_SUBTREES, NameConstraints.defaultValues(EXCLUDED_SUBTREES));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case PERMITTED_SUBTREES:\r\n            case EXCLUDED_SUBTREES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.permittedSubtrees || EMPTY_STRING),\r\n                            value: GeneralSubtree.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.excludedSubtrees || EMPTY_STRING),\r\n                            value: GeneralSubtree.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1g);\r\n        const asn1 = asn1js.compareSchema(schema, schema, NameConstraints.schema({\r\n            names: {\r\n                permittedSubtrees: PERMITTED_SUBTREES,\r\n                excludedSubtrees: EXCLUDED_SUBTREES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (PERMITTED_SUBTREES in asn1.result)\r\n            this.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n        if (EXCLUDED_SUBTREES in asn1.result)\r\n            this.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.permittedSubtrees) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: Array.from(this.permittedSubtrees, o => o.toSchema())\r\n            }));\r\n        }\r\n        if (this.excludedSubtrees) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.excludedSubtrees, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {};\r\n        if (this.permittedSubtrees) {\r\n            object.permittedSubtrees = Array.from(this.permittedSubtrees, o => o.toJSON());\r\n        }\r\n        if (this.excludedSubtrees) {\r\n            object.excludedSubtrees = Array.from(this.excludedSubtrees, o => o.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nNameConstraints.CLASS_NAME = \"NameConstraints\";\n\nconst REQUIRE_EXPLICIT_POLICY = \"requireExplicitPolicy\";\r\nconst INHIBIT_POLICY_MAPPING = \"inhibitPolicyMapping\";\r\nconst CLEAR_PROPS$1f = [\r\n    REQUIRE_EXPLICIT_POLICY,\r\n    INHIBIT_POLICY_MAPPING,\r\n];\r\nclass PolicyConstraints extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (REQUIRE_EXPLICIT_POLICY in parameters) {\r\n            this.requireExplicitPolicy = pvutils.getParametersValue(parameters, REQUIRE_EXPLICIT_POLICY, PolicyConstraints.defaultValues(REQUIRE_EXPLICIT_POLICY));\r\n        }\r\n        if (INHIBIT_POLICY_MAPPING in parameters) {\r\n            this.inhibitPolicyMapping = pvutils.getParametersValue(parameters, INHIBIT_POLICY_MAPPING, PolicyConstraints.defaultValues(INHIBIT_POLICY_MAPPING));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case REQUIRE_EXPLICIT_POLICY:\r\n                return 0;\r\n            case INHIBIT_POLICY_MAPPING:\r\n                return 0;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Primitive({\r\n                    name: (names.requireExplicitPolicy || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.inhibitPolicyMapping || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1f);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyConstraints.schema({\r\n            names: {\r\n                requireExplicitPolicy: REQUIRE_EXPLICIT_POLICY,\r\n                inhibitPolicyMapping: INHIBIT_POLICY_MAPPING\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (REQUIRE_EXPLICIT_POLICY in asn1.result) {\r\n            const field1 = asn1.result.requireExplicitPolicy;\r\n            field1.idBlock.tagClass = 1;\r\n            field1.idBlock.tagNumber = 2;\r\n            const ber1 = field1.toBER(false);\r\n            const int1 = asn1js.fromBER(ber1);\r\n            AsnError.assert(int1, \"Integer\");\r\n            this.requireExplicitPolicy = int1.result.valueBlock.valueDec;\r\n        }\r\n        if (INHIBIT_POLICY_MAPPING in asn1.result) {\r\n            const field2 = asn1.result.inhibitPolicyMapping;\r\n            field2.idBlock.tagClass = 1;\r\n            field2.idBlock.tagNumber = 2;\r\n            const ber2 = field2.toBER(false);\r\n            const int2 = asn1js.fromBER(ber2);\r\n            AsnError.assert(int2, \"Integer\");\r\n            this.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (REQUIRE_EXPLICIT_POLICY in this) {\r\n            const int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });\r\n            int1.idBlock.tagClass = 3;\r\n            int1.idBlock.tagNumber = 0;\r\n            outputArray.push(int1);\r\n        }\r\n        if (INHIBIT_POLICY_MAPPING in this) {\r\n            const int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });\r\n            int2.idBlock.tagClass = 3;\r\n            int2.idBlock.tagNumber = 1;\r\n            outputArray.push(int2);\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (REQUIRE_EXPLICIT_POLICY in this) {\r\n            res.requireExplicitPolicy = this.requireExplicitPolicy;\r\n        }\r\n        if (INHIBIT_POLICY_MAPPING in this) {\r\n            res.inhibitPolicyMapping = this.inhibitPolicyMapping;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nPolicyConstraints.CLASS_NAME = \"PolicyConstraints\";\n\nconst ISSUER_DOMAIN_POLICY = \"issuerDomainPolicy\";\r\nconst SUBJECT_DOMAIN_POLICY = \"subjectDomainPolicy\";\r\nconst CLEAR_PROPS$1e = [\r\n    ISSUER_DOMAIN_POLICY,\r\n    SUBJECT_DOMAIN_POLICY\r\n];\r\nclass PolicyMapping extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.issuerDomainPolicy = pvutils.getParametersValue(parameters, ISSUER_DOMAIN_POLICY, PolicyMapping.defaultValues(ISSUER_DOMAIN_POLICY));\r\n        this.subjectDomainPolicy = pvutils.getParametersValue(parameters, SUBJECT_DOMAIN_POLICY, PolicyMapping.defaultValues(SUBJECT_DOMAIN_POLICY));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ISSUER_DOMAIN_POLICY:\r\n                return EMPTY_STRING;\r\n            case SUBJECT_DOMAIN_POLICY:\r\n                return EMPTY_STRING;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.issuerDomainPolicy || EMPTY_STRING) }),\r\n                new asn1js.ObjectIdentifier({ name: (names.subjectDomainPolicy || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1e);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMapping.schema({\r\n            names: {\r\n                issuerDomainPolicy: ISSUER_DOMAIN_POLICY,\r\n                subjectDomainPolicy: SUBJECT_DOMAIN_POLICY\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\r\n        this.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }),\r\n                new asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            issuerDomainPolicy: this.issuerDomainPolicy,\r\n            subjectDomainPolicy: this.subjectDomainPolicy\r\n        };\r\n    }\r\n}\r\nPolicyMapping.CLASS_NAME = \"PolicyMapping\";\n\nconst MAPPINGS = \"mappings\";\r\nconst CLEAR_PROPS$1d = [\r\n    MAPPINGS,\r\n];\r\nclass PolicyMappings extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.mappings = pvutils.getParametersValue(parameters, MAPPINGS, PolicyMappings.defaultValues(MAPPINGS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case MAPPINGS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.mappings || EMPTY_STRING),\r\n                    value: PolicyMapping.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1d);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PolicyMappings.schema({\r\n            names: {\r\n                mappings: MAPPINGS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.mappings, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            mappings: Array.from(this.mappings, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nPolicyMappings.CLASS_NAME = \"PolicyMappings\";\n\nconst NOT_BEFORE$1 = \"notBefore\";\r\nconst NOT_AFTER$1 = \"notAfter\";\r\nconst CLEAR_PROPS$1c = [\r\n    NOT_BEFORE$1,\r\n    NOT_AFTER$1\r\n];\r\nclass PrivateKeyUsagePeriod extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (NOT_BEFORE$1 in parameters) {\r\n            this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE$1, PrivateKeyUsagePeriod.defaultValues(NOT_BEFORE$1));\r\n        }\r\n        if (NOT_AFTER$1 in parameters) {\r\n            this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER$1, PrivateKeyUsagePeriod.defaultValues(NOT_AFTER$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case NOT_BEFORE$1:\r\n                return new Date();\r\n            case NOT_AFTER$1:\r\n                return new Date();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Primitive({\r\n                    name: (names.notBefore || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.notAfter || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1c);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyUsagePeriod.schema({\r\n            names: {\r\n                notBefore: NOT_BEFORE$1,\r\n                notAfter: NOT_AFTER$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (NOT_BEFORE$1 in asn1.result) {\r\n            const localNotBefore = new asn1js.GeneralizedTime();\r\n            localNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\r\n            this.notBefore = localNotBefore.toDate();\r\n        }\r\n        if (NOT_AFTER$1 in asn1.result) {\r\n            const localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\r\n            localNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\r\n            this.notAfter = localNotAfter.toDate();\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (NOT_BEFORE$1 in this) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHexView\r\n            }));\r\n        }\r\n        if (NOT_AFTER$1 in this) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                valueHex: (new asn1js.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHexView\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (this.notBefore) {\r\n            res.notBefore = this.notBefore;\r\n        }\r\n        if (this.notAfter) {\r\n            res.notAfter = this.notAfter;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nPrivateKeyUsagePeriod.CLASS_NAME = \"PrivateKeyUsagePeriod\";\n\nconst ID = \"id\";\r\nconst TYPE$2 = \"type\";\r\nconst VALUES = \"values\";\r\nconst QC_STATEMENT_CLEAR_PROPS = [\r\n    ID,\r\n    TYPE$2\r\n];\r\nconst QC_STATEMENTS_CLEAR_PROPS = [\r\n    VALUES\r\n];\r\nclass QCStatement extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.id = pvutils.getParametersValue(parameters, ID, QCStatement.defaultValues(ID));\r\n        if (TYPE$2 in parameters) {\r\n            this.type = pvutils.getParametersValue(parameters, TYPE$2, QCStatement.defaultValues(TYPE$2));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ID:\r\n                return EMPTY_STRING;\r\n            case TYPE$2:\r\n                return new asn1js.Null();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ID:\r\n                return (memberValue === EMPTY_STRING);\r\n            case TYPE$2:\r\n                return (memberValue instanceof asn1js.Null);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.id || EMPTY_STRING) }),\r\n                new asn1js.Any({\r\n                    name: (names.type || EMPTY_STRING),\r\n                    optional: true\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, QC_STATEMENT_CLEAR_PROPS);\r\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatement.schema({\r\n            names: {\r\n                id: ID,\r\n                type: TYPE$2\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.id = asn1.result.id.valueBlock.toString();\r\n        if (TYPE$2 in asn1.result)\r\n            this.type = asn1.result.type;\r\n    }\r\n    toSchema() {\r\n        const value = [\r\n            new asn1js.ObjectIdentifier({ value: this.id })\r\n        ];\r\n        if (TYPE$2 in this)\r\n            value.push(this.type);\r\n        return (new asn1js.Sequence({\r\n            value,\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            id: this.id\r\n        };\r\n        if (this.type) {\r\n            object.type = this.type.toJSON();\r\n        }\r\n        return object;\r\n    }\r\n}\r\nQCStatement.CLASS_NAME = \"QCStatement\";\r\nclass QCStatements extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.values = pvutils.getParametersValue(parameters, VALUES, QCStatements.defaultValues(VALUES));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VALUES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VALUES:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.values || EMPTY_STRING),\r\n                    value: QCStatement.schema(names.value || {})\r\n                }),\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, QC_STATEMENTS_CLEAR_PROPS);\r\n        const asn1 = asn1js.compareSchema(schema, schema, QCStatements.schema({\r\n            names: {\r\n                values: VALUES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.values, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            values: Array.from(this.values, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nQCStatements.CLASS_NAME = \"QCStatements\";\n\nvar _a;\r\nclass ECNamedCurves {\r\n    static register(name, id, size) {\r\n        this.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\r\n    }\r\n    static find(nameOrId) {\r\n        return this.namedCurves[nameOrId.toLowerCase()] || null;\r\n    }\r\n}\r\n_a = ECNamedCurves;\r\nECNamedCurves.namedCurves = {};\r\n(() => {\r\n    _a.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\r\n    _a.register(\"P-384\", \"1.3.132.0.34\", 48);\r\n    _a.register(\"P-521\", \"1.3.132.0.35\", 66);\r\n    _a.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\r\n    _a.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\r\n    _a.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\r\n})();\n\nconst X = \"x\";\r\nconst Y = \"y\";\r\nconst NAMED_CURVE$1 = \"namedCurve\";\r\nclass ECPublicKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.x = pvutils.getParametersValue(parameters, X, ECPublicKey.defaultValues(X));\r\n        this.y = pvutils.getParametersValue(parameters, Y, ECPublicKey.defaultValues(Y));\r\n        this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE$1, ECPublicKey.defaultValues(NAMED_CURVE$1));\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case X:\r\n            case Y:\r\n                return EMPTY_BUFFER;\r\n            case NAMED_CURVE$1:\r\n                return EMPTY_STRING;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case X:\r\n            case Y:\r\n                return memberValue instanceof ArrayBuffer &&\r\n                    (pvutils.isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n            case NAMED_CURVE$1:\r\n                return typeof memberValue === \"string\" &&\r\n                    memberValue === ECPublicKey.defaultValues(memberName);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema() {\r\n        return new asn1js.RawData();\r\n    }\r\n    fromSchema(schema1) {\r\n        const view = BufferSourceConverter.toUint8Array(schema1);\r\n        if (view[0] !== 0x04) {\r\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n        }\r\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\r\n        if (!namedCurve) {\r\n            throw new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n        }\r\n        const coordinateLength = namedCurve.size;\r\n        if (view.byteLength !== (coordinateLength * 2 + 1)) {\r\n            throw new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n        }\r\n        this.namedCurve = namedCurve.name;\r\n        this.x = view.slice(1, coordinateLength + 1).buffer;\r\n        this.y = view.slice(1 + coordinateLength, coordinateLength * 2 + 1).buffer;\r\n    }\r\n    toSchema() {\r\n        return new asn1js.RawData({\r\n            data: pvutils.utilConcatBuf((new Uint8Array([0x04])).buffer, this.x, this.y)\r\n        });\r\n    }\r\n    toJSON() {\r\n        const namedCurve = ECNamedCurves.find(this.namedCurve);\r\n        return {\r\n            crv: namedCurve ? namedCurve.name : this.namedCurve,\r\n            x: pvutils.toBase64(pvutils.arrayBufferToString(this.x), true, true, false),\r\n            y: pvutils.toBase64(pvutils.arrayBufferToString(this.y), true, true, false)\r\n        };\r\n    }\r\n    fromJSON(json) {\r\n        ParameterError.assert(\"json\", json, \"crv\", \"x\", \"y\");\r\n        let coordinateLength = 0;\r\n        const namedCurve = ECNamedCurves.find(json.crv);\r\n        if (namedCurve) {\r\n            this.namedCurve = namedCurve.id;\r\n            coordinateLength = namedCurve.size;\r\n        }\r\n        const xConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.x, true));\r\n        if (xConvertBuffer.byteLength < coordinateLength) {\r\n            this.x = new ArrayBuffer(coordinateLength);\r\n            const view = new Uint8Array(this.x);\r\n            const convertBufferView = new Uint8Array(xConvertBuffer);\r\n            view.set(convertBufferView, 1);\r\n        }\r\n        else {\r\n            this.x = xConvertBuffer.slice(0, coordinateLength);\r\n        }\r\n        const yConvertBuffer = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.y, true));\r\n        if (yConvertBuffer.byteLength < coordinateLength) {\r\n            this.y = new ArrayBuffer(coordinateLength);\r\n            const view = new Uint8Array(this.y);\r\n            const convertBufferView = new Uint8Array(yConvertBuffer);\r\n            view.set(convertBufferView, 1);\r\n        }\r\n        else {\r\n            this.y = yConvertBuffer.slice(0, coordinateLength);\r\n        }\r\n    }\r\n}\r\nECPublicKey.CLASS_NAME = \"ECPublicKey\";\n\nconst MODULUS$1 = \"modulus\";\r\nconst PUBLIC_EXPONENT$1 = \"publicExponent\";\r\nconst CLEAR_PROPS$1b = [MODULUS$1, PUBLIC_EXPONENT$1];\r\nclass RSAPublicKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS$1, RSAPublicKey.defaultValues(MODULUS$1));\r\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT$1, RSAPublicKey.defaultValues(PUBLIC_EXPONENT$1));\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case MODULUS$1:\r\n                return new asn1js.Integer();\r\n            case PUBLIC_EXPONENT$1:\r\n                return new asn1js.Integer();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1b);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPublicKey.schema({\r\n            names: {\r\n                modulus: MODULUS$1,\r\n                publicExponent: PUBLIC_EXPONENT$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.modulus = asn1.result.modulus.convertFromDER(256);\r\n        this.publicExponent = asn1.result.publicExponent;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.modulus.convertToDER(),\r\n                this.publicExponent\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\r\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\r\n        };\r\n    }\r\n    fromJSON(json) {\r\n        ParameterError.assert(\"json\", json, \"n\", \"e\");\r\n        const array = pvutils.stringToArrayBuffer(pvutils.fromBase64(json.n, true));\r\n        this.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, pvutils.nearestPowerOf2(array.byteLength))) });\r\n        this.publicExponent = new asn1js.Integer({ valueHex: pvutils.stringToArrayBuffer(pvutils.fromBase64(json.e, true)).slice(0, 3) });\r\n    }\r\n}\r\nRSAPublicKey.CLASS_NAME = \"RSAPublicKey\";\n\nconst ALGORITHM$1 = \"algorithm\";\r\nconst SUBJECT_PUBLIC_KEY = \"subjectPublicKey\";\r\nconst CLEAR_PROPS$1a = [ALGORITHM$1, SUBJECT_PUBLIC_KEY];\r\nclass PublicKeyInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM$1, PublicKeyInfo.defaultValues(ALGORITHM$1));\r\n        this.subjectPublicKey = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY, PublicKeyInfo.defaultValues(SUBJECT_PUBLIC_KEY));\r\n        const parsedKey = pvutils.getParametersValue(parameters, \"parsedKey\", null);\r\n        if (parsedKey) {\r\n            this.parsedKey = parsedKey;\r\n        }\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get parsedKey() {\r\n        if (this._parsedKey === undefined) {\r\n            switch (this.algorithm.algorithmId) {\r\n                case \"1.2.840.10045.2.1\":\r\n                    if (\"algorithmParams\" in this.algorithm) {\r\n                        if (this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName()) {\r\n                            try {\r\n                                this._parsedKey = new ECPublicKey({\r\n                                    namedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\r\n                                    schema: this.subjectPublicKey.valueBlock.valueHexView\r\n                                });\r\n                            }\r\n                            catch (ex) {\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"1.2.840.113549.1.1.1\":\r\n                    {\r\n                        const publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHexView);\r\n                        if (publicKeyASN1.offset !== -1) {\r\n                            try {\r\n                                this._parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\r\n                            }\r\n                            catch (ex) {\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n            this._parsedKey || (this._parsedKey = null);\r\n        }\r\n        return this._parsedKey || undefined;\r\n    }\r\n    set parsedKey(value) {\r\n        this._parsedKey = value;\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ALGORITHM$1:\r\n                return new AlgorithmIdentifier();\r\n            case SUBJECT_PUBLIC_KEY:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.algorithm || {}),\r\n                new asn1js.BitString({ name: (names.subjectPublicKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1a);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PublicKeyInfo.schema({\r\n            names: {\r\n                algorithm: {\r\n                    names: {\r\n                        blockName: ALGORITHM$1\r\n                    }\r\n                },\r\n                subjectPublicKey: SUBJECT_PUBLIC_KEY\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n        this.subjectPublicKey = asn1.result.subjectPublicKey;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.algorithm.toSchema(),\r\n                this.subjectPublicKey\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        if (!this.parsedKey) {\r\n            return {\r\n                algorithm: this.algorithm.toJSON(),\r\n                subjectPublicKey: this.subjectPublicKey.toJSON(),\r\n            };\r\n        }\r\n        const jwk = {};\r\n        switch (this.algorithm.algorithmId) {\r\n            case \"1.2.840.10045.2.1\":\r\n                jwk.kty = \"EC\";\r\n                break;\r\n            case \"1.2.840.113549.1.1.1\":\r\n                jwk.kty = \"RSA\";\r\n                break;\r\n        }\r\n        const publicKeyJWK = this.parsedKey.toJSON();\r\n        Object.assign(jwk, publicKeyJWK);\r\n        return jwk;\r\n    }\r\n    fromJSON(json) {\r\n        if (\"kty\" in json) {\r\n            switch (json.kty.toUpperCase()) {\r\n                case \"EC\":\r\n                    this.parsedKey = new ECPublicKey({ json });\r\n                    this.algorithm = new AlgorithmIdentifier({\r\n                        algorithmId: \"1.2.840.10045.2.1\",\r\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n                    });\r\n                    break;\r\n                case \"RSA\":\r\n                    this.parsedKey = new RSAPublicKey({ json });\r\n                    this.algorithm = new AlgorithmIdentifier({\r\n                        algorithmId: \"1.2.840.113549.1.1.1\",\r\n                        algorithmParams: new asn1js.Null()\r\n                    });\r\n                    break;\r\n                default:\r\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n            }\r\n            this.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n        }\r\n    }\r\n    async importKey(publicKey, crypto = getCrypto(true)) {\r\n        try {\r\n            if (!publicKey) {\r\n                throw new Error(\"Need to provide publicKey input parameter\");\r\n            }\r\n            const exportedKey = await crypto.exportKey(\"spki\", publicKey);\r\n            const asn1 = asn1js.fromBER(exportedKey);\r\n            try {\r\n                this.fromSchema(asn1.result);\r\n            }\r\n            catch (exception) {\r\n                throw new Error(\"Error during initializing object from schema\");\r\n            }\r\n        }\r\n        catch (e) {\r\n            const message = e instanceof Error ? e.message : `${e}`;\r\n            throw new Error(`Error during exporting public key: ${message}`);\r\n        }\r\n    }\r\n}\r\nPublicKeyInfo.CLASS_NAME = \"PublicKeyInfo\";\n\nconst VERSION$l = \"version\";\r\nconst PRIVATE_KEY$1 = \"privateKey\";\r\nconst NAMED_CURVE = \"namedCurve\";\r\nconst PUBLIC_KEY$1 = \"publicKey\";\r\nconst CLEAR_PROPS$19 = [\r\n    VERSION$l,\r\n    PRIVATE_KEY$1,\r\n    NAMED_CURVE,\r\n    PUBLIC_KEY$1\r\n];\r\nclass ECPrivateKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$l, ECPrivateKey.defaultValues(VERSION$l));\r\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY$1, ECPrivateKey.defaultValues(PRIVATE_KEY$1));\r\n        if (NAMED_CURVE in parameters) {\r\n            this.namedCurve = pvutils.getParametersValue(parameters, NAMED_CURVE, ECPrivateKey.defaultValues(NAMED_CURVE));\r\n        }\r\n        if (PUBLIC_KEY$1 in parameters) {\r\n            this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY$1, ECPrivateKey.defaultValues(PUBLIC_KEY$1));\r\n        }\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$l:\r\n                return 1;\r\n            case PRIVATE_KEY$1:\r\n                return new asn1js.OctetString();\r\n            case NAMED_CURVE:\r\n                return EMPTY_STRING;\r\n            case PUBLIC_KEY$1:\r\n                return new ECPublicKey();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$l:\r\n                return (memberValue === ECPrivateKey.defaultValues(memberName));\r\n            case PRIVATE_KEY$1:\r\n                return (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\r\n            case NAMED_CURVE:\r\n                return (memberValue === EMPTY_STRING);\r\n            case PUBLIC_KEY$1:\r\n                return ((ECPublicKey.compareWithDefault(NAMED_CURVE, memberValue.namedCurve)) &&\r\n                    (ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\r\n                    (ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.ObjectIdentifier({ name: (names.namedCurve || EMPTY_STRING) })\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$19);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ECPrivateKey.schema({\r\n            names: {\r\n                version: VERSION$l,\r\n                privateKey: PRIVATE_KEY$1,\r\n                namedCurve: NAMED_CURVE,\r\n                publicKey: PUBLIC_KEY$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.privateKey = asn1.result.privateKey;\r\n        if (NAMED_CURVE in asn1.result) {\r\n            this.namedCurve = asn1.result.namedCurve.valueBlock.toString();\r\n        }\r\n        if (PUBLIC_KEY$1 in asn1.result) {\r\n            const publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\r\n            if (NAMED_CURVE in this) {\r\n                publicKeyData.namedCurve = this.namedCurve;\r\n            }\r\n            this.publicKey = new ECPublicKey(publicKeyData);\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            new asn1js.Integer({ value: this.version }),\r\n            this.privateKey\r\n        ];\r\n        if (this.namedCurve) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.ObjectIdentifier({ value: this.namedCurve })\r\n                ]\r\n            }));\r\n        }\r\n        if (this.publicKey) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [\r\n                    new asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\r\n                ]\r\n            }));\r\n        }\r\n        return new asn1js.Sequence({\r\n            value: outputArray\r\n        });\r\n    }\r\n    toJSON() {\r\n        if (!this.namedCurve || ECPrivateKey.compareWithDefault(NAMED_CURVE, this.namedCurve)) {\r\n            throw new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\r\n        }\r\n        const curve = ECNamedCurves.find(this.namedCurve);\r\n        const privateKeyJSON = {\r\n            crv: curve ? curve.name : this.namedCurve,\r\n            d: pvtsutils.Convert.ToBase64Url(this.privateKey.valueBlock.valueHexView),\r\n        };\r\n        if (this.publicKey) {\r\n            const publicKeyJSON = this.publicKey.toJSON();\r\n            privateKeyJSON.x = publicKeyJSON.x;\r\n            privateKeyJSON.y = publicKeyJSON.y;\r\n        }\r\n        return privateKeyJSON;\r\n    }\r\n    fromJSON(json) {\r\n        ParameterError.assert(\"json\", json, \"crv\", \"d\");\r\n        let coordinateLength = 0;\r\n        const curve = ECNamedCurves.find(json.crv);\r\n        if (curve) {\r\n            this.namedCurve = curve.id;\r\n            coordinateLength = curve.size;\r\n        }\r\n        const convertBuffer = pvtsutils.Convert.FromBase64Url(json.d);\r\n        if (convertBuffer.byteLength < coordinateLength) {\r\n            const buffer = new ArrayBuffer(coordinateLength);\r\n            const view = new Uint8Array(buffer);\r\n            const convertBufferView = new Uint8Array(convertBuffer);\r\n            view.set(convertBufferView, 1);\r\n            this.privateKey = new asn1js.OctetString({ valueHex: buffer });\r\n        }\r\n        else {\r\n            this.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coordinateLength) });\r\n        }\r\n        if (json.x && json.y) {\r\n            this.publicKey = new ECPublicKey({ json });\r\n        }\r\n    }\r\n}\r\nECPrivateKey.CLASS_NAME = \"ECPrivateKey\";\n\nconst PRIME = \"prime\";\r\nconst EXPONENT = \"exponent\";\r\nconst COEFFICIENT$1 = \"coefficient\";\r\nconst CLEAR_PROPS$18 = [\r\n    PRIME,\r\n    EXPONENT,\r\n    COEFFICIENT$1,\r\n];\r\nclass OtherPrimeInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.prime = pvutils.getParametersValue(parameters, PRIME, OtherPrimeInfo.defaultValues(PRIME));\r\n        this.exponent = pvutils.getParametersValue(parameters, EXPONENT, OtherPrimeInfo.defaultValues(EXPONENT));\r\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT$1, OtherPrimeInfo.defaultValues(COEFFICIENT$1));\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case PRIME:\r\n                return new asn1js.Integer();\r\n            case EXPONENT:\r\n                return new asn1js.Integer();\r\n            case COEFFICIENT$1:\r\n                return new asn1js.Integer();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.prime || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.exponent || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$18);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OtherPrimeInfo.schema({\r\n            names: {\r\n                prime: PRIME,\r\n                exponent: EXPONENT,\r\n                coefficient: COEFFICIENT$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.prime = asn1.result.prime.convertFromDER();\r\n        this.exponent = asn1.result.exponent.convertFromDER();\r\n        this.coefficient = asn1.result.coefficient.convertFromDER();\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.prime.convertToDER(),\r\n                this.exponent.convertToDER(),\r\n                this.coefficient.convertToDER()\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            r: pvtsutils.Convert.ToBase64Url(this.prime.valueBlock.valueHexView),\r\n            d: pvtsutils.Convert.ToBase64Url(this.exponent.valueBlock.valueHexView),\r\n            t: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\r\n        };\r\n    }\r\n    fromJSON(json) {\r\n        ParameterError.assert(\"json\", json, \"r\", \"d\", \"r\");\r\n        this.prime = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.r) });\r\n        this.exponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\r\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.t) });\r\n    }\r\n}\r\nOtherPrimeInfo.CLASS_NAME = \"OtherPrimeInfo\";\n\nconst VERSION$k = \"version\";\r\nconst MODULUS = \"modulus\";\r\nconst PUBLIC_EXPONENT = \"publicExponent\";\r\nconst PRIVATE_EXPONENT = \"privateExponent\";\r\nconst PRIME1 = \"prime1\";\r\nconst PRIME2 = \"prime2\";\r\nconst EXPONENT1 = \"exponent1\";\r\nconst EXPONENT2 = \"exponent2\";\r\nconst COEFFICIENT = \"coefficient\";\r\nconst OTHER_PRIME_INFOS = \"otherPrimeInfos\";\r\nconst CLEAR_PROPS$17 = [\r\n    VERSION$k,\r\n    MODULUS,\r\n    PUBLIC_EXPONENT,\r\n    PRIVATE_EXPONENT,\r\n    PRIME1,\r\n    PRIME2,\r\n    EXPONENT1,\r\n    EXPONENT2,\r\n    COEFFICIENT,\r\n    OTHER_PRIME_INFOS\r\n];\r\nclass RSAPrivateKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$k, RSAPrivateKey.defaultValues(VERSION$k));\r\n        this.modulus = pvutils.getParametersValue(parameters, MODULUS, RSAPrivateKey.defaultValues(MODULUS));\r\n        this.publicExponent = pvutils.getParametersValue(parameters, PUBLIC_EXPONENT, RSAPrivateKey.defaultValues(PUBLIC_EXPONENT));\r\n        this.privateExponent = pvutils.getParametersValue(parameters, PRIVATE_EXPONENT, RSAPrivateKey.defaultValues(PRIVATE_EXPONENT));\r\n        this.prime1 = pvutils.getParametersValue(parameters, PRIME1, RSAPrivateKey.defaultValues(PRIME1));\r\n        this.prime2 = pvutils.getParametersValue(parameters, PRIME2, RSAPrivateKey.defaultValues(PRIME2));\r\n        this.exponent1 = pvutils.getParametersValue(parameters, EXPONENT1, RSAPrivateKey.defaultValues(EXPONENT1));\r\n        this.exponent2 = pvutils.getParametersValue(parameters, EXPONENT2, RSAPrivateKey.defaultValues(EXPONENT2));\r\n        this.coefficient = pvutils.getParametersValue(parameters, COEFFICIENT, RSAPrivateKey.defaultValues(COEFFICIENT));\r\n        if (OTHER_PRIME_INFOS in parameters) {\r\n            this.otherPrimeInfos = pvutils.getParametersValue(parameters, OTHER_PRIME_INFOS, RSAPrivateKey.defaultValues(OTHER_PRIME_INFOS));\r\n        }\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$k:\r\n                return 0;\r\n            case MODULUS:\r\n                return new asn1js.Integer();\r\n            case PUBLIC_EXPONENT:\r\n                return new asn1js.Integer();\r\n            case PRIVATE_EXPONENT:\r\n                return new asn1js.Integer();\r\n            case PRIME1:\r\n                return new asn1js.Integer();\r\n            case PRIME2:\r\n                return new asn1js.Integer();\r\n            case EXPONENT1:\r\n                return new asn1js.Integer();\r\n            case EXPONENT2:\r\n                return new asn1js.Integer();\r\n            case COEFFICIENT:\r\n                return new asn1js.Integer();\r\n            case OTHER_PRIME_INFOS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.modulus || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.publicExponent || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.privateExponent || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.prime1 || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.prime2 || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.exponent1 || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.exponent2 || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.coefficient || EMPTY_STRING) }),\r\n                new asn1js.Sequence({\r\n                    optional: true,\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.otherPrimeInfosName || EMPTY_STRING),\r\n                            value: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$17);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RSAPrivateKey.schema({\r\n            names: {\r\n                version: VERSION$k,\r\n                modulus: MODULUS,\r\n                publicExponent: PUBLIC_EXPONENT,\r\n                privateExponent: PRIVATE_EXPONENT,\r\n                prime1: PRIME1,\r\n                prime2: PRIME2,\r\n                exponent1: EXPONENT1,\r\n                exponent2: EXPONENT2,\r\n                coefficient: COEFFICIENT,\r\n                otherPrimeInfo: {\r\n                    names: {\r\n                        blockName: OTHER_PRIME_INFOS\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.modulus = asn1.result.modulus.convertFromDER(256);\r\n        this.publicExponent = asn1.result.publicExponent;\r\n        this.privateExponent = asn1.result.privateExponent.convertFromDER(256);\r\n        this.prime1 = asn1.result.prime1.convertFromDER(128);\r\n        this.prime2 = asn1.result.prime2.convertFromDER(128);\r\n        this.exponent1 = asn1.result.exponent1.convertFromDER(128);\r\n        this.exponent2 = asn1.result.exponent2.convertFromDER(128);\r\n        this.coefficient = asn1.result.coefficient.convertFromDER(128);\r\n        if (OTHER_PRIME_INFOS in asn1.result)\r\n            this.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(this.modulus.convertToDER());\r\n        outputArray.push(this.publicExponent);\r\n        outputArray.push(this.privateExponent.convertToDER());\r\n        outputArray.push(this.prime1.convertToDER());\r\n        outputArray.push(this.prime2.convertToDER());\r\n        outputArray.push(this.exponent1.convertToDER());\r\n        outputArray.push(this.exponent2.convertToDER());\r\n        outputArray.push(this.coefficient.convertToDER());\r\n        if (this.otherPrimeInfos) {\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.otherPrimeInfos, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const jwk = {\r\n            n: pvtsutils.Convert.ToBase64Url(this.modulus.valueBlock.valueHexView),\r\n            e: pvtsutils.Convert.ToBase64Url(this.publicExponent.valueBlock.valueHexView),\r\n            d: pvtsutils.Convert.ToBase64Url(this.privateExponent.valueBlock.valueHexView),\r\n            p: pvtsutils.Convert.ToBase64Url(this.prime1.valueBlock.valueHexView),\r\n            q: pvtsutils.Convert.ToBase64Url(this.prime2.valueBlock.valueHexView),\r\n            dp: pvtsutils.Convert.ToBase64Url(this.exponent1.valueBlock.valueHexView),\r\n            dq: pvtsutils.Convert.ToBase64Url(this.exponent2.valueBlock.valueHexView),\r\n            qi: pvtsutils.Convert.ToBase64Url(this.coefficient.valueBlock.valueHexView),\r\n        };\r\n        if (this.otherPrimeInfos) {\r\n            jwk.oth = Array.from(this.otherPrimeInfos, o => o.toJSON());\r\n        }\r\n        return jwk;\r\n    }\r\n    fromJSON(json) {\r\n        ParameterError.assert(\"json\", json, \"n\", \"e\", \"d\", \"p\", \"q\", \"dp\", \"dq\", \"qi\");\r\n        this.modulus = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.n) });\r\n        this.publicExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.e) });\r\n        this.privateExponent = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.d) });\r\n        this.prime1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.p) });\r\n        this.prime2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.q) });\r\n        this.exponent1 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dp) });\r\n        this.exponent2 = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.dq) });\r\n        this.coefficient = new asn1js.Integer({ valueHex: pvtsutils.Convert.FromBase64Url(json.qi) });\r\n        if (json.oth) {\r\n            this.otherPrimeInfos = Array.from(json.oth, (element) => new OtherPrimeInfo({ json: element }));\r\n        }\r\n    }\r\n}\r\nRSAPrivateKey.CLASS_NAME = \"RSAPrivateKey\";\n\nconst VERSION$j = \"version\";\r\nconst PRIVATE_KEY_ALGORITHM = \"privateKeyAlgorithm\";\r\nconst PRIVATE_KEY = \"privateKey\";\r\nconst ATTRIBUTES$5 = \"attributes\";\r\nconst PARSED_KEY = \"parsedKey\";\r\nconst CLEAR_PROPS$16 = [\r\n    VERSION$j,\r\n    PRIVATE_KEY_ALGORITHM,\r\n    PRIVATE_KEY,\r\n    ATTRIBUTES$5\r\n];\r\nclass PrivateKeyInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$j, PrivateKeyInfo.defaultValues(VERSION$j));\r\n        this.privateKeyAlgorithm = pvutils.getParametersValue(parameters, PRIVATE_KEY_ALGORITHM, PrivateKeyInfo.defaultValues(PRIVATE_KEY_ALGORITHM));\r\n        this.privateKey = pvutils.getParametersValue(parameters, PRIVATE_KEY, PrivateKeyInfo.defaultValues(PRIVATE_KEY));\r\n        if (ATTRIBUTES$5 in parameters) {\r\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$5, PrivateKeyInfo.defaultValues(ATTRIBUTES$5));\r\n        }\r\n        if (PARSED_KEY in parameters) {\r\n            this.parsedKey = pvutils.getParametersValue(parameters, PARSED_KEY, PrivateKeyInfo.defaultValues(PARSED_KEY));\r\n        }\r\n        if (parameters.json) {\r\n            this.fromJSON(parameters.json);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$j:\r\n                return 0;\r\n            case PRIVATE_KEY_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case PRIVATE_KEY:\r\n                return new asn1js.OctetString();\r\n            case ATTRIBUTES$5:\r\n                return [];\r\n            case PARSED_KEY:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                AlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n                new asn1js.OctetString({ name: (names.privateKey || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.attributes || EMPTY_STRING),\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$16);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PrivateKeyInfo.schema({\r\n            names: {\r\n                version: VERSION$j,\r\n                privateKeyAlgorithm: {\r\n                    names: {\r\n                        blockName: PRIVATE_KEY_ALGORITHM\r\n                    }\r\n                },\r\n                privateKey: PRIVATE_KEY,\r\n                attributes: ATTRIBUTES$5\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n        this.privateKey = asn1.result.privateKey;\r\n        if (ATTRIBUTES$5 in asn1.result)\r\n            this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n        switch (this.privateKeyAlgorithm.algorithmId) {\r\n            case \"1.2.840.113549.1.1.1\":\r\n                {\r\n                    const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\r\n                    if (privateKeyASN1.offset !== -1)\r\n                        this.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n                }\r\n                break;\r\n            case \"1.2.840.10045.2.1\":\r\n                if (\"algorithmParams\" in this.privateKeyAlgorithm) {\r\n                    if (this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier) {\r\n                        const privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHexView);\r\n                        if (privateKeyASN1.offset !== -1) {\r\n                            this.parsedKey = new ECPrivateKey({\r\n                                namedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n                                schema: privateKeyASN1.result\r\n                            });\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            new asn1js.Integer({ value: this.version }),\r\n            this.privateKeyAlgorithm.toSchema(),\r\n            this.privateKey\r\n        ];\r\n        if (this.attributes) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: Array.from(this.attributes, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        if (!this.parsedKey) {\r\n            const object = {\r\n                version: this.version,\r\n                privateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n                privateKey: this.privateKey.toJSON(),\r\n            };\r\n            if (this.attributes) {\r\n                object.attributes = Array.from(this.attributes, o => o.toJSON());\r\n            }\r\n            return object;\r\n        }\r\n        const jwk = {};\r\n        switch (this.privateKeyAlgorithm.algorithmId) {\r\n            case \"1.2.840.10045.2.1\":\r\n                jwk.kty = \"EC\";\r\n                break;\r\n            case \"1.2.840.113549.1.1.1\":\r\n                jwk.kty = \"RSA\";\r\n                break;\r\n        }\r\n        const publicKeyJWK = this.parsedKey.toJSON();\r\n        Object.assign(jwk, publicKeyJWK);\r\n        return jwk;\r\n    }\r\n    fromJSON(json) {\r\n        if (\"kty\" in json) {\r\n            switch (json.kty.toUpperCase()) {\r\n                case \"EC\":\r\n                    this.parsedKey = new ECPrivateKey({ json });\r\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n                        algorithmId: \"1.2.840.10045.2.1\",\r\n                        algorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n                    });\r\n                    break;\r\n                case \"RSA\":\r\n                    this.parsedKey = new RSAPrivateKey({ json });\r\n                    this.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n                        algorithmId: \"1.2.840.113549.1.1.1\",\r\n                        algorithmParams: new asn1js.Null()\r\n                    });\r\n                    break;\r\n                default:\r\n                    throw new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n            }\r\n            this.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n        }\r\n    }\r\n}\r\nPrivateKeyInfo.CLASS_NAME = \"PrivateKeyInfo\";\n\nconst CONTENT_TYPE$1 = \"contentType\";\r\nconst CONTENT_ENCRYPTION_ALGORITHM = \"contentEncryptionAlgorithm\";\r\nconst ENCRYPTED_CONTENT = \"encryptedContent\";\r\nconst CLEAR_PROPS$15 = [\r\n    CONTENT_TYPE$1,\r\n    CONTENT_ENCRYPTION_ALGORITHM,\r\n    ENCRYPTED_CONTENT,\r\n];\r\nclass EncryptedContentInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE$1, EncryptedContentInfo.defaultValues(CONTENT_TYPE$1));\r\n        this.contentEncryptionAlgorithm = pvutils.getParametersValue(parameters, CONTENT_ENCRYPTION_ALGORITHM, EncryptedContentInfo.defaultValues(CONTENT_ENCRYPTION_ALGORITHM));\r\n        if (ENCRYPTED_CONTENT in parameters && parameters.encryptedContent) {\r\n            this.encryptedContent = parameters.encryptedContent;\r\n            if ((this.encryptedContent.idBlock.tagClass === 1) &&\r\n                (this.encryptedContent.idBlock.tagNumber === 4)) {\r\n                if (this.encryptedContent.idBlock.isConstructed === false) {\r\n                    const constrString = new asn1js.OctetString({\r\n                        idBlock: { isConstructed: true },\r\n                        isConstructed: true\r\n                    });\r\n                    let offset = 0;\r\n                    const valueHex = this.encryptedContent.valueBlock.valueHexView.slice().buffer;\r\n                    let length = valueHex.byteLength;\r\n                    const pieceSize = 1024;\r\n                    while (length > 0) {\r\n                        const pieceView = new Uint8Array(valueHex, offset, ((offset + pieceSize) > valueHex.byteLength) ? (valueHex.byteLength - offset) : pieceSize);\r\n                        const _array = new ArrayBuffer(pieceView.length);\r\n                        const _view = new Uint8Array(_array);\r\n                        for (let i = 0; i < _view.length; i++)\r\n                            _view[i] = pieceView[i];\r\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n                        length -= pieceView.length;\r\n                        offset += pieceView.length;\r\n                    }\r\n                    this.encryptedContent = constrString;\r\n                }\r\n            }\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CONTENT_TYPE$1:\r\n                return EMPTY_STRING;\r\n            case CONTENT_ENCRYPTION_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case ENCRYPTED_CONTENT:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CONTENT_TYPE$1:\r\n                return (memberValue === EMPTY_STRING);\r\n            case CONTENT_ENCRYPTION_ALGORITHM:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case ENCRYPTED_CONTENT:\r\n                return (memberValue.isEqual(EncryptedContentInfo.defaultValues(ENCRYPTED_CONTENT)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.contentType || EMPTY_STRING) }),\r\n                AlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.Constructed({\r\n                            name: (names.encryptedContent || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                            value: [\r\n                                new asn1js.Repeated({\r\n                                    value: new asn1js.OctetString()\r\n                                })\r\n                            ]\r\n                        }),\r\n                        new asn1js.Primitive({\r\n                            name: (names.encryptedContent || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$15);\r\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedContentInfo.schema({\r\n            names: {\r\n                contentType: CONTENT_TYPE$1,\r\n                contentEncryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: CONTENT_ENCRYPTION_ALGORITHM\r\n                    }\r\n                },\r\n                encryptedContent: ENCRYPTED_CONTENT\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.contentType = asn1.result.contentType.valueBlock.toString();\r\n        this.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n        if (ENCRYPTED_CONTENT in asn1.result) {\r\n            this.encryptedContent = asn1.result.encryptedContent;\r\n            this.encryptedContent.idBlock.tagClass = 1;\r\n            this.encryptedContent.idBlock.tagNumber = 4;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const sequenceLengthBlock = {\r\n            isIndefiniteForm: false\r\n        };\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n        outputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n        if (this.encryptedContent) {\r\n            sequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n            const encryptedValue = this.encryptedContent;\r\n            encryptedValue.idBlock.tagClass = 3;\r\n            encryptedValue.idBlock.tagNumber = 0;\r\n            encryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n            outputArray.push(encryptedValue);\r\n        }\r\n        return (new asn1js.Sequence({\r\n            lenBlock: sequenceLengthBlock,\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            contentType: this.contentType,\r\n            contentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n        };\r\n        if (this.encryptedContent) {\r\n            res.encryptedContent = this.encryptedContent.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n    getEncryptedContent() {\r\n        if (!this.encryptedContent) {\r\n            throw new Error(\"Parameter 'encryptedContent' is undefined\");\r\n        }\r\n        return asn1js.OctetString.prototype.getValue.call(this.encryptedContent);\r\n    }\r\n}\r\nEncryptedContentInfo.CLASS_NAME = \"EncryptedContentInfo\";\n\nconst HASH_ALGORITHM$4 = \"hashAlgorithm\";\r\nconst MASK_GEN_ALGORITHM$1 = \"maskGenAlgorithm\";\r\nconst SALT_LENGTH = \"saltLength\";\r\nconst TRAILER_FIELD = \"trailerField\";\r\nconst CLEAR_PROPS$14 = [\r\n    HASH_ALGORITHM$4,\r\n    MASK_GEN_ALGORITHM$1,\r\n    SALT_LENGTH,\r\n    TRAILER_FIELD\r\n];\r\nclass RSASSAPSSParams extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$4, RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4));\r\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM$1, RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1));\r\n        this.saltLength = pvutils.getParametersValue(parameters, SALT_LENGTH, RSASSAPSSParams.defaultValues(SALT_LENGTH));\r\n        this.trailerField = pvutils.getParametersValue(parameters, TRAILER_FIELD, RSASSAPSSParams.defaultValues(TRAILER_FIELD));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM$4:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.3.14.3.2.26\",\r\n                    algorithmParams: new asn1js.Null()\r\n                });\r\n            case MASK_GEN_ALGORITHM$1:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.2.840.113549.1.1.8\",\r\n                    algorithmParams: (new AlgorithmIdentifier({\r\n                        algorithmId: \"1.3.14.3.2.26\",\r\n                        algorithmParams: new asn1js.Null()\r\n                    })).toSchema()\r\n                });\r\n            case SALT_LENGTH:\r\n                return 20;\r\n            case TRAILER_FIELD:\r\n                return 1;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    optional: true,\r\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    optional: true,\r\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    optional: true,\r\n                    value: [new asn1js.Integer({ name: (names.saltLength || EMPTY_STRING) })]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 3\r\n                    },\r\n                    optional: true,\r\n                    value: [new asn1js.Integer({ name: (names.trailerField || EMPTY_STRING) })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$14);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RSASSAPSSParams.schema({\r\n            names: {\r\n                hashAlgorithm: {\r\n                    names: {\r\n                        blockName: HASH_ALGORITHM$4\r\n                    }\r\n                },\r\n                maskGenAlgorithm: {\r\n                    names: {\r\n                        blockName: MASK_GEN_ALGORITHM$1\r\n                    }\r\n                },\r\n                saltLength: SALT_LENGTH,\r\n                trailerField: TRAILER_FIELD\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (HASH_ALGORITHM$4 in asn1.result)\r\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n        if (MASK_GEN_ALGORITHM$1 in asn1.result)\r\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\r\n        if (SALT_LENGTH in asn1.result)\r\n            this.saltLength = asn1.result.saltLength.valueBlock.valueDec;\r\n        if (TRAILER_FIELD in asn1.result)\r\n            this.trailerField = asn1.result.trailerField.valueBlock.valueDec;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.hashAlgorithm.toSchema()]\r\n            }));\r\n        }\r\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [this.maskGenAlgorithm.toSchema()]\r\n            }));\r\n        }\r\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                value: [new asn1js.Integer({ value: this.saltLength })]\r\n            }));\r\n        }\r\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 3\r\n                },\r\n                value: [new asn1js.Integer({ value: this.trailerField })]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(HASH_ALGORITHM$4))) {\r\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n        }\r\n        if (!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(MASK_GEN_ALGORITHM$1))) {\r\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n        }\r\n        if (this.saltLength !== RSASSAPSSParams.defaultValues(SALT_LENGTH)) {\r\n            res.saltLength = this.saltLength;\r\n        }\r\n        if (this.trailerField !== RSASSAPSSParams.defaultValues(TRAILER_FIELD)) {\r\n            res.trailerField = this.trailerField;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRSASSAPSSParams.CLASS_NAME = \"RSASSAPSSParams\";\n\nconst SALT = \"salt\";\r\nconst ITERATION_COUNT = \"iterationCount\";\r\nconst KEY_LENGTH = \"keyLength\";\r\nconst PRF = \"prf\";\r\nconst CLEAR_PROPS$13 = [\r\n    SALT,\r\n    ITERATION_COUNT,\r\n    KEY_LENGTH,\r\n    PRF\r\n];\r\nclass PBKDF2Params extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.salt = pvutils.getParametersValue(parameters, SALT, PBKDF2Params.defaultValues(SALT));\r\n        this.iterationCount = pvutils.getParametersValue(parameters, ITERATION_COUNT, PBKDF2Params.defaultValues(ITERATION_COUNT));\r\n        if (KEY_LENGTH in parameters) {\r\n            this.keyLength = pvutils.getParametersValue(parameters, KEY_LENGTH, PBKDF2Params.defaultValues(KEY_LENGTH));\r\n        }\r\n        if (PRF in parameters) {\r\n            this.prf = pvutils.getParametersValue(parameters, PRF, PBKDF2Params.defaultValues(PRF));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SALT:\r\n                return {};\r\n            case ITERATION_COUNT:\r\n                return (-1);\r\n            case KEY_LENGTH:\r\n                return 0;\r\n            case PRF:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.3.14.3.2.26\",\r\n                    algorithmParams: new asn1js.Null()\r\n                });\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.OctetString({ name: (names.saltPrimitive || EMPTY_STRING) }),\r\n                        AlgorithmIdentifier.schema(names.saltConstructed || {})\r\n                    ]\r\n                }),\r\n                new asn1js.Integer({ name: (names.iterationCount || EMPTY_STRING) }),\r\n                new asn1js.Integer({\r\n                    name: (names.keyLength || EMPTY_STRING),\r\n                    optional: true\r\n                }),\r\n                AlgorithmIdentifier.schema(names.prf || {\r\n                    names: {\r\n                        optional: true\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$13);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PBKDF2Params.schema({\r\n            names: {\r\n                saltPrimitive: SALT,\r\n                saltConstructed: {\r\n                    names: {\r\n                        blockName: SALT\r\n                    }\r\n                },\r\n                iterationCount: ITERATION_COUNT,\r\n                keyLength: KEY_LENGTH,\r\n                prf: {\r\n                    names: {\r\n                        blockName: PRF,\r\n                        optional: true\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.salt = asn1.result.salt;\r\n        this.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n        if (KEY_LENGTH in asn1.result)\r\n            this.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n        if (PRF in asn1.result)\r\n            this.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.salt);\r\n        outputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n        if (KEY_LENGTH in this) {\r\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\r\n                outputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n        }\r\n        if (this.prf) {\r\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\r\n                outputArray.push(this.prf.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            salt: this.salt.toJSON(),\r\n            iterationCount: this.iterationCount\r\n        };\r\n        if (KEY_LENGTH in this) {\r\n            if (PBKDF2Params.defaultValues(KEY_LENGTH) !== this.keyLength)\r\n                res.keyLength = this.keyLength;\r\n        }\r\n        if (this.prf) {\r\n            if (PBKDF2Params.defaultValues(PRF).isEqual(this.prf) === false)\r\n                res.prf = this.prf.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nPBKDF2Params.CLASS_NAME = \"PBKDF2Params\";\n\nconst KEY_DERIVATION_FUNC = \"keyDerivationFunc\";\r\nconst ENCRYPTION_SCHEME = \"encryptionScheme\";\r\nconst CLEAR_PROPS$12 = [\r\n    KEY_DERIVATION_FUNC,\r\n    ENCRYPTION_SCHEME\r\n];\r\nclass PBES2Params extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.keyDerivationFunc = pvutils.getParametersValue(parameters, KEY_DERIVATION_FUNC, PBES2Params.defaultValues(KEY_DERIVATION_FUNC));\r\n        this.encryptionScheme = pvutils.getParametersValue(parameters, ENCRYPTION_SCHEME, PBES2Params.defaultValues(ENCRYPTION_SCHEME));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_DERIVATION_FUNC:\r\n                return new AlgorithmIdentifier();\r\n            case ENCRYPTION_SCHEME:\r\n                return new AlgorithmIdentifier();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n                AlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$12);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PBES2Params.schema({\r\n            names: {\r\n                keyDerivationFunc: {\r\n                    names: {\r\n                        blockName: KEY_DERIVATION_FUNC\r\n                    }\r\n                },\r\n                encryptionScheme: {\r\n                    names: {\r\n                        blockName: ENCRYPTION_SCHEME\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n        this.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.keyDerivationFunc.toSchema(),\r\n                this.encryptionScheme.toSchema()\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            keyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n            encryptionScheme: this.encryptionScheme.toJSON()\r\n        };\r\n    }\r\n}\r\nPBES2Params.CLASS_NAME = \"PBES2Params\";\n\nclass AbstractCryptoEngine {\r\n    constructor(parameters) {\r\n        this.crypto = parameters.crypto;\r\n        this.subtle = \"webkitSubtle\" in parameters.crypto\r\n            ? parameters.crypto.webkitSubtle\r\n            : parameters.crypto.subtle;\r\n        this.name = pvutils.getParametersValue(parameters, \"name\", EMPTY_STRING);\r\n    }\r\n    async encrypt(...args) {\r\n        return this.subtle.encrypt(...args);\r\n    }\r\n    async decrypt(...args) {\r\n        return this.subtle.decrypt(...args);\r\n    }\r\n    sign(...args) {\r\n        return this.subtle.sign(...args);\r\n    }\r\n    async verify(...args) {\r\n        return this.subtle.verify(...args);\r\n    }\r\n    async digest(...args) {\r\n        return this.subtle.digest(...args);\r\n    }\r\n    async generateKey(...args) {\r\n        return this.subtle.generateKey(...args);\r\n    }\r\n    async deriveKey(...args) {\r\n        return this.subtle.deriveKey(...args);\r\n    }\r\n    async deriveBits(...args) {\r\n        return this.subtle.deriveBits(...args);\r\n    }\r\n    async wrapKey(...args) {\r\n        return this.subtle.wrapKey(...args);\r\n    }\r\n    async unwrapKey(...args) {\r\n        return this.subtle.unwrapKey(...args);\r\n    }\r\n    exportKey(...args) {\r\n        return this.subtle.exportKey(...args);\r\n    }\r\n    importKey(...args) {\r\n        return this.subtle.importKey(...args);\r\n    }\r\n    getRandomValues(array) {\r\n        return this.crypto.getRandomValues(array);\r\n    }\r\n}\n\nasync function makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount) {\r\n    let u;\r\n    let v;\r\n    const result = [];\r\n    switch (hashAlgorithm.toUpperCase()) {\r\n        case \"SHA-1\":\r\n            u = 20;\r\n            v = 64;\r\n            break;\r\n        case \"SHA-256\":\r\n            u = 32;\r\n            v = 64;\r\n            break;\r\n        case \"SHA-384\":\r\n            u = 48;\r\n            v = 128;\r\n            break;\r\n        case \"SHA-512\":\r\n            u = 64;\r\n            v = 128;\r\n            break;\r\n        default:\r\n            throw new Error(\"Unsupported hashing algorithm\");\r\n    }\r\n    const passwordViewInitial = new Uint8Array(password);\r\n    const passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n    const passwordTransformedView = new Uint8Array(passwordTransformed);\r\n    for (let i = 0; i < passwordViewInitial.length; i++) {\r\n        passwordTransformedView[i * 2] = 0x00;\r\n        passwordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n    }\r\n    passwordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n    passwordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n    password = passwordTransformed.slice(0);\r\n    const D = new ArrayBuffer(v);\r\n    const dView = new Uint8Array(D);\r\n    for (let i = 0; i < D.byteLength; i++)\r\n        dView[i] = 3;\r\n    const saltLength = salt.byteLength;\r\n    const sLen = v * Math.ceil(saltLength / v);\r\n    const S = new ArrayBuffer(sLen);\r\n    const sView = new Uint8Array(S);\r\n    const saltView = new Uint8Array(salt);\r\n    for (let i = 0; i < sLen; i++)\r\n        sView[i] = saltView[i % saltLength];\r\n    const passwordLength = password.byteLength;\r\n    const pLen = v * Math.ceil(passwordLength / v);\r\n    const P = new ArrayBuffer(pLen);\r\n    const pView = new Uint8Array(P);\r\n    const passwordView = new Uint8Array(password);\r\n    for (let i = 0; i < pLen; i++)\r\n        pView[i] = passwordView[i % passwordLength];\r\n    const sPlusPLength = S.byteLength + P.byteLength;\r\n    let I = new ArrayBuffer(sPlusPLength);\r\n    let iView = new Uint8Array(I);\r\n    iView.set(sView);\r\n    iView.set(pView, sView.length);\r\n    const c = Math.ceil((keyLength >> 3) / u);\r\n    let internalSequence = Promise.resolve(I);\r\n    for (let i = 0; i <= c; i++) {\r\n        internalSequence = internalSequence.then(_I => {\r\n            const dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n            const dAndIView = new Uint8Array(dAndI);\r\n            dAndIView.set(dView);\r\n            dAndIView.set(iView, dView.length);\r\n            return dAndI;\r\n        });\r\n        for (let j = 0; j < iterationCount; j++)\r\n            internalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n        internalSequence = internalSequence.then(roundBuffer => {\r\n            const B = new ArrayBuffer(v);\r\n            const bView = new Uint8Array(B);\r\n            for (let j = 0; j < B.byteLength; j++)\r\n                bView[j] = roundBuffer[j % roundBuffer.byteLength];\r\n            const k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n            const iRound = [];\r\n            let sliceStart = 0;\r\n            let sliceLength = v;\r\n            for (let j = 0; j < k; j++) {\r\n                const chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n                sliceStart += v;\r\n                if ((sliceStart + v) > I.byteLength)\r\n                    sliceLength = I.byteLength - sliceStart;\r\n                let x = 0x1ff;\r\n                for (let l = (B.byteLength - 1); l >= 0; l--) {\r\n                    x >>= 8;\r\n                    x += bView[l] + chunk[l];\r\n                    chunk[l] = (x & 0xff);\r\n                }\r\n                iRound.push(...chunk);\r\n            }\r\n            I = new ArrayBuffer(iRound.length);\r\n            iView = new Uint8Array(I);\r\n            iView.set(iRound);\r\n            result.push(...(new Uint8Array(roundBuffer)));\r\n            return I;\r\n        });\r\n    }\r\n    internalSequence = internalSequence.then(() => {\r\n        const resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n        const resultView = new Uint8Array(resultBuffer);\r\n        resultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n        return resultBuffer;\r\n    });\r\n    return internalSequence;\r\n}\r\nfunction prepareAlgorithm(data) {\r\n    const res = typeof data === \"string\"\r\n        ? { name: data }\r\n        : data;\r\n    if (\"hash\" in res) {\r\n        return {\r\n            ...res,\r\n            hash: prepareAlgorithm(res.hash)\r\n        };\r\n    }\r\n    return res;\r\n}\r\nclass CryptoEngine extends AbstractCryptoEngine {\r\n    async importKey(format, keyData, algorithm, extractable, keyUsages) {\r\n        var _a, _b, _c, _d, _e, _f;\r\n        let jwk = {};\r\n        const alg = prepareAlgorithm(algorithm);\r\n        switch (format.toLowerCase()) {\r\n            case \"raw\":\r\n                return this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n            case \"spki\":\r\n                {\r\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\r\n                    AsnError.assert(asn1, \"keyData\");\r\n                    const publicKeyInfo = new PublicKeyInfo();\r\n                    try {\r\n                        publicKeyInfo.fromSchema(asn1.result);\r\n                    }\r\n                    catch {\r\n                        throw new ArgumentError(\"Incorrect keyData\");\r\n                    }\r\n                    switch (alg.name.toUpperCase()) {\r\n                        case \"RSA-PSS\":\r\n                            {\r\n                                if (!alg.hash) {\r\n                                    throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\r\n                                }\r\n                                switch (alg.hash.name.toUpperCase()) {\r\n                                    case \"SHA-1\":\r\n                                        jwk.alg = \"PS1\";\r\n                                        break;\r\n                                    case \"SHA-256\":\r\n                                        jwk.alg = \"PS256\";\r\n                                        break;\r\n                                    case \"SHA-384\":\r\n                                        jwk.alg = \"PS384\";\r\n                                        break;\r\n                                    case \"SHA-512\":\r\n                                        jwk.alg = \"PS512\";\r\n                                        break;\r\n                                    default:\r\n                                        throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\r\n                                }\r\n                            }\r\n                        case \"RSASSA-PKCS1-V1_5\":\r\n                            {\r\n                                keyUsages = [\"verify\"];\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n                                if (!jwk.alg) {\r\n                                    if (!alg.hash) {\r\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\r\n                                    }\r\n                                    switch (alg.hash.name.toUpperCase()) {\r\n                                        case \"SHA-1\":\r\n                                            jwk.alg = \"RS1\";\r\n                                            break;\r\n                                        case \"SHA-256\":\r\n                                            jwk.alg = \"RS256\";\r\n                                            break;\r\n                                        case \"SHA-384\":\r\n                                            jwk.alg = \"RS384\";\r\n                                            break;\r\n                                        case \"SHA-512\":\r\n                                            jwk.alg = \"RS512\";\r\n                                            break;\r\n                                        default:\r\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\r\n                                    }\r\n                                }\r\n                                const publicKeyJSON = publicKeyInfo.toJSON();\r\n                                Object.assign(jwk, publicKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"ECDSA\":\r\n                            keyUsages = [\"verify\"];\r\n                        case \"ECDH\":\r\n                            {\r\n                                jwk = {\r\n                                    kty: \"EC\",\r\n                                    ext: extractable,\r\n                                    key_ops: keyUsages\r\n                                };\r\n                                if (publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\") {\r\n                                    throw new Error(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n                                }\r\n                                const publicKeyJSON = publicKeyInfo.toJSON();\r\n                                Object.assign(jwk, publicKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"RSA-OAEP\":\r\n                            {\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                if (this.name.toLowerCase() === \"safari\")\r\n                                    jwk.alg = \"RSA-OAEP\";\r\n                                else {\r\n                                    if (!alg.hash) {\r\n                                        throw new ParameterError(\"hash\", \"algorithm.hash\", \"Incorrect hash algorithm: Hash algorithm is missed\");\r\n                                    }\r\n                                    switch (alg.hash.name.toUpperCase()) {\r\n                                        case \"SHA-1\":\r\n                                            jwk.alg = \"RSA-OAEP\";\r\n                                            break;\r\n                                        case \"SHA-256\":\r\n                                            jwk.alg = \"RSA-OAEP-256\";\r\n                                            break;\r\n                                        case \"SHA-384\":\r\n                                            jwk.alg = \"RSA-OAEP-384\";\r\n                                            break;\r\n                                        case \"SHA-512\":\r\n                                            jwk.alg = \"RSA-OAEP-512\";\r\n                                            break;\r\n                                        default:\r\n                                            throw new Error(`Incorrect hash algorithm: ${alg.hash.name.toUpperCase()}`);\r\n                                    }\r\n                                }\r\n                                const publicKeyJSON = publicKeyInfo.toJSON();\r\n                                Object.assign(jwk, publicKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"RSAES-PKCS1-V1_5\":\r\n                            {\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                jwk.alg = \"PS1\";\r\n                                const publicKeyJSON = publicKeyInfo.toJSON();\r\n                                Object.assign(jwk, publicKeyJSON);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\r\n                    }\r\n                }\r\n                break;\r\n            case \"pkcs8\":\r\n                {\r\n                    const privateKeyInfo = new PrivateKeyInfo();\r\n                    const asn1 = asn1js.fromBER(pvtsutils.BufferSourceConverter.toArrayBuffer(keyData));\r\n                    AsnError.assert(asn1, \"keyData\");\r\n                    try {\r\n                        privateKeyInfo.fromSchema(asn1.result);\r\n                    }\r\n                    catch (ex) {\r\n                        throw new Error(\"Incorrect keyData\");\r\n                    }\r\n                    if (!privateKeyInfo.parsedKey)\r\n                        throw new Error(\"Incorrect keyData\");\r\n                    switch (alg.name.toUpperCase()) {\r\n                        case \"RSA-PSS\":\r\n                            {\r\n                                switch ((_a = alg.hash) === null || _a === void 0 ? void 0 : _a.name.toUpperCase()) {\r\n                                    case \"SHA-1\":\r\n                                        jwk.alg = \"PS1\";\r\n                                        break;\r\n                                    case \"SHA-256\":\r\n                                        jwk.alg = \"PS256\";\r\n                                        break;\r\n                                    case \"SHA-384\":\r\n                                        jwk.alg = \"PS384\";\r\n                                        break;\r\n                                    case \"SHA-512\":\r\n                                        jwk.alg = \"PS512\";\r\n                                        break;\r\n                                    default:\r\n                                        throw new Error(`Incorrect hash algorithm: ${(_b = alg.hash) === null || _b === void 0 ? void 0 : _b.name.toUpperCase()}`);\r\n                                }\r\n                            }\r\n                        case \"RSASSA-PKCS1-V1_5\":\r\n                            {\r\n                                keyUsages = [\"sign\"];\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n                                    throw new Error(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n                                if ((\"alg\" in jwk) === false) {\r\n                                    switch ((_c = alg.hash) === null || _c === void 0 ? void 0 : _c.name.toUpperCase()) {\r\n                                        case \"SHA-1\":\r\n                                            jwk.alg = \"RS1\";\r\n                                            break;\r\n                                        case \"SHA-256\":\r\n                                            jwk.alg = \"RS256\";\r\n                                            break;\r\n                                        case \"SHA-384\":\r\n                                            jwk.alg = \"RS384\";\r\n                                            break;\r\n                                        case \"SHA-512\":\r\n                                            jwk.alg = \"RS512\";\r\n                                            break;\r\n                                        default:\r\n                                            throw new Error(`Incorrect hash algorithm: ${(_d = alg.hash) === null || _d === void 0 ? void 0 : _d.name.toUpperCase()}`);\r\n                                    }\r\n                                }\r\n                                const privateKeyJSON = privateKeyInfo.toJSON();\r\n                                Object.assign(jwk, privateKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"ECDSA\":\r\n                            keyUsages = [\"sign\"];\r\n                        case \"ECDH\":\r\n                            {\r\n                                jwk = {\r\n                                    kty: \"EC\",\r\n                                    ext: extractable,\r\n                                    key_ops: keyUsages\r\n                                };\r\n                                if (privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n                                    throw new Error(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n                                const privateKeyJSON = privateKeyInfo.toJSON();\r\n                                Object.assign(jwk, privateKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"RSA-OAEP\":\r\n                            {\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                if (this.name.toLowerCase() === \"safari\")\r\n                                    jwk.alg = \"RSA-OAEP\";\r\n                                else {\r\n                                    switch ((_e = alg.hash) === null || _e === void 0 ? void 0 : _e.name.toUpperCase()) {\r\n                                        case \"SHA-1\":\r\n                                            jwk.alg = \"RSA-OAEP\";\r\n                                            break;\r\n                                        case \"SHA-256\":\r\n                                            jwk.alg = \"RSA-OAEP-256\";\r\n                                            break;\r\n                                        case \"SHA-384\":\r\n                                            jwk.alg = \"RSA-OAEP-384\";\r\n                                            break;\r\n                                        case \"SHA-512\":\r\n                                            jwk.alg = \"RSA-OAEP-512\";\r\n                                            break;\r\n                                        default:\r\n                                            throw new Error(`Incorrect hash algorithm: ${(_f = alg.hash) === null || _f === void 0 ? void 0 : _f.name.toUpperCase()}`);\r\n                                    }\r\n                                }\r\n                                const privateKeyJSON = privateKeyInfo.toJSON();\r\n                                Object.assign(jwk, privateKeyJSON);\r\n                            }\r\n                            break;\r\n                        case \"RSAES-PKCS1-V1_5\":\r\n                            {\r\n                                keyUsages = [\"decrypt\"];\r\n                                jwk.kty = \"RSA\";\r\n                                jwk.ext = extractable;\r\n                                jwk.key_ops = keyUsages;\r\n                                jwk.alg = \"PS1\";\r\n                                const privateKeyJSON = privateKeyInfo.toJSON();\r\n                                Object.assign(jwk, privateKeyJSON);\r\n                            }\r\n                            break;\r\n                        default:\r\n                            throw new Error(`Incorrect algorithm name: ${alg.name.toUpperCase()}`);\r\n                    }\r\n                }\r\n                break;\r\n            case \"jwk\":\r\n                jwk = keyData;\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect format: ${format}`);\r\n        }\r\n        if (this.name.toLowerCase() === \"safari\") {\r\n            try {\r\n                return this.subtle.importKey(\"jwk\", pvutils.stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages);\r\n            }\r\n            catch {\r\n                return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n            }\r\n        }\r\n        return this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n    }\r\n    async exportKey(format, key) {\r\n        let jwk = await this.subtle.exportKey(\"jwk\", key);\r\n        if (this.name.toLowerCase() === \"safari\") {\r\n            if (jwk instanceof ArrayBuffer) {\r\n                jwk = JSON.parse(pvutils.arrayBufferToString(jwk));\r\n            }\r\n        }\r\n        switch (format.toLowerCase()) {\r\n            case \"raw\":\r\n                return this.subtle.exportKey(\"raw\", key);\r\n            case \"spki\": {\r\n                const publicKeyInfo = new PublicKeyInfo();\r\n                try {\r\n                    publicKeyInfo.fromJSON(jwk);\r\n                }\r\n                catch (ex) {\r\n                    throw new Error(\"Incorrect key data\");\r\n                }\r\n                return publicKeyInfo.toSchema().toBER(false);\r\n            }\r\n            case \"pkcs8\": {\r\n                const privateKeyInfo = new PrivateKeyInfo();\r\n                try {\r\n                    privateKeyInfo.fromJSON(jwk);\r\n                }\r\n                catch (ex) {\r\n                    throw new Error(\"Incorrect key data\");\r\n                }\r\n                return privateKeyInfo.toSchema().toBER(false);\r\n            }\r\n            case \"jwk\":\r\n                return jwk;\r\n            default:\r\n                throw new Error(`Incorrect format: ${format}`);\r\n        }\r\n    }\r\n    async convert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages) {\r\n        if (inputFormat.toLowerCase() === outputFormat.toLowerCase()) {\r\n            return keyData;\r\n        }\r\n        const key = await this.importKey(inputFormat, keyData, algorithm, extractable, keyUsages);\r\n        return this.exportKey(outputFormat, key);\r\n    }\r\n    getAlgorithmByOID(oid, safety = false, target) {\r\n        switch (oid) {\r\n            case \"1.2.840.113549.1.1.1\":\r\n                return {\r\n                    name: \"RSAES-PKCS1-v1_5\"\r\n                };\r\n            case \"1.2.840.113549.1.1.5\":\r\n                return {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.1.1.11\":\r\n                return {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.1.1.12\":\r\n                return {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.1.1.13\":\r\n                return {\r\n                    name: \"RSASSA-PKCS1-v1_5\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.1.1.10\":\r\n                return {\r\n                    name: \"RSA-PSS\"\r\n                };\r\n            case \"1.2.840.113549.1.1.7\":\r\n                return {\r\n                    name: \"RSA-OAEP\"\r\n                };\r\n            case \"1.2.840.10045.2.1\":\r\n            case \"1.2.840.10045.4.1\":\r\n                return {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n            case \"1.2.840.10045.4.3.2\":\r\n                return {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n            case \"1.2.840.10045.4.3.3\":\r\n                return {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n            case \"1.2.840.10045.4.3.4\":\r\n                return {\r\n                    name: \"ECDSA\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n            case \"1.3.133.16.840.63.0.2\":\r\n                return {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-1\"\r\n                };\r\n            case \"1.3.132.1.11.1\":\r\n                return {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-256\"\r\n                };\r\n            case \"1.3.132.1.11.2\":\r\n                return {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-384\"\r\n                };\r\n            case \"1.3.132.1.11.3\":\r\n                return {\r\n                    name: \"ECDH\",\r\n                    kdf: \"SHA-512\"\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.2\":\r\n                return {\r\n                    name: \"AES-CBC\",\r\n                    length: 128\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.22\":\r\n                return {\r\n                    name: \"AES-CBC\",\r\n                    length: 192\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.42\":\r\n                return {\r\n                    name: \"AES-CBC\",\r\n                    length: 256\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.6\":\r\n                return {\r\n                    name: \"AES-GCM\",\r\n                    length: 128\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.26\":\r\n                return {\r\n                    name: \"AES-GCM\",\r\n                    length: 192\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.46\":\r\n                return {\r\n                    name: \"AES-GCM\",\r\n                    length: 256\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.4\":\r\n                return {\r\n                    name: \"AES-CFB\",\r\n                    length: 128\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.24\":\r\n                return {\r\n                    name: \"AES-CFB\",\r\n                    length: 192\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.44\":\r\n                return {\r\n                    name: \"AES-CFB\",\r\n                    length: 256\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.5\":\r\n                return {\r\n                    name: \"AES-KW\",\r\n                    length: 128\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.25\":\r\n                return {\r\n                    name: \"AES-KW\",\r\n                    length: 192\r\n                };\r\n            case \"2.16.840.1.101.3.4.1.45\":\r\n                return {\r\n                    name: \"AES-KW\",\r\n                    length: 256\r\n                };\r\n            case \"1.2.840.113549.2.7\":\r\n                return {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-1\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.2.9\":\r\n                return {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-256\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.2.10\":\r\n                return {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-384\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.2.11\":\r\n                return {\r\n                    name: \"HMAC\",\r\n                    hash: {\r\n                        name: \"SHA-512\"\r\n                    }\r\n                };\r\n            case \"1.2.840.113549.1.9.16.3.5\":\r\n                return {\r\n                    name: \"DH\"\r\n                };\r\n            case \"1.3.14.3.2.26\":\r\n                return {\r\n                    name: \"SHA-1\"\r\n                };\r\n            case \"2.16.840.1.101.3.4.2.1\":\r\n                return {\r\n                    name: \"SHA-256\"\r\n                };\r\n            case \"2.16.840.1.101.3.4.2.2\":\r\n                return {\r\n                    name: \"SHA-384\"\r\n                };\r\n            case \"2.16.840.1.101.3.4.2.3\":\r\n                return {\r\n                    name: \"SHA-512\"\r\n                };\r\n            case \"1.2.840.113549.1.5.12\":\r\n                return {\r\n                    name: \"PBKDF2\"\r\n                };\r\n            case \"1.2.840.10045.3.1.7\":\r\n                return {\r\n                    name: \"P-256\"\r\n                };\r\n            case \"1.3.132.0.34\":\r\n                return {\r\n                    name: \"P-384\"\r\n                };\r\n            case \"1.3.132.0.35\":\r\n                return {\r\n                    name: \"P-521\"\r\n                };\r\n        }\r\n        if (safety) {\r\n            throw new Error(`Unsupported algorithm identifier ${target ? `for ${target} ` : EMPTY_STRING}: ${oid}`);\r\n        }\r\n        return {};\r\n    }\r\n    getOIDByAlgorithm(algorithm, safety = false, target) {\r\n        let result = EMPTY_STRING;\r\n        switch (algorithm.name.toUpperCase()) {\r\n            case \"RSAES-PKCS1-V1_5\":\r\n                result = \"1.2.840.113549.1.1.1\";\r\n                break;\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                switch (algorithm.hash.name.toUpperCase()) {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.113549.1.1.5\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.113549.1.1.11\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.113549.1.1.12\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.113549.1.1.13\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"RSA-PSS\":\r\n                result = \"1.2.840.113549.1.1.10\";\r\n                break;\r\n            case \"RSA-OAEP\":\r\n                result = \"1.2.840.113549.1.1.7\";\r\n                break;\r\n            case \"ECDSA\":\r\n                switch (algorithm.hash.name.toUpperCase()) {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.10045.4.1\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.10045.4.3.2\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.10045.4.3.3\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.10045.4.3.4\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"ECDH\":\r\n                switch (algorithm.kdf.toUpperCase()) {\r\n                    case \"SHA-1\":\r\n                        result = \"1.3.133.16.840.63.0.2\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.3.132.1.11.1\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.3.132.1.11.2\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.3.132.1.11.3\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"AES-CTR\":\r\n                break;\r\n            case \"AES-CBC\":\r\n                switch (algorithm.length) {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.2\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.22\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.42\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"AES-CMAC\":\r\n                break;\r\n            case \"AES-GCM\":\r\n                switch (algorithm.length) {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.6\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.26\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.46\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"AES-CFB\":\r\n                switch (algorithm.length) {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.4\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.24\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.44\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"AES-KW\":\r\n                switch (algorithm.length) {\r\n                    case 128:\r\n                        result = \"2.16.840.1.101.3.4.1.5\";\r\n                        break;\r\n                    case 192:\r\n                        result = \"2.16.840.1.101.3.4.1.25\";\r\n                        break;\r\n                    case 256:\r\n                        result = \"2.16.840.1.101.3.4.1.45\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"HMAC\":\r\n                switch (algorithm.hash.name.toUpperCase()) {\r\n                    case \"SHA-1\":\r\n                        result = \"1.2.840.113549.2.7\";\r\n                        break;\r\n                    case \"SHA-256\":\r\n                        result = \"1.2.840.113549.2.9\";\r\n                        break;\r\n                    case \"SHA-384\":\r\n                        result = \"1.2.840.113549.2.10\";\r\n                        break;\r\n                    case \"SHA-512\":\r\n                        result = \"1.2.840.113549.2.11\";\r\n                        break;\r\n                }\r\n                break;\r\n            case \"DH\":\r\n                result = \"1.2.840.113549.1.9.16.3.5\";\r\n                break;\r\n            case \"SHA-1\":\r\n                result = \"1.3.14.3.2.26\";\r\n                break;\r\n            case \"SHA-256\":\r\n                result = \"2.16.840.1.101.3.4.2.1\";\r\n                break;\r\n            case \"SHA-384\":\r\n                result = \"2.16.840.1.101.3.4.2.2\";\r\n                break;\r\n            case \"SHA-512\":\r\n                result = \"2.16.840.1.101.3.4.2.3\";\r\n                break;\r\n            case \"CONCAT\":\r\n                break;\r\n            case \"HKDF\":\r\n                break;\r\n            case \"PBKDF2\":\r\n                result = \"1.2.840.113549.1.5.12\";\r\n                break;\r\n            case \"P-256\":\r\n                result = \"1.2.840.10045.3.1.7\";\r\n                break;\r\n            case \"P-384\":\r\n                result = \"1.3.132.0.34\";\r\n                break;\r\n            case \"P-521\":\r\n                result = \"1.3.132.0.35\";\r\n                break;\r\n        }\r\n        if (!result && safety) {\r\n            throw new Error(`Unsupported algorithm ${target ? `for ${target} ` : EMPTY_STRING}: ${algorithm.name}`);\r\n        }\r\n        return result;\r\n    }\r\n    getAlgorithmParameters(algorithmName, operation) {\r\n        let result = {\r\n            algorithm: {},\r\n            usages: []\r\n        };\r\n        switch (algorithmName.toUpperCase()) {\r\n            case \"RSAES-PKCS1-V1_5\":\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"verify\":\r\n                    case \"sign\":\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSASSA-PKCS1-v1_5\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"RSA-PSS\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"sign\":\r\n                    case \"verify\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                },\r\n                                saltLength: 20\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\",\r\n                                hash: {\r\n                                    name: \"SHA-1\"\r\n                                }\r\n                            },\r\n                            usages: [\"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSA-PSS\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"RSA-OAEP\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"encrypt\":\r\n                    case \"decrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\"\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\",\r\n                                modulusLength: 2048,\r\n                                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"encrypt\"]\r\n                        };\r\n                        break;\r\n                    case \"exportkey\":\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"RSA-OAEP\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"ECDSA\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"verify\":\r\n                    case \"sign\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDSA\",\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"ECDSA\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"ECDH\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"exportkey\":\r\n                    case \"importkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDH\",\r\n                                namedCurve: \"P-256\"\r\n                            },\r\n                            usages: [\"deriveKey\", \"deriveBits\"]\r\n                        };\r\n                        break;\r\n                    case \"derivekey\":\r\n                    case \"derivebits\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"ECDH\",\r\n                                namedCurve: \"P-256\",\r\n                                public: []\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"ECDH\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-CTR\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\",\r\n                                counter: new Uint8Array(16),\r\n                                length: 10\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-CTR\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-CBC\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\",\r\n                                iv: this.getRandomValues(new Uint8Array(16))\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-CBC\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-GCM\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    case \"decrypt\":\r\n                    case \"encrypt\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\",\r\n                                iv: this.getRandomValues(new Uint8Array(16))\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-GCM\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"AES-KW\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                    case \"wrapkey\":\r\n                    case \"unwrapkey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"AES-KW\",\r\n                                length: 256\r\n                            },\r\n                            usages: [\"wrapKey\", \"unwrapKey\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"AES-KW\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"HMAC\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"sign\":\r\n                    case \"verify\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HMAC\"\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    case \"importkey\":\r\n                    case \"exportkey\":\r\n                    case \"generatekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HMAC\",\r\n                                length: 32,\r\n                                hash: {\r\n                                    name: \"SHA-256\"\r\n                                }\r\n                            },\r\n                            usages: [\"sign\", \"verify\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"HMAC\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"HKDF\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"derivekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"HKDF\",\r\n                                hash: \"SHA-256\",\r\n                                salt: new Uint8Array([]),\r\n                                info: new Uint8Array([])\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"HKDF\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n            case \"PBKDF2\":\r\n                switch (operation.toLowerCase()) {\r\n                    case \"derivekey\":\r\n                        result = {\r\n                            algorithm: {\r\n                                name: \"PBKDF2\",\r\n                                hash: { name: \"SHA-256\" },\r\n                                salt: new Uint8Array([]),\r\n                                iterations: 10000\r\n                            },\r\n                            usages: [\"encrypt\", \"decrypt\"]\r\n                        };\r\n                        break;\r\n                    default:\r\n                        return {\r\n                            algorithm: {\r\n                                name: \"PBKDF2\"\r\n                            },\r\n                            usages: []\r\n                        };\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    getHashAlgorithm(signatureAlgorithm) {\r\n        let result = EMPTY_STRING;\r\n        switch (signatureAlgorithm.algorithmId) {\r\n            case \"1.2.840.10045.4.1\":\r\n            case \"1.2.840.113549.1.1.5\":\r\n                result = \"SHA-1\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.2\":\r\n            case \"1.2.840.113549.1.1.11\":\r\n                result = \"SHA-256\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.3\":\r\n            case \"1.2.840.113549.1.1.12\":\r\n                result = \"SHA-384\";\r\n                break;\r\n            case \"1.2.840.10045.4.3.4\":\r\n            case \"1.2.840.113549.1.1.13\":\r\n                result = \"SHA-512\";\r\n                break;\r\n            case \"1.2.840.113549.1.1.10\":\r\n                {\r\n                    try {\r\n                        const params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n                        if (params.hashAlgorithm) {\r\n                            const algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n                            if (\"name\" in algorithm) {\r\n                                result = algorithm.name;\r\n                            }\r\n                            else {\r\n                                return EMPTY_STRING;\r\n                            }\r\n                        }\r\n                        else\r\n                            result = \"SHA-1\";\r\n                    }\r\n                    catch {\r\n                    }\r\n                }\r\n                break;\r\n        }\r\n        return result;\r\n    }\r\n    async encryptEncryptedContentInfo(parameters) {\r\n        ParameterError.assert(parameters, \"password\", \"contentEncryptionAlgorithm\", \"hmacHashAlgorithm\", \"iterationCount\", \"contentToEncrypt\", \"contentToEncrypt\", \"contentType\");\r\n        const contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\r\n        const pbkdf2OID = this.getOIDByAlgorithm({\r\n            name: \"PBKDF2\"\r\n        }, true, \"PBKDF2\");\r\n        const hmacOID = this.getOIDByAlgorithm({\r\n            name: \"HMAC\",\r\n            hash: {\r\n                name: parameters.hmacHashAlgorithm\r\n            }\r\n        }, true, \"hmacHashAlgorithm\");\r\n        const ivBuffer = new ArrayBuffer(16);\r\n        const ivView = new Uint8Array(ivBuffer);\r\n        this.getRandomValues(ivView);\r\n        const saltBuffer = new ArrayBuffer(64);\r\n        const saltView = new Uint8Array(saltBuffer);\r\n        this.getRandomValues(saltView);\r\n        const contentView = new Uint8Array(parameters.contentToEncrypt);\r\n        const pbkdf2Params = new PBKDF2Params({\r\n            salt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n            iterationCount: parameters.iterationCount,\r\n            prf: new AlgorithmIdentifier({\r\n                algorithmId: hmacOID,\r\n                algorithmParams: new asn1js.Null()\r\n            })\r\n        });\r\n        const passwordView = new Uint8Array(parameters.password);\r\n        const pbkdfKey = await this.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\r\n        const derivedKey = await this.deriveKey({\r\n            name: \"PBKDF2\",\r\n            hash: {\r\n                name: parameters.hmacHashAlgorithm\r\n            },\r\n            salt: saltView,\r\n            iterations: parameters.iterationCount\r\n        }, pbkdfKey, parameters.contentEncryptionAlgorithm, false, [\"encrypt\"]);\r\n        const encryptedData = await this.encrypt({\r\n            name: parameters.contentEncryptionAlgorithm.name,\r\n            iv: ivView\r\n        }, derivedKey, contentView);\r\n        const pbes2Parameters = new PBES2Params({\r\n            keyDerivationFunc: new AlgorithmIdentifier({\r\n                algorithmId: pbkdf2OID,\r\n                algorithmParams: pbkdf2Params.toSchema()\r\n            }),\r\n            encryptionScheme: new AlgorithmIdentifier({\r\n                algorithmId: contentEncryptionOID,\r\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n            })\r\n        });\r\n        return new EncryptedContentInfo({\r\n            contentType: parameters.contentType,\r\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                algorithmId: \"1.2.840.113549.1.5.13\",\r\n                algorithmParams: pbes2Parameters.toSchema()\r\n            }),\r\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedData })\r\n        });\r\n    }\r\n    async decryptEncryptedContentInfo(parameters) {\r\n        ParameterError.assert(parameters, \"password\", \"encryptedContentInfo\");\r\n        if (parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\")\r\n            throw new Error(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n        let pbes2Parameters;\r\n        try {\r\n            pbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n        }\r\n        let pbkdf2Params;\r\n        try {\r\n            pbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n        }\r\n        const contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId, true);\r\n        const ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n        const ivView = new Uint8Array(ivBuffer);\r\n        const saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n        const saltView = new Uint8Array(saltBuffer);\r\n        const iterationCount = pbkdf2Params.iterationCount;\r\n        let hmacHashAlgorithm = \"SHA-1\";\r\n        if (pbkdf2Params.prf) {\r\n            const algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true);\r\n            hmacHashAlgorithm = algorithm.hash.name;\r\n        }\r\n        const pbkdfKey = await this.importKey(\"raw\", parameters.password, \"PBKDF2\", false, [\"deriveKey\"]);\r\n        const result = await this.deriveKey({\r\n            name: \"PBKDF2\",\r\n            hash: {\r\n                name: hmacHashAlgorithm\r\n            },\r\n            salt: saltView,\r\n            iterations: iterationCount\r\n        }, pbkdfKey, contentEncryptionAlgorithm, false, [\"decrypt\"]);\r\n        const dataBuffer = parameters.encryptedContentInfo.getEncryptedContent();\r\n        return this.decrypt({\r\n            name: contentEncryptionAlgorithm.name,\r\n            iv: ivView\r\n        }, result, dataBuffer);\r\n    }\r\n    async stampDataWithPassword(parameters) {\r\n        if ((parameters instanceof Object) === false)\r\n            throw new Error(\"Parameters must have type \\\"Object\\\"\");\r\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"iterationCount\", \"salt\", \"contentToStamp\");\r\n        let length;\r\n        switch (parameters.hashAlgorithm.toLowerCase()) {\r\n            case \"sha-1\":\r\n                length = 160;\r\n                break;\r\n            case \"sha-256\":\r\n                length = 256;\r\n                break;\r\n            case \"sha-384\":\r\n                length = 384;\r\n                break;\r\n            case \"sha-512\":\r\n                length = 512;\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n        }\r\n        const hmacAlgorithm = {\r\n            name: \"HMAC\",\r\n            length,\r\n            hash: {\r\n                name: parameters.hashAlgorithm\r\n            }\r\n        };\r\n        const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\r\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"sign\"]);\r\n        return this.sign(hmacAlgorithm, hmacKey, new Uint8Array(parameters.contentToStamp));\r\n    }\r\n    async verifyDataStampedWithPassword(parameters) {\r\n        ParameterError.assert(parameters, \"password\", \"hashAlgorithm\", \"salt\", \"iterationCount\", \"contentToVerify\", \"signatureToVerify\");\r\n        let length = 0;\r\n        switch (parameters.hashAlgorithm.toLowerCase()) {\r\n            case \"sha-1\":\r\n                length = 160;\r\n                break;\r\n            case \"sha-256\":\r\n                length = 256;\r\n                break;\r\n            case \"sha-384\":\r\n                length = 384;\r\n                break;\r\n            case \"sha-512\":\r\n                length = 512;\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n        }\r\n        const hmacAlgorithm = {\r\n            name: \"HMAC\",\r\n            length,\r\n            hash: {\r\n                name: parameters.hashAlgorithm\r\n            }\r\n        };\r\n        const pkcsKey = await makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount);\r\n        const hmacKey = await this.importKey(\"raw\", new Uint8Array(pkcsKey), hmacAlgorithm, false, [\"verify\"]);\r\n        return this.verify(hmacAlgorithm, hmacKey, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify));\r\n    }\r\n    async getSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\") {\r\n        this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\r\n        const signatureAlgorithm = new AlgorithmIdentifier();\r\n        const parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n        if (!Object.keys(parameters.algorithm).length) {\r\n            throw new Error(\"Parameter 'algorithm' is empty\");\r\n        }\r\n        const algorithm = parameters.algorithm;\r\n        algorithm.hash.name = hashAlgorithm;\r\n        switch (privateKey.algorithm.name.toUpperCase()) {\r\n            case \"RSASSA-PKCS1-V1_5\":\r\n            case \"ECDSA\":\r\n                signatureAlgorithm.algorithmId = this.getOIDByAlgorithm(algorithm, true);\r\n                break;\r\n            case \"RSA-PSS\":\r\n                {\r\n                    switch (hashAlgorithm.toUpperCase()) {\r\n                        case \"SHA-256\":\r\n                            algorithm.saltLength = 32;\r\n                            break;\r\n                        case \"SHA-384\":\r\n                            algorithm.saltLength = 48;\r\n                            break;\r\n                        case \"SHA-512\":\r\n                            algorithm.saltLength = 64;\r\n                            break;\r\n                    }\r\n                    const paramsObject = {};\r\n                    if (hashAlgorithm.toUpperCase() !== \"SHA-1\") {\r\n                        const hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\r\n                        paramsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n                            algorithmId: hashAlgorithmOID,\r\n                            algorithmParams: new asn1js.Null()\r\n                        });\r\n                        paramsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n                            algorithmId: \"1.2.840.113549.1.1.8\",\r\n                            algorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n                        });\r\n                    }\r\n                    if (algorithm.saltLength !== 20)\r\n                        paramsObject.saltLength = algorithm.saltLength;\r\n                    const pssParameters = new RSASSAPSSParams(paramsObject);\r\n                    signatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n                    signatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n        }\r\n        return {\r\n            signatureAlgorithm,\r\n            parameters\r\n        };\r\n    }\r\n    async signWithPrivateKey(data, privateKey, parameters) {\r\n        const signature = await this.sign(parameters.algorithm, privateKey, data);\r\n        if (parameters.algorithm.name === \"ECDSA\") {\r\n            return createCMSECDSASignature(signature);\r\n        }\r\n        return signature;\r\n    }\r\n    fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm) {\r\n        const parameters = {};\r\n        const shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n        if (shaAlgorithm === EMPTY_STRING)\r\n            throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n        let algorithmId;\r\n        if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n            algorithmId = signatureAlgorithm.algorithmId;\r\n        else\r\n            algorithmId = publicKeyInfo.algorithm.algorithmId;\r\n        const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\r\n        parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\r\n        if (\"hash\" in parameters.algorithm.algorithm)\r\n            parameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n        if (algorithmObject.name === \"ECDSA\") {\r\n            const publicKeyAlgorithm = publicKeyInfo.algorithm;\r\n            if (!publicKeyAlgorithm.algorithmParams) {\r\n                throw new Error(\"Algorithm parameters for ECDSA public key are missed\");\r\n            }\r\n            const publicKeyAlgorithmParams = publicKeyAlgorithm.algorithmParams;\r\n            if (\"idBlock\" in publicKeyAlgorithm.algorithmParams) {\r\n                if (!((publicKeyAlgorithmParams.idBlock.tagClass === 1) && (publicKeyAlgorithmParams.idBlock.tagNumber === 6))) {\r\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\r\n                }\r\n            }\r\n            const curveObject = this.getAlgorithmByOID(publicKeyAlgorithmParams.valueBlock.toString(), true);\r\n            parameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n        }\r\n        return parameters;\r\n    }\r\n    async getPublicKey(publicKeyInfo, signatureAlgorithm, parameters) {\r\n        if (!parameters) {\r\n            parameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n        }\r\n        const publicKeyInfoBuffer = publicKeyInfo.toSchema().toBER(false);\r\n        return this.importKey(\"spki\", publicKeyInfoBuffer, parameters.algorithm.algorithm, true, parameters.algorithm.usages);\r\n    }\r\n    async verifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm) {\r\n        let publicKey;\r\n        if (!shaAlgorithm) {\r\n            shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n            if (!shaAlgorithm)\r\n                throw new Error(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n            publicKey = await this.getPublicKey(publicKeyInfo, signatureAlgorithm);\r\n        }\r\n        else {\r\n            const parameters = {};\r\n            let algorithmId;\r\n            if (signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n                algorithmId = signatureAlgorithm.algorithmId;\r\n            else\r\n                algorithmId = publicKeyInfo.algorithm.algorithmId;\r\n            const algorithmObject = this.getAlgorithmByOID(algorithmId, true);\r\n            parameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importKey\");\r\n            if (\"hash\" in parameters.algorithm.algorithm)\r\n                parameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n            if (algorithmObject.name === \"ECDSA\") {\r\n                let algorithmParamsChecked = false;\r\n                if ((\"algorithmParams\" in publicKeyInfo.algorithm) === true) {\r\n                    if (\"idBlock\" in publicKeyInfo.algorithm.algorithmParams) {\r\n                        if ((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n                            algorithmParamsChecked = true;\r\n                    }\r\n                }\r\n                if (algorithmParamsChecked === false) {\r\n                    throw new Error(\"Incorrect type for ECDSA public key parameters\");\r\n                }\r\n                const curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString(), true);\r\n                parameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n            }\r\n            publicKey = await this.getPublicKey(publicKeyInfo, null, parameters);\r\n        }\r\n        const algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n        if (\"hash\" in algorithm.algorithm)\r\n            algorithm.algorithm.hash.name = shaAlgorithm;\r\n        let signatureValue = signature.valueBlock.valueHexView;\r\n        if (publicKey.algorithm.name === \"ECDSA\") {\r\n            const namedCurve = ECNamedCurves.find(publicKey.algorithm.namedCurve);\r\n            if (!namedCurve) {\r\n                throw new Error(\"Unsupported named curve in use\");\r\n            }\r\n            const asn1 = asn1js.fromBER(signatureValue);\r\n            AsnError.assert(asn1, \"Signature value\");\r\n            signatureValue = createECDSASignatureFromCMS(asn1.result, namedCurve.size);\r\n        }\r\n        if (publicKey.algorithm.name === \"RSA-PSS\") {\r\n            const pssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n            if (\"saltLength\" in pssParameters)\r\n                algorithm.algorithm.saltLength = pssParameters.saltLength;\r\n            else\r\n                algorithm.algorithm.saltLength = 20;\r\n            let hashAlgo = \"SHA-1\";\r\n            if (\"hashAlgorithm\" in pssParameters) {\r\n                const hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId, true);\r\n                hashAlgo = hashAlgorithm.name;\r\n            }\r\n            algorithm.algorithm.hash.name = hashAlgo;\r\n        }\r\n        return this.verify(algorithm.algorithm, publicKey, signatureValue, data);\r\n    }\r\n}\n\nlet engine = {\r\n    name: \"none\",\r\n    crypto: null,\r\n};\r\nfunction isCryptoEngine(engine) {\r\n    return engine\r\n        && typeof engine === \"object\"\r\n        && \"crypto\" in engine\r\n        ? true\r\n        : false;\r\n}\r\nfunction setEngine(name, ...args) {\r\n    let crypto = null;\r\n    if (args.length < 2) {\r\n        if (args.length) {\r\n            crypto = args[0];\r\n        }\r\n        else {\r\n            crypto = typeof self !== \"undefined\" && self.crypto ? new CryptoEngine({ name: \"browser\", crypto: self.crypto }) : null;\r\n        }\r\n    }\r\n    else {\r\n        const cryptoArg = args[0];\r\n        const subtleArg = args[1];\r\n        if (isCryptoEngine(subtleArg)) {\r\n            crypto = subtleArg;\r\n        }\r\n        else if (isCryptoEngine(cryptoArg)) {\r\n            crypto = cryptoArg;\r\n        }\r\n        else if (\"subtle\" in cryptoArg && \"getRandomValues\" in cryptoArg) {\r\n            crypto = new CryptoEngine({\r\n                crypto: cryptoArg,\r\n            });\r\n        }\r\n    }\r\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\r\n        if (typeof global[process.pid] === \"undefined\") {\r\n            global[process.pid] = {};\r\n        }\r\n        else {\r\n            if (typeof global[process.pid] !== \"object\") {\r\n                throw new Error(`Name global.${process.pid} already exists and it is not an object`);\r\n            }\r\n        }\r\n        if (typeof global[process.pid].pkijs === \"undefined\") {\r\n            global[process.pid].pkijs = {};\r\n        }\r\n        else {\r\n            if (typeof global[process.pid].pkijs !== \"object\") {\r\n                throw new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\r\n            }\r\n        }\r\n        global[process.pid].pkijs.engine = {\r\n            name: name,\r\n            crypto,\r\n        };\r\n    }\r\n    else {\r\n        engine = {\r\n            name: name,\r\n            crypto,\r\n        };\r\n    }\r\n}\r\nfunction getEngine() {\r\n    if ((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\")) {\r\n        let _engine;\r\n        try {\r\n            _engine = global[process.pid].pkijs.engine;\r\n        }\r\n        catch (ex) {\r\n            throw new Error(\"Please call 'setEngine' before call to 'getEngine'\");\r\n        }\r\n        return _engine;\r\n    }\r\n    return engine;\r\n}\r\nfunction getCrypto(safety = false) {\r\n    const _engine = getEngine();\r\n    if (!_engine.crypto && safety) {\r\n        throw new Error(\"Unable to create WebCrypto object\");\r\n    }\r\n    return _engine.crypto;\r\n}\r\nfunction getRandomValues(view) {\r\n    return getCrypto(true).getRandomValues(view);\r\n}\r\nfunction getOIDByAlgorithm(algorithm, safety, target) {\r\n    return getCrypto(true).getOIDByAlgorithm(algorithm, safety, target);\r\n}\r\nfunction getAlgorithmParameters(algorithmName, operation) {\r\n    return getCrypto(true).getAlgorithmParameters(algorithmName, operation);\r\n}\r\nfunction createCMSECDSASignature(signatureBuffer) {\r\n    if ((signatureBuffer.byteLength % 2) !== 0)\r\n        return EMPTY_BUFFER;\r\n    const length = signatureBuffer.byteLength / 2;\r\n    const rBuffer = new ArrayBuffer(length);\r\n    const rView = new Uint8Array(rBuffer);\r\n    rView.set(new Uint8Array(signatureBuffer, 0, length));\r\n    const rInteger = new asn1js.Integer({ valueHex: rBuffer });\r\n    const sBuffer = new ArrayBuffer(length);\r\n    const sView = new Uint8Array(sBuffer);\r\n    sView.set(new Uint8Array(signatureBuffer, length, length));\r\n    const sInteger = new asn1js.Integer({ valueHex: sBuffer });\r\n    return (new asn1js.Sequence({\r\n        value: [\r\n            rInteger.convertToDER(),\r\n            sInteger.convertToDER()\r\n        ]\r\n    })).toBER(false);\r\n}\r\nfunction createECDSASignatureFromCMS(cmsSignature, pointSize) {\r\n    if (!(cmsSignature instanceof asn1js.Sequence\r\n        && cmsSignature.valueBlock.value.length === 2\r\n        && cmsSignature.valueBlock.value[0] instanceof asn1js.Integer\r\n        && cmsSignature.valueBlock.value[1] instanceof asn1js.Integer))\r\n        return EMPTY_BUFFER;\r\n    const rValueView = cmsSignature.valueBlock.value[0].convertFromDER().valueBlock.valueHexView;\r\n    const sValueView = cmsSignature.valueBlock.value[1].convertFromDER().valueBlock.valueHexView;\r\n    const res = new Uint8Array(pointSize * 2);\r\n    res.set(rValueView, pointSize - rValueView.byteLength);\r\n    res.set(sValueView, (2 * pointSize) - sValueView.byteLength);\r\n    return res.buffer;\r\n}\r\nfunction getAlgorithmByOID(oid, safety = false, target) {\r\n    return getCrypto(true).getAlgorithmByOID(oid, safety, target);\r\n}\r\nfunction getHashAlgorithm(signatureAlgorithm) {\r\n    return getCrypto(true).getHashAlgorithm(signatureAlgorithm);\r\n}\r\nasync function kdfWithCounter(hashFunction, zBuffer, Counter, SharedInfo, crypto) {\r\n    switch (hashFunction.toUpperCase()) {\r\n        case \"SHA-1\":\r\n        case \"SHA-256\":\r\n        case \"SHA-384\":\r\n        case \"SHA-512\":\r\n            break;\r\n        default:\r\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\r\n    }\r\n    ArgumentError.assert(zBuffer, \"zBuffer\", \"ArrayBuffer\");\r\n    if (zBuffer.byteLength === 0)\r\n        throw new ArgumentError(\"'zBuffer' has zero length, error\");\r\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\r\n    if (Counter > 255)\r\n        throw new ArgumentError(\"Please set 'Counter' argument to value less or equal to 255\");\r\n    const counterBuffer = new ArrayBuffer(4);\r\n    const counterView = new Uint8Array(counterBuffer);\r\n    counterView[0] = 0x00;\r\n    counterView[1] = 0x00;\r\n    counterView[2] = 0x00;\r\n    counterView[3] = Counter;\r\n    let combinedBuffer = EMPTY_BUFFER;\r\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, zBuffer);\r\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, counterBuffer);\r\n    combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, SharedInfo);\r\n    const result = await crypto.digest({ name: hashFunction }, combinedBuffer);\r\n    return {\r\n        counter: Counter,\r\n        result\r\n    };\r\n}\r\nasync function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo, crypto = getCrypto(true)) {\r\n    let hashLength = 0;\r\n    let maxCounter = 1;\r\n    switch (hashFunction.toUpperCase()) {\r\n        case \"SHA-1\":\r\n            hashLength = 160;\r\n            break;\r\n        case \"SHA-256\":\r\n            hashLength = 256;\r\n            break;\r\n        case \"SHA-384\":\r\n            hashLength = 384;\r\n            break;\r\n        case \"SHA-512\":\r\n            hashLength = 512;\r\n            break;\r\n        default:\r\n            throw new ArgumentError(`Unknown hash function: ${hashFunction}`);\r\n    }\r\n    ArgumentError.assert(Zbuffer, \"Zbuffer\", \"ArrayBuffer\");\r\n    if (Zbuffer.byteLength === 0)\r\n        throw new ArgumentError(\"'Zbuffer' has zero length, error\");\r\n    ArgumentError.assert(SharedInfo, \"SharedInfo\", \"ArrayBuffer\");\r\n    const quotient = keydatalen / hashLength;\r\n    if (Math.floor(quotient) > 0) {\r\n        maxCounter = Math.floor(quotient);\r\n        if ((quotient - maxCounter) > 0)\r\n            maxCounter++;\r\n    }\r\n    const incomingResult = [];\r\n    for (let i = 1; i <= maxCounter; i++)\r\n        incomingResult.push(await kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo, crypto));\r\n    let combinedBuffer = EMPTY_BUFFER;\r\n    let currentCounter = 1;\r\n    let found = true;\r\n    while (found) {\r\n        found = false;\r\n        for (const result of incomingResult) {\r\n            if (result.counter === currentCounter) {\r\n                combinedBuffer = pvutils.utilConcatBuf(combinedBuffer, result.result);\r\n                found = true;\r\n                break;\r\n            }\r\n        }\r\n        currentCounter++;\r\n    }\r\n    keydatalen >>= 3;\r\n    if (combinedBuffer.byteLength > keydatalen) {\r\n        const newBuffer = new ArrayBuffer(keydatalen);\r\n        const newView = new Uint8Array(newBuffer);\r\n        const combinedView = new Uint8Array(combinedBuffer);\r\n        for (let i = 0; i < keydatalen; i++)\r\n            newView[i] = combinedView[i];\r\n        return newBuffer;\r\n    }\r\n    return combinedBuffer;\r\n}\n\nconst VERSION$i = \"version\";\r\nconst LOG_ID = \"logID\";\r\nconst EXTENSIONS$6 = \"extensions\";\r\nconst TIMESTAMP = \"timestamp\";\r\nconst HASH_ALGORITHM$3 = \"hashAlgorithm\";\r\nconst SIGNATURE_ALGORITHM$8 = \"signatureAlgorithm\";\r\nconst SIGNATURE$7 = \"signature\";\r\nconst NONE = \"none\";\r\nconst MD5 = \"md5\";\r\nconst SHA1 = \"sha1\";\r\nconst SHA224 = \"sha224\";\r\nconst SHA256 = \"sha256\";\r\nconst SHA384 = \"sha384\";\r\nconst SHA512 = \"sha512\";\r\nconst ANONYMOUS = \"anonymous\";\r\nconst RSA = \"rsa\";\r\nconst DSA = \"dsa\";\r\nconst ECDSA = \"ecdsa\";\r\nclass SignedCertificateTimestamp extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$i, SignedCertificateTimestamp.defaultValues(VERSION$i));\r\n        this.logID = pvutils.getParametersValue(parameters, LOG_ID, SignedCertificateTimestamp.defaultValues(LOG_ID));\r\n        this.timestamp = pvutils.getParametersValue(parameters, TIMESTAMP, SignedCertificateTimestamp.defaultValues(TIMESTAMP));\r\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$6, SignedCertificateTimestamp.defaultValues(EXTENSIONS$6));\r\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$3, SignedCertificateTimestamp.defaultValues(HASH_ALGORITHM$3));\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$8, SignedCertificateTimestamp.defaultValues(SIGNATURE_ALGORITHM$8));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$7, SignedCertificateTimestamp.defaultValues(SIGNATURE$7));\r\n        if (\"stream\" in parameters && parameters.stream) {\r\n            this.fromStream(parameters.stream);\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$i:\r\n                return 0;\r\n            case LOG_ID:\r\n            case EXTENSIONS$6:\r\n                return EMPTY_BUFFER;\r\n            case TIMESTAMP:\r\n                return new Date(0);\r\n            case HASH_ALGORITHM$3:\r\n            case SIGNATURE_ALGORITHM$8:\r\n                return EMPTY_STRING;\r\n            case SIGNATURE$7:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    fromSchema(schema) {\r\n        if ((schema instanceof asn1js.RawData) === false)\r\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\r\n        const seqStream = new bs.SeqStream({\r\n            stream: new bs.ByteStream({\r\n                buffer: schema.data\r\n            })\r\n        });\r\n        this.fromStream(seqStream);\r\n    }\r\n    fromStream(stream) {\r\n        const blockLength = stream.getUint16();\r\n        this.version = (stream.getBlock(1))[0];\r\n        if (this.version === 0) {\r\n            this.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\r\n            this.timestamp = new Date(pvutils.utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\r\n            const extensionsLength = stream.getUint16();\r\n            this.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\r\n            switch ((stream.getBlock(1))[0]) {\r\n                case 0:\r\n                    this.hashAlgorithm = NONE;\r\n                    break;\r\n                case 1:\r\n                    this.hashAlgorithm = MD5;\r\n                    break;\r\n                case 2:\r\n                    this.hashAlgorithm = SHA1;\r\n                    break;\r\n                case 3:\r\n                    this.hashAlgorithm = SHA224;\r\n                    break;\r\n                case 4:\r\n                    this.hashAlgorithm = SHA256;\r\n                    break;\r\n                case 5:\r\n                    this.hashAlgorithm = SHA384;\r\n                    break;\r\n                case 6:\r\n                    this.hashAlgorithm = SHA512;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n            }\r\n            switch ((stream.getBlock(1))[0]) {\r\n                case 0:\r\n                    this.signatureAlgorithm = ANONYMOUS;\r\n                    break;\r\n                case 1:\r\n                    this.signatureAlgorithm = RSA;\r\n                    break;\r\n                case 2:\r\n                    this.signatureAlgorithm = DSA;\r\n                    break;\r\n                case 3:\r\n                    this.signatureAlgorithm = ECDSA;\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n            }\r\n            const signatureLength = stream.getUint16();\r\n            const signatureData = new Uint8Array(stream.getBlock(signatureLength)).buffer.slice(0);\r\n            const asn1 = asn1js.fromBER(signatureData);\r\n            AsnError.assert(asn1, \"SignedCertificateTimestamp\");\r\n            this.signature = asn1.result;\r\n            if (blockLength !== (47 + extensionsLength + signatureLength)) {\r\n                throw new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\r\n            }\r\n        }\r\n    }\r\n    toSchema() {\r\n        const stream = this.toStream();\r\n        return new asn1js.RawData({ data: stream.stream.buffer });\r\n    }\r\n    toStream() {\r\n        const stream = new bs.SeqStream();\r\n        stream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecodeView.byteLength);\r\n        stream.appendChar(this.version);\r\n        stream.appendView(new Uint8Array(this.logID));\r\n        const timeBuffer = new ArrayBuffer(8);\r\n        const timeView = new Uint8Array(timeBuffer);\r\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\r\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n        stream.appendView(timeView);\r\n        stream.appendUint16(this.extensions.byteLength);\r\n        if (this.extensions.byteLength)\r\n            stream.appendView(new Uint8Array(this.extensions));\r\n        let _hashAlgorithm;\r\n        switch (this.hashAlgorithm.toLowerCase()) {\r\n            case NONE:\r\n                _hashAlgorithm = 0;\r\n                break;\r\n            case MD5:\r\n                _hashAlgorithm = 1;\r\n                break;\r\n            case SHA1:\r\n                _hashAlgorithm = 2;\r\n                break;\r\n            case SHA224:\r\n                _hashAlgorithm = 3;\r\n                break;\r\n            case SHA256:\r\n                _hashAlgorithm = 4;\r\n                break;\r\n            case SHA384:\r\n                _hashAlgorithm = 5;\r\n                break;\r\n            case SHA512:\r\n                _hashAlgorithm = 6;\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\r\n        }\r\n        stream.appendChar(_hashAlgorithm);\r\n        let _signatureAlgorithm;\r\n        switch (this.signatureAlgorithm.toLowerCase()) {\r\n            case ANONYMOUS:\r\n                _signatureAlgorithm = 0;\r\n                break;\r\n            case RSA:\r\n                _signatureAlgorithm = 1;\r\n                break;\r\n            case DSA:\r\n                _signatureAlgorithm = 2;\r\n                break;\r\n            case ECDSA:\r\n                _signatureAlgorithm = 3;\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\r\n        }\r\n        stream.appendChar(_signatureAlgorithm);\r\n        const _signature = this.signature.toBER(false);\r\n        stream.appendUint16(_signature.byteLength);\r\n        stream.appendView(new Uint8Array(_signature));\r\n        return stream;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            version: this.version,\r\n            logID: pvutils.bufferToHexCodes(this.logID),\r\n            timestamp: this.timestamp,\r\n            extensions: pvutils.bufferToHexCodes(this.extensions),\r\n            hashAlgorithm: this.hashAlgorithm,\r\n            signatureAlgorithm: this.signatureAlgorithm,\r\n            signature: this.signature.toJSON()\r\n        };\r\n    }\r\n    async verify(logs, data, dataType = 0, crypto = getCrypto(true)) {\r\n        const logId = pvutils.toBase64(pvutils.arrayBufferToString(this.logID));\r\n        let publicKeyBase64 = null;\r\n        const stream = new bs.SeqStream();\r\n        for (const log of logs) {\r\n            if (log.log_id === logId) {\r\n                publicKeyBase64 = log.key;\r\n                break;\r\n            }\r\n        }\r\n        if (!publicKeyBase64) {\r\n            throw new Error(`Public key not found for CT with logId: ${logId}`);\r\n        }\r\n        const pki = pvutils.stringToArrayBuffer(pvutils.fromBase64(publicKeyBase64));\r\n        const publicKeyInfo = PublicKeyInfo.fromBER(pki);\r\n        stream.appendChar(0x00);\r\n        stream.appendChar(0x00);\r\n        const timeBuffer = new ArrayBuffer(8);\r\n        const timeView = new Uint8Array(timeBuffer);\r\n        const baseArray = pvutils.utilToBase(this.timestamp.valueOf(), 8);\r\n        timeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\r\n        stream.appendView(timeView);\r\n        stream.appendUint16(dataType);\r\n        if (dataType === 0)\r\n            stream.appendUint24(data.byteLength);\r\n        stream.appendView(new Uint8Array(data));\r\n        stream.appendUint16(this.extensions.byteLength);\r\n        if (this.extensions.byteLength !== 0)\r\n            stream.appendView(new Uint8Array(this.extensions));\r\n        return crypto.verifyWithPublicKey(stream.buffer.slice(0, stream.length), new asn1js.OctetString({ valueHex: this.signature.toBER(false) }), publicKeyInfo, { algorithmId: EMPTY_STRING }, \"SHA-256\");\r\n    }\r\n}\r\nSignedCertificateTimestamp.CLASS_NAME = \"SignedCertificateTimestamp\";\r\nasync function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1), crypto = getCrypto(true)) {\r\n    let parsedValue = null;\r\n    const stream = new bs.SeqStream();\r\n    for (let i = 0; certificate.extensions && i < certificate.extensions.length; i++) {\r\n        switch (certificate.extensions[i].extnID) {\r\n            case id_SignedCertificateTimestampList:\r\n                {\r\n                    parsedValue = certificate.extensions[i].parsedValue;\r\n                    if (!parsedValue || parsedValue.timestamps.length === 0)\r\n                        throw new Error(\"Nothing to verify in the certificate\");\r\n                    certificate.extensions.splice(i, 1);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n    if (parsedValue === null)\r\n        throw new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\r\n    const tbs = certificate.encodeTBS().toBER();\r\n    const issuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\r\n    stream.appendView(new Uint8Array(issuerId));\r\n    stream.appendUint24(tbs.byteLength);\r\n    stream.appendView(new Uint8Array(tbs));\r\n    const preCert = stream.stream.slice(0, stream.length);\r\n    if (index === (-1)) {\r\n        const verifyArray = [];\r\n        for (const timestamp of parsedValue.timestamps) {\r\n            const verifyResult = await timestamp.verify(logs, preCert.buffer, 1, crypto);\r\n            verifyArray.push(verifyResult);\r\n        }\r\n        return verifyArray;\r\n    }\r\n    if (index >= parsedValue.timestamps.length)\r\n        index = (parsedValue.timestamps.length - 1);\r\n    return [await parsedValue.timestamps[index].verify(logs, preCert.buffer, 1, crypto)];\r\n}\n\nconst TIMESTAMPS = \"timestamps\";\r\nclass SignedCertificateTimestampList extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.timestamps = pvutils.getParametersValue(parameters, TIMESTAMPS, SignedCertificateTimestampList.defaultValues(TIMESTAMPS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TIMESTAMPS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TIMESTAMPS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        var _a;\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        (_a = names.optional) !== null && _a !== void 0 ? _a : (names.optional = false);\r\n        return (new asn1js.OctetString({\r\n            name: (names.blockName || \"SignedCertificateTimestampList\"),\r\n            optional: names.optional\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        if ((schema instanceof asn1js.OctetString) === false) {\r\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n        }\r\n        const seqStream = new bs.SeqStream({\r\n            stream: new bs.ByteStream({\r\n                buffer: schema.valueBlock.valueHex\r\n            })\r\n        });\r\n        const dataLength = seqStream.getUint16();\r\n        if (dataLength !== seqStream.length) {\r\n            throw new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\r\n        }\r\n        while (seqStream.length) {\r\n            this.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const stream = new bs.SeqStream();\r\n        let overallLength = 0;\r\n        const timestampsData = [];\r\n        for (const timestamp of this.timestamps) {\r\n            const timestampStream = timestamp.toStream();\r\n            timestampsData.push(timestampStream);\r\n            overallLength += timestampStream.stream.buffer.byteLength;\r\n        }\r\n        stream.appendUint16(overallLength);\r\n        for (const timestamp of timestampsData) {\r\n            stream.appendView(timestamp.stream.view);\r\n        }\r\n        return new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\r\n    }\r\n    toJSON() {\r\n        return {\r\n            timestamps: Array.from(this.timestamps, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nSignedCertificateTimestampList.CLASS_NAME = \"SignedCertificateTimestampList\";\n\nconst ATTRIBUTES$4 = \"attributes\";\r\nconst CLEAR_PROPS$11 = [\r\n    ATTRIBUTES$4\r\n];\r\nclass SubjectDirectoryAttributes extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$4, SubjectDirectoryAttributes.defaultValues(ATTRIBUTES$4));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ATTRIBUTES$4:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.attributes || EMPTY_STRING),\r\n                    value: Attribute.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$11);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SubjectDirectoryAttributes.schema({\r\n            names: {\r\n                attributes: ATTRIBUTES$4\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.attributes, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            attributes: Array.from(this.attributes, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nSubjectDirectoryAttributes.CLASS_NAME = \"SubjectDirectoryAttributes\";\n\nclass ExtensionValueFactory {\r\n    static getItems() {\r\n        if (!this.types) {\r\n            this.types = {};\r\n            ExtensionValueFactory.register(id_SubjectAltName, \"SubjectAltName\", AltName);\r\n            ExtensionValueFactory.register(id_IssuerAltName, \"IssuerAltName\", AltName);\r\n            ExtensionValueFactory.register(id_AuthorityKeyIdentifier, \"AuthorityKeyIdentifier\", AuthorityKeyIdentifier);\r\n            ExtensionValueFactory.register(id_BasicConstraints, \"BasicConstraints\", BasicConstraints);\r\n            ExtensionValueFactory.register(id_MicrosoftCaVersion, \"MicrosoftCaVersion\", CAVersion);\r\n            ExtensionValueFactory.register(id_CertificatePolicies, \"CertificatePolicies\", CertificatePolicies);\r\n            ExtensionValueFactory.register(id_MicrosoftAppPolicies, \"CertificatePoliciesMicrosoft\", CertificatePolicies);\r\n            ExtensionValueFactory.register(id_MicrosoftCertTemplateV2, \"MicrosoftCertTemplateV2\", CertificateTemplate);\r\n            ExtensionValueFactory.register(id_CRLDistributionPoints, \"CRLDistributionPoints\", CRLDistributionPoints);\r\n            ExtensionValueFactory.register(id_FreshestCRL, \"FreshestCRL\", CRLDistributionPoints);\r\n            ExtensionValueFactory.register(id_ExtKeyUsage, \"ExtKeyUsage\", ExtKeyUsage);\r\n            ExtensionValueFactory.register(id_CertificateIssuer, \"CertificateIssuer\", GeneralNames);\r\n            ExtensionValueFactory.register(id_AuthorityInfoAccess, \"AuthorityInfoAccess\", InfoAccess);\r\n            ExtensionValueFactory.register(id_SubjectInfoAccess, \"SubjectInfoAccess\", InfoAccess);\r\n            ExtensionValueFactory.register(id_IssuingDistributionPoint, \"IssuingDistributionPoint\", IssuingDistributionPoint);\r\n            ExtensionValueFactory.register(id_NameConstraints, \"NameConstraints\", NameConstraints);\r\n            ExtensionValueFactory.register(id_PolicyConstraints, \"PolicyConstraints\", PolicyConstraints);\r\n            ExtensionValueFactory.register(id_PolicyMappings, \"PolicyMappings\", PolicyMappings);\r\n            ExtensionValueFactory.register(id_PrivateKeyUsagePeriod, \"PrivateKeyUsagePeriod\", PrivateKeyUsagePeriod);\r\n            ExtensionValueFactory.register(id_QCStatements, \"QCStatements\", QCStatements);\r\n            ExtensionValueFactory.register(id_SignedCertificateTimestampList, \"SignedCertificateTimestampList\", SignedCertificateTimestampList);\r\n            ExtensionValueFactory.register(id_SubjectDirectoryAttributes, \"SubjectDirectoryAttributes\", SubjectDirectoryAttributes);\r\n        }\r\n        return this.types;\r\n    }\r\n    static fromBER(id, raw) {\r\n        const asn1 = asn1js.fromBER(raw);\r\n        if (asn1.offset === -1) {\r\n            return null;\r\n        }\r\n        const item = this.find(id);\r\n        if (item) {\r\n            try {\r\n                return new item.type({ schema: asn1.result });\r\n            }\r\n            catch (ex) {\r\n                const res = new item.type();\r\n                res.parsingError = `Incorrectly formatted value of extension ${item.name} (${id})`;\r\n                return res;\r\n            }\r\n        }\r\n        return asn1.result;\r\n    }\r\n    static find(id) {\r\n        const types = this.getItems();\r\n        return types[id] || null;\r\n    }\r\n    static register(id, name, type) {\r\n        this.getItems()[id] = { name, type };\r\n    }\r\n}\n\nconst EXTN_ID = \"extnID\";\r\nconst CRITICAL = \"critical\";\r\nconst EXTN_VALUE = \"extnValue\";\r\nconst PARSED_VALUE$5 = \"parsedValue\";\r\nconst CLEAR_PROPS$10 = [\r\n    EXTN_ID,\r\n    CRITICAL,\r\n    EXTN_VALUE\r\n];\r\nclass Extension extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.extnID = pvutils.getParametersValue(parameters, EXTN_ID, Extension.defaultValues(EXTN_ID));\r\n        this.critical = pvutils.getParametersValue(parameters, CRITICAL, Extension.defaultValues(CRITICAL));\r\n        if (EXTN_VALUE in parameters) {\r\n            this.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\r\n        }\r\n        else {\r\n            this.extnValue = Extension.defaultValues(EXTN_VALUE);\r\n        }\r\n        if (PARSED_VALUE$5 in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$5, Extension.defaultValues(PARSED_VALUE$5));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get parsedValue() {\r\n        if (this._parsedValue === undefined) {\r\n            const parsedValue = ExtensionValueFactory.fromBER(this.extnID, this.extnValue.valueBlock.valueHexView);\r\n            this._parsedValue = parsedValue;\r\n        }\r\n        return this._parsedValue || undefined;\r\n    }\r\n    set parsedValue(value) {\r\n        this._parsedValue = value;\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case EXTN_ID:\r\n                return EMPTY_STRING;\r\n            case CRITICAL:\r\n                return false;\r\n            case EXTN_VALUE:\r\n                return new asn1js.OctetString();\r\n            case PARSED_VALUE$5:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.extnID || EMPTY_STRING) }),\r\n                new asn1js.Boolean({\r\n                    name: (names.critical || EMPTY_STRING),\r\n                    optional: true\r\n                }),\r\n                new asn1js.OctetString({ name: (names.extnValue || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$10);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Extension.schema({\r\n            names: {\r\n                extnID: EXTN_ID,\r\n                critical: CRITICAL,\r\n                extnValue: EXTN_VALUE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.extnID = asn1.result.extnID.valueBlock.toString();\r\n        if (CRITICAL in asn1.result) {\r\n            this.critical = asn1.result.critical.valueBlock.value;\r\n        }\r\n        this.extnValue = asn1.result.extnValue;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\r\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\r\n            outputArray.push(new asn1js.Boolean({ value: this.critical }));\r\n        }\r\n        outputArray.push(this.extnValue);\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            extnID: this.extnID,\r\n            extnValue: this.extnValue.toJSON(),\r\n        };\r\n        if (this.critical !== Extension.defaultValues(CRITICAL)) {\r\n            object.critical = this.critical;\r\n        }\r\n        if (this.parsedValue && this.parsedValue.toJSON) {\r\n            object.parsedValue = this.parsedValue.toJSON();\r\n        }\r\n        return object;\r\n    }\r\n}\r\nExtension.CLASS_NAME = \"Extension\";\n\nconst EXTENSIONS$5 = \"extensions\";\r\nconst CLEAR_PROPS$$ = [\r\n    EXTENSIONS$5,\r\n];\r\nclass Extensions extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$5, Extensions.defaultValues(EXTENSIONS$5));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case EXTENSIONS$5:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}, optional = false) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            optional,\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.extensions || EMPTY_STRING),\r\n                    value: Extension.schema(names.extension || {})\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$$);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Extensions.schema({\r\n            names: {\r\n                extensions: EXTENSIONS$5\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.extensions, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            extensions: this.extensions.map(o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nExtensions.CLASS_NAME = \"Extensions\";\n\nconst ISSUER$5 = \"issuer\";\r\nconst SERIAL_NUMBER$6 = \"serialNumber\";\r\nconst ISSUER_UID = \"issuerUID\";\r\nconst CLEAR_PROPS$_ = [\r\n    ISSUER$5,\r\n    SERIAL_NUMBER$6,\r\n    ISSUER_UID,\r\n];\r\nclass IssuerSerial extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$5, IssuerSerial.defaultValues(ISSUER$5));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$6, IssuerSerial.defaultValues(SERIAL_NUMBER$6));\r\n        if (ISSUER_UID in parameters) {\r\n            this.issuerUID = pvutils.getParametersValue(parameters, ISSUER_UID, IssuerSerial.defaultValues(ISSUER_UID));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ISSUER$5:\r\n                return new GeneralNames();\r\n            case SERIAL_NUMBER$6:\r\n                return new asn1js.Integer();\r\n            case ISSUER_UID:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                GeneralNames.schema(names.issuer || {}),\r\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\r\n                new asn1js.BitString({\r\n                    optional: true,\r\n                    name: (names.issuerUID || EMPTY_STRING)\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$_);\r\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerSerial.schema({\r\n            names: {\r\n                issuer: {\r\n                    names: {\r\n                        blockName: ISSUER$5\r\n                    }\r\n                },\r\n                serialNumber: SERIAL_NUMBER$6,\r\n                issuerUID: ISSUER_UID\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.issuer = new GeneralNames({ schema: asn1.result.issuer });\r\n        this.serialNumber = asn1.result.serialNumber;\r\n        if (ISSUER_UID in asn1.result)\r\n            this.issuerUID = asn1.result.issuerUID;\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence({\r\n            value: [\r\n                this.issuer.toSchema(),\r\n                this.serialNumber\r\n            ]\r\n        });\r\n        if (this.issuerUID) {\r\n            result.valueBlock.value.push(this.issuerUID);\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {\r\n            issuer: this.issuer.toJSON(),\r\n            serialNumber: this.serialNumber.toJSON()\r\n        };\r\n        if (this.issuerUID) {\r\n            result.issuerUID = this.issuerUID.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nIssuerSerial.CLASS_NAME = \"IssuerSerial\";\n\nconst VERSION$h = \"version\";\r\nconst BASE_CERTIFICATE_ID$2 = \"baseCertificateID\";\r\nconst SUBJECT_NAME = \"subjectName\";\r\nconst ISSUER$4 = \"issuer\";\r\nconst SIGNATURE$6 = \"signature\";\r\nconst SERIAL_NUMBER$5 = \"serialNumber\";\r\nconst ATTR_CERT_VALIDITY_PERIOD$1 = \"attrCertValidityPeriod\";\r\nconst ATTRIBUTES$3 = \"attributes\";\r\nconst ISSUER_UNIQUE_ID$2 = \"issuerUniqueID\";\r\nconst EXTENSIONS$4 = \"extensions\";\r\nconst CLEAR_PROPS$Z = [\r\n    VERSION$h,\r\n    BASE_CERTIFICATE_ID$2,\r\n    SUBJECT_NAME,\r\n    ISSUER$4,\r\n    SIGNATURE$6,\r\n    SERIAL_NUMBER$5,\r\n    ATTR_CERT_VALIDITY_PERIOD$1,\r\n    ATTRIBUTES$3,\r\n    ISSUER_UNIQUE_ID$2,\r\n    EXTENSIONS$4,\r\n];\r\nclass AttributeCertificateInfoV1 extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$h, AttributeCertificateInfoV1.defaultValues(VERSION$h));\r\n        if (BASE_CERTIFICATE_ID$2 in parameters) {\r\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$2, AttributeCertificateInfoV1.defaultValues(BASE_CERTIFICATE_ID$2));\r\n        }\r\n        if (SUBJECT_NAME in parameters) {\r\n            this.subjectName = pvutils.getParametersValue(parameters, SUBJECT_NAME, AttributeCertificateInfoV1.defaultValues(SUBJECT_NAME));\r\n        }\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$4, AttributeCertificateInfoV1.defaultValues(ISSUER$4));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$6, AttributeCertificateInfoV1.defaultValues(SIGNATURE$6));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$5, AttributeCertificateInfoV1.defaultValues(SERIAL_NUMBER$5));\r\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD$1, AttributeCertificateInfoV1.defaultValues(ATTR_CERT_VALIDITY_PERIOD$1));\r\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$3, AttributeCertificateInfoV1.defaultValues(ATTRIBUTES$3));\r\n        if (ISSUER_UNIQUE_ID$2 in parameters)\r\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$2, AttributeCertificateInfoV1.defaultValues(ISSUER_UNIQUE_ID$2));\r\n        if (EXTENSIONS$4 in parameters) {\r\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$4, AttributeCertificateInfoV1.defaultValues(EXTENSIONS$4));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$h:\r\n                return 0;\r\n            case BASE_CERTIFICATE_ID$2:\r\n                return new IssuerSerial();\r\n            case SUBJECT_NAME:\r\n                return new GeneralNames();\r\n            case ISSUER$4:\r\n                return new GeneralNames();\r\n            case SIGNATURE$6:\r\n                return new AlgorithmIdentifier();\r\n            case SERIAL_NUMBER$5:\r\n                return new asn1js.Integer();\r\n            case ATTR_CERT_VALIDITY_PERIOD$1:\r\n                return new AttCertValidityPeriod();\r\n            case ATTRIBUTES$3:\r\n                return [];\r\n            case ISSUER_UNIQUE_ID$2:\r\n                return new asn1js.BitString();\r\n            case EXTENSIONS$4:\r\n                return new Extensions();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.Constructed({\r\n                            name: (names.baseCertificateID || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                            value: IssuerSerial.schema().valueBlock.value\r\n                        }),\r\n                        new asn1js.Constructed({\r\n                            name: (names.subjectName || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 1\r\n                            },\r\n                            value: GeneralNames.schema().valueBlock.value\r\n                        }),\r\n                    ]\r\n                }),\r\n                GeneralNames.schema({\r\n                    names: {\r\n                        blockName: (names.issuer || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                AlgorithmIdentifier.schema(names.signature || {}),\r\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\r\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n                new asn1js.Sequence({\r\n                    name: (names.attributes || EMPTY_STRING),\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.BitString({\r\n                    optional: true,\r\n                    name: (names.issuerUniqueID || EMPTY_STRING)\r\n                }),\r\n                Extensions.schema(names.extensions || {}, true)\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$Z);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV1.schema({\r\n            names: {\r\n                version: VERSION$h,\r\n                baseCertificateID: BASE_CERTIFICATE_ID$2,\r\n                subjectName: SUBJECT_NAME,\r\n                issuer: ISSUER$4,\r\n                signature: {\r\n                    names: {\r\n                        blockName: SIGNATURE$6\r\n                    }\r\n                },\r\n                serialNumber: SERIAL_NUMBER$5,\r\n                attrCertValidityPeriod: {\r\n                    names: {\r\n                        blockName: ATTR_CERT_VALIDITY_PERIOD$1\r\n                    }\r\n                },\r\n                attributes: ATTRIBUTES$3,\r\n                issuerUniqueID: ISSUER_UNIQUE_ID$2,\r\n                extensions: {\r\n                    names: {\r\n                        blockName: EXTENSIONS$4\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        if (BASE_CERTIFICATE_ID$2 in asn1.result) {\r\n            this.baseCertificateID = new IssuerSerial({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.baseCertificateID.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        if (SUBJECT_NAME in asn1.result) {\r\n            this.subjectName = new GeneralNames({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.subjectName.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        this.issuer = asn1.result.issuer;\r\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n        this.serialNumber = asn1.result.serialNumber;\r\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n        if (ISSUER_UNIQUE_ID$2 in asn1.result) {\r\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\r\n        }\r\n        if (EXTENSIONS$4 in asn1.result) {\r\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence({\r\n            value: [new asn1js.Integer({ value: this.version })]\r\n        });\r\n        if (this.baseCertificateID) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.baseCertificateID.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        if (this.subjectName) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: this.subjectName.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        result.valueBlock.value.push(this.issuer.toSchema());\r\n        result.valueBlock.value.push(this.signature.toSchema());\r\n        result.valueBlock.value.push(this.serialNumber);\r\n        result.valueBlock.value.push(this.attrCertValidityPeriod.toSchema());\r\n        result.valueBlock.value.push(new asn1js.Sequence({\r\n            value: Array.from(this.attributes, o => o.toSchema())\r\n        }));\r\n        if (this.issuerUniqueID) {\r\n            result.valueBlock.value.push(this.issuerUniqueID);\r\n        }\r\n        if (this.extensions) {\r\n            result.valueBlock.value.push(this.extensions.toSchema());\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {\r\n            version: this.version\r\n        };\r\n        if (this.baseCertificateID) {\r\n            result.baseCertificateID = this.baseCertificateID.toJSON();\r\n        }\r\n        if (this.subjectName) {\r\n            result.subjectName = this.subjectName.toJSON();\r\n        }\r\n        result.issuer = this.issuer.toJSON();\r\n        result.signature = this.signature.toJSON();\r\n        result.serialNumber = this.serialNumber.toJSON();\r\n        result.attrCertValidityPeriod = this.attrCertValidityPeriod.toJSON();\r\n        result.attributes = Array.from(this.attributes, o => o.toJSON());\r\n        if (this.issuerUniqueID) {\r\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n        }\r\n        if (this.extensions) {\r\n            result.extensions = this.extensions.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nAttributeCertificateInfoV1.CLASS_NAME = \"AttributeCertificateInfoV1\";\n\nconst ACINFO$1 = \"acinfo\";\r\nconst SIGNATURE_ALGORITHM$7 = \"signatureAlgorithm\";\r\nconst SIGNATURE_VALUE$4 = \"signatureValue\";\r\nconst CLEAR_PROPS$Y = [\r\n    ACINFO$1,\r\n    SIGNATURE_VALUE$4,\r\n    SIGNATURE_ALGORITHM$7\r\n];\r\nclass AttributeCertificateV1 extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO$1, AttributeCertificateV1.defaultValues(ACINFO$1));\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$7, AttributeCertificateV1.defaultValues(SIGNATURE_ALGORITHM$7));\r\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$4, AttributeCertificateV1.defaultValues(SIGNATURE_VALUE$4));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ACINFO$1:\r\n                return new AttributeCertificateInfoV1();\r\n            case SIGNATURE_ALGORITHM$7:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE_VALUE$4:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AttributeCertificateInfoV1.schema(names.acinfo || {}),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$Y);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV1.schema({\r\n            names: {\r\n                acinfo: {\r\n                    names: {\r\n                        blockName: ACINFO$1\r\n                    }\r\n                },\r\n                signatureAlgorithm: {\r\n                    names: {\r\n                        blockName: SIGNATURE_ALGORITHM$7\r\n                    }\r\n                },\r\n                signatureValue: SIGNATURE_VALUE$4\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.acinfo = new AttributeCertificateInfoV1({ schema: asn1.result.acinfo });\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signatureValue = asn1.result.signatureValue;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.acinfo.toSchema(),\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            acinfo: this.acinfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON(),\r\n        };\r\n    }\r\n}\r\nAttributeCertificateV1.CLASS_NAME = \"AttributeCertificateV1\";\n\nconst DIGESTED_OBJECT_TYPE = \"digestedObjectType\";\r\nconst OTHER_OBJECT_TYPE_ID = \"otherObjectTypeID\";\r\nconst DIGEST_ALGORITHM$2 = \"digestAlgorithm\";\r\nconst OBJECT_DIGEST = \"objectDigest\";\r\nconst CLEAR_PROPS$X = [\r\n    DIGESTED_OBJECT_TYPE,\r\n    OTHER_OBJECT_TYPE_ID,\r\n    DIGEST_ALGORITHM$2,\r\n    OBJECT_DIGEST,\r\n];\r\nclass ObjectDigestInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.digestedObjectType = pvutils.getParametersValue(parameters, DIGESTED_OBJECT_TYPE, ObjectDigestInfo.defaultValues(DIGESTED_OBJECT_TYPE));\r\n        if (OTHER_OBJECT_TYPE_ID in parameters) {\r\n            this.otherObjectTypeID = pvutils.getParametersValue(parameters, OTHER_OBJECT_TYPE_ID, ObjectDigestInfo.defaultValues(OTHER_OBJECT_TYPE_ID));\r\n        }\r\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$2, ObjectDigestInfo.defaultValues(DIGEST_ALGORITHM$2));\r\n        this.objectDigest = pvutils.getParametersValue(parameters, OBJECT_DIGEST, ObjectDigestInfo.defaultValues(OBJECT_DIGEST));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case DIGESTED_OBJECT_TYPE:\r\n                return new asn1js.Enumerated();\r\n            case OTHER_OBJECT_TYPE_ID:\r\n                return new asn1js.ObjectIdentifier();\r\n            case DIGEST_ALGORITHM$2:\r\n                return new AlgorithmIdentifier();\r\n            case OBJECT_DIGEST:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Enumerated({ name: (names.digestedObjectType || EMPTY_STRING) }),\r\n                new asn1js.ObjectIdentifier({\r\n                    optional: true,\r\n                    name: (names.otherObjectTypeID || EMPTY_STRING)\r\n                }),\r\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {}),\r\n                new asn1js.BitString({ name: (names.objectDigest || EMPTY_STRING) }),\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$X);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ObjectDigestInfo.schema({\r\n            names: {\r\n                digestedObjectType: DIGESTED_OBJECT_TYPE,\r\n                otherObjectTypeID: OTHER_OBJECT_TYPE_ID,\r\n                digestAlgorithm: {\r\n                    names: {\r\n                        blockName: DIGEST_ALGORITHM$2\r\n                    }\r\n                },\r\n                objectDigest: OBJECT_DIGEST\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.digestedObjectType = asn1.result.digestedObjectType;\r\n        if (OTHER_OBJECT_TYPE_ID in asn1.result) {\r\n            this.otherObjectTypeID = asn1.result.otherObjectTypeID;\r\n        }\r\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n        this.objectDigest = asn1.result.objectDigest;\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence({\r\n            value: [this.digestedObjectType]\r\n        });\r\n        if (this.otherObjectTypeID) {\r\n            result.valueBlock.value.push(this.otherObjectTypeID);\r\n        }\r\n        result.valueBlock.value.push(this.digestAlgorithm.toSchema());\r\n        result.valueBlock.value.push(this.objectDigest);\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {\r\n            digestedObjectType: this.digestedObjectType.toJSON(),\r\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\r\n            objectDigest: this.objectDigest.toJSON(),\r\n        };\r\n        if (this.otherObjectTypeID) {\r\n            result.otherObjectTypeID = this.otherObjectTypeID.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nObjectDigestInfo.CLASS_NAME = \"ObjectDigestInfo\";\n\nconst ISSUER_NAME = \"issuerName\";\r\nconst BASE_CERTIFICATE_ID$1 = \"baseCertificateID\";\r\nconst OBJECT_DIGEST_INFO$1 = \"objectDigestInfo\";\r\nconst CLEAR_PROPS$W = [\r\n    ISSUER_NAME,\r\n    BASE_CERTIFICATE_ID$1,\r\n    OBJECT_DIGEST_INFO$1\r\n];\r\nclass V2Form extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (ISSUER_NAME in parameters) {\r\n            this.issuerName = pvutils.getParametersValue(parameters, ISSUER_NAME, V2Form.defaultValues(ISSUER_NAME));\r\n        }\r\n        if (BASE_CERTIFICATE_ID$1 in parameters) {\r\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID$1, V2Form.defaultValues(BASE_CERTIFICATE_ID$1));\r\n        }\r\n        if (OBJECT_DIGEST_INFO$1 in parameters) {\r\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO$1, V2Form.defaultValues(OBJECT_DIGEST_INFO$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ISSUER_NAME:\r\n                return new GeneralNames();\r\n            case BASE_CERTIFICATE_ID$1:\r\n                return new IssuerSerial();\r\n            case OBJECT_DIGEST_INFO$1:\r\n                return new ObjectDigestInfo();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                GeneralNames.schema({\r\n                    names: {\r\n                        blockName: names.issuerName\r\n                    }\r\n                }, true),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    name: (names.baseCertificateID || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: IssuerSerial.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    name: (names.objectDigestInfo || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: ObjectDigestInfo.schema().valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$W);\r\n        const asn1 = asn1js.compareSchema(schema, schema, V2Form.schema({\r\n            names: {\r\n                issuerName: ISSUER_NAME,\r\n                baseCertificateID: BASE_CERTIFICATE_ID$1,\r\n                objectDigestInfo: OBJECT_DIGEST_INFO$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (ISSUER_NAME in asn1.result)\r\n            this.issuerName = new GeneralNames({ schema: asn1.result.issuerName });\r\n        if (BASE_CERTIFICATE_ID$1 in asn1.result) {\r\n            this.baseCertificateID = new IssuerSerial({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.baseCertificateID.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        if (OBJECT_DIGEST_INFO$1 in asn1.result) {\r\n            this.objectDigestInfo = new ObjectDigestInfo({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.objectDigestInfo.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence();\r\n        if (this.issuerName)\r\n            result.valueBlock.value.push(this.issuerName.toSchema());\r\n        if (this.baseCertificateID) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.baseCertificateID.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        if (this.objectDigestInfo) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: this.objectDigestInfo.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {};\r\n        if (this.issuerName) {\r\n            result.issuerName = this.issuerName.toJSON();\r\n        }\r\n        if (this.baseCertificateID) {\r\n            result.baseCertificateID = this.baseCertificateID.toJSON();\r\n        }\r\n        if (this.objectDigestInfo) {\r\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nV2Form.CLASS_NAME = \"V2Form\";\n\nconst BASE_CERTIFICATE_ID = \"baseCertificateID\";\r\nconst ENTITY_NAME = \"entityName\";\r\nconst OBJECT_DIGEST_INFO = \"objectDigestInfo\";\r\nconst CLEAR_PROPS$V = [\r\n    BASE_CERTIFICATE_ID,\r\n    ENTITY_NAME,\r\n    OBJECT_DIGEST_INFO\r\n];\r\nclass Holder extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        if (BASE_CERTIFICATE_ID in parameters) {\r\n            this.baseCertificateID = pvutils.getParametersValue(parameters, BASE_CERTIFICATE_ID, Holder.defaultValues(BASE_CERTIFICATE_ID));\r\n        }\r\n        if (ENTITY_NAME in parameters) {\r\n            this.entityName = pvutils.getParametersValue(parameters, ENTITY_NAME, Holder.defaultValues(ENTITY_NAME));\r\n        }\r\n        if (OBJECT_DIGEST_INFO in parameters) {\r\n            this.objectDigestInfo = pvutils.getParametersValue(parameters, OBJECT_DIGEST_INFO, Holder.defaultValues(OBJECT_DIGEST_INFO));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case BASE_CERTIFICATE_ID:\r\n                return new IssuerSerial();\r\n            case ENTITY_NAME:\r\n                return new GeneralNames();\r\n            case OBJECT_DIGEST_INFO:\r\n                return new ObjectDigestInfo();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    name: (names.baseCertificateID || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: IssuerSerial.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    name: (names.entityName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: GeneralNames.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    name: (names.objectDigestInfo || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: ObjectDigestInfo.schema().valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$V);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Holder.schema({\r\n            names: {\r\n                baseCertificateID: BASE_CERTIFICATE_ID,\r\n                entityName: ENTITY_NAME,\r\n                objectDigestInfo: OBJECT_DIGEST_INFO\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (BASE_CERTIFICATE_ID in asn1.result) {\r\n            this.baseCertificateID = new IssuerSerial({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.baseCertificateID.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        if (ENTITY_NAME in asn1.result) {\r\n            this.entityName = new GeneralNames({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.entityName.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        if (OBJECT_DIGEST_INFO in asn1.result) {\r\n            this.objectDigestInfo = new ObjectDigestInfo({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.objectDigestInfo.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence();\r\n        if (this.baseCertificateID) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.baseCertificateID.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        if (this.entityName) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: this.entityName.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        if (this.objectDigestInfo) {\r\n            result.valueBlock.value.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                value: this.objectDigestInfo.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {};\r\n        if (this.baseCertificateID) {\r\n            result.baseCertificateID = this.baseCertificateID.toJSON();\r\n        }\r\n        if (this.entityName) {\r\n            result.entityName = this.entityName.toJSON();\r\n        }\r\n        if (this.objectDigestInfo) {\r\n            result.objectDigestInfo = this.objectDigestInfo.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nHolder.CLASS_NAME = \"Holder\";\n\nconst VERSION$g = \"version\";\r\nconst HOLDER = \"holder\";\r\nconst ISSUER$3 = \"issuer\";\r\nconst SIGNATURE$5 = \"signature\";\r\nconst SERIAL_NUMBER$4 = \"serialNumber\";\r\nconst ATTR_CERT_VALIDITY_PERIOD = \"attrCertValidityPeriod\";\r\nconst ATTRIBUTES$2 = \"attributes\";\r\nconst ISSUER_UNIQUE_ID$1 = \"issuerUniqueID\";\r\nconst EXTENSIONS$3 = \"extensions\";\r\nconst CLEAR_PROPS$U = [\r\n    VERSION$g,\r\n    HOLDER,\r\n    ISSUER$3,\r\n    SIGNATURE$5,\r\n    SERIAL_NUMBER$4,\r\n    ATTR_CERT_VALIDITY_PERIOD,\r\n    ATTRIBUTES$2,\r\n    ISSUER_UNIQUE_ID$1,\r\n    EXTENSIONS$3\r\n];\r\nclass AttributeCertificateInfoV2 extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$g, AttributeCertificateInfoV2.defaultValues(VERSION$g));\r\n        this.holder = pvutils.getParametersValue(parameters, HOLDER, AttributeCertificateInfoV2.defaultValues(HOLDER));\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$3, AttributeCertificateInfoV2.defaultValues(ISSUER$3));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$5, AttributeCertificateInfoV2.defaultValues(SIGNATURE$5));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$4, AttributeCertificateInfoV2.defaultValues(SERIAL_NUMBER$4));\r\n        this.attrCertValidityPeriod = pvutils.getParametersValue(parameters, ATTR_CERT_VALIDITY_PERIOD, AttributeCertificateInfoV2.defaultValues(ATTR_CERT_VALIDITY_PERIOD));\r\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$2, AttributeCertificateInfoV2.defaultValues(ATTRIBUTES$2));\r\n        if (ISSUER_UNIQUE_ID$1 in parameters) {\r\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID$1, AttributeCertificateInfoV2.defaultValues(ISSUER_UNIQUE_ID$1));\r\n        }\r\n        if (EXTENSIONS$3 in parameters) {\r\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$3, AttributeCertificateInfoV2.defaultValues(EXTENSIONS$3));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$g:\r\n                return 1;\r\n            case HOLDER:\r\n                return new Holder();\r\n            case ISSUER$3:\r\n                return {};\r\n            case SIGNATURE$5:\r\n                return new AlgorithmIdentifier();\r\n            case SERIAL_NUMBER$4:\r\n                return new asn1js.Integer();\r\n            case ATTR_CERT_VALIDITY_PERIOD:\r\n                return new AttCertValidityPeriod();\r\n            case ATTRIBUTES$2:\r\n                return [];\r\n            case ISSUER_UNIQUE_ID$1:\r\n                return new asn1js.BitString();\r\n            case EXTENSIONS$3:\r\n                return new Extensions();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                Holder.schema(names.holder || {}),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        GeneralNames.schema({\r\n                            names: {\r\n                                blockName: (names.issuer || EMPTY_STRING)\r\n                            }\r\n                        }),\r\n                        new asn1js.Constructed({\r\n                            name: (names.issuer || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                            value: V2Form.schema().valueBlock.value\r\n                        })\r\n                    ]\r\n                }),\r\n                AlgorithmIdentifier.schema(names.signature || {}),\r\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) }),\r\n                AttCertValidityPeriod.schema(names.attrCertValidityPeriod || {}),\r\n                new asn1js.Sequence({\r\n                    name: (names.attributes || EMPTY_STRING),\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.BitString({\r\n                    optional: true,\r\n                    name: (names.issuerUniqueID || EMPTY_STRING)\r\n                }),\r\n                Extensions.schema(names.extensions || {}, true)\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$U);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateInfoV2.schema({\r\n            names: {\r\n                version: VERSION$g,\r\n                holder: {\r\n                    names: {\r\n                        blockName: HOLDER\r\n                    }\r\n                },\r\n                issuer: ISSUER$3,\r\n                signature: {\r\n                    names: {\r\n                        blockName: SIGNATURE$5\r\n                    }\r\n                },\r\n                serialNumber: SERIAL_NUMBER$4,\r\n                attrCertValidityPeriod: {\r\n                    names: {\r\n                        blockName: ATTR_CERT_VALIDITY_PERIOD\r\n                    }\r\n                },\r\n                attributes: ATTRIBUTES$2,\r\n                issuerUniqueID: ISSUER_UNIQUE_ID$1,\r\n                extensions: {\r\n                    names: {\r\n                        blockName: EXTENSIONS$3\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.holder = new Holder({ schema: asn1.result.holder });\r\n        switch (asn1.result.issuer.idBlock.tagClass) {\r\n            case 3:\r\n                this.issuer = new V2Form({\r\n                    schema: new asn1js.Sequence({\r\n                        value: asn1.result.issuer.valueBlock.value\r\n                    })\r\n                });\r\n                break;\r\n            case 1:\r\n            default:\r\n                throw new Error(\"Incorrect value for 'issuer' in AttributeCertificateInfoV2\");\r\n        }\r\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result.signature });\r\n        this.serialNumber = asn1.result.serialNumber;\r\n        this.attrCertValidityPeriod = new AttCertValidityPeriod({ schema: asn1.result.attrCertValidityPeriod });\r\n        this.attributes = Array.from(asn1.result.attributes.valueBlock.value, element => new Attribute({ schema: element }));\r\n        if (ISSUER_UNIQUE_ID$1 in asn1.result) {\r\n            this.issuerUniqueID = asn1.result.issuerUniqueID;\r\n        }\r\n        if (EXTENSIONS$3 in asn1.result) {\r\n            this.extensions = new Extensions({ schema: asn1.result.extensions });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const result = new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.Integer({ value: this.version }),\r\n                this.holder.toSchema(),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: this.issuer.toSchema().valueBlock.value\r\n                }),\r\n                this.signature.toSchema(),\r\n                this.serialNumber,\r\n                this.attrCertValidityPeriod.toSchema(),\r\n                new asn1js.Sequence({\r\n                    value: Array.from(this.attributes, o => o.toSchema())\r\n                })\r\n            ]\r\n        });\r\n        if (this.issuerUniqueID) {\r\n            result.valueBlock.value.push(this.issuerUniqueID);\r\n        }\r\n        if (this.extensions) {\r\n            result.valueBlock.value.push(this.extensions.toSchema());\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const result = {\r\n            version: this.version,\r\n            holder: this.holder.toJSON(),\r\n            issuer: this.issuer.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n            serialNumber: this.serialNumber.toJSON(),\r\n            attrCertValidityPeriod: this.attrCertValidityPeriod.toJSON(),\r\n            attributes: Array.from(this.attributes, o => o.toJSON())\r\n        };\r\n        if (this.issuerUniqueID) {\r\n            result.issuerUniqueID = this.issuerUniqueID.toJSON();\r\n        }\r\n        if (this.extensions) {\r\n            result.extensions = this.extensions.toJSON();\r\n        }\r\n        return result;\r\n    }\r\n}\r\nAttributeCertificateInfoV2.CLASS_NAME = \"AttributeCertificateInfoV2\";\n\nconst ACINFO = \"acinfo\";\r\nconst SIGNATURE_ALGORITHM$6 = \"signatureAlgorithm\";\r\nconst SIGNATURE_VALUE$3 = \"signatureValue\";\r\nconst CLEAR_PROPS$T = [\r\n    ACINFO,\r\n    SIGNATURE_ALGORITHM$6,\r\n    SIGNATURE_VALUE$3,\r\n];\r\nclass AttributeCertificateV2 extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.acinfo = pvutils.getParametersValue(parameters, ACINFO, AttributeCertificateV2.defaultValues(ACINFO));\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$6, AttributeCertificateV2.defaultValues(SIGNATURE_ALGORITHM$6));\r\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$3, AttributeCertificateV2.defaultValues(SIGNATURE_VALUE$3));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ACINFO:\r\n                return new AttributeCertificateInfoV2();\r\n            case SIGNATURE_ALGORITHM$6:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE_VALUE$3:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AttributeCertificateInfoV2.schema(names.acinfo || {}),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n                new asn1js.BitString({ name: (names.signatureValue || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$T);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AttributeCertificateV2.schema({\r\n            names: {\r\n                acinfo: {\r\n                    names: {\r\n                        blockName: ACINFO\r\n                    }\r\n                },\r\n                signatureAlgorithm: {\r\n                    names: {\r\n                        blockName: SIGNATURE_ALGORITHM$6\r\n                    }\r\n                },\r\n                signatureValue: SIGNATURE_VALUE$3\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.acinfo = new AttributeCertificateInfoV2({ schema: asn1.result.acinfo });\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signatureValue = asn1.result.signatureValue;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.acinfo.toSchema(),\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            acinfo: this.acinfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON(),\r\n        };\r\n    }\r\n}\r\nAttributeCertificateV2.CLASS_NAME = \"AttributeCertificateV2\";\n\nconst CONTENT_TYPE = \"contentType\";\r\nconst CONTENT = \"content\";\r\nconst CLEAR_PROPS$S = [CONTENT_TYPE, CONTENT];\r\nclass ContentInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.contentType = pvutils.getParametersValue(parameters, CONTENT_TYPE, ContentInfo.defaultValues(CONTENT_TYPE));\r\n        this.content = pvutils.getParametersValue(parameters, CONTENT, ContentInfo.defaultValues(CONTENT));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CONTENT_TYPE:\r\n                return EMPTY_STRING;\r\n            case CONTENT:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CONTENT_TYPE:\r\n                return (typeof memberValue === \"string\" &&\r\n                    memberValue === this.defaultValues(CONTENT_TYPE));\r\n            case CONTENT:\r\n                return (memberValue instanceof asn1js.Any);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        if ((\"optional\" in names) === false) {\r\n            names.optional = false;\r\n        }\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || \"ContentInfo\"),\r\n            optional: names.optional,\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.contentType || CONTENT_TYPE) }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Any({ name: (names.content || CONTENT) })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$S);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ContentInfo.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.contentType = asn1.result.contentType.valueBlock.toString();\r\n        this.content = asn1.result.content;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.contentType }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [this.content]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            contentType: this.contentType\r\n        };\r\n        if (!(this.content instanceof asn1js.Any)) {\r\n            object.content = this.content.toJSON();\r\n        }\r\n        return object;\r\n    }\r\n}\r\nContentInfo.CLASS_NAME = \"ContentInfo\";\r\nContentInfo.DATA = id_ContentType_Data;\r\nContentInfo.SIGNED_DATA = id_ContentType_SignedData;\r\nContentInfo.ENVELOPED_DATA = id_ContentType_EnvelopedData;\r\nContentInfo.ENCRYPTED_DATA = id_ContentType_EncryptedData;\n\nconst TYPE$1 = \"type\";\r\nconst VALUE$4 = \"value\";\r\nconst UTC_TIME_NAME = \"utcTimeName\";\r\nconst GENERAL_TIME_NAME = \"generalTimeName\";\r\nconst CLEAR_PROPS$R = [UTC_TIME_NAME, GENERAL_TIME_NAME];\r\nvar TimeType;\r\n(function (TimeType) {\r\n    TimeType[TimeType[\"UTCTime\"] = 0] = \"UTCTime\";\r\n    TimeType[TimeType[\"GeneralizedTime\"] = 1] = \"GeneralizedTime\";\r\n    TimeType[TimeType[\"empty\"] = 2] = \"empty\";\r\n})(TimeType || (TimeType = {}));\r\nclass Time extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.type = pvutils.getParametersValue(parameters, TYPE$1, Time.defaultValues(TYPE$1));\r\n        this.value = pvutils.getParametersValue(parameters, VALUE$4, Time.defaultValues(VALUE$4));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE$1:\r\n                return 0;\r\n            case VALUE$4:\r\n                return new Date(0, 0, 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}, optional = false) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            optional,\r\n            value: [\r\n                new asn1js.UTCTime({ name: (names.utcTimeName || EMPTY_STRING) }),\r\n                new asn1js.GeneralizedTime({ name: (names.generalTimeName || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$R);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n            names: {\r\n                utcTimeName: UTC_TIME_NAME,\r\n                generalTimeName: GENERAL_TIME_NAME\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (UTC_TIME_NAME in asn1.result) {\r\n            this.type = 0;\r\n            this.value = asn1.result.utcTimeName.toDate();\r\n        }\r\n        if (GENERAL_TIME_NAME in asn1.result) {\r\n            this.type = 1;\r\n            this.value = asn1.result.generalTimeName.toDate();\r\n        }\r\n    }\r\n    toSchema() {\r\n        if (this.type === 0) {\r\n            return new asn1js.UTCTime({ valueDate: this.value });\r\n        }\r\n        else if (this.type === 1) {\r\n            return new asn1js.GeneralizedTime({ valueDate: this.value });\r\n        }\r\n        return {};\r\n    }\r\n    toJSON() {\r\n        return {\r\n            type: this.type,\r\n            value: this.value\r\n        };\r\n    }\r\n}\r\nTime.CLASS_NAME = \"Time\";\n\nconst TBS$4 = \"tbs\";\r\nconst VERSION$f = \"version\";\r\nconst SERIAL_NUMBER$3 = \"serialNumber\";\r\nconst SIGNATURE$4 = \"signature\";\r\nconst ISSUER$2 = \"issuer\";\r\nconst NOT_BEFORE = \"notBefore\";\r\nconst NOT_AFTER = \"notAfter\";\r\nconst SUBJECT$1 = \"subject\";\r\nconst SUBJECT_PUBLIC_KEY_INFO = \"subjectPublicKeyInfo\";\r\nconst ISSUER_UNIQUE_ID = \"issuerUniqueID\";\r\nconst SUBJECT_UNIQUE_ID = \"subjectUniqueID\";\r\nconst EXTENSIONS$2 = \"extensions\";\r\nconst SIGNATURE_ALGORITHM$5 = \"signatureAlgorithm\";\r\nconst SIGNATURE_VALUE$2 = \"signatureValue\";\r\nconst TBS_CERTIFICATE = \"tbsCertificate\";\r\nconst TBS_CERTIFICATE_VERSION = `${TBS_CERTIFICATE}.${VERSION$f}`;\r\nconst TBS_CERTIFICATE_SERIAL_NUMBER = `${TBS_CERTIFICATE}.${SERIAL_NUMBER$3}`;\r\nconst TBS_CERTIFICATE_SIGNATURE = `${TBS_CERTIFICATE}.${SIGNATURE$4}`;\r\nconst TBS_CERTIFICATE_ISSUER = `${TBS_CERTIFICATE}.${ISSUER$2}`;\r\nconst TBS_CERTIFICATE_NOT_BEFORE = `${TBS_CERTIFICATE}.${NOT_BEFORE}`;\r\nconst TBS_CERTIFICATE_NOT_AFTER = `${TBS_CERTIFICATE}.${NOT_AFTER}`;\r\nconst TBS_CERTIFICATE_SUBJECT = `${TBS_CERTIFICATE}.${SUBJECT$1}`;\r\nconst TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY = `${TBS_CERTIFICATE}.${SUBJECT_PUBLIC_KEY_INFO}`;\r\nconst TBS_CERTIFICATE_ISSUER_UNIQUE_ID = `${TBS_CERTIFICATE}.${ISSUER_UNIQUE_ID}`;\r\nconst TBS_CERTIFICATE_SUBJECT_UNIQUE_ID = `${TBS_CERTIFICATE}.${SUBJECT_UNIQUE_ID}`;\r\nconst TBS_CERTIFICATE_EXTENSIONS = `${TBS_CERTIFICATE}.${EXTENSIONS$2}`;\r\nconst CLEAR_PROPS$Q = [\r\n    TBS_CERTIFICATE,\r\n    TBS_CERTIFICATE_VERSION,\r\n    TBS_CERTIFICATE_SERIAL_NUMBER,\r\n    TBS_CERTIFICATE_SIGNATURE,\r\n    TBS_CERTIFICATE_ISSUER,\r\n    TBS_CERTIFICATE_NOT_BEFORE,\r\n    TBS_CERTIFICATE_NOT_AFTER,\r\n    TBS_CERTIFICATE_SUBJECT,\r\n    TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY,\r\n    TBS_CERTIFICATE_ISSUER_UNIQUE_ID,\r\n    TBS_CERTIFICATE_SUBJECT_UNIQUE_ID,\r\n    TBS_CERTIFICATE_EXTENSIONS,\r\n    SIGNATURE_ALGORITHM$5,\r\n    SIGNATURE_VALUE$2\r\n];\r\nfunction tbsCertificate(parameters = {}) {\r\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n    return (new asn1js.Sequence({\r\n        name: (names.blockName || TBS_CERTIFICATE),\r\n        value: [\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Integer({ name: (names.tbsCertificateVersion || TBS_CERTIFICATE_VERSION) })\r\n                ]\r\n            }),\r\n            new asn1js.Integer({ name: (names.tbsCertificateSerialNumber || TBS_CERTIFICATE_SERIAL_NUMBER) }),\r\n            AlgorithmIdentifier.schema(names.signature || {\r\n                names: {\r\n                    blockName: TBS_CERTIFICATE_SIGNATURE\r\n                }\r\n            }),\r\n            RelativeDistinguishedNames.schema(names.issuer || {\r\n                names: {\r\n                    blockName: TBS_CERTIFICATE_ISSUER\r\n                }\r\n            }),\r\n            new asn1js.Sequence({\r\n                name: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n                value: [\r\n                    Time.schema(names.notBefore || {\r\n                        names: {\r\n                            utcTimeName: TBS_CERTIFICATE_NOT_BEFORE,\r\n                            generalTimeName: TBS_CERTIFICATE_NOT_BEFORE\r\n                        }\r\n                    }),\r\n                    Time.schema(names.notAfter || {\r\n                        names: {\r\n                            utcTimeName: TBS_CERTIFICATE_NOT_AFTER,\r\n                            generalTimeName: TBS_CERTIFICATE_NOT_AFTER\r\n                        }\r\n                    })\r\n                ]\r\n            }),\r\n            RelativeDistinguishedNames.schema(names.subject || {\r\n                names: {\r\n                    blockName: TBS_CERTIFICATE_SUBJECT\r\n                }\r\n            }),\r\n            PublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n                names: {\r\n                    blockName: TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY\r\n                }\r\n            }),\r\n            new asn1js.Primitive({\r\n                name: (names.tbsCertificateIssuerUniqueID || TBS_CERTIFICATE_ISSUER_UNIQUE_ID),\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                }\r\n            }),\r\n            new asn1js.Primitive({\r\n                name: (names.tbsCertificateSubjectUniqueID || TBS_CERTIFICATE_SUBJECT_UNIQUE_ID),\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                }\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 3\r\n                },\r\n                value: [Extensions.schema(names.extensions || {\r\n                        names: {\r\n                            blockName: TBS_CERTIFICATE_EXTENSIONS\r\n                        }\r\n                    })]\r\n            })\r\n        ]\r\n    }));\r\n}\r\nclass Certificate extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$4, Certificate.defaultValues(TBS$4)));\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$f, Certificate.defaultValues(VERSION$f));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$3, Certificate.defaultValues(SERIAL_NUMBER$3));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$4, Certificate.defaultValues(SIGNATURE$4));\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$2, Certificate.defaultValues(ISSUER$2));\r\n        this.notBefore = pvutils.getParametersValue(parameters, NOT_BEFORE, Certificate.defaultValues(NOT_BEFORE));\r\n        this.notAfter = pvutils.getParametersValue(parameters, NOT_AFTER, Certificate.defaultValues(NOT_AFTER));\r\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT$1, Certificate.defaultValues(SUBJECT$1));\r\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SUBJECT_PUBLIC_KEY_INFO, Certificate.defaultValues(SUBJECT_PUBLIC_KEY_INFO));\r\n        if (ISSUER_UNIQUE_ID in parameters) {\r\n            this.issuerUniqueID = pvutils.getParametersValue(parameters, ISSUER_UNIQUE_ID, Certificate.defaultValues(ISSUER_UNIQUE_ID));\r\n        }\r\n        if (SUBJECT_UNIQUE_ID in parameters) {\r\n            this.subjectUniqueID = pvutils.getParametersValue(parameters, SUBJECT_UNIQUE_ID, Certificate.defaultValues(SUBJECT_UNIQUE_ID));\r\n        }\r\n        if (EXTENSIONS$2 in parameters) {\r\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$2, Certificate.defaultValues(EXTENSIONS$2));\r\n        }\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$5, Certificate.defaultValues(SIGNATURE_ALGORITHM$5));\r\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$2, Certificate.defaultValues(SIGNATURE_VALUE$2));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get tbs() {\r\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\r\n    }\r\n    set tbs(value) {\r\n        this.tbsView = new Uint8Array(value);\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS$4:\r\n                return EMPTY_BUFFER;\r\n            case VERSION$f:\r\n                return 0;\r\n            case SERIAL_NUMBER$3:\r\n                return new asn1js.Integer();\r\n            case SIGNATURE$4:\r\n                return new AlgorithmIdentifier();\r\n            case ISSUER$2:\r\n                return new RelativeDistinguishedNames();\r\n            case NOT_BEFORE:\r\n                return new Time();\r\n            case NOT_AFTER:\r\n                return new Time();\r\n            case SUBJECT$1:\r\n                return new RelativeDistinguishedNames();\r\n            case SUBJECT_PUBLIC_KEY_INFO:\r\n                return new PublicKeyInfo();\r\n            case ISSUER_UNIQUE_ID:\r\n                return EMPTY_BUFFER;\r\n            case SUBJECT_UNIQUE_ID:\r\n                return EMPTY_BUFFER;\r\n            case EXTENSIONS$2:\r\n                return [];\r\n            case SIGNATURE_ALGORITHM$5:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE_VALUE$2:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                tbsCertificate(names.tbsCertificate),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n                    names: {\r\n                        blockName: SIGNATURE_ALGORITHM$5\r\n                    }\r\n                }),\r\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$2) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$Q);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Certificate.schema({\r\n            names: {\r\n                tbsCertificate: {\r\n                    names: {\r\n                        extensions: {\r\n                            names: {\r\n                                extensions: TBS_CERTIFICATE_EXTENSIONS\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsView = asn1.result.tbsCertificate.valueBeforeDecodeView;\r\n        if (TBS_CERTIFICATE_VERSION in asn1.result)\r\n            this.version = asn1.result[TBS_CERTIFICATE_VERSION].valueBlock.valueDec;\r\n        this.serialNumber = asn1.result[TBS_CERTIFICATE_SERIAL_NUMBER];\r\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERTIFICATE_SIGNATURE] });\r\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_ISSUER] });\r\n        this.notBefore = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_BEFORE] });\r\n        this.notAfter = new Time({ schema: asn1.result[TBS_CERTIFICATE_NOT_AFTER] });\r\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT] });\r\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY] });\r\n        if (TBS_CERTIFICATE_ISSUER_UNIQUE_ID in asn1.result)\r\n            this.issuerUniqueID = asn1.result[TBS_CERTIFICATE_ISSUER_UNIQUE_ID].valueBlock.valueHex;\r\n        if (TBS_CERTIFICATE_SUBJECT_UNIQUE_ID in asn1.result)\r\n            this.subjectUniqueID = asn1.result[TBS_CERTIFICATE_SUBJECT_UNIQUE_ID].valueBlock.valueHex;\r\n        if (TBS_CERTIFICATE_EXTENSIONS in asn1.result)\r\n            this.extensions = Array.from(asn1.result[TBS_CERTIFICATE_EXTENSIONS], element => new Extension({ schema: element }));\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signatureValue = asn1.result.signatureValue;\r\n    }\r\n    encodeTBS() {\r\n        const outputArray = [];\r\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Integer({ value: this.version })\r\n                ]\r\n            }));\r\n        }\r\n        outputArray.push(this.serialNumber);\r\n        outputArray.push(this.signature.toSchema());\r\n        outputArray.push(this.issuer.toSchema());\r\n        outputArray.push(new asn1js.Sequence({\r\n            value: [\r\n                this.notBefore.toSchema(),\r\n                this.notAfter.toSchema()\r\n            ]\r\n        }));\r\n        outputArray.push(this.subject.toSchema());\r\n        outputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n        if (this.issuerUniqueID) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                valueHex: this.issuerUniqueID\r\n            }));\r\n        }\r\n        if (this.subjectUniqueID) {\r\n            outputArray.push(new asn1js.Primitive({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                valueHex: this.subjectUniqueID\r\n            }));\r\n        }\r\n        if (this.extensions) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 3\r\n                },\r\n                value: [new asn1js.Sequence({\r\n                        value: Array.from(this.extensions, o => o.toSchema())\r\n                    })]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        let tbsSchema;\r\n        if (encodeFlag === false) {\r\n            if (!this.tbsView.byteLength) {\r\n                return Certificate.schema().value[0];\r\n            }\r\n            const asn1 = asn1js.fromBER(this.tbsView);\r\n            AsnError.assert(asn1, \"TBS Certificate\");\r\n            tbsSchema = asn1.result;\r\n        }\r\n        else {\r\n            tbsSchema = this.encodeTBS();\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                tbsSchema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\r\n            version: this.version,\r\n            serialNumber: this.serialNumber.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n            issuer: this.issuer.toJSON(),\r\n            notBefore: this.notBefore.toJSON(),\r\n            notAfter: this.notAfter.toJSON(),\r\n            subject: this.subject.toJSON(),\r\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON(),\r\n        };\r\n        if ((VERSION$f in this) && (this.version !== Certificate.defaultValues(VERSION$f))) {\r\n            res.version = this.version;\r\n        }\r\n        if (this.issuerUniqueID) {\r\n            res.issuerUniqueID = pvtsutils.Convert.ToHex(this.issuerUniqueID);\r\n        }\r\n        if (this.subjectUniqueID) {\r\n            res.subjectUniqueID = pvtsutils.Convert.ToHex(this.subjectUniqueID);\r\n        }\r\n        if (this.extensions) {\r\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\r\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n    }\r\n    async getKeyHash(hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        return crypto.digest({ name: hashAlgorithm }, this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\r\n    }\r\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        if (!privateKey) {\r\n            throw new Error(\"Need to provide a private key for signing\");\r\n        }\r\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const parameters = signatureParameters.parameters;\r\n        this.signature = signatureParameters.signatureAlgorithm;\r\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\r\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\r\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\r\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\r\n    }\r\n    async verify(issuerCertificate, crypto = getCrypto(true)) {\r\n        let subjectPublicKeyInfo;\r\n        if (issuerCertificate) {\r\n            subjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n        }\r\n        else if (this.issuer.isEqual(this.subject)) {\r\n            subjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n        }\r\n        if (!(subjectPublicKeyInfo instanceof PublicKeyInfo)) {\r\n            throw new Error(\"Please provide issuer certificate as a parameter\");\r\n        }\r\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n    }\r\n}\r\nCertificate.CLASS_NAME = \"Certificate\";\r\nfunction checkCA(cert, signerCert = null) {\r\n    if (signerCert && cert.issuer.isEqual(signerCert.issuer) && cert.serialNumber.isEqual(signerCert.serialNumber)) {\r\n        return null;\r\n    }\r\n    let isCA = false;\r\n    if (cert.extensions) {\r\n        for (const extension of cert.extensions) {\r\n            if (extension.extnID === id_BasicConstraints && extension.parsedValue instanceof BasicConstraints) {\r\n                if (extension.parsedValue.cA) {\r\n                    isCA = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (isCA) {\r\n        return cert;\r\n    }\r\n    return null;\r\n}\n\nconst CERT_ID$1 = \"certId\";\r\nconst CERT_VALUE = \"certValue\";\r\nconst PARSED_VALUE$4 = \"parsedValue\";\r\nconst CLEAR_PROPS$P = [\r\n    CERT_ID$1,\r\n    CERT_VALUE\r\n];\r\nclass CertBag extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.certId = pvutils.getParametersValue(parameters, CERT_ID$1, CertBag.defaultValues(CERT_ID$1));\r\n        this.certValue = pvutils.getParametersValue(parameters, CERT_VALUE, CertBag.defaultValues(CERT_VALUE));\r\n        if (PARSED_VALUE$4 in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$4, CertBag.defaultValues(PARSED_VALUE$4));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERT_ID$1:\r\n                return EMPTY_STRING;\r\n            case CERT_VALUE:\r\n                return (new asn1js.Any());\r\n            case PARSED_VALUE$4:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CERT_ID$1:\r\n                return (memberValue === EMPTY_STRING);\r\n            case CERT_VALUE:\r\n                return (memberValue instanceof asn1js.Any);\r\n            case PARSED_VALUE$4:\r\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$P);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertBag.schema({\r\n            names: {\r\n                id: CERT_ID$1,\r\n                value: CERT_VALUE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.certId = asn1.result.certId.valueBlock.toString();\r\n        this.certValue = asn1.result.certValue;\r\n        const certValueHex = this.certValue.valueBlock.valueHexView;\r\n        switch (this.certId) {\r\n            case id_CertBag_X509Certificate:\r\n                {\r\n                    try {\r\n                        this.parsedValue = Certificate.fromBER(certValueHex);\r\n                    }\r\n                    catch (ex) {\r\n                        AttributeCertificateV2.fromBER(certValueHex);\r\n                    }\r\n                }\r\n                break;\r\n            case id_CertBag_AttributeCertificate:\r\n                {\r\n                    this.parsedValue = AttributeCertificateV2.fromBER(certValueHex);\r\n                }\r\n                break;\r\n            case id_CertBag_SDSICertificate:\r\n            default:\r\n                throw new Error(`Incorrect CERT_ID value in CertBag: ${this.certId}`);\r\n        }\r\n    }\r\n    toSchema() {\r\n        if (PARSED_VALUE$4 in this) {\r\n            if (\"acinfo\" in this.parsedValue) {\r\n                this.certId = id_CertBag_AttributeCertificate;\r\n            }\r\n            else {\r\n                this.certId = id_CertBag_X509Certificate;\r\n            }\r\n            this.certValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.certId }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [((\"toSchema\" in this.certValue) ? this.certValue.toSchema() : this.certValue)]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            certId: this.certId,\r\n            certValue: this.certValue.toJSON()\r\n        };\r\n    }\r\n}\r\nCertBag.CLASS_NAME = \"CertBag\";\n\nconst USER_CERTIFICATE = \"userCertificate\";\r\nconst REVOCATION_DATE = \"revocationDate\";\r\nconst CRL_ENTRY_EXTENSIONS = \"crlEntryExtensions\";\r\nconst CLEAR_PROPS$O = [\r\n    USER_CERTIFICATE,\r\n    REVOCATION_DATE,\r\n    CRL_ENTRY_EXTENSIONS\r\n];\r\nclass RevokedCertificate extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.userCertificate = pvutils.getParametersValue(parameters, USER_CERTIFICATE, RevokedCertificate.defaultValues(USER_CERTIFICATE));\r\n        this.revocationDate = pvutils.getParametersValue(parameters, REVOCATION_DATE, RevokedCertificate.defaultValues(REVOCATION_DATE));\r\n        if (CRL_ENTRY_EXTENSIONS in parameters) {\r\n            this.crlEntryExtensions = pvutils.getParametersValue(parameters, CRL_ENTRY_EXTENSIONS, RevokedCertificate.defaultValues(CRL_ENTRY_EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case USER_CERTIFICATE:\r\n                return new asn1js.Integer();\r\n            case REVOCATION_DATE:\r\n                return new Time();\r\n            case CRL_ENTRY_EXTENSIONS:\r\n                return new Extensions();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.userCertificate || USER_CERTIFICATE) }),\r\n                Time.schema({\r\n                    names: {\r\n                        utcTimeName: (names.revocationDate || REVOCATION_DATE),\r\n                        generalTimeName: (names.revocationDate || REVOCATION_DATE)\r\n                    }\r\n                }),\r\n                Extensions.schema({\r\n                    names: {\r\n                        blockName: (names.crlEntryExtensions || CRL_ENTRY_EXTENSIONS)\r\n                    }\r\n                }, true)\r\n            ]\r\n        });\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$O);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RevokedCertificate.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.userCertificate = asn1.result.userCertificate;\r\n        this.revocationDate = new Time({ schema: asn1.result.revocationDate });\r\n        if (CRL_ENTRY_EXTENSIONS in asn1.result) {\r\n            this.crlEntryExtensions = new Extensions({ schema: asn1.result.crlEntryExtensions });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            this.userCertificate,\r\n            this.revocationDate.toSchema()\r\n        ];\r\n        if (this.crlEntryExtensions) {\r\n            outputArray.push(this.crlEntryExtensions.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            userCertificate: this.userCertificate.toJSON(),\r\n            revocationDate: this.revocationDate.toJSON(),\r\n        };\r\n        if (this.crlEntryExtensions) {\r\n            res.crlEntryExtensions = this.crlEntryExtensions.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRevokedCertificate.CLASS_NAME = \"RevokedCertificate\";\n\nconst TBS$3 = \"tbs\";\r\nconst VERSION$e = \"version\";\r\nconst SIGNATURE$3 = \"signature\";\r\nconst ISSUER$1 = \"issuer\";\r\nconst THIS_UPDATE$1 = \"thisUpdate\";\r\nconst NEXT_UPDATE$1 = \"nextUpdate\";\r\nconst REVOKED_CERTIFICATES = \"revokedCertificates\";\r\nconst CRL_EXTENSIONS = \"crlExtensions\";\r\nconst SIGNATURE_ALGORITHM$4 = \"signatureAlgorithm\";\r\nconst SIGNATURE_VALUE$1 = \"signatureValue\";\r\nconst TBS_CERT_LIST = \"tbsCertList\";\r\nconst TBS_CERT_LIST_VERSION = `${TBS_CERT_LIST}.version`;\r\nconst TBS_CERT_LIST_SIGNATURE = `${TBS_CERT_LIST}.signature`;\r\nconst TBS_CERT_LIST_ISSUER = `${TBS_CERT_LIST}.issuer`;\r\nconst TBS_CERT_LIST_THIS_UPDATE = `${TBS_CERT_LIST}.thisUpdate`;\r\nconst TBS_CERT_LIST_NEXT_UPDATE = `${TBS_CERT_LIST}.nextUpdate`;\r\nconst TBS_CERT_LIST_REVOKED_CERTIFICATES = `${TBS_CERT_LIST}.revokedCertificates`;\r\nconst TBS_CERT_LIST_EXTENSIONS = `${TBS_CERT_LIST}.extensions`;\r\nconst CLEAR_PROPS$N = [\r\n    TBS_CERT_LIST,\r\n    TBS_CERT_LIST_VERSION,\r\n    TBS_CERT_LIST_SIGNATURE,\r\n    TBS_CERT_LIST_ISSUER,\r\n    TBS_CERT_LIST_THIS_UPDATE,\r\n    TBS_CERT_LIST_NEXT_UPDATE,\r\n    TBS_CERT_LIST_REVOKED_CERTIFICATES,\r\n    TBS_CERT_LIST_EXTENSIONS,\r\n    SIGNATURE_ALGORITHM$4,\r\n    SIGNATURE_VALUE$1\r\n];\r\nfunction tbsCertList(parameters = {}) {\r\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n    return (new asn1js.Sequence({\r\n        name: (names.blockName || TBS_CERT_LIST),\r\n        value: [\r\n            new asn1js.Integer({\r\n                optional: true,\r\n                name: (names.tbsCertListVersion || TBS_CERT_LIST_VERSION),\r\n                value: 2\r\n            }),\r\n            AlgorithmIdentifier.schema(names.signature || {\r\n                names: {\r\n                    blockName: TBS_CERT_LIST_SIGNATURE\r\n                }\r\n            }),\r\n            RelativeDistinguishedNames.schema(names.issuer || {\r\n                names: {\r\n                    blockName: TBS_CERT_LIST_ISSUER\r\n                }\r\n            }),\r\n            Time.schema(names.tbsCertListThisUpdate || {\r\n                names: {\r\n                    utcTimeName: TBS_CERT_LIST_THIS_UPDATE,\r\n                    generalTimeName: TBS_CERT_LIST_THIS_UPDATE\r\n                }\r\n            }),\r\n            Time.schema(names.tbsCertListNextUpdate || {\r\n                names: {\r\n                    utcTimeName: TBS_CERT_LIST_NEXT_UPDATE,\r\n                    generalTimeName: TBS_CERT_LIST_NEXT_UPDATE\r\n                }\r\n            }, true),\r\n            new asn1js.Sequence({\r\n                optional: true,\r\n                value: [\r\n                    new asn1js.Repeated({\r\n                        name: (names.tbsCertListRevokedCertificates || TBS_CERT_LIST_REVOKED_CERTIFICATES),\r\n                        value: new asn1js.Sequence({\r\n                            value: [\r\n                                new asn1js.Integer(),\r\n                                Time.schema(),\r\n                                Extensions.schema({}, true)\r\n                            ]\r\n                        })\r\n                    })\r\n                ]\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [Extensions.schema(names.crlExtensions || {\r\n                        names: {\r\n                            blockName: TBS_CERT_LIST_EXTENSIONS\r\n                        }\r\n                    })]\r\n            })\r\n        ]\r\n    }));\r\n}\r\nconst WELL_KNOWN_EXTENSIONS = [\r\n    id_AuthorityKeyIdentifier,\r\n    id_IssuerAltName,\r\n    id_CRLNumber,\r\n    id_BaseCRLNumber,\r\n    id_IssuingDistributionPoint,\r\n    id_FreshestCRL,\r\n    id_AuthorityInfoAccess,\r\n    id_CRLReason,\r\n    id_InvalidityDate,\r\n    id_CertificateIssuer,\r\n];\r\nclass CertificateRevocationList extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$3, CertificateRevocationList.defaultValues(TBS$3)));\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$e, CertificateRevocationList.defaultValues(VERSION$e));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$3, CertificateRevocationList.defaultValues(SIGNATURE$3));\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER$1, CertificateRevocationList.defaultValues(ISSUER$1));\r\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE$1, CertificateRevocationList.defaultValues(THIS_UPDATE$1));\r\n        if (NEXT_UPDATE$1 in parameters) {\r\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE$1, CertificateRevocationList.defaultValues(NEXT_UPDATE$1));\r\n        }\r\n        if (REVOKED_CERTIFICATES in parameters) {\r\n            this.revokedCertificates = pvutils.getParametersValue(parameters, REVOKED_CERTIFICATES, CertificateRevocationList.defaultValues(REVOKED_CERTIFICATES));\r\n        }\r\n        if (CRL_EXTENSIONS in parameters) {\r\n            this.crlExtensions = pvutils.getParametersValue(parameters, CRL_EXTENSIONS, CertificateRevocationList.defaultValues(CRL_EXTENSIONS));\r\n        }\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$4, CertificateRevocationList.defaultValues(SIGNATURE_ALGORITHM$4));\r\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE$1, CertificateRevocationList.defaultValues(SIGNATURE_VALUE$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get tbs() {\r\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\r\n    }\r\n    set tbs(value) {\r\n        this.tbsView = new Uint8Array(value);\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS$3:\r\n                return EMPTY_BUFFER;\r\n            case VERSION$e:\r\n                return 0;\r\n            case SIGNATURE$3:\r\n                return new AlgorithmIdentifier();\r\n            case ISSUER$1:\r\n                return new RelativeDistinguishedNames();\r\n            case THIS_UPDATE$1:\r\n                return new Time();\r\n            case NEXT_UPDATE$1:\r\n                return new Time();\r\n            case REVOKED_CERTIFICATES:\r\n                return [];\r\n            case CRL_EXTENSIONS:\r\n                return new Extensions();\r\n            case SIGNATURE_ALGORITHM$4:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE_VALUE$1:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || \"CertificateList\"),\r\n            value: [\r\n                tbsCertList(parameters),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n                    names: {\r\n                        blockName: SIGNATURE_ALGORITHM$4\r\n                    }\r\n                }),\r\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE$1) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$N);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateRevocationList.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsView = asn1.result.tbsCertList.valueBeforeDecodeView;\r\n        if (TBS_CERT_LIST_VERSION in asn1.result) {\r\n            this.version = asn1.result[TBS_CERT_LIST_VERSION].valueBlock.valueDec;\r\n        }\r\n        this.signature = new AlgorithmIdentifier({ schema: asn1.result[TBS_CERT_LIST_SIGNATURE] });\r\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result[TBS_CERT_LIST_ISSUER] });\r\n        this.thisUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_THIS_UPDATE] });\r\n        if (TBS_CERT_LIST_NEXT_UPDATE in asn1.result) {\r\n            this.nextUpdate = new Time({ schema: asn1.result[TBS_CERT_LIST_NEXT_UPDATE] });\r\n        }\r\n        if (TBS_CERT_LIST_REVOKED_CERTIFICATES in asn1.result) {\r\n            this.revokedCertificates = Array.from(asn1.result[TBS_CERT_LIST_REVOKED_CERTIFICATES], element => new RevokedCertificate({ schema: element }));\r\n        }\r\n        if (TBS_CERT_LIST_EXTENSIONS in asn1.result) {\r\n            this.crlExtensions = new Extensions({ schema: asn1.result[TBS_CERT_LIST_EXTENSIONS] });\r\n        }\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signatureValue = asn1.result.signatureValue;\r\n    }\r\n    encodeTBS() {\r\n        const outputArray = [];\r\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e)) {\r\n            outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        }\r\n        outputArray.push(this.signature.toSchema());\r\n        outputArray.push(this.issuer.toSchema());\r\n        outputArray.push(this.thisUpdate.toSchema());\r\n        if (this.nextUpdate) {\r\n            outputArray.push(this.nextUpdate.toSchema());\r\n        }\r\n        if (this.revokedCertificates) {\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.revokedCertificates, o => o.toSchema())\r\n            }));\r\n        }\r\n        if (this.crlExtensions) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    this.crlExtensions.toSchema()\r\n                ]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        let tbsSchema;\r\n        if (!encodeFlag) {\r\n            if (!this.tbsView.byteLength) {\r\n                return CertificateRevocationList.schema();\r\n            }\r\n            const asn1 = asn1js.fromBER(this.tbsView);\r\n            AsnError.assert(asn1, \"TBS Certificate Revocation List\");\r\n            tbsSchema = asn1.result;\r\n        }\r\n        else {\r\n            tbsSchema = this.encodeTBS();\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                tbsSchema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\r\n            version: this.version,\r\n            signature: this.signature.toJSON(),\r\n            issuer: this.issuer.toJSON(),\r\n            thisUpdate: this.thisUpdate.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON()\r\n        };\r\n        if (this.version !== CertificateRevocationList.defaultValues(VERSION$e))\r\n            res.version = this.version;\r\n        if (this.nextUpdate) {\r\n            res.nextUpdate = this.nextUpdate.toJSON();\r\n        }\r\n        if (this.revokedCertificates) {\r\n            res.revokedCertificates = Array.from(this.revokedCertificates, o => o.toJSON());\r\n        }\r\n        if (this.crlExtensions) {\r\n            res.crlExtensions = this.crlExtensions.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n    isCertificateRevoked(certificate) {\r\n        if (!this.issuer.isEqual(certificate.issuer)) {\r\n            return false;\r\n        }\r\n        if (!this.revokedCertificates) {\r\n            return false;\r\n        }\r\n        for (const revokedCertificate of this.revokedCertificates) {\r\n            if (revokedCertificate.userCertificate.isEqual(certificate.serialNumber)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        if (!privateKey) {\r\n            throw new Error(\"Need to provide a private key for signing\");\r\n        }\r\n        const signatureParameters = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const { parameters } = signatureParameters;\r\n        this.signature = signatureParameters.signatureAlgorithm;\r\n        this.signatureAlgorithm = signatureParameters.signatureAlgorithm;\r\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\r\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\r\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\r\n    }\r\n    async verify(parameters = {}, crypto = getCrypto(true)) {\r\n        let subjectPublicKeyInfo;\r\n        if (parameters.issuerCertificate) {\r\n            subjectPublicKeyInfo = parameters.issuerCertificate.subjectPublicKeyInfo;\r\n            if (!this.issuer.isEqual(parameters.issuerCertificate.subject)) {\r\n                return false;\r\n            }\r\n        }\r\n        if (parameters.publicKeyInfo) {\r\n            subjectPublicKeyInfo = parameters.publicKeyInfo;\r\n        }\r\n        if (!subjectPublicKeyInfo) {\r\n            throw new Error(\"Issuer's certificate must be provided as an input parameter\");\r\n        }\r\n        if (this.crlExtensions) {\r\n            for (const extension of this.crlExtensions.extensions) {\r\n                if (extension.critical) {\r\n                    if (!WELL_KNOWN_EXTENSIONS.includes(extension.extnID))\r\n                        return false;\r\n                }\r\n            }\r\n        }\r\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n    }\r\n}\r\nCertificateRevocationList.CLASS_NAME = \"CertificateRevocationList\";\n\nconst CRL_ID = \"crlId\";\r\nconst CRL_VALUE = \"crlValue\";\r\nconst PARSED_VALUE$3 = \"parsedValue\";\r\nconst CLEAR_PROPS$M = [\r\n    CRL_ID,\r\n    CRL_VALUE,\r\n];\r\nclass CRLBag extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.crlId = pvutils.getParametersValue(parameters, CRL_ID, CRLBag.defaultValues(CRL_ID));\r\n        this.crlValue = pvutils.getParametersValue(parameters, CRL_VALUE, CRLBag.defaultValues(CRL_VALUE));\r\n        if (PARSED_VALUE$3 in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$3, CRLBag.defaultValues(PARSED_VALUE$3));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CRL_ID:\r\n                return EMPTY_STRING;\r\n            case CRL_VALUE:\r\n                return (new asn1js.Any());\r\n            case PARSED_VALUE$3:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CRL_ID:\r\n                return (memberValue === EMPTY_STRING);\r\n            case CRL_VALUE:\r\n                return (memberValue instanceof asn1js.Any);\r\n            case PARSED_VALUE$3:\r\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$M);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CRLBag.schema({\r\n            names: {\r\n                id: CRL_ID,\r\n                value: CRL_VALUE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.crlId = asn1.result.crlId.valueBlock.toString();\r\n        this.crlValue = asn1.result.crlValue;\r\n        switch (this.crlId) {\r\n            case id_CRLBag_X509CRL:\r\n                {\r\n                    this.parsedValue = CertificateRevocationList.fromBER(this.certValue.valueBlock.valueHex);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect CRL_ID value in CRLBag: ${this.crlId}`);\r\n        }\r\n    }\r\n    toSchema() {\r\n        if (this.parsedValue) {\r\n            this.crlId = id_CRLBag_X509CRL;\r\n            this.crlValue = new asn1js.OctetString({ valueHex: this.parsedValue.toSchema().toBER(false) });\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.crlId }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [this.crlValue.toSchema()]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            crlId: this.crlId,\r\n            crlValue: this.crlValue.toJSON()\r\n        };\r\n    }\r\n}\r\nCRLBag.CLASS_NAME = \"CRLBag\";\n\nconst VERSION$d = \"version\";\r\nconst ENCRYPTED_CONTENT_INFO$1 = \"encryptedContentInfo\";\r\nconst UNPROTECTED_ATTRS$1 = \"unprotectedAttrs\";\r\nconst CLEAR_PROPS$L = [\r\n    VERSION$d,\r\n    ENCRYPTED_CONTENT_INFO$1,\r\n    UNPROTECTED_ATTRS$1,\r\n];\r\nclass EncryptedData extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$d, EncryptedData.defaultValues(VERSION$d));\r\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO$1, EncryptedData.defaultValues(ENCRYPTED_CONTENT_INFO$1));\r\n        if (UNPROTECTED_ATTRS$1 in parameters) {\r\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS$1, EncryptedData.defaultValues(UNPROTECTED_ATTRS$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$d:\r\n                return 0;\r\n            case ENCRYPTED_CONTENT_INFO$1:\r\n                return new EncryptedContentInfo();\r\n            case UNPROTECTED_ATTRS$1:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$d:\r\n                return (memberValue === 0);\r\n            case ENCRYPTED_CONTENT_INFO$1:\r\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm)) &&\r\n                    (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent)));\r\n            case UNPROTECTED_ATTRS$1:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$L);\r\n        const asn1 = asn1js.compareSchema(schema, schema, EncryptedData.schema({\r\n            names: {\r\n                version: VERSION$d,\r\n                encryptedContentInfo: {\r\n                    names: {\r\n                        blockName: ENCRYPTED_CONTENT_INFO$1\r\n                    }\r\n                },\r\n                unprotectedAttrs: UNPROTECTED_ATTRS$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n        if (UNPROTECTED_ATTRS$1 in asn1.result)\r\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, element => new Attribute({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(this.encryptedContentInfo.toSchema());\r\n        if (this.unprotectedAttrs) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            encryptedContentInfo: this.encryptedContentInfo.toJSON()\r\n        };\r\n        if (this.unprotectedAttrs)\r\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\r\n        return res;\r\n    }\r\n    async encrypt(parameters) {\r\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\r\n        const encryptParams = {\r\n            ...parameters,\r\n            contentType: \"1.2.840.113549.1.7.1\",\r\n        };\r\n        this.encryptedContentInfo = await getCrypto(true).encryptEncryptedContentInfo(encryptParams);\r\n    }\r\n    async decrypt(parameters, crypto = getCrypto(true)) {\r\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\r\n        const decryptParams = {\r\n            ...parameters,\r\n            encryptedContentInfo: this.encryptedContentInfo,\r\n        };\r\n        return crypto.decryptEncryptedContentInfo(decryptParams);\r\n    }\r\n}\r\nEncryptedData.CLASS_NAME = \"EncryptedData\";\n\nconst ENCRYPTION_ALGORITHM = \"encryptionAlgorithm\";\r\nconst ENCRYPTED_DATA = \"encryptedData\";\r\nconst PARSED_VALUE$2 = \"parsedValue\";\r\nconst CLEAR_PROPS$K = [\r\n    ENCRYPTION_ALGORITHM,\r\n    ENCRYPTED_DATA,\r\n];\r\nclass PKCS8ShroudedKeyBag extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.encryptionAlgorithm = pvutils.getParametersValue(parameters, ENCRYPTION_ALGORITHM, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTION_ALGORITHM));\r\n        this.encryptedData = pvutils.getParametersValue(parameters, ENCRYPTED_DATA, PKCS8ShroudedKeyBag.defaultValues(ENCRYPTED_DATA));\r\n        if (PARSED_VALUE$2 in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$2, PKCS8ShroudedKeyBag.defaultValues(PARSED_VALUE$2));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ENCRYPTION_ALGORITHM:\r\n                return (new AlgorithmIdentifier());\r\n            case ENCRYPTED_DATA:\r\n                return (new asn1js.OctetString());\r\n            case PARSED_VALUE$2:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ENCRYPTION_ALGORITHM:\r\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n                    ((\"algorithmParams\" in memberValue) === false));\r\n            case ENCRYPTED_DATA:\r\n                return (memberValue.isEqual(PKCS8ShroudedKeyBag.defaultValues(memberName)));\r\n            case PARSED_VALUE$2:\r\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.encryptionAlgorithm || {\r\n                    names: {\r\n                        blockName: ENCRYPTION_ALGORITHM\r\n                    }\r\n                }),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.OctetString({ name: (names.encryptedData || ENCRYPTED_DATA) }),\r\n                        new asn1js.OctetString({\r\n                            idBlock: {\r\n                                isConstructed: true\r\n                            },\r\n                            name: (names.encryptedData || ENCRYPTED_DATA)\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$K);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PKCS8ShroudedKeyBag.schema({\r\n            names: {\r\n                encryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: ENCRYPTION_ALGORITHM\r\n                    }\r\n                },\r\n                encryptedData: ENCRYPTED_DATA\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.encryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.encryptionAlgorithm });\r\n        this.encryptedData = asn1.result.encryptedData;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.encryptionAlgorithm.toSchema(),\r\n                this.encryptedData\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            encryptionAlgorithm: this.encryptionAlgorithm.toJSON(),\r\n            encryptedData: this.encryptedData.toJSON(),\r\n        };\r\n    }\r\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\r\n        const cmsEncrypted = new EncryptedData({\r\n            encryptedContentInfo: new EncryptedContentInfo({\r\n                contentEncryptionAlgorithm: this.encryptionAlgorithm,\r\n                encryptedContent: this.encryptedData\r\n            })\r\n        });\r\n        const decryptedData = await cmsEncrypted.decrypt(parameters, crypto);\r\n        this.parsedValue = PrivateKeyInfo.fromBER(decryptedData);\r\n    }\r\n    async makeInternalValues(parameters) {\r\n        if (!this.parsedValue) {\r\n            throw new Error(\"Please initialize \\\"parsedValue\\\" first\");\r\n        }\r\n        const cmsEncrypted = new EncryptedData();\r\n        const encryptParams = {\r\n            ...parameters,\r\n            contentToEncrypt: this.parsedValue.toSchema().toBER(false),\r\n        };\r\n        await cmsEncrypted.encrypt(encryptParams);\r\n        if (!cmsEncrypted.encryptedContentInfo.encryptedContent) {\r\n            throw new Error(\"The filed `encryptedContent` in EncryptedContentInfo is empty\");\r\n        }\r\n        this.encryptionAlgorithm = cmsEncrypted.encryptedContentInfo.contentEncryptionAlgorithm;\r\n        this.encryptedData = cmsEncrypted.encryptedContentInfo.encryptedContent;\r\n    }\r\n}\r\nPKCS8ShroudedKeyBag.CLASS_NAME = \"PKCS8ShroudedKeyBag\";\n\nconst SECRET_TYPE_ID = \"secretTypeId\";\r\nconst SECRET_VALUE = \"secretValue\";\r\nconst CLEAR_PROPS$J = [\r\n    SECRET_TYPE_ID,\r\n    SECRET_VALUE,\r\n];\r\nclass SecretBag extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.secretTypeId = pvutils.getParametersValue(parameters, SECRET_TYPE_ID, SecretBag.defaultValues(SECRET_TYPE_ID));\r\n        this.secretValue = pvutils.getParametersValue(parameters, SECRET_VALUE, SecretBag.defaultValues(SECRET_VALUE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SECRET_TYPE_ID:\r\n                return EMPTY_STRING;\r\n            case SECRET_VALUE:\r\n                return (new asn1js.Any());\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SECRET_TYPE_ID:\r\n                return (memberValue === EMPTY_STRING);\r\n            case SECRET_VALUE:\r\n                return (memberValue instanceof asn1js.Any);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.id || \"id\") }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Any({ name: (names.value || \"value\") })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$J);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SecretBag.schema({\r\n            names: {\r\n                id: SECRET_TYPE_ID,\r\n                value: SECRET_VALUE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.secretTypeId = asn1.result.secretTypeId.valueBlock.toString();\r\n        this.secretValue = asn1.result.secretValue;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.secretTypeId }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [this.secretValue.toSchema()]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            secretTypeId: this.secretTypeId,\r\n            secretValue: this.secretValue.toJSON()\r\n        };\r\n    }\r\n}\r\nSecretBag.CLASS_NAME = \"SecretBag\";\n\nclass SafeBagValueFactory {\r\n    static getItems() {\r\n        if (!this.items) {\r\n            this.items = {};\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.1\", PrivateKeyInfo);\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.2\", PKCS8ShroudedKeyBag);\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.3\", CertBag);\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.4\", CRLBag);\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.5\", SecretBag);\r\n            SafeBagValueFactory.register(\"1.2.840.113549.1.12.10.1.6\", SafeContents);\r\n        }\r\n        return this.items;\r\n    }\r\n    static register(id, type) {\r\n        this.getItems()[id] = type;\r\n    }\r\n    static find(id) {\r\n        return this.getItems()[id] || null;\r\n    }\r\n}\n\nconst BAG_ID = \"bagId\";\r\nconst BAG_VALUE = \"bagValue\";\r\nconst BAG_ATTRIBUTES = \"bagAttributes\";\r\nconst CLEAR_PROPS$I = [\r\n    BAG_ID,\r\n    BAG_VALUE,\r\n    BAG_ATTRIBUTES\r\n];\r\nclass SafeBag extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.bagId = pvutils.getParametersValue(parameters, BAG_ID, SafeBag.defaultValues(BAG_ID));\r\n        this.bagValue = pvutils.getParametersValue(parameters, BAG_VALUE, SafeBag.defaultValues(BAG_VALUE));\r\n        if (BAG_ATTRIBUTES in parameters) {\r\n            this.bagAttributes = pvutils.getParametersValue(parameters, BAG_ATTRIBUTES, SafeBag.defaultValues(BAG_ATTRIBUTES));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case BAG_ID:\r\n                return EMPTY_STRING;\r\n            case BAG_VALUE:\r\n                return (new asn1js.Any());\r\n            case BAG_ATTRIBUTES:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case BAG_ID:\r\n                return (memberValue === EMPTY_STRING);\r\n            case BAG_VALUE:\r\n                return (memberValue instanceof asn1js.Any);\r\n            case BAG_ATTRIBUTES:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.bagId || BAG_ID) }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Any({ name: (names.bagValue || BAG_VALUE) })]\r\n                }),\r\n                new asn1js.Set({\r\n                    optional: true,\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.bagAttributes || BAG_ATTRIBUTES),\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$I);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SafeBag.schema({\r\n            names: {\r\n                bagId: BAG_ID,\r\n                bagValue: BAG_VALUE,\r\n                bagAttributes: BAG_ATTRIBUTES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.bagId = asn1.result.bagId.valueBlock.toString();\r\n        const bagType = SafeBagValueFactory.find(this.bagId);\r\n        if (!bagType) {\r\n            throw new Error(`Invalid BAG_ID for SafeBag: ${this.bagId}`);\r\n        }\r\n        this.bagValue = new bagType({ schema: asn1.result.bagValue });\r\n        if (BAG_ATTRIBUTES in asn1.result) {\r\n            this.bagAttributes = Array.from(asn1.result.bagAttributes, element => new Attribute({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            new asn1js.ObjectIdentifier({ value: this.bagId }),\r\n            new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.bagValue.toSchema()]\r\n            })\r\n        ];\r\n        if (this.bagAttributes) {\r\n            outputArray.push(new asn1js.Set({\r\n                value: Array.from(this.bagAttributes, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const output = {\r\n            bagId: this.bagId,\r\n            bagValue: this.bagValue.toJSON()\r\n        };\r\n        if (this.bagAttributes) {\r\n            output.bagAttributes = Array.from(this.bagAttributes, o => o.toJSON());\r\n        }\r\n        return output;\r\n    }\r\n}\r\nSafeBag.CLASS_NAME = \"SafeBag\";\n\nconst SAFE_BUGS = \"safeBags\";\r\nclass SafeContents extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.safeBags = pvutils.getParametersValue(parameters, SAFE_BUGS, SafeContents.defaultValues(SAFE_BUGS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SAFE_BUGS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SAFE_BUGS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.safeBags || EMPTY_STRING),\r\n                    value: SafeBag.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            SAFE_BUGS\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SafeContents.schema({\r\n            names: {\r\n                safeBags: SAFE_BUGS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.safeBags = Array.from(asn1.result.safeBags, element => new SafeBag({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.safeBags, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            safeBags: Array.from(this.safeBags, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nSafeContents.CLASS_NAME = \"SafeContents\";\n\nconst OTHER_CERT_FORMAT = \"otherCertFormat\";\r\nconst OTHER_CERT = \"otherCert\";\r\nconst CLEAR_PROPS$H = [\r\n    OTHER_CERT_FORMAT,\r\n    OTHER_CERT\r\n];\r\nclass OtherCertificateFormat extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.otherCertFormat = pvutils.getParametersValue(parameters, OTHER_CERT_FORMAT, OtherCertificateFormat.defaultValues(OTHER_CERT_FORMAT));\r\n        this.otherCert = pvutils.getParametersValue(parameters, OTHER_CERT, OtherCertificateFormat.defaultValues(OTHER_CERT));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case OTHER_CERT_FORMAT:\r\n                return EMPTY_STRING;\r\n            case OTHER_CERT:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.otherCertFormat || OTHER_CERT_FORMAT) }),\r\n                new asn1js.Any({ name: (names.otherCert || OTHER_CERT) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$H);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OtherCertificateFormat.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.otherCertFormat = asn1.result.otherCertFormat.valueBlock.toString();\r\n        this.otherCert = asn1.result.otherCert;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.otherCertFormat }),\r\n                this.otherCert\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            otherCertFormat: this.otherCertFormat\r\n        };\r\n        if (!(this.otherCert instanceof asn1js.Any)) {\r\n            res.otherCert = this.otherCert.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\n\nconst CERTIFICATES$1 = \"certificates\";\r\nconst CLEAR_PROPS$G = [\r\n    CERTIFICATES$1,\r\n];\r\nclass CertificateSet extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES$1, CertificateSet.defaultValues(CERTIFICATES$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERTIFICATES$1:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Set({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.certificates || CERTIFICATES$1),\r\n                    value: new asn1js.Choice({\r\n                        value: [\r\n                            Certificate.schema(),\r\n                            new asn1js.Constructed({\r\n                                idBlock: {\r\n                                    tagClass: 3,\r\n                                    tagNumber: 0\r\n                                },\r\n                                value: [\r\n                                    new asn1js.Any()\r\n                                ]\r\n                            }),\r\n                            new asn1js.Constructed({\r\n                                idBlock: {\r\n                                    tagClass: 3,\r\n                                    tagNumber: 1\r\n                                },\r\n                                value: [\r\n                                    new asn1js.Sequence\r\n                                ]\r\n                            }),\r\n                            new asn1js.Constructed({\r\n                                idBlock: {\r\n                                    tagClass: 3,\r\n                                    tagNumber: 2\r\n                                },\r\n                                value: AttributeCertificateV2.schema().valueBlock.value\r\n                            }),\r\n                            new asn1js.Constructed({\r\n                                idBlock: {\r\n                                    tagClass: 3,\r\n                                    tagNumber: 3\r\n                                },\r\n                                value: OtherCertificateFormat.schema().valueBlock.value\r\n                            })\r\n                        ]\r\n                    })\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$G);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertificateSet.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.certificates = Array.from(asn1.result.certificates || [], (element) => {\r\n            const initialTagNumber = element.idBlock.tagNumber;\r\n            if (element.idBlock.tagClass === 1)\r\n                return new Certificate({ schema: element });\r\n            const elementSequence = new asn1js.Sequence({\r\n                value: element.valueBlock.value\r\n            });\r\n            switch (initialTagNumber) {\r\n                case 1:\r\n                    if (elementSequence.valueBlock.value[0].valueBlock.value[0].valueBlock.valueDec === 1) {\r\n                        return new AttributeCertificateV2({ schema: elementSequence });\r\n                    }\r\n                    else {\r\n                        return new AttributeCertificateV1({ schema: elementSequence });\r\n                    }\r\n                case 2:\r\n                    return new AttributeCertificateV2({ schema: elementSequence });\r\n                case 3:\r\n                    return new OtherCertificateFormat({ schema: elementSequence });\r\n            }\r\n            return element;\r\n        });\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Set({\r\n            value: Array.from(this.certificates, element => {\r\n                switch (true) {\r\n                    case (element instanceof Certificate):\r\n                        return element.toSchema();\r\n                    case (element instanceof AttributeCertificateV1):\r\n                        return new asn1js.Constructed({\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 1\r\n                            },\r\n                            value: element.toSchema().valueBlock.value\r\n                        });\r\n                    case (element instanceof AttributeCertificateV2):\r\n                        return new asn1js.Constructed({\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 2\r\n                            },\r\n                            value: element.toSchema().valueBlock.value\r\n                        });\r\n                    case (element instanceof OtherCertificateFormat):\r\n                        return new asn1js.Constructed({\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 3\r\n                            },\r\n                            value: element.toSchema().valueBlock.value\r\n                        });\r\n                }\r\n                return element.toSchema();\r\n            })\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            certificates: Array.from(this.certificates, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nCertificateSet.CLASS_NAME = \"CertificateSet\";\n\nconst OTHER_REV_INFO_FORMAT = \"otherRevInfoFormat\";\r\nconst OTHER_REV_INFO = \"otherRevInfo\";\r\nconst CLEAR_PROPS$F = [\r\n    OTHER_REV_INFO_FORMAT,\r\n    OTHER_REV_INFO\r\n];\r\nclass OtherRevocationInfoFormat extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.otherRevInfoFormat = pvutils.getParametersValue(parameters, OTHER_REV_INFO_FORMAT, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO_FORMAT));\r\n        this.otherRevInfo = pvutils.getParametersValue(parameters, OTHER_REV_INFO, OtherRevocationInfoFormat.defaultValues(OTHER_REV_INFO));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case OTHER_REV_INFO_FORMAT:\r\n                return EMPTY_STRING;\r\n            case OTHER_REV_INFO:\r\n                return new asn1js.Any();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.otherRevInfoFormat || OTHER_REV_INFO_FORMAT) }),\r\n                new asn1js.Any({ name: (names.otherRevInfo || OTHER_REV_INFO) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$F);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRevocationInfoFormat.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.otherRevInfoFormat = asn1.result.otherRevInfoFormat.valueBlock.toString();\r\n        this.otherRevInfo = asn1.result.otherRevInfo;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.otherRevInfoFormat }),\r\n                this.otherRevInfo\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            otherRevInfoFormat: this.otherRevInfoFormat\r\n        };\r\n        if (!(this.otherRevInfo instanceof asn1js.Any)) {\r\n            res.otherRevInfo = this.otherRevInfo.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nOtherRevocationInfoFormat.CLASS_NAME = \"OtherRevocationInfoFormat\";\n\nconst CRLS$3 = \"crls\";\r\nconst OTHER_REVOCATION_INFOS = \"otherRevocationInfos\";\r\nconst CLEAR_PROPS$E = [\r\n    CRLS$3\r\n];\r\nclass RevocationInfoChoices extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.crls = pvutils.getParametersValue(parameters, CRLS$3, RevocationInfoChoices.defaultValues(CRLS$3));\r\n        this.otherRevocationInfos = pvutils.getParametersValue(parameters, OTHER_REVOCATION_INFOS, RevocationInfoChoices.defaultValues(OTHER_REVOCATION_INFOS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CRLS$3:\r\n                return [];\r\n            case OTHER_REVOCATION_INFOS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Set({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.crls || EMPTY_STRING),\r\n                    value: new asn1js.Choice({\r\n                        value: [\r\n                            CertificateRevocationList.schema(),\r\n                            new asn1js.Constructed({\r\n                                idBlock: {\r\n                                    tagClass: 3,\r\n                                    tagNumber: 1\r\n                                },\r\n                                value: [\r\n                                    new asn1js.ObjectIdentifier(),\r\n                                    new asn1js.Any()\r\n                                ]\r\n                            })\r\n                        ]\r\n                    })\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$E);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RevocationInfoChoices.schema({\r\n            names: {\r\n                crls: CRLS$3\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (asn1.result.crls) {\r\n            for (const element of asn1.result.crls) {\r\n                if (element.idBlock.tagClass === 1)\r\n                    this.crls.push(new CertificateRevocationList({ schema: element }));\r\n                else\r\n                    this.otherRevocationInfos.push(new OtherRevocationInfoFormat({ schema: element }));\r\n            }\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(...Array.from(this.crls, o => o.toSchema()));\r\n        outputArray.push(...Array.from(this.otherRevocationInfos, element => {\r\n            const schema = element.toSchema();\r\n            schema.idBlock.tagClass = 3;\r\n            schema.idBlock.tagNumber = 1;\r\n            return schema;\r\n        }));\r\n        return (new asn1js.Set({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            crls: Array.from(this.crls, o => o.toJSON()),\r\n            otherRevocationInfos: Array.from(this.otherRevocationInfos, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nRevocationInfoChoices.CLASS_NAME = \"RevocationInfoChoices\";\n\nconst CERTS$3 = \"certs\";\r\nconst CRLS$2 = \"crls\";\r\nconst CLEAR_PROPS$D = [\r\n    CERTS$3,\r\n    CRLS$2,\r\n];\r\nclass OriginatorInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.crls = pvutils.getParametersValue(parameters, CRLS$2, OriginatorInfo.defaultValues(CRLS$2));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERTS$3:\r\n                return new CertificateSet();\r\n            case CRLS$2:\r\n                return new RevocationInfoChoices();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CERTS$3:\r\n                return (memberValue.certificates.length === 0);\r\n            case CRLS$2:\r\n                return ((memberValue.crls.length === 0) && (memberValue.otherRevocationInfos.length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    name: (names.certs || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: CertificateSet.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.crls || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: RevocationInfoChoices.schema().valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$D);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorInfo.schema({\r\n            names: {\r\n                certs: CERTS$3,\r\n                crls: CRLS$2\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (CERTS$3 in asn1.result) {\r\n            this.certs = new CertificateSet({\r\n                schema: new asn1js.Set({\r\n                    value: asn1.result.certs.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        if (CRLS$2 in asn1.result) {\r\n            this.crls = new RevocationInfoChoices({\r\n                schema: new asn1js.Set({\r\n                    value: asn1.result.crls.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n    }\r\n    toSchema() {\r\n        const sequenceValue = [];\r\n        if (this.certs) {\r\n            sequenceValue.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.certs.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        if (this.crls) {\r\n            sequenceValue.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: this.crls.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: sequenceValue\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (this.certs) {\r\n            res.certs = this.certs.toJSON();\r\n        }\r\n        if (this.crls) {\r\n            res.crls = this.crls.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nOriginatorInfo.CLASS_NAME = \"OriginatorInfo\";\n\nconst ISSUER = \"issuer\";\r\nconst SERIAL_NUMBER$2 = \"serialNumber\";\r\nconst CLEAR_PROPS$C = [\r\n    ISSUER,\r\n    SERIAL_NUMBER$2,\r\n];\r\nclass IssuerAndSerialNumber extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.issuer = pvutils.getParametersValue(parameters, ISSUER, IssuerAndSerialNumber.defaultValues(ISSUER));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$2, IssuerAndSerialNumber.defaultValues(SERIAL_NUMBER$2));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ISSUER:\r\n                return new RelativeDistinguishedNames();\r\n            case SERIAL_NUMBER$2:\r\n                return new asn1js.Integer();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                RelativeDistinguishedNames.schema(names.issuer || {}),\r\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$C);\r\n        const asn1 = asn1js.compareSchema(schema, schema, IssuerAndSerialNumber.schema({\r\n            names: {\r\n                issuer: {\r\n                    names: {\r\n                        blockName: ISSUER\r\n                    }\r\n                },\r\n                serialNumber: SERIAL_NUMBER$2\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.issuer = new RelativeDistinguishedNames({ schema: asn1.result.issuer });\r\n        this.serialNumber = asn1.result.serialNumber;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.issuer.toSchema(),\r\n                this.serialNumber\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            issuer: this.issuer.toJSON(),\r\n            serialNumber: this.serialNumber.toJSON(),\r\n        };\r\n    }\r\n}\r\nIssuerAndSerialNumber.CLASS_NAME = \"IssuerAndSerialNumber\";\n\nconst VARIANT$3 = \"variant\";\r\nconst VALUE$3 = \"value\";\r\nconst CLEAR_PROPS$B = [\r\n    \"blockName\"\r\n];\r\nclass RecipientIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$3, RecipientIdentifier.defaultValues(VARIANT$3));\r\n        if (VALUE$3 in parameters) {\r\n            this.value = pvutils.getParametersValue(parameters, VALUE$3, RecipientIdentifier.defaultValues(VALUE$3));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VARIANT$3:\r\n                return (-1);\r\n            case VALUE$3:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VARIANT$3:\r\n                return (memberValue === (-1));\r\n            case VALUE$3:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            value: [\r\n                IssuerAndSerialNumber.schema({\r\n                    names: {\r\n                        blockName: (names.blockName || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$B);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientIdentifier.schema({\r\n            names: {\r\n                blockName: \"blockName\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\r\n            this.variant = 1;\r\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n        }\r\n        else {\r\n            this.variant = 2;\r\n            this.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\r\n        }\r\n    }\r\n    toSchema() {\r\n        switch (this.variant) {\r\n            case 1:\r\n                if (!(this.value instanceof IssuerAndSerialNumber)) {\r\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be IssuerAndSerialNumber.\");\r\n                }\r\n                return this.value.toSchema();\r\n            case 2:\r\n                if (!(this.value instanceof asn1js.OctetString)) {\r\n                    throw new Error(\"Incorrect type of RecipientIdentifier.value. It should be ASN.1 OctetString.\");\r\n                }\r\n                return new asn1js.Primitive({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    valueHex: this.value.valueBlock.valueHexView\r\n                });\r\n            default:\r\n                return new asn1js.Any();\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            variant: this.variant\r\n        };\r\n        if ((this.variant === 1 || this.variant === 2) && this.value) {\r\n            res.value = this.value.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRecipientIdentifier.CLASS_NAME = \"RecipientIdentifier\";\n\nconst VERSION$c = \"version\";\r\nconst RID$1 = \"rid\";\r\nconst KEY_ENCRYPTION_ALGORITHM$3 = \"keyEncryptionAlgorithm\";\r\nconst ENCRYPTED_KEY$3 = \"encryptedKey\";\r\nconst RECIPIENT_CERTIFICATE$1 = \"recipientCertificate\";\r\nconst CLEAR_PROPS$A = [\r\n    VERSION$c,\r\n    RID$1,\r\n    KEY_ENCRYPTION_ALGORITHM$3,\r\n    ENCRYPTED_KEY$3,\r\n];\r\nclass KeyTransRecipientInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$c, KeyTransRecipientInfo.defaultValues(VERSION$c));\r\n        this.rid = pvutils.getParametersValue(parameters, RID$1, KeyTransRecipientInfo.defaultValues(RID$1));\r\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$3, KeyTransRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$3));\r\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$3, KeyTransRecipientInfo.defaultValues(ENCRYPTED_KEY$3));\r\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE$1, KeyTransRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$c:\r\n                return (-1);\r\n            case RID$1:\r\n                return {};\r\n            case KEY_ENCRYPTION_ALGORITHM$3:\r\n                return new AlgorithmIdentifier();\r\n            case ENCRYPTED_KEY$3:\r\n                return new asn1js.OctetString();\r\n            case RECIPIENT_CERTIFICATE$1:\r\n                return new Certificate();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$c:\r\n                return (memberValue === KeyTransRecipientInfo.defaultValues(VERSION$c));\r\n            case RID$1:\r\n                return (Object.keys(memberValue).length === 0);\r\n            case KEY_ENCRYPTION_ALGORITHM$3:\r\n            case ENCRYPTED_KEY$3:\r\n                return memberValue.isEqual(KeyTransRecipientInfo.defaultValues(memberName));\r\n            case RECIPIENT_CERTIFICATE$1:\r\n                return false;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                RecipientIdentifier.schema(names.rid || {}),\r\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$A);\r\n        const asn1 = asn1js.compareSchema(schema, schema, KeyTransRecipientInfo.schema({\r\n            names: {\r\n                version: VERSION$c,\r\n                rid: {\r\n                    names: {\r\n                        blockName: RID$1\r\n                    }\r\n                },\r\n                keyEncryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: KEY_ENCRYPTION_ALGORITHM$3\r\n                    }\r\n                },\r\n                encryptedKey: ENCRYPTED_KEY$3\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        if (asn1.result.rid.idBlock.tagClass === 3) {\r\n            this.rid = new asn1js.OctetString({ valueHex: asn1.result.rid.valueBlock.valueHex });\r\n        }\r\n        else {\r\n            this.rid = new IssuerAndSerialNumber({ schema: asn1.result.rid });\r\n        }\r\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n        this.encryptedKey = asn1.result.encryptedKey;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (this.rid instanceof IssuerAndSerialNumber) {\r\n            this.version = 0;\r\n            outputArray.push(new asn1js.Integer({ value: this.version }));\r\n            outputArray.push(this.rid.toSchema());\r\n        }\r\n        else {\r\n            this.version = 2;\r\n            outputArray.push(new asn1js.Integer({ value: this.version }));\r\n            outputArray.push(new asn1js.Primitive({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                valueHex: this.rid.valueBlock.valueHexView\r\n            }));\r\n        }\r\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n        outputArray.push(this.encryptedKey);\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            version: this.version,\r\n            rid: this.rid.toJSON(),\r\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n            encryptedKey: this.encryptedKey.toJSON(),\r\n        };\r\n    }\r\n}\r\nKeyTransRecipientInfo.CLASS_NAME = \"KeyTransRecipientInfo\";\n\nconst ALGORITHM = \"algorithm\";\r\nconst PUBLIC_KEY = \"publicKey\";\r\nconst CLEAR_PROPS$z = [\r\n    ALGORITHM,\r\n    PUBLIC_KEY\r\n];\r\nclass OriginatorPublicKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.algorithm = pvutils.getParametersValue(parameters, ALGORITHM, OriginatorPublicKey.defaultValues(ALGORITHM));\r\n        this.publicKey = pvutils.getParametersValue(parameters, PUBLIC_KEY, OriginatorPublicKey.defaultValues(PUBLIC_KEY));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case PUBLIC_KEY:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ALGORITHM:\r\n            case PUBLIC_KEY:\r\n                return (memberValue.isEqual(OriginatorPublicKey.defaultValues(memberName)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.algorithm || {}),\r\n                new asn1js.BitString({ name: (names.publicKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$z);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorPublicKey.schema({\r\n            names: {\r\n                algorithm: {\r\n                    names: {\r\n                        blockName: ALGORITHM\r\n                    }\r\n                },\r\n                publicKey: PUBLIC_KEY\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\r\n        this.publicKey = asn1.result.publicKey;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.algorithm.toSchema(),\r\n                this.publicKey\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            algorithm: this.algorithm.toJSON(),\r\n            publicKey: this.publicKey.toJSON(),\r\n        };\r\n    }\r\n}\r\nOriginatorPublicKey.CLASS_NAME = \"OriginatorPublicKey\";\n\nconst VARIANT$2 = \"variant\";\r\nconst VALUE$2 = \"value\";\r\nconst CLEAR_PROPS$y = [\r\n    \"blockName\",\r\n];\r\nclass OriginatorIdentifierOrKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$2, OriginatorIdentifierOrKey.defaultValues(VARIANT$2));\r\n        if (VALUE$2 in parameters) {\r\n            this.value = pvutils.getParametersValue(parameters, VALUE$2, OriginatorIdentifierOrKey.defaultValues(VALUE$2));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VARIANT$2:\r\n                return (-1);\r\n            case VALUE$2:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VARIANT$2:\r\n                return (memberValue === (-1));\r\n            case VALUE$2:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            value: [\r\n                IssuerAndSerialNumber.schema({\r\n                    names: {\r\n                        blockName: (names.blockName || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                new asn1js.Primitive({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING)\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    value: OriginatorPublicKey.schema().valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$y);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OriginatorIdentifierOrKey.schema({\r\n            names: {\r\n                blockName: \"blockName\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\r\n            this.variant = 1;\r\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n        }\r\n        else {\r\n            if (asn1.result.blockName.idBlock.tagNumber === 0) {\r\n                asn1.result.blockName.idBlock.tagClass = 1;\r\n                asn1.result.blockName.idBlock.tagNumber = 4;\r\n                this.variant = 2;\r\n                this.value = asn1.result.blockName;\r\n            }\r\n            else {\r\n                this.variant = 3;\r\n                this.value = new OriginatorPublicKey({\r\n                    schema: new asn1js.Sequence({\r\n                        value: asn1.result.blockName.valueBlock.value\r\n                    })\r\n                });\r\n            }\r\n        }\r\n    }\r\n    toSchema() {\r\n        switch (this.variant) {\r\n            case 1:\r\n                return this.value.toSchema();\r\n            case 2:\r\n                this.value.idBlock.tagClass = 3;\r\n                this.value.idBlock.tagNumber = 0;\r\n                return this.value;\r\n            case 3:\r\n                {\r\n                    const _schema = this.value.toSchema();\r\n                    _schema.idBlock.tagClass = 3;\r\n                    _schema.idBlock.tagNumber = 1;\r\n                    return _schema;\r\n                }\r\n            default:\r\n                return new asn1js.Any();\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            variant: this.variant\r\n        };\r\n        if ((this.variant === 1) || (this.variant === 2) || (this.variant === 3)) {\r\n            res.value = this.value.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nOriginatorIdentifierOrKey.CLASS_NAME = \"OriginatorIdentifierOrKey\";\n\nconst KEY_ATTR_ID = \"keyAttrId\";\r\nconst KEY_ATTR = \"keyAttr\";\r\nconst CLEAR_PROPS$x = [\r\n    KEY_ATTR_ID,\r\n    KEY_ATTR,\r\n];\r\nclass OtherKeyAttribute extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.keyAttrId = pvutils.getParametersValue(parameters, KEY_ATTR_ID, OtherKeyAttribute.defaultValues(KEY_ATTR_ID));\r\n        if (KEY_ATTR in parameters) {\r\n            this.keyAttr = pvutils.getParametersValue(parameters, KEY_ATTR, OtherKeyAttribute.defaultValues(KEY_ATTR));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_ATTR_ID:\r\n                return EMPTY_STRING;\r\n            case KEY_ATTR:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case KEY_ATTR_ID:\r\n                return (typeof memberValue === \"string\" && memberValue === EMPTY_STRING);\r\n            case KEY_ATTR:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            optional: (names.optional || true),\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.keyAttrId || EMPTY_STRING) }),\r\n                new asn1js.Any({\r\n                    optional: true,\r\n                    name: (names.keyAttr || EMPTY_STRING)\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$x);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OtherKeyAttribute.schema({\r\n            names: {\r\n                keyAttrId: KEY_ATTR_ID,\r\n                keyAttr: KEY_ATTR\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.keyAttrId = asn1.result.keyAttrId.valueBlock.toString();\r\n        if (KEY_ATTR in asn1.result) {\r\n            this.keyAttr = asn1.result.keyAttr;\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.keyAttrId }));\r\n        if (KEY_ATTR in this) {\r\n            outputArray.push(this.keyAttr);\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray,\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            keyAttrId: this.keyAttrId\r\n        };\r\n        if (KEY_ATTR in this) {\r\n            res.keyAttr = this.keyAttr.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nOtherKeyAttribute.CLASS_NAME = \"OtherKeyAttribute\";\n\nconst SUBJECT_KEY_IDENTIFIER = \"subjectKeyIdentifier\";\r\nconst DATE$1 = \"date\";\r\nconst OTHER$1 = \"other\";\r\nconst CLEAR_PROPS$w = [\r\n    SUBJECT_KEY_IDENTIFIER,\r\n    DATE$1,\r\n    OTHER$1,\r\n];\r\nclass RecipientKeyIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.subjectKeyIdentifier = pvutils.getParametersValue(parameters, SUBJECT_KEY_IDENTIFIER, RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER));\r\n        if (DATE$1 in parameters) {\r\n            this.date = pvutils.getParametersValue(parameters, DATE$1, RecipientKeyIdentifier.defaultValues(DATE$1));\r\n        }\r\n        if (OTHER$1 in parameters) {\r\n            this.other = pvutils.getParametersValue(parameters, OTHER$1, RecipientKeyIdentifier.defaultValues(OTHER$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SUBJECT_KEY_IDENTIFIER:\r\n                return new asn1js.OctetString();\r\n            case DATE$1:\r\n                return new asn1js.GeneralizedTime();\r\n            case OTHER$1:\r\n                return new OtherKeyAttribute();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SUBJECT_KEY_IDENTIFIER:\r\n                return (memberValue.isEqual(RecipientKeyIdentifier.defaultValues(SUBJECT_KEY_IDENTIFIER)));\r\n            case DATE$1:\r\n                return ((memberValue.year === 0) &&\r\n                    (memberValue.month === 0) &&\r\n                    (memberValue.day === 0) &&\r\n                    (memberValue.hour === 0) &&\r\n                    (memberValue.minute === 0) &&\r\n                    (memberValue.second === 0) &&\r\n                    (memberValue.millisecond === 0));\r\n            case OTHER$1:\r\n                return ((memberValue.keyAttrId === EMPTY_STRING) && ((\"keyAttr\" in memberValue) === false));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.OctetString({ name: (names.subjectKeyIdentifier || EMPTY_STRING) }),\r\n                new asn1js.GeneralizedTime({\r\n                    optional: true,\r\n                    name: (names.date || EMPTY_STRING)\r\n                }),\r\n                OtherKeyAttribute.schema(names.other || {})\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$w);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientKeyIdentifier.schema({\r\n            names: {\r\n                subjectKeyIdentifier: SUBJECT_KEY_IDENTIFIER,\r\n                date: DATE$1,\r\n                other: {\r\n                    names: {\r\n                        blockName: OTHER$1\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.subjectKeyIdentifier = asn1.result.subjectKeyIdentifier;\r\n        if (DATE$1 in asn1.result)\r\n            this.date = asn1.result.date;\r\n        if (OTHER$1 in asn1.result)\r\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.subjectKeyIdentifier);\r\n        if (this.date) {\r\n            outputArray.push(this.date);\r\n        }\r\n        if (this.other) {\r\n            outputArray.push(this.other.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            subjectKeyIdentifier: this.subjectKeyIdentifier.toJSON()\r\n        };\r\n        if (this.date) {\r\n            res.date = this.date.toJSON();\r\n        }\r\n        if (this.other) {\r\n            res.other = this.other.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRecipientKeyIdentifier.CLASS_NAME = \"RecipientKeyIdentifier\";\n\nconst VARIANT$1 = \"variant\";\r\nconst VALUE$1 = \"value\";\r\nconst CLEAR_PROPS$v = [\r\n    \"blockName\",\r\n];\r\nclass KeyAgreeRecipientIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.variant = pvutils.getParametersValue(parameters, VARIANT$1, KeyAgreeRecipientIdentifier.defaultValues(VARIANT$1));\r\n        this.value = pvutils.getParametersValue(parameters, VALUE$1, KeyAgreeRecipientIdentifier.defaultValues(VALUE$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VARIANT$1:\r\n                return (-1);\r\n            case VALUE$1:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VARIANT$1:\r\n                return (memberValue === (-1));\r\n            case VALUE$1:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            value: [\r\n                IssuerAndSerialNumber.schema(names.issuerAndSerialNumber || {\r\n                    names: {\r\n                        blockName: (names.blockName || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: RecipientKeyIdentifier.schema(names.rKeyId || {\r\n                        names: {\r\n                            blockName: (names.blockName || EMPTY_STRING)\r\n                        }\r\n                    }).valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$v);\r\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientIdentifier.schema({\r\n            names: {\r\n                blockName: \"blockName\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\r\n            this.variant = 1;\r\n            this.value = new IssuerAndSerialNumber({ schema: asn1.result.blockName });\r\n        }\r\n        else {\r\n            this.variant = 2;\r\n            this.value = new RecipientKeyIdentifier({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.blockName.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n    }\r\n    toSchema() {\r\n        switch (this.variant) {\r\n            case 1:\r\n                return this.value.toSchema();\r\n            case 2:\r\n                return new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: this.value.toSchema().valueBlock.value\r\n                });\r\n            default:\r\n                return new asn1js.Any();\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            variant: this.variant,\r\n        };\r\n        if ((this.variant === 1) || (this.variant === 2)) {\r\n            res.value = this.value.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nKeyAgreeRecipientIdentifier.CLASS_NAME = \"KeyAgreeRecipientIdentifier\";\n\nconst RID = \"rid\";\r\nconst ENCRYPTED_KEY$2 = \"encryptedKey\";\r\nconst CLEAR_PROPS$u = [\r\n    RID,\r\n    ENCRYPTED_KEY$2,\r\n];\r\nclass RecipientEncryptedKey extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.rid = pvutils.getParametersValue(parameters, RID, RecipientEncryptedKey.defaultValues(RID));\r\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$2, RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case RID:\r\n                return new KeyAgreeRecipientIdentifier();\r\n            case ENCRYPTED_KEY$2:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case RID:\r\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n            case ENCRYPTED_KEY$2:\r\n                return (memberValue.isEqual(RecipientEncryptedKey.defaultValues(ENCRYPTED_KEY$2)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                KeyAgreeRecipientIdentifier.schema(names.rid || {}),\r\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$u);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKey.schema({\r\n            names: {\r\n                rid: {\r\n                    names: {\r\n                        blockName: RID\r\n                    }\r\n                },\r\n                encryptedKey: ENCRYPTED_KEY$2\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.rid = new KeyAgreeRecipientIdentifier({ schema: asn1.result.rid });\r\n        this.encryptedKey = asn1.result.encryptedKey;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.rid.toSchema(),\r\n                this.encryptedKey\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            rid: this.rid.toJSON(),\r\n            encryptedKey: this.encryptedKey.toJSON(),\r\n        };\r\n    }\r\n}\r\nRecipientEncryptedKey.CLASS_NAME = \"RecipientEncryptedKey\";\n\nconst ENCRYPTED_KEYS = \"encryptedKeys\";\r\nconst RECIPIENT_ENCRYPTED_KEYS = \"RecipientEncryptedKeys\";\r\nconst CLEAR_PROPS$t = [\r\n    RECIPIENT_ENCRYPTED_KEYS,\r\n];\r\nclass RecipientEncryptedKeys extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.encryptedKeys = pvutils.getParametersValue(parameters, ENCRYPTED_KEYS, RecipientEncryptedKeys.defaultValues(ENCRYPTED_KEYS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ENCRYPTED_KEYS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ENCRYPTED_KEYS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.RecipientEncryptedKeys || EMPTY_STRING),\r\n                    value: RecipientEncryptedKey.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$t);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientEncryptedKeys.schema({\r\n            names: {\r\n                RecipientEncryptedKeys: RECIPIENT_ENCRYPTED_KEYS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.encryptedKeys = Array.from(asn1.result.RecipientEncryptedKeys, element => new RecipientEncryptedKey({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.encryptedKeys, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            encryptedKeys: Array.from(this.encryptedKeys, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nRecipientEncryptedKeys.CLASS_NAME = \"RecipientEncryptedKeys\";\n\nconst VERSION$b = \"version\";\r\nconst ORIGINATOR = \"originator\";\r\nconst UKM = \"ukm\";\r\nconst KEY_ENCRYPTION_ALGORITHM$2 = \"keyEncryptionAlgorithm\";\r\nconst RECIPIENT_ENCRYPTED_KEY = \"recipientEncryptedKeys\";\r\nconst RECIPIENT_CERTIFICATE = \"recipientCertificate\";\r\nconst RECIPIENT_PUBLIC_KEY = \"recipientPublicKey\";\r\nconst CLEAR_PROPS$s = [\r\n    VERSION$b,\r\n    ORIGINATOR,\r\n    UKM,\r\n    KEY_ENCRYPTION_ALGORITHM$2,\r\n    RECIPIENT_ENCRYPTED_KEY,\r\n];\r\nclass KeyAgreeRecipientInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$b, KeyAgreeRecipientInfo.defaultValues(VERSION$b));\r\n        this.originator = pvutils.getParametersValue(parameters, ORIGINATOR, KeyAgreeRecipientInfo.defaultValues(ORIGINATOR));\r\n        if (UKM in parameters) {\r\n            this.ukm = pvutils.getParametersValue(parameters, UKM, KeyAgreeRecipientInfo.defaultValues(UKM));\r\n        }\r\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$2, KeyAgreeRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$2));\r\n        this.recipientEncryptedKeys = pvutils.getParametersValue(parameters, RECIPIENT_ENCRYPTED_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_ENCRYPTED_KEY));\r\n        this.recipientCertificate = pvutils.getParametersValue(parameters, RECIPIENT_CERTIFICATE, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_CERTIFICATE));\r\n        this.recipientPublicKey = pvutils.getParametersValue(parameters, RECIPIENT_PUBLIC_KEY, KeyAgreeRecipientInfo.defaultValues(RECIPIENT_PUBLIC_KEY));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$b:\r\n                return 0;\r\n            case ORIGINATOR:\r\n                return new OriginatorIdentifierOrKey();\r\n            case UKM:\r\n                return new asn1js.OctetString();\r\n            case KEY_ENCRYPTION_ALGORITHM$2:\r\n                return new AlgorithmIdentifier();\r\n            case RECIPIENT_ENCRYPTED_KEY:\r\n                return new RecipientEncryptedKeys();\r\n            case RECIPIENT_CERTIFICATE:\r\n                return new Certificate();\r\n            case RECIPIENT_PUBLIC_KEY:\r\n                return null;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$b:\r\n                return (memberValue === 0);\r\n            case ORIGINATOR:\r\n                return ((memberValue.variant === (-1)) && ((\"value\" in memberValue) === false));\r\n            case UKM:\r\n                return (memberValue.isEqual(KeyAgreeRecipientInfo.defaultValues(UKM)));\r\n            case KEY_ENCRYPTION_ALGORITHM$2:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case RECIPIENT_ENCRYPTED_KEY:\r\n                return (memberValue.encryptedKeys.length === 0);\r\n            case RECIPIENT_CERTIFICATE:\r\n                return false;\r\n            case RECIPIENT_PUBLIC_KEY:\r\n                return false;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: names.blockName || EMPTY_STRING,\r\n            value: [\r\n                new asn1js.Integer({ name: names.version || EMPTY_STRING }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        OriginatorIdentifierOrKey.schema(names.originator || {})\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [new asn1js.OctetString({ name: names.ukm || EMPTY_STRING })]\r\n                }),\r\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n                RecipientEncryptedKeys.schema(names.recipientEncryptedKeys || {})\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$s);\r\n        const asn1 = asn1js.compareSchema(schema, schema, KeyAgreeRecipientInfo.schema({\r\n            names: {\r\n                version: VERSION$b,\r\n                originator: {\r\n                    names: {\r\n                        blockName: ORIGINATOR\r\n                    }\r\n                },\r\n                ukm: UKM,\r\n                keyEncryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: KEY_ENCRYPTION_ALGORITHM$2\r\n                    }\r\n                },\r\n                recipientEncryptedKeys: {\r\n                    names: {\r\n                        blockName: RECIPIENT_ENCRYPTED_KEY\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.originator = new OriginatorIdentifierOrKey({ schema: asn1.result.originator });\r\n        if (UKM in asn1.result)\r\n            this.ukm = asn1.result.ukm;\r\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n        this.recipientEncryptedKeys = new RecipientEncryptedKeys({ schema: asn1.result.recipientEncryptedKeys });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(new asn1js.Constructed({\r\n            idBlock: {\r\n                tagClass: 3,\r\n                tagNumber: 0\r\n            },\r\n            value: [this.originator.toSchema()]\r\n        }));\r\n        if (this.ukm) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [this.ukm]\r\n            }));\r\n        }\r\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n        outputArray.push(this.recipientEncryptedKeys.toSchema());\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            originator: this.originator.toJSON(),\r\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n            recipientEncryptedKeys: this.recipientEncryptedKeys.toJSON(),\r\n        };\r\n        if (this.ukm) {\r\n            res.ukm = this.ukm.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nKeyAgreeRecipientInfo.CLASS_NAME = \"KeyAgreeRecipientInfo\";\n\nconst KEY_IDENTIFIER = \"keyIdentifier\";\r\nconst DATE = \"date\";\r\nconst OTHER = \"other\";\r\nconst CLEAR_PROPS$r = [\r\n    KEY_IDENTIFIER,\r\n    DATE,\r\n    OTHER,\r\n];\r\nclass KEKIdentifier extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.keyIdentifier = pvutils.getParametersValue(parameters, KEY_IDENTIFIER, KEKIdentifier.defaultValues(KEY_IDENTIFIER));\r\n        if (DATE in parameters) {\r\n            this.date = pvutils.getParametersValue(parameters, DATE, KEKIdentifier.defaultValues(DATE));\r\n        }\r\n        if (OTHER in parameters) {\r\n            this.other = pvutils.getParametersValue(parameters, OTHER, KEKIdentifier.defaultValues(OTHER));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_IDENTIFIER:\r\n                return new asn1js.OctetString();\r\n            case DATE:\r\n                return new asn1js.GeneralizedTime();\r\n            case OTHER:\r\n                return new OtherKeyAttribute();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case KEY_IDENTIFIER:\r\n                return (memberValue.isEqual(KEKIdentifier.defaultValues(KEY_IDENTIFIER)));\r\n            case DATE:\r\n                return ((memberValue.year === 0) &&\r\n                    (memberValue.month === 0) &&\r\n                    (memberValue.day === 0) &&\r\n                    (memberValue.hour === 0) &&\r\n                    (memberValue.minute === 0) &&\r\n                    (memberValue.second === 0) &&\r\n                    (memberValue.millisecond === 0));\r\n            case OTHER:\r\n                return ((memberValue.compareWithDefault(\"keyAttrId\", memberValue.keyAttrId)) &&\r\n                    ((\"keyAttr\" in memberValue) === false));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.OctetString({ name: (names.keyIdentifier || EMPTY_STRING) }),\r\n                new asn1js.GeneralizedTime({\r\n                    optional: true,\r\n                    name: (names.date || EMPTY_STRING)\r\n                }),\r\n                OtherKeyAttribute.schema(names.other || {})\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$r);\r\n        const asn1 = asn1js.compareSchema(schema, schema, KEKIdentifier.schema({\r\n            names: {\r\n                keyIdentifier: KEY_IDENTIFIER,\r\n                date: DATE,\r\n                other: {\r\n                    names: {\r\n                        blockName: OTHER\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.keyIdentifier = asn1.result.keyIdentifier;\r\n        if (DATE in asn1.result)\r\n            this.date = asn1.result.date;\r\n        if (OTHER in asn1.result)\r\n            this.other = new OtherKeyAttribute({ schema: asn1.result.other });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.keyIdentifier);\r\n        if (this.date) {\r\n            outputArray.push(this.date);\r\n        }\r\n        if (this.other) {\r\n            outputArray.push(this.other.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            keyIdentifier: this.keyIdentifier.toJSON()\r\n        };\r\n        if (this.date) {\r\n            res.date = this.date;\r\n        }\r\n        if (this.other) {\r\n            res.other = this.other.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nKEKIdentifier.CLASS_NAME = \"KEKIdentifier\";\n\nconst VERSION$a = \"version\";\r\nconst KEK_ID = \"kekid\";\r\nconst KEY_ENCRYPTION_ALGORITHM$1 = \"keyEncryptionAlgorithm\";\r\nconst ENCRYPTED_KEY$1 = \"encryptedKey\";\r\nconst PER_DEFINED_KEK = \"preDefinedKEK\";\r\nconst CLEAR_PROPS$q = [\r\n    VERSION$a,\r\n    KEK_ID,\r\n    KEY_ENCRYPTION_ALGORITHM$1,\r\n    ENCRYPTED_KEY$1,\r\n];\r\nclass KEKRecipientInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$a, KEKRecipientInfo.defaultValues(VERSION$a));\r\n        this.kekid = pvutils.getParametersValue(parameters, KEK_ID, KEKRecipientInfo.defaultValues(KEK_ID));\r\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM$1, KEKRecipientInfo.defaultValues(KEY_ENCRYPTION_ALGORITHM$1));\r\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY$1, KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1));\r\n        this.preDefinedKEK = pvutils.getParametersValue(parameters, PER_DEFINED_KEK, KEKRecipientInfo.defaultValues(PER_DEFINED_KEK));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$a:\r\n                return 0;\r\n            case KEK_ID:\r\n                return new KEKIdentifier();\r\n            case KEY_ENCRYPTION_ALGORITHM$1:\r\n                return new AlgorithmIdentifier();\r\n            case ENCRYPTED_KEY$1:\r\n                return new asn1js.OctetString();\r\n            case PER_DEFINED_KEK:\r\n                return EMPTY_BUFFER;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case \"KEKRecipientInfo\":\r\n                return (memberValue === KEKRecipientInfo.defaultValues(VERSION$a));\r\n            case KEK_ID:\r\n                return ((memberValue.compareWithDefault(\"keyIdentifier\", memberValue.keyIdentifier)) &&\r\n                    ((\"date\" in memberValue) === false) &&\r\n                    ((\"other\" in memberValue) === false));\r\n            case KEY_ENCRYPTION_ALGORITHM$1:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case ENCRYPTED_KEY$1:\r\n                return (memberValue.isEqual(KEKRecipientInfo.defaultValues(ENCRYPTED_KEY$1)));\r\n            case PER_DEFINED_KEK:\r\n                return (memberValue.byteLength === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                KEKIdentifier.schema(names.kekid || {}),\r\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$q);\r\n        const asn1 = asn1js.compareSchema(schema, schema, KEKRecipientInfo.schema({\r\n            names: {\r\n                version: VERSION$a,\r\n                kekid: {\r\n                    names: {\r\n                        blockName: KEK_ID\r\n                    }\r\n                },\r\n                keyEncryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: KEY_ENCRYPTION_ALGORITHM$1\r\n                    }\r\n                },\r\n                encryptedKey: ENCRYPTED_KEY$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.kekid = new KEKIdentifier({ schema: asn1.result.kekid });\r\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n        this.encryptedKey = asn1.result.encryptedKey;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.Integer({ value: this.version }),\r\n                this.kekid.toSchema(),\r\n                this.keyEncryptionAlgorithm.toSchema(),\r\n                this.encryptedKey\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            version: this.version,\r\n            kekid: this.kekid.toJSON(),\r\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n            encryptedKey: this.encryptedKey.toJSON(),\r\n        };\r\n    }\r\n}\r\nKEKRecipientInfo.CLASS_NAME = \"KEKRecipientInfo\";\n\nconst VERSION$9 = \"version\";\r\nconst KEY_DERIVATION_ALGORITHM = \"keyDerivationAlgorithm\";\r\nconst KEY_ENCRYPTION_ALGORITHM = \"keyEncryptionAlgorithm\";\r\nconst ENCRYPTED_KEY = \"encryptedKey\";\r\nconst PASSWORD = \"password\";\r\nconst CLEAR_PROPS$p = [\r\n    VERSION$9,\r\n    KEY_DERIVATION_ALGORITHM,\r\n    KEY_ENCRYPTION_ALGORITHM,\r\n    ENCRYPTED_KEY\r\n];\r\nclass PasswordRecipientinfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$9, PasswordRecipientinfo.defaultValues(VERSION$9));\r\n        if (KEY_DERIVATION_ALGORITHM in parameters) {\r\n            this.keyDerivationAlgorithm = pvutils.getParametersValue(parameters, KEY_DERIVATION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_DERIVATION_ALGORITHM));\r\n        }\r\n        this.keyEncryptionAlgorithm = pvutils.getParametersValue(parameters, KEY_ENCRYPTION_ALGORITHM, PasswordRecipientinfo.defaultValues(KEY_ENCRYPTION_ALGORITHM));\r\n        this.encryptedKey = pvutils.getParametersValue(parameters, ENCRYPTED_KEY, PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY));\r\n        this.password = pvutils.getParametersValue(parameters, PASSWORD, PasswordRecipientinfo.defaultValues(PASSWORD));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$9:\r\n                return (-1);\r\n            case KEY_DERIVATION_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case KEY_ENCRYPTION_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case ENCRYPTED_KEY:\r\n                return new asn1js.OctetString();\r\n            case PASSWORD:\r\n                return EMPTY_BUFFER;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$9:\r\n                return (memberValue === (-1));\r\n            case KEY_DERIVATION_ALGORITHM:\r\n            case KEY_ENCRYPTION_ALGORITHM:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case ENCRYPTED_KEY:\r\n                return (memberValue.isEqual(PasswordRecipientinfo.defaultValues(ENCRYPTED_KEY)));\r\n            case PASSWORD:\r\n                return (memberValue.byteLength === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    name: (names.keyDerivationAlgorithm || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: AlgorithmIdentifier.schema().valueBlock.value\r\n                }),\r\n                AlgorithmIdentifier.schema(names.keyEncryptionAlgorithm || {}),\r\n                new asn1js.OctetString({ name: (names.encryptedKey || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$p);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PasswordRecipientinfo.schema({\r\n            names: {\r\n                version: VERSION$9,\r\n                keyDerivationAlgorithm: KEY_DERIVATION_ALGORITHM,\r\n                keyEncryptionAlgorithm: {\r\n                    names: {\r\n                        blockName: KEY_ENCRYPTION_ALGORITHM\r\n                    }\r\n                },\r\n                encryptedKey: ENCRYPTED_KEY\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        if (KEY_DERIVATION_ALGORITHM in asn1.result) {\r\n            this.keyDerivationAlgorithm = new AlgorithmIdentifier({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.keyDerivationAlgorithm.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        this.keyEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.keyEncryptionAlgorithm });\r\n        this.encryptedKey = asn1.result.encryptedKey;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        if (this.keyDerivationAlgorithm) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.keyDerivationAlgorithm.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        outputArray.push(this.keyEncryptionAlgorithm.toSchema());\r\n        outputArray.push(this.encryptedKey);\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            keyEncryptionAlgorithm: this.keyEncryptionAlgorithm.toJSON(),\r\n            encryptedKey: this.encryptedKey.toJSON(),\r\n        };\r\n        if (this.keyDerivationAlgorithm) {\r\n            res.keyDerivationAlgorithm = this.keyDerivationAlgorithm.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nPasswordRecipientinfo.CLASS_NAME = \"PasswordRecipientInfo\";\n\nconst ORI_TYPE = \"oriType\";\r\nconst ORI_VALUE = \"oriValue\";\r\nconst CLEAR_PROPS$o = [\r\n    ORI_TYPE,\r\n    ORI_VALUE\r\n];\r\nclass OtherRecipientInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.oriType = pvutils.getParametersValue(parameters, ORI_TYPE, OtherRecipientInfo.defaultValues(ORI_TYPE));\r\n        this.oriValue = pvutils.getParametersValue(parameters, ORI_VALUE, OtherRecipientInfo.defaultValues(ORI_VALUE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case ORI_TYPE:\r\n                return EMPTY_STRING;\r\n            case ORI_VALUE:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case ORI_TYPE:\r\n                return (memberValue === EMPTY_STRING);\r\n            case ORI_VALUE:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.oriType || EMPTY_STRING) }),\r\n                new asn1js.Any({ name: (names.oriValue || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$o);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OtherRecipientInfo.schema({\r\n            names: {\r\n                oriType: ORI_TYPE,\r\n                oriValue: ORI_VALUE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.oriType = asn1.result.oriType.valueBlock.toString();\r\n        this.oriValue = asn1.result.oriValue;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.oriType }),\r\n                this.oriValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            oriType: this.oriType\r\n        };\r\n        if (!OtherRecipientInfo.compareWithDefault(ORI_VALUE, this.oriValue)) {\r\n            res.oriValue = this.oriValue.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nOtherRecipientInfo.CLASS_NAME = \"OtherRecipientInfo\";\n\nconst VARIANT = \"variant\";\r\nconst VALUE = \"value\";\r\nconst CLEAR_PROPS$n = [\r\n    \"blockName\"\r\n];\r\nclass RecipientInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.variant = pvutils.getParametersValue(parameters, VARIANT, RecipientInfo.defaultValues(VARIANT));\r\n        if (VALUE in parameters) {\r\n            this.value = pvutils.getParametersValue(parameters, VALUE, RecipientInfo.defaultValues(VALUE));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VARIANT:\r\n                return (-1);\r\n            case VALUE:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VARIANT:\r\n                return (memberValue === RecipientInfo.defaultValues(memberName));\r\n            case VALUE:\r\n                return (Object.keys(memberValue).length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Choice({\r\n            value: [\r\n                KeyTransRecipientInfo.schema({\r\n                    names: {\r\n                        blockName: (names.blockName || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: KeyAgreeRecipientInfo.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: KEKRecipientInfo.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 3\r\n                    },\r\n                    value: PasswordRecipientinfo.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.blockName || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 4\r\n                    },\r\n                    value: OtherRecipientInfo.schema().valueBlock.value\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$n);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RecipientInfo.schema({\r\n            names: {\r\n                blockName: \"blockName\"\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (asn1.result.blockName.idBlock.tagClass === 1) {\r\n            this.variant = 1;\r\n            this.value = new KeyTransRecipientInfo({ schema: asn1.result.blockName });\r\n        }\r\n        else {\r\n            const blockSequence = new asn1js.Sequence({\r\n                value: asn1.result.blockName.valueBlock.value\r\n            });\r\n            switch (asn1.result.blockName.idBlock.tagNumber) {\r\n                case 1:\r\n                    this.variant = 2;\r\n                    this.value = new KeyAgreeRecipientInfo({ schema: blockSequence });\r\n                    break;\r\n                case 2:\r\n                    this.variant = 3;\r\n                    this.value = new KEKRecipientInfo({ schema: blockSequence });\r\n                    break;\r\n                case 3:\r\n                    this.variant = 4;\r\n                    this.value = new PasswordRecipientinfo({ schema: blockSequence });\r\n                    break;\r\n                case 4:\r\n                    this.variant = 5;\r\n                    this.value = new OtherRecipientInfo({ schema: blockSequence });\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Incorrect structure of RecipientInfo block\");\r\n            }\r\n        }\r\n    }\r\n    toSchema() {\r\n        ParameterError.assertEmpty(this.value, \"value\", \"RecipientInfo\");\r\n        const _schema = this.value.toSchema();\r\n        switch (this.variant) {\r\n            case 1:\r\n                return _schema;\r\n            case 2:\r\n            case 3:\r\n            case 4:\r\n                _schema.idBlock.tagClass = 3;\r\n                _schema.idBlock.tagNumber = (this.variant - 1);\r\n                return _schema;\r\n            default:\r\n                return new asn1js.Any();\r\n        }\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            variant: this.variant\r\n        };\r\n        if (this.value && (this.variant >= 1) && (this.variant <= 4)) {\r\n            res.value = this.value.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRecipientInfo.CLASS_NAME = \"RecipientInfo\";\n\nconst HASH_ALGORITHM$2 = \"hashAlgorithm\";\r\nconst MASK_GEN_ALGORITHM = \"maskGenAlgorithm\";\r\nconst P_SOURCE_ALGORITHM = \"pSourceAlgorithm\";\r\nconst CLEAR_PROPS$m = [\r\n    HASH_ALGORITHM$2,\r\n    MASK_GEN_ALGORITHM,\r\n    P_SOURCE_ALGORITHM\r\n];\r\nclass RSAESOAEPParams extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$2, RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2));\r\n        this.maskGenAlgorithm = pvutils.getParametersValue(parameters, MASK_GEN_ALGORITHM, RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM));\r\n        this.pSourceAlgorithm = pvutils.getParametersValue(parameters, P_SOURCE_ALGORITHM, RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM$2:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.3.14.3.2.26\",\r\n                    algorithmParams: new asn1js.Null()\r\n                });\r\n            case MASK_GEN_ALGORITHM:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.2.840.113549.1.1.8\",\r\n                    algorithmParams: (new AlgorithmIdentifier({\r\n                        algorithmId: \"1.3.14.3.2.26\",\r\n                        algorithmParams: new asn1js.Null()\r\n                    })).toSchema()\r\n                });\r\n            case P_SOURCE_ALGORITHM:\r\n                return new AlgorithmIdentifier({\r\n                    algorithmId: \"1.2.840.113549.1.1.9\",\r\n                    algorithmParams: new asn1js.OctetString({ valueHex: (new Uint8Array([0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09])).buffer })\r\n                });\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    optional: true,\r\n                    value: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    optional: true,\r\n                    value: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    optional: true,\r\n                    value: [AlgorithmIdentifier.schema(names.pSourceAlgorithm || {})]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$m);\r\n        const asn1 = asn1js.compareSchema(schema, schema, RSAESOAEPParams.schema({\r\n            names: {\r\n                hashAlgorithm: {\r\n                    names: {\r\n                        blockName: HASH_ALGORITHM$2\r\n                    }\r\n                },\r\n                maskGenAlgorithm: {\r\n                    names: {\r\n                        blockName: MASK_GEN_ALGORITHM\r\n                    }\r\n                },\r\n                pSourceAlgorithm: {\r\n                    names: {\r\n                        blockName: P_SOURCE_ALGORITHM\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        if (HASH_ALGORITHM$2 in asn1.result)\r\n            this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n        if (MASK_GEN_ALGORITHM in asn1.result)\r\n            this.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\r\n        if (P_SOURCE_ALGORITHM in asn1.result)\r\n            this.pSourceAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.pSourceAlgorithm });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.hashAlgorithm.toSchema()]\r\n            }));\r\n        }\r\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: [this.maskGenAlgorithm.toSchema()]\r\n            }));\r\n        }\r\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 2\r\n                },\r\n                value: [this.pSourceAlgorithm.toSchema()]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (!this.hashAlgorithm.isEqual(RSAESOAEPParams.defaultValues(HASH_ALGORITHM$2))) {\r\n            res.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n        }\r\n        if (!this.maskGenAlgorithm.isEqual(RSAESOAEPParams.defaultValues(MASK_GEN_ALGORITHM))) {\r\n            res.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n        }\r\n        if (!this.pSourceAlgorithm.isEqual(RSAESOAEPParams.defaultValues(P_SOURCE_ALGORITHM))) {\r\n            res.pSourceAlgorithm = this.pSourceAlgorithm.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRSAESOAEPParams.CLASS_NAME = \"RSAESOAEPParams\";\n\nconst KEY_INFO = \"keyInfo\";\r\nconst ENTITY_U_INFO = \"entityUInfo\";\r\nconst SUPP_PUB_INFO = \"suppPubInfo\";\r\nconst CLEAR_PROPS$l = [\r\n    KEY_INFO,\r\n    ENTITY_U_INFO,\r\n    SUPP_PUB_INFO\r\n];\r\nclass ECCCMSSharedInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.keyInfo = pvutils.getParametersValue(parameters, KEY_INFO, ECCCMSSharedInfo.defaultValues(KEY_INFO));\r\n        if (ENTITY_U_INFO in parameters) {\r\n            this.entityUInfo = pvutils.getParametersValue(parameters, ENTITY_U_INFO, ECCCMSSharedInfo.defaultValues(ENTITY_U_INFO));\r\n        }\r\n        this.suppPubInfo = pvutils.getParametersValue(parameters, SUPP_PUB_INFO, ECCCMSSharedInfo.defaultValues(SUPP_PUB_INFO));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case KEY_INFO:\r\n                return new AlgorithmIdentifier();\r\n            case ENTITY_U_INFO:\r\n                return new asn1js.OctetString();\r\n            case SUPP_PUB_INFO:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case KEY_INFO:\r\n            case ENTITY_U_INFO:\r\n            case SUPP_PUB_INFO:\r\n                return (memberValue.isEqual(ECCCMSSharedInfo.defaultValues(memberName)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.keyInfo || {}),\r\n                new asn1js.Constructed({\r\n                    name: (names.entityUInfo || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    optional: true,\r\n                    value: [new asn1js.OctetString()]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.suppPubInfo || EMPTY_STRING),\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: [new asn1js.OctetString()]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$l);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ECCCMSSharedInfo.schema({\r\n            names: {\r\n                keyInfo: {\r\n                    names: {\r\n                        blockName: KEY_INFO\r\n                    }\r\n                },\r\n                entityUInfo: ENTITY_U_INFO,\r\n                suppPubInfo: SUPP_PUB_INFO\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.keyInfo = new AlgorithmIdentifier({ schema: asn1.result.keyInfo });\r\n        if (ENTITY_U_INFO in asn1.result)\r\n            this.entityUInfo = asn1.result.entityUInfo.valueBlock.value[0];\r\n        this.suppPubInfo = asn1.result.suppPubInfo.valueBlock.value[0];\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.keyInfo.toSchema());\r\n        if (this.entityUInfo) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.entityUInfo]\r\n            }));\r\n        }\r\n        outputArray.push(new asn1js.Constructed({\r\n            idBlock: {\r\n                tagClass: 3,\r\n                tagNumber: 2\r\n            },\r\n            value: [this.suppPubInfo]\r\n        }));\r\n        return new asn1js.Sequence({\r\n            value: outputArray\r\n        });\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            keyInfo: this.keyInfo.toJSON(),\r\n            suppPubInfo: this.suppPubInfo.toJSON(),\r\n        };\r\n        if (this.entityUInfo) {\r\n            res.entityUInfo = this.entityUInfo.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nECCCMSSharedInfo.CLASS_NAME = \"ECCCMSSharedInfo\";\n\nconst VERSION$8 = \"version\";\r\nconst ORIGINATOR_INFO = \"originatorInfo\";\r\nconst RECIPIENT_INFOS = \"recipientInfos\";\r\nconst ENCRYPTED_CONTENT_INFO = \"encryptedContentInfo\";\r\nconst UNPROTECTED_ATTRS = \"unprotectedAttrs\";\r\nconst CLEAR_PROPS$k = [\r\n    VERSION$8,\r\n    ORIGINATOR_INFO,\r\n    RECIPIENT_INFOS,\r\n    ENCRYPTED_CONTENT_INFO,\r\n    UNPROTECTED_ATTRS\r\n];\r\nconst defaultEncryptionParams = {\r\n    kdfAlgorithm: \"SHA-512\",\r\n    kekEncryptionLength: 256\r\n};\r\nconst curveLengthByName = {\r\n    \"P-256\": 256,\r\n    \"P-384\": 384,\r\n    \"P-521\": 528\r\n};\r\nclass EnvelopedData extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$8, EnvelopedData.defaultValues(VERSION$8));\r\n        if (ORIGINATOR_INFO in parameters) {\r\n            this.originatorInfo = pvutils.getParametersValue(parameters, ORIGINATOR_INFO, EnvelopedData.defaultValues(ORIGINATOR_INFO));\r\n        }\r\n        this.recipientInfos = pvutils.getParametersValue(parameters, RECIPIENT_INFOS, EnvelopedData.defaultValues(RECIPIENT_INFOS));\r\n        this.encryptedContentInfo = pvutils.getParametersValue(parameters, ENCRYPTED_CONTENT_INFO, EnvelopedData.defaultValues(ENCRYPTED_CONTENT_INFO));\r\n        if (UNPROTECTED_ATTRS in parameters) {\r\n            this.unprotectedAttrs = pvutils.getParametersValue(parameters, UNPROTECTED_ATTRS, EnvelopedData.defaultValues(UNPROTECTED_ATTRS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$8:\r\n                return 0;\r\n            case ORIGINATOR_INFO:\r\n                return new OriginatorInfo();\r\n            case RECIPIENT_INFOS:\r\n                return [];\r\n            case ENCRYPTED_CONTENT_INFO:\r\n                return new EncryptedContentInfo();\r\n            case UNPROTECTED_ATTRS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$8:\r\n                return (memberValue === EnvelopedData.defaultValues(memberName));\r\n            case ORIGINATOR_INFO:\r\n                return ((memberValue.certs.certificates.length === 0) && (memberValue.crls.crls.length === 0));\r\n            case RECIPIENT_INFOS:\r\n            case UNPROTECTED_ATTRS:\r\n                return (memberValue.length === 0);\r\n            case ENCRYPTED_CONTENT_INFO:\r\n                return ((EncryptedContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n                    (EncryptedContentInfo.compareWithDefault(\"contentEncryptionAlgorithm\", memberValue.contentEncryptionAlgorithm) &&\r\n                        (EncryptedContentInfo.compareWithDefault(\"encryptedContent\", memberValue.encryptedContent))));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    name: (names.originatorInfo || EMPTY_STRING),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: OriginatorInfo.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Set({\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.recipientInfos || EMPTY_STRING),\r\n                            value: RecipientInfo.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                EncryptedContentInfo.schema(names.encryptedContentInfo || {}),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.unprotectedAttrs || EMPTY_STRING),\r\n                            value: Attribute.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$k);\r\n        const asn1 = asn1js.compareSchema(schema, schema, EnvelopedData.schema({\r\n            names: {\r\n                version: VERSION$8,\r\n                originatorInfo: ORIGINATOR_INFO,\r\n                recipientInfos: RECIPIENT_INFOS,\r\n                encryptedContentInfo: {\r\n                    names: {\r\n                        blockName: ENCRYPTED_CONTENT_INFO\r\n                    }\r\n                },\r\n                unprotectedAttrs: UNPROTECTED_ATTRS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        if (ORIGINATOR_INFO in asn1.result) {\r\n            this.originatorInfo = new OriginatorInfo({\r\n                schema: new asn1js.Sequence({\r\n                    value: asn1.result.originatorInfo.valueBlock.value\r\n                })\r\n            });\r\n        }\r\n        this.recipientInfos = Array.from(asn1.result.recipientInfos, o => new RecipientInfo({ schema: o }));\r\n        this.encryptedContentInfo = new EncryptedContentInfo({ schema: asn1.result.encryptedContentInfo });\r\n        if (UNPROTECTED_ATTRS in asn1.result)\r\n            this.unprotectedAttrs = Array.from(asn1.result.unprotectedAttrs, o => new Attribute({ schema: o }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        if (this.originatorInfo) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: this.originatorInfo.toSchema().valueBlock.value\r\n            }));\r\n        }\r\n        outputArray.push(new asn1js.Set({\r\n            value: Array.from(this.recipientInfos, o => o.toSchema())\r\n        }));\r\n        outputArray.push(this.encryptedContentInfo.toSchema());\r\n        if (this.unprotectedAttrs) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.unprotectedAttrs, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            recipientInfos: Array.from(this.recipientInfos, o => o.toJSON()),\r\n            encryptedContentInfo: this.encryptedContentInfo.toJSON(),\r\n        };\r\n        if (this.originatorInfo)\r\n            res.originatorInfo = this.originatorInfo.toJSON();\r\n        if (this.unprotectedAttrs)\r\n            res.unprotectedAttrs = Array.from(this.unprotectedAttrs, o => o.toJSON());\r\n        return res;\r\n    }\r\n    addRecipientByCertificate(certificate, parameters, variant, crypto = getCrypto(true)) {\r\n        const encryptionParameters = Object.assign({ useOAEP: true, oaepHashAlgorithm: \"SHA-512\" }, defaultEncryptionParams, parameters || {});\r\n        if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.113549\") !== (-1))\r\n            variant = 1;\r\n        else {\r\n            if (certificate.subjectPublicKeyInfo.algorithm.algorithmId.indexOf(\"1.2.840.10045\") !== (-1))\r\n                variant = 2;\r\n            else\r\n                throw new Error(`Unknown type of certificate's public key: ${certificate.subjectPublicKeyInfo.algorithm.algorithmId}`);\r\n        }\r\n        switch (variant) {\r\n            case 1:\r\n                {\r\n                    let algorithmId;\r\n                    let algorithmParams;\r\n                    if (encryptionParameters.useOAEP === true) {\r\n                        algorithmId = crypto.getOIDByAlgorithm({\r\n                            name: \"RSA-OAEP\"\r\n                        }, true, \"keyEncryptionAlgorithm\");\r\n                        const hashOID = crypto.getOIDByAlgorithm({\r\n                            name: encryptionParameters.oaepHashAlgorithm\r\n                        }, true, \"RSAES-OAEP-params\");\r\n                        const hashAlgorithm = new AlgorithmIdentifier({\r\n                            algorithmId: hashOID,\r\n                            algorithmParams: new asn1js.Null()\r\n                        });\r\n                        const rsaOAEPParams = new RSAESOAEPParams({\r\n                            hashAlgorithm,\r\n                            maskGenAlgorithm: new AlgorithmIdentifier({\r\n                                algorithmId: \"1.2.840.113549.1.1.8\",\r\n                                algorithmParams: hashAlgorithm.toSchema()\r\n                            })\r\n                        });\r\n                        algorithmParams = rsaOAEPParams.toSchema();\r\n                    }\r\n                    else {\r\n                        algorithmId = crypto.getOIDByAlgorithm({\r\n                            name: \"RSAES-PKCS1-v1_5\"\r\n                        });\r\n                        if (algorithmId === EMPTY_STRING)\r\n                            throw new Error(\"Can not find OID for RSAES-PKCS1-v1_5\");\r\n                        algorithmParams = new asn1js.Null();\r\n                    }\r\n                    const keyInfo = new KeyTransRecipientInfo({\r\n                        version: 0,\r\n                        rid: new IssuerAndSerialNumber({\r\n                            issuer: certificate.issuer,\r\n                            serialNumber: certificate.serialNumber\r\n                        }),\r\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                            algorithmId,\r\n                            algorithmParams\r\n                        }),\r\n                        recipientCertificate: certificate,\r\n                    });\r\n                    this.recipientInfos.push(new RecipientInfo({\r\n                        variant: 1,\r\n                        value: keyInfo\r\n                    }));\r\n                }\r\n                break;\r\n            case 2:\r\n                {\r\n                    const recipientIdentifier = new KeyAgreeRecipientIdentifier({\r\n                        variant: 1,\r\n                        value: new IssuerAndSerialNumber({\r\n                            issuer: certificate.issuer,\r\n                            serialNumber: certificate.serialNumber\r\n                        })\r\n                    });\r\n                    this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientCertificate: certificate }, crypto);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown \"variant\" value: ${variant}`);\r\n        }\r\n        return true;\r\n    }\r\n    addRecipientByPreDefinedData(preDefinedData, parameters = {}, variant, crypto = getCrypto(true)) {\r\n        ArgumentError.assert(preDefinedData, \"preDefinedData\", \"ArrayBuffer\");\r\n        if (!preDefinedData.byteLength) {\r\n            throw new Error(\"Pre-defined data could have zero length\");\r\n        }\r\n        if (!parameters.keyIdentifier) {\r\n            const keyIdentifierBuffer = new ArrayBuffer(16);\r\n            const keyIdentifierView = new Uint8Array(keyIdentifierBuffer);\r\n            crypto.getRandomValues(keyIdentifierView);\r\n            parameters.keyIdentifier = keyIdentifierBuffer;\r\n        }\r\n        if (!parameters.hmacHashAlgorithm)\r\n            parameters.hmacHashAlgorithm = \"SHA-512\";\r\n        if (parameters.iterationCount === undefined) {\r\n            parameters.iterationCount = 2048;\r\n        }\r\n        if (!parameters.keyEncryptionAlgorithm) {\r\n            parameters.keyEncryptionAlgorithm = {\r\n                name: \"AES-KW\",\r\n                length: 256\r\n            };\r\n        }\r\n        if (!parameters.keyEncryptionAlgorithmParams)\r\n            parameters.keyEncryptionAlgorithmParams = new asn1js.Null();\r\n        switch (variant) {\r\n            case 1:\r\n                {\r\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\r\n                    const keyInfo = new KEKRecipientInfo({\r\n                        version: 4,\r\n                        kekid: new KEKIdentifier({\r\n                            keyIdentifier: new asn1js.OctetString({ valueHex: parameters.keyIdentifier })\r\n                        }),\r\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                            algorithmId: kekOID,\r\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\r\n                        }),\r\n                        preDefinedKEK: preDefinedData\r\n                    });\r\n                    this.recipientInfos.push(new RecipientInfo({\r\n                        variant: 3,\r\n                        value: keyInfo\r\n                    }));\r\n                }\r\n                break;\r\n            case 2:\r\n                {\r\n                    const pbkdf2OID = crypto.getOIDByAlgorithm({ name: \"PBKDF2\" }, true, \"keyDerivationAlgorithm\");\r\n                    const saltBuffer = new ArrayBuffer(64);\r\n                    const saltView = new Uint8Array(saltBuffer);\r\n                    crypto.getRandomValues(saltView);\r\n                    const hmacOID = crypto.getOIDByAlgorithm({\r\n                        name: \"HMAC\",\r\n                        hash: {\r\n                            name: parameters.hmacHashAlgorithm\r\n                        }\r\n                    }, true, \"hmacHashAlgorithm\");\r\n                    const pbkdf2Params = new PBKDF2Params({\r\n                        salt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n                        iterationCount: parameters.iterationCount,\r\n                        prf: new AlgorithmIdentifier({\r\n                            algorithmId: hmacOID,\r\n                            algorithmParams: new asn1js.Null()\r\n                        })\r\n                    });\r\n                    const kekOID = crypto.getOIDByAlgorithm(parameters.keyEncryptionAlgorithm, true, \"keyEncryptionAlgorithm\");\r\n                    const keyInfo = new PasswordRecipientinfo({\r\n                        version: 0,\r\n                        keyDerivationAlgorithm: new AlgorithmIdentifier({\r\n                            algorithmId: pbkdf2OID,\r\n                            algorithmParams: pbkdf2Params.toSchema()\r\n                        }),\r\n                        keyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                            algorithmId: kekOID,\r\n                            algorithmParams: parameters.keyEncryptionAlgorithmParams\r\n                        }),\r\n                        password: preDefinedData\r\n                    });\r\n                    this.recipientInfos.push(new RecipientInfo({\r\n                        variant: 4,\r\n                        value: keyInfo\r\n                    }));\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown value for \"variant\": ${variant}`);\r\n        }\r\n    }\r\n    addRecipientByKeyIdentifier(key, keyId, parameters, crypto = getCrypto(true)) {\r\n        const encryptionParameters = Object.assign({}, defaultEncryptionParams, parameters || {});\r\n        const recipientIdentifier = new KeyAgreeRecipientIdentifier({\r\n            variant: 2,\r\n            value: new RecipientKeyIdentifier({\r\n                subjectKeyIdentifier: new asn1js.OctetString({ valueHex: keyId }),\r\n            })\r\n        });\r\n        this._addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, { recipientPublicKey: key }, crypto);\r\n    }\r\n    _addKeyAgreeRecipientInfo(recipientIdentifier, encryptionParameters, extraRecipientInfoParams, crypto = getCrypto(true)) {\r\n        const encryptedKey = new RecipientEncryptedKey({\r\n            rid: recipientIdentifier\r\n        });\r\n        const aesKWoid = crypto.getOIDByAlgorithm({\r\n            name: \"AES-KW\",\r\n            length: encryptionParameters.kekEncryptionLength\r\n        }, true, \"keyEncryptionAlgorithm\");\r\n        const aesKW = new AlgorithmIdentifier({\r\n            algorithmId: aesKWoid,\r\n        });\r\n        const ecdhOID = crypto.getOIDByAlgorithm({\r\n            name: \"ECDH\",\r\n            kdf: encryptionParameters.kdfAlgorithm\r\n        }, true, \"KeyAgreeRecipientInfo\");\r\n        const ukmBuffer = new ArrayBuffer(64);\r\n        const ukmView = new Uint8Array(ukmBuffer);\r\n        crypto.getRandomValues(ukmView);\r\n        const recipientInfoParams = {\r\n            version: 3,\r\n            ukm: new asn1js.OctetString({ valueHex: ukmBuffer }),\r\n            keyEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                algorithmId: ecdhOID,\r\n                algorithmParams: aesKW.toSchema()\r\n            }),\r\n            recipientEncryptedKeys: new RecipientEncryptedKeys({\r\n                encryptedKeys: [encryptedKey]\r\n            })\r\n        };\r\n        const keyInfo = new KeyAgreeRecipientInfo(Object.assign(recipientInfoParams, extraRecipientInfoParams));\r\n        this.recipientInfos.push(new RecipientInfo({\r\n            variant: 2,\r\n            value: keyInfo\r\n        }));\r\n    }\r\n    async encrypt(contentEncryptionAlgorithm, contentToEncrypt, crypto = getCrypto(true)) {\r\n        const ivBuffer = new ArrayBuffer(16);\r\n        const ivView = new Uint8Array(ivBuffer);\r\n        crypto.getRandomValues(ivView);\r\n        const contentView = new Uint8Array(contentToEncrypt);\r\n        const contentEncryptionOID = crypto.getOIDByAlgorithm(contentEncryptionAlgorithm, true, \"contentEncryptionAlgorithm\");\r\n        const sessionKey = await crypto.generateKey(contentEncryptionAlgorithm, true, [\"encrypt\"]);\r\n        const encryptedContent = await crypto.encrypt({\r\n            name: contentEncryptionAlgorithm.name,\r\n            iv: ivView\r\n        }, sessionKey, contentView);\r\n        const exportedSessionKey = await crypto.exportKey(\"raw\", sessionKey);\r\n        this.version = 2;\r\n        this.encryptedContentInfo = new EncryptedContentInfo({\r\n            contentType: \"1.2.840.113549.1.7.1\",\r\n            contentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n                algorithmId: contentEncryptionOID,\r\n                algorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n            }),\r\n            encryptedContent: new asn1js.OctetString({ valueHex: encryptedContent })\r\n        });\r\n        const SubKeyAgreeRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            let recipientCurve;\r\n            let recipientPublicKey;\r\n            if (recipientInfo.recipientPublicKey) {\r\n                recipientCurve = recipientInfo.recipientPublicKey.algorithm.namedCurve;\r\n                recipientPublicKey = recipientInfo.recipientPublicKey;\r\n            }\r\n            else if (recipientInfo.recipientCertificate) {\r\n                const curveObject = recipientInfo.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName())\r\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n                const curveOID = curveObject.valueBlock.toString();\r\n                switch (curveOID) {\r\n                    case \"1.2.840.10045.3.1.7\":\r\n                        recipientCurve = \"P-256\";\r\n                        break;\r\n                    case \"1.3.132.0.34\":\r\n                        recipientCurve = \"P-384\";\r\n                        break;\r\n                    case \"1.3.132.0.35\":\r\n                        recipientCurve = \"P-521\";\r\n                        break;\r\n                    default:\r\n                        throw new Error(`Incorrect curve OID for index ${index}`);\r\n                }\r\n                recipientPublicKey = await recipientInfo.recipientCertificate.getPublicKey({\r\n                    algorithm: {\r\n                        algorithm: {\r\n                            name: \"ECDH\",\r\n                            namedCurve: recipientCurve\r\n                        },\r\n                        usages: []\r\n                    }\r\n                }, crypto);\r\n            }\r\n            else {\r\n                throw new Error(\"Unsupported RecipientInfo\");\r\n            }\r\n            const recipientCurveLength = curveLengthByName[recipientCurve];\r\n            const ecdhKeys = await crypto.generateKey({ name: \"ECDH\", namedCurve: recipientCurve }, true, [\"deriveBits\"]);\r\n            const exportedECDHPublicKey = await crypto.exportKey(\"spki\", ecdhKeys.publicKey);\r\n            const derivedBits = await crypto.deriveBits({\r\n                name: \"ECDH\",\r\n                public: recipientPublicKey\r\n            }, ecdhKeys.privateKey, recipientCurveLength);\r\n            const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\r\n            const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"aesKWAlgorithm\");\r\n            let kwLength = kwAlgorithm.length;\r\n            const kwLengthBuffer = new ArrayBuffer(4);\r\n            const kwLengthView = new Uint8Array(kwLengthBuffer);\r\n            for (let j = 3; j >= 0; j--) {\r\n                kwLengthView[j] = kwLength;\r\n                kwLength >>= 8;\r\n            }\r\n            const eccInfo = new ECCCMSSharedInfo({\r\n                keyInfo: new AlgorithmIdentifier({\r\n                    algorithmId: aesKWAlgorithm.algorithmId\r\n                }),\r\n                entityUInfo: recipientInfo.ukm,\r\n                suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n            });\r\n            const encodedInfo = eccInfo.toSchema().toBER(false);\r\n            const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\r\n            const derivedKeyRaw = await kdf(ecdhAlgorithm.kdf, derivedBits, kwAlgorithm.length, encodedInfo, crypto);\r\n            const awsKW = await crypto.importKey(\"raw\", derivedKeyRaw, { name: \"AES-KW\" }, true, [\"wrapKey\"]);\r\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, awsKW, { name: \"AES-KW\" });\r\n            const originator = new OriginatorIdentifierOrKey();\r\n            originator.variant = 3;\r\n            originator.value = OriginatorPublicKey.fromBER(exportedECDHPublicKey);\r\n            recipientInfo.originator = originator;\r\n            recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\r\n            return { ecdhPrivateKey: ecdhKeys.privateKey };\r\n        };\r\n        const SubKeyTransRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\r\n            if (algorithmParameters.name === \"RSA-OAEP\") {\r\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\r\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n                if ((\"name\" in algorithmParameters.hash) === false)\r\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n            }\r\n            try {\r\n                const publicKey = await recipientInfo.recipientCertificate.getPublicKey({\r\n                    algorithm: {\r\n                        algorithm: algorithmParameters,\r\n                        usages: [\"encrypt\", \"wrapKey\"]\r\n                    }\r\n                }, crypto);\r\n                const encryptedKey = await crypto.encrypt(publicKey.algorithm, publicKey, exportedSessionKey);\r\n                recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: encryptedKey });\r\n            }\r\n            catch {\r\n            }\r\n        };\r\n        const SubKEKRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\r\n            const kekKey = await crypto.importKey(\"raw\", new Uint8Array(recipientInfo.preDefinedKEK), kekAlgorithm, true, [\"wrapKey\"]);\r\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, kekKey, kekAlgorithm);\r\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\r\n        };\r\n        const SubPasswordRecipientinfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            let pbkdf2Params;\r\n            if (!recipientInfo.keyDerivationAlgorithm)\r\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams)\r\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            try {\r\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\r\n            }\r\n            catch (ex) {\r\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            }\r\n            const passwordView = new Uint8Array(recipientInfo.password);\r\n            const derivationKey = await crypto.importKey(\"raw\", passwordView, \"PBKDF2\", false, [\"deriveKey\"]);\r\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\r\n            let hmacHashAlgorithm = \"SHA-1\";\r\n            if (pbkdf2Params.prf) {\r\n                const prfAlgorithm = crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\");\r\n                hmacHashAlgorithm = prfAlgorithm.hash.name;\r\n            }\r\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n            const iterations = pbkdf2Params.iterationCount;\r\n            const derivedKey = await crypto.deriveKey({\r\n                name: \"PBKDF2\",\r\n                hash: {\r\n                    name: hmacHashAlgorithm\r\n                },\r\n                salt: saltView,\r\n                iterations\r\n            }, derivationKey, kekAlgorithm, true, [\"wrapKey\"]);\r\n            const wrappedKey = await crypto.wrapKey(\"raw\", sessionKey, derivedKey, kekAlgorithm);\r\n            recipientInfo.encryptedKey = new asn1js.OctetString({ valueHex: wrappedKey });\r\n        };\r\n        const res = [];\r\n        for (let i = 0; i < this.recipientInfos.length; i++) {\r\n            switch (this.recipientInfos[i].variant) {\r\n                case 1:\r\n                    res.push(await SubKeyTransRecipientInfo(i));\r\n                    break;\r\n                case 2:\r\n                    res.push(await SubKeyAgreeRecipientInfo(i));\r\n                    break;\r\n                case 3:\r\n                    res.push(await SubKEKRecipientInfo(i));\r\n                    break;\r\n                case 4:\r\n                    res.push(await SubPasswordRecipientinfo(i));\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown recipient type in array with index ${i}`);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    async decrypt(recipientIndex, parameters, crypto = getCrypto(true)) {\r\n        const decryptionParameters = parameters || {};\r\n        if ((recipientIndex + 1) > this.recipientInfos.length) {\r\n            throw new Error(`Maximum value for \"index\" is: ${this.recipientInfos.length - 1}`);\r\n        }\r\n        const SubKeyAgreeRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            let curveOID;\r\n            let recipientCurve;\r\n            let recipientCurveLength;\r\n            const originator = recipientInfo.originator;\r\n            if (decryptionParameters.recipientCertificate) {\r\n                const curveObject = decryptionParameters.recipientCertificate.subjectPublicKeyInfo.algorithm.algorithmParams;\r\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\r\n                    throw new Error(`Incorrect \"recipientCertificate\" for index ${index}`);\r\n                }\r\n                curveOID = curveObject.valueBlock.toString();\r\n            }\r\n            else if (originator.value.algorithm.algorithmParams) {\r\n                const curveObject = originator.value.algorithm.algorithmParams;\r\n                if (curveObject.constructor.blockName() !== asn1js.ObjectIdentifier.blockName()) {\r\n                    throw new Error(`Incorrect originator for index ${index}`);\r\n                }\r\n                curveOID = curveObject.valueBlock.toString();\r\n            }\r\n            else {\r\n                throw new Error(\"Parameter \\\"recipientCertificate\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\" if algorithm params are missing from originator\");\r\n            }\r\n            if (!decryptionParameters.recipientPrivateKey)\r\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyAgreeRecipientInfo\\\"\");\r\n            switch (curveOID) {\r\n                case \"1.2.840.10045.3.1.7\":\r\n                    recipientCurve = \"P-256\";\r\n                    recipientCurveLength = 256;\r\n                    break;\r\n                case \"1.3.132.0.34\":\r\n                    recipientCurve = \"P-384\";\r\n                    recipientCurveLength = 384;\r\n                    break;\r\n                case \"1.3.132.0.35\":\r\n                    recipientCurve = \"P-521\";\r\n                    recipientCurveLength = 528;\r\n                    break;\r\n                default:\r\n                    throw new Error(`Incorrect curve OID for index ${index}`);\r\n            }\r\n            const ecdhPrivateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, {\r\n                name: \"ECDH\",\r\n                namedCurve: recipientCurve\r\n            }, true, [\"deriveBits\"]);\r\n            if ((\"algorithmParams\" in originator.value.algorithm) === false)\r\n                originator.value.algorithm.algorithmParams = new asn1js.ObjectIdentifier({ value: curveOID });\r\n            const buffer = originator.value.toSchema().toBER(false);\r\n            const ecdhPublicKey = await crypto.importKey(\"spki\", buffer, {\r\n                name: \"ECDH\",\r\n                namedCurve: recipientCurve\r\n            }, true, []);\r\n            const sharedSecret = await crypto.deriveBits({\r\n                name: \"ECDH\",\r\n                public: ecdhPublicKey\r\n            }, ecdhPrivateKey, recipientCurveLength);\r\n            async function applyKDF(includeAlgorithmParams) {\r\n                includeAlgorithmParams = includeAlgorithmParams || false;\r\n                const aesKWAlgorithm = new AlgorithmIdentifier({ schema: recipientInfo.keyEncryptionAlgorithm.algorithmParams });\r\n                const kwAlgorithm = crypto.getAlgorithmByOID(aesKWAlgorithm.algorithmId, true, \"kwAlgorithm\");\r\n                let kwLength = kwAlgorithm.length;\r\n                const kwLengthBuffer = new ArrayBuffer(4);\r\n                const kwLengthView = new Uint8Array(kwLengthBuffer);\r\n                for (let j = 3; j >= 0; j--) {\r\n                    kwLengthView[j] = kwLength;\r\n                    kwLength >>= 8;\r\n                }\r\n                const keyInfoAlgorithm = {\r\n                    algorithmId: aesKWAlgorithm.algorithmId\r\n                };\r\n                if (includeAlgorithmParams) {\r\n                    keyInfoAlgorithm.algorithmParams = new asn1js.Null();\r\n                }\r\n                const eccInfo = new ECCCMSSharedInfo({\r\n                    keyInfo: new AlgorithmIdentifier(keyInfoAlgorithm),\r\n                    entityUInfo: recipientInfo.ukm,\r\n                    suppPubInfo: new asn1js.OctetString({ valueHex: kwLengthBuffer })\r\n                });\r\n                const encodedInfo = eccInfo.toSchema().toBER(false);\r\n                const ecdhAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"ecdhAlgorithm\");\r\n                if (!ecdhAlgorithm.name) {\r\n                    throw new Error(`Incorrect OID for key encryption algorithm: ${recipientInfo.keyEncryptionAlgorithm.algorithmId}`);\r\n                }\r\n                return kdf(ecdhAlgorithm.kdf, sharedSecret, kwAlgorithm.length, encodedInfo, crypto);\r\n            }\r\n            const kdfResult = await applyKDF();\r\n            const importAesKwKey = async (kdfResult) => {\r\n                return crypto.importKey(\"raw\", kdfResult, { name: \"AES-KW\" }, true, [\"unwrapKey\"]);\r\n            };\r\n            const aesKwKey = await importAesKwKey(kdfResult);\r\n            const unwrapSessionKey = async (aesKwKey) => {\r\n                const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\r\n                const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\r\n                return crypto.unwrapKey(\"raw\", recipientInfo.recipientEncryptedKeys.encryptedKeys[0].encryptedKey.valueBlock.valueHexView, aesKwKey, { name: \"AES-KW\" }, contentEncryptionAlgorithm, true, [\"decrypt\"]);\r\n            };\r\n            try {\r\n                return await unwrapSessionKey(aesKwKey);\r\n            }\r\n            catch {\r\n                const kdfResult = await applyKDF(true);\r\n                const aesKwKey = await importAesKwKey(kdfResult);\r\n                return unwrapSessionKey(aesKwKey);\r\n            }\r\n        };\r\n        const SubKeyTransRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            if (!decryptionParameters.recipientPrivateKey) {\r\n                throw new Error(\"Parameter \\\"recipientPrivateKey\\\" is mandatory for \\\"KeyTransRecipientInfo\\\"\");\r\n            }\r\n            const algorithmParameters = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\r\n            if (algorithmParameters.name === \"RSA-OAEP\") {\r\n                const schema = recipientInfo.keyEncryptionAlgorithm.algorithmParams;\r\n                const rsaOAEPParams = new RSAESOAEPParams({ schema });\r\n                algorithmParameters.hash = crypto.getAlgorithmByOID(rsaOAEPParams.hashAlgorithm.algorithmId);\r\n                if ((\"name\" in algorithmParameters.hash) === false)\r\n                    throw new Error(`Incorrect OID for hash algorithm: ${rsaOAEPParams.hashAlgorithm.algorithmId}`);\r\n            }\r\n            const privateKey = await crypto.importKey(\"pkcs8\", decryptionParameters.recipientPrivateKey, algorithmParameters, true, [\"decrypt\"]);\r\n            const sessionKey = await crypto.decrypt(privateKey.algorithm, privateKey, recipientInfo.encryptedKey.valueBlock.valueHexView);\r\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\r\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\r\n            if ((\"name\" in contentEncryptionAlgorithm) === false)\r\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\r\n            return crypto.importKey(\"raw\", sessionKey, contentEncryptionAlgorithm, true, [\"decrypt\"]);\r\n        };\r\n        const SubKEKRecipientInfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            if (!decryptionParameters.preDefinedData)\r\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"kekAlgorithm\");\r\n            const importedKey = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, kekAlgorithm, true, [\"unwrapKey\"]);\r\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\r\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\r\n            if (!contentEncryptionAlgorithm.name) {\r\n                throw new Error(`Incorrect \"contentEncryptionAlgorithm\": ${algorithmId}`);\r\n            }\r\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, importedKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\r\n        };\r\n        const SubPasswordRecipientinfo = async (index) => {\r\n            const recipientInfo = this.recipientInfos[index].value;\r\n            let pbkdf2Params;\r\n            if (!decryptionParameters.preDefinedData) {\r\n                throw new Error(\"Parameter \\\"preDefinedData\\\" is mandatory for \\\"KEKRecipientInfo\\\"\");\r\n            }\r\n            if (!recipientInfo.keyDerivationAlgorithm) {\r\n                throw new Error(\"Please append encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            }\r\n            if (!recipientInfo.keyDerivationAlgorithm.algorithmParams) {\r\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            }\r\n            try {\r\n                pbkdf2Params = new PBKDF2Params({ schema: recipientInfo.keyDerivationAlgorithm.algorithmParams });\r\n            }\r\n            catch (ex) {\r\n                throw new Error(\"Incorrectly encoded \\\"keyDerivationAlgorithm\\\"\");\r\n            }\r\n            const pbkdf2Key = await crypto.importKey(\"raw\", decryptionParameters.preDefinedData, \"PBKDF2\", false, [\"deriveKey\"]);\r\n            const kekAlgorithm = crypto.getAlgorithmByOID(recipientInfo.keyEncryptionAlgorithm.algorithmId, true, \"keyEncryptionAlgorithm\");\r\n            const hmacHashAlgorithm = pbkdf2Params.prf\r\n                ? crypto.getAlgorithmByOID(pbkdf2Params.prf.algorithmId, true, \"prfAlgorithm\").hash.name\r\n                : \"SHA-1\";\r\n            const saltView = new Uint8Array(pbkdf2Params.salt.valueBlock.valueHex);\r\n            const iterations = pbkdf2Params.iterationCount;\r\n            const kekKey = await crypto.deriveKey({\r\n                name: \"PBKDF2\",\r\n                hash: {\r\n                    name: hmacHashAlgorithm\r\n                },\r\n                salt: saltView,\r\n                iterations\r\n            }, pbkdf2Key, kekAlgorithm, true, [\"unwrapKey\"]);\r\n            const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\r\n            const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\r\n            return crypto.unwrapKey(\"raw\", recipientInfo.encryptedKey.valueBlock.valueHexView, kekKey, kekAlgorithm, contentEncryptionAlgorithm, true, [\"decrypt\"]);\r\n        };\r\n        let unwrappedKey;\r\n        switch (this.recipientInfos[recipientIndex].variant) {\r\n            case 1:\r\n                unwrappedKey = await SubKeyTransRecipientInfo(recipientIndex);\r\n                break;\r\n            case 2:\r\n                unwrappedKey = await SubKeyAgreeRecipientInfo(recipientIndex);\r\n                break;\r\n            case 3:\r\n                unwrappedKey = await SubKEKRecipientInfo(recipientIndex);\r\n                break;\r\n            case 4:\r\n                unwrappedKey = await SubPasswordRecipientinfo(recipientIndex);\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown recipient type in array with index ${recipientIndex}`);\r\n        }\r\n        const algorithmId = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId;\r\n        const contentEncryptionAlgorithm = crypto.getAlgorithmByOID(algorithmId, true, \"contentEncryptionAlgorithm\");\r\n        const ivBuffer = this.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams.valueBlock.valueHex;\r\n        const ivView = new Uint8Array(ivBuffer);\r\n        if (!this.encryptedContentInfo.encryptedContent) {\r\n            throw new Error(\"Required property `encryptedContent` is empty\");\r\n        }\r\n        const dataBuffer = this.encryptedContentInfo.getEncryptedContent();\r\n        return crypto.decrypt({\r\n            name: contentEncryptionAlgorithm.name,\r\n            iv: ivView\r\n        }, unwrappedKey, dataBuffer);\r\n    }\r\n}\r\nEnvelopedData.CLASS_NAME = \"EnvelopedData\";\n\nconst SAFE_CONTENTS = \"safeContents\";\r\nconst PARSED_VALUE$1 = \"parsedValue\";\r\nconst CONTENT_INFOS = \"contentInfos\";\r\nclass AuthenticatedSafe extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.safeContents = pvutils.getParametersValue(parameters, SAFE_CONTENTS, AuthenticatedSafe.defaultValues(SAFE_CONTENTS));\r\n        if (PARSED_VALUE$1 in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE$1, AuthenticatedSafe.defaultValues(PARSED_VALUE$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SAFE_CONTENTS:\r\n                return [];\r\n            case PARSED_VALUE$1:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SAFE_CONTENTS:\r\n                return (memberValue.length === 0);\r\n            case PARSED_VALUE$1:\r\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.contentInfos || EMPTY_STRING),\r\n                    value: ContentInfo.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            CONTENT_INFOS\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, AuthenticatedSafe.schema({\r\n            names: {\r\n                contentInfos: CONTENT_INFOS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.safeContents = Array.from(asn1.result.contentInfos, element => new ContentInfo({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: Array.from(this.safeContents, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            safeContents: Array.from(this.safeContents, o => o.toJSON())\r\n        };\r\n    }\r\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\r\n        ParameterError.assert(parameters, SAFE_CONTENTS);\r\n        ArgumentError.assert(parameters.safeContents, SAFE_CONTENTS, \"Array\");\r\n        if (parameters.safeContents.length !== this.safeContents.length) {\r\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.safeContents.length\\\"\");\r\n        }\r\n        this.parsedValue = {\r\n            safeContents: [],\r\n        };\r\n        for (const [index, content] of this.safeContents.entries()) {\r\n            const safeContent = parameters.safeContents[index];\r\n            const errorTarget = `parameters.safeContents[${index}]`;\r\n            switch (content.contentType) {\r\n                case id_ContentType_Data:\r\n                    {\r\n                        ArgumentError.assert(content.content, \"this.safeContents[j].content\", asn1js.OctetString);\r\n                        const authSafeContent = content.content.getValue();\r\n                        this.parsedValue.safeContents.push({\r\n                            privacyMode: 0,\r\n                            value: SafeContents.fromBER(authSafeContent)\r\n                        });\r\n                    }\r\n                    break;\r\n                case id_ContentType_EnvelopedData:\r\n                    {\r\n                        const cmsEnveloped = new EnvelopedData({ schema: content.content });\r\n                        ParameterError.assert(errorTarget, safeContent, \"recipientCertificate\", \"recipientKey\");\r\n                        const envelopedData = safeContent;\r\n                        const recipientCertificate = envelopedData.recipientCertificate;\r\n                        const recipientKey = envelopedData.recipientKey;\r\n                        const decrypted = await cmsEnveloped.decrypt(0, {\r\n                            recipientCertificate,\r\n                            recipientPrivateKey: recipientKey\r\n                        }, crypto);\r\n                        this.parsedValue.safeContents.push({\r\n                            privacyMode: 2,\r\n                            value: SafeContents.fromBER(decrypted),\r\n                        });\r\n                    }\r\n                    break;\r\n                case id_ContentType_EncryptedData:\r\n                    {\r\n                        const cmsEncrypted = new EncryptedData({ schema: content.content });\r\n                        ParameterError.assert(errorTarget, safeContent, \"password\");\r\n                        const password = safeContent.password;\r\n                        const decrypted = await cmsEncrypted.decrypt({\r\n                            password\r\n                        }, crypto);\r\n                        this.parsedValue.safeContents.push({\r\n                            privacyMode: 1,\r\n                            value: SafeContents.fromBER(decrypted),\r\n                        });\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error(`Unknown \"contentType\" for AuthenticatedSafe: \" ${content.contentType}`);\r\n            }\r\n        }\r\n    }\r\n    async makeInternalValues(parameters, crypto = getCrypto(true)) {\r\n        if (!(this.parsedValue)) {\r\n            throw new Error(\"Please run \\\"parseValues\\\" first or add \\\"parsedValue\\\" manually\");\r\n        }\r\n        ArgumentError.assert(this.parsedValue, \"this.parsedValue\", \"object\");\r\n        ArgumentError.assert(this.parsedValue.safeContents, \"this.parsedValue.safeContents\", \"Array\");\r\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\r\n        ParameterError.assert(parameters, \"safeContents\");\r\n        ArgumentError.assert(parameters.safeContents, \"parameters.safeContents\", \"Array\");\r\n        if (parameters.safeContents.length !== this.parsedValue.safeContents.length) {\r\n            throw new ArgumentError(\"Length of \\\"parameters.safeContents\\\" must be equal to \\\"this.parsedValue.safeContents\\\"\");\r\n        }\r\n        this.safeContents = [];\r\n        for (const [index, content] of this.parsedValue.safeContents.entries()) {\r\n            ParameterError.assert(\"content\", content, \"privacyMode\", \"value\");\r\n            ArgumentError.assert(content.value, \"content.value\", SafeContents);\r\n            switch (content.privacyMode) {\r\n                case 0:\r\n                    {\r\n                        const contentBuffer = content.value.toSchema().toBER(false);\r\n                        this.safeContents.push(new ContentInfo({\r\n                            contentType: \"1.2.840.113549.1.7.1\",\r\n                            content: new asn1js.OctetString({ valueHex: contentBuffer })\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 1:\r\n                    {\r\n                        const cmsEncrypted = new EncryptedData();\r\n                        const currentParameters = parameters.safeContents[index];\r\n                        currentParameters.contentToEncrypt = content.value.toSchema().toBER(false);\r\n                        await cmsEncrypted.encrypt(currentParameters);\r\n                        this.safeContents.push(new ContentInfo({\r\n                            contentType: \"1.2.840.113549.1.7.6\",\r\n                            content: cmsEncrypted.toSchema()\r\n                        }));\r\n                    }\r\n                    break;\r\n                case 2:\r\n                    {\r\n                        const cmsEnveloped = new EnvelopedData();\r\n                        const contentToEncrypt = content.value.toSchema().toBER(false);\r\n                        const safeContent = parameters.safeContents[index];\r\n                        ParameterError.assert(`parameters.safeContents[${index}]`, safeContent, \"encryptingCertificate\", \"encryptionAlgorithm\");\r\n                        switch (true) {\r\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-cbc\"):\r\n                            case (safeContent.encryptionAlgorithm.name.toLowerCase() === \"aes-gcm\"):\r\n                                break;\r\n                            default:\r\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm}`);\r\n                        }\r\n                        switch (true) {\r\n                            case (safeContent.encryptionAlgorithm.length === 128):\r\n                            case (safeContent.encryptionAlgorithm.length === 192):\r\n                            case (safeContent.encryptionAlgorithm.length === 256):\r\n                                break;\r\n                            default:\r\n                                throw new Error(`Incorrect parameter \"encryptionAlgorithm.length\" in \"parameters.safeContents[i]\": ${safeContent.encryptionAlgorithm.length}`);\r\n                        }\r\n                        const encryptionAlgorithm = safeContent.encryptionAlgorithm;\r\n                        cmsEnveloped.addRecipientByCertificate(safeContent.encryptingCertificate, {}, undefined, crypto);\r\n                        await cmsEnveloped.encrypt(encryptionAlgorithm, contentToEncrypt, crypto);\r\n                        this.safeContents.push(new ContentInfo({\r\n                            contentType: \"1.2.840.113549.1.7.3\",\r\n                            content: cmsEnveloped.toSchema()\r\n                        }));\r\n                    }\r\n                    break;\r\n                default:\r\n                    throw new Error(`Incorrect value for \"content.privacyMode\": ${content.privacyMode}`);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n}\r\nAuthenticatedSafe.CLASS_NAME = \"AuthenticatedSafe\";\n\nconst HASH_ALGORITHM$1 = \"hashAlgorithm\";\r\nconst ISSUER_NAME_HASH = \"issuerNameHash\";\r\nconst ISSUER_KEY_HASH = \"issuerKeyHash\";\r\nconst SERIAL_NUMBER$1 = \"serialNumber\";\r\nconst CLEAR_PROPS$j = [\r\n    HASH_ALGORITHM$1,\r\n    ISSUER_NAME_HASH,\r\n    ISSUER_KEY_HASH,\r\n    SERIAL_NUMBER$1,\r\n];\r\nclass CertID extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM$1, CertID.defaultValues(HASH_ALGORITHM$1));\r\n        this.issuerNameHash = pvutils.getParametersValue(parameters, ISSUER_NAME_HASH, CertID.defaultValues(ISSUER_NAME_HASH));\r\n        this.issuerKeyHash = pvutils.getParametersValue(parameters, ISSUER_KEY_HASH, CertID.defaultValues(ISSUER_KEY_HASH));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER$1, CertID.defaultValues(SERIAL_NUMBER$1));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static async create(certificate, parameters, crypto = getCrypto(true)) {\r\n        const certID = new CertID();\r\n        await certID.createForCertificate(certificate, parameters, crypto);\r\n        return certID;\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM$1:\r\n                return new AlgorithmIdentifier();\r\n            case ISSUER_NAME_HASH:\r\n            case ISSUER_KEY_HASH:\r\n                return new asn1js.OctetString();\r\n            case SERIAL_NUMBER$1:\r\n                return new asn1js.Integer();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM$1:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case ISSUER_NAME_HASH:\r\n            case ISSUER_KEY_HASH:\r\n            case SERIAL_NUMBER$1:\r\n                return (memberValue.isEqual(CertID.defaultValues(SERIAL_NUMBER$1)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.hashAlgorithmObject || {\r\n                    names: {\r\n                        blockName: (names.hashAlgorithm || EMPTY_STRING)\r\n                    }\r\n                }),\r\n                new asn1js.OctetString({ name: (names.issuerNameHash || EMPTY_STRING) }),\r\n                new asn1js.OctetString({ name: (names.issuerKeyHash || EMPTY_STRING) }),\r\n                new asn1js.Integer({ name: (names.serialNumber || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$j);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertID.schema({\r\n            names: {\r\n                hashAlgorithm: HASH_ALGORITHM$1,\r\n                issuerNameHash: ISSUER_NAME_HASH,\r\n                issuerKeyHash: ISSUER_KEY_HASH,\r\n                serialNumber: SERIAL_NUMBER$1\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n        this.issuerNameHash = asn1.result.issuerNameHash;\r\n        this.issuerKeyHash = asn1.result.issuerKeyHash;\r\n        this.serialNumber = asn1.result.serialNumber;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.hashAlgorithm.toSchema(),\r\n                this.issuerNameHash,\r\n                this.issuerKeyHash,\r\n                this.serialNumber\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\r\n            issuerNameHash: this.issuerNameHash.toJSON(),\r\n            issuerKeyHash: this.issuerKeyHash.toJSON(),\r\n            serialNumber: this.serialNumber.toJSON(),\r\n        };\r\n    }\r\n    isEqual(certificateID) {\r\n        if (this.hashAlgorithm.algorithmId !== certificateID.hashAlgorithm.algorithmId) {\r\n            return false;\r\n        }\r\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerNameHash.valueBlock.valueHexView, certificateID.issuerNameHash.valueBlock.valueHexView)) {\r\n            return false;\r\n        }\r\n        if (!pvtsutils.BufferSourceConverter.isEqual(this.issuerKeyHash.valueBlock.valueHexView, certificateID.issuerKeyHash.valueBlock.valueHexView)) {\r\n            return false;\r\n        }\r\n        if (!this.serialNumber.isEqual(certificateID.serialNumber)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\r\n        ParameterError.assert(parameters, HASH_ALGORITHM$1, \"issuerCertificate\");\r\n        const hashOID = crypto.getOIDByAlgorithm({ name: parameters.hashAlgorithm }, true, \"hashAlgorithm\");\r\n        this.hashAlgorithm = new AlgorithmIdentifier({\r\n            algorithmId: hashOID,\r\n            algorithmParams: new asn1js.Null()\r\n        });\r\n        const issuerCertificate = parameters.issuerCertificate;\r\n        this.serialNumber = certificate.serialNumber;\r\n        const hashIssuerName = await crypto.digest({ name: parameters.hashAlgorithm }, issuerCertificate.subject.toSchema().toBER(false));\r\n        this.issuerNameHash = new asn1js.OctetString({ valueHex: hashIssuerName });\r\n        const issuerKeyBuffer = issuerCertificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView;\r\n        const hashIssuerKey = await crypto.digest({ name: parameters.hashAlgorithm }, issuerKeyBuffer);\r\n        this.issuerKeyHash = new asn1js.OctetString({ valueHex: hashIssuerKey });\r\n    }\r\n}\r\nCertID.CLASS_NAME = \"CertID\";\n\nconst CERT_ID = \"certID\";\r\nconst CERT_STATUS = \"certStatus\";\r\nconst THIS_UPDATE = \"thisUpdate\";\r\nconst NEXT_UPDATE = \"nextUpdate\";\r\nconst SINGLE_EXTENSIONS = \"singleExtensions\";\r\nconst CLEAR_PROPS$i = [\r\n    CERT_ID,\r\n    CERT_STATUS,\r\n    THIS_UPDATE,\r\n    NEXT_UPDATE,\r\n    SINGLE_EXTENSIONS,\r\n];\r\nclass SingleResponse extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.certID = pvutils.getParametersValue(parameters, CERT_ID, SingleResponse.defaultValues(CERT_ID));\r\n        this.certStatus = pvutils.getParametersValue(parameters, CERT_STATUS, SingleResponse.defaultValues(CERT_STATUS));\r\n        this.thisUpdate = pvutils.getParametersValue(parameters, THIS_UPDATE, SingleResponse.defaultValues(THIS_UPDATE));\r\n        if (NEXT_UPDATE in parameters) {\r\n            this.nextUpdate = pvutils.getParametersValue(parameters, NEXT_UPDATE, SingleResponse.defaultValues(NEXT_UPDATE));\r\n        }\r\n        if (SINGLE_EXTENSIONS in parameters) {\r\n            this.singleExtensions = pvutils.getParametersValue(parameters, SINGLE_EXTENSIONS, SingleResponse.defaultValues(SINGLE_EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case CERT_ID:\r\n                return new CertID();\r\n            case CERT_STATUS:\r\n                return {};\r\n            case THIS_UPDATE:\r\n            case NEXT_UPDATE:\r\n                return new Date(0, 0, 0);\r\n            case SINGLE_EXTENSIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case CERT_ID:\r\n                return ((CertID.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n                    (CertID.compareWithDefault(\"issuerNameHash\", memberValue.issuerNameHash)) &&\r\n                    (CertID.compareWithDefault(\"issuerKeyHash\", memberValue.issuerKeyHash)) &&\r\n                    (CertID.compareWithDefault(\"serialNumber\", memberValue.serialNumber)));\r\n            case CERT_STATUS:\r\n                return (Object.keys(memberValue).length === 0);\r\n            case THIS_UPDATE:\r\n            case NEXT_UPDATE:\r\n                return (memberValue === SingleResponse.defaultValues(memberName));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                CertID.schema(names.certID || {}),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.Primitive({\r\n                            name: (names.certStatus || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 0\r\n                            },\r\n                        }),\r\n                        new asn1js.Constructed({\r\n                            name: (names.certStatus || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 1\r\n                            },\r\n                            value: [\r\n                                new asn1js.GeneralizedTime(),\r\n                                new asn1js.Constructed({\r\n                                    optional: true,\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 0\r\n                                    },\r\n                                    value: [new asn1js.Enumerated()]\r\n                                })\r\n                            ]\r\n                        }),\r\n                        new asn1js.Primitive({\r\n                            name: (names.certStatus || EMPTY_STRING),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 2\r\n                            },\r\n                            lenBlock: { length: 1 }\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.GeneralizedTime({ name: (names.thisUpdate || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.GeneralizedTime({ name: (names.nextUpdate || EMPTY_STRING) })]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [Extensions.schema(names.singleExtensions || {})]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$i);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SingleResponse.schema({\r\n            names: {\r\n                certID: {\r\n                    names: {\r\n                        blockName: CERT_ID\r\n                    }\r\n                },\r\n                certStatus: CERT_STATUS,\r\n                thisUpdate: THIS_UPDATE,\r\n                nextUpdate: NEXT_UPDATE,\r\n                singleExtensions: {\r\n                    names: {\r\n                        blockName: SINGLE_EXTENSIONS\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.certID = new CertID({ schema: asn1.result.certID });\r\n        this.certStatus = asn1.result.certStatus;\r\n        this.thisUpdate = asn1.result.thisUpdate.toDate();\r\n        if (NEXT_UPDATE in asn1.result)\r\n            this.nextUpdate = asn1.result.nextUpdate.toDate();\r\n        if (SINGLE_EXTENSIONS in asn1.result)\r\n            this.singleExtensions = Array.from(asn1.result.singleExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.certID.toSchema());\r\n        outputArray.push(this.certStatus);\r\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.thisUpdate }));\r\n        if (this.nextUpdate) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [new asn1js.GeneralizedTime({ valueDate: this.nextUpdate })]\r\n            }));\r\n        }\r\n        if (this.singleExtensions) {\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.singleExtensions, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            certID: this.certID.toJSON(),\r\n            certStatus: this.certStatus.toJSON(),\r\n            thisUpdate: this.thisUpdate\r\n        };\r\n        if (this.nextUpdate) {\r\n            res.nextUpdate = this.nextUpdate;\r\n        }\r\n        if (this.singleExtensions) {\r\n            res.singleExtensions = Array.from(this.singleExtensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nSingleResponse.CLASS_NAME = \"SingleResponse\";\n\nconst TBS$2 = \"tbs\";\r\nconst VERSION$7 = \"version\";\r\nconst RESPONDER_ID = \"responderID\";\r\nconst PRODUCED_AT = \"producedAt\";\r\nconst RESPONSES = \"responses\";\r\nconst RESPONSE_EXTENSIONS = \"responseExtensions\";\r\nconst RESPONSE_DATA = \"ResponseData\";\r\nconst RESPONSE_DATA_VERSION = `${RESPONSE_DATA}.${VERSION$7}`;\r\nconst RESPONSE_DATA_RESPONDER_ID = `${RESPONSE_DATA}.${RESPONDER_ID}`;\r\nconst RESPONSE_DATA_PRODUCED_AT = `${RESPONSE_DATA}.${PRODUCED_AT}`;\r\nconst RESPONSE_DATA_RESPONSES = `${RESPONSE_DATA}.${RESPONSES}`;\r\nconst RESPONSE_DATA_RESPONSE_EXTENSIONS = `${RESPONSE_DATA}.${RESPONSE_EXTENSIONS}`;\r\nconst CLEAR_PROPS$h = [\r\n    RESPONSE_DATA,\r\n    RESPONSE_DATA_VERSION,\r\n    RESPONSE_DATA_RESPONDER_ID,\r\n    RESPONSE_DATA_PRODUCED_AT,\r\n    RESPONSE_DATA_RESPONSES,\r\n    RESPONSE_DATA_RESPONSE_EXTENSIONS\r\n];\r\nclass ResponseData extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$2, ResponseData.defaultValues(TBS$2)));\r\n        if (VERSION$7 in parameters) {\r\n            this.version = pvutils.getParametersValue(parameters, VERSION$7, ResponseData.defaultValues(VERSION$7));\r\n        }\r\n        this.responderID = pvutils.getParametersValue(parameters, RESPONDER_ID, ResponseData.defaultValues(RESPONDER_ID));\r\n        this.producedAt = pvutils.getParametersValue(parameters, PRODUCED_AT, ResponseData.defaultValues(PRODUCED_AT));\r\n        this.responses = pvutils.getParametersValue(parameters, RESPONSES, ResponseData.defaultValues(RESPONSES));\r\n        if (RESPONSE_EXTENSIONS in parameters) {\r\n            this.responseExtensions = pvutils.getParametersValue(parameters, RESPONSE_EXTENSIONS, ResponseData.defaultValues(RESPONSE_EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get tbs() {\r\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\r\n    }\r\n    set tbs(value) {\r\n        this.tbsView = new Uint8Array(value);\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$7:\r\n                return 0;\r\n            case TBS$2:\r\n                return EMPTY_BUFFER;\r\n            case RESPONDER_ID:\r\n                return {};\r\n            case PRODUCED_AT:\r\n                return new Date(0, 0, 0);\r\n            case RESPONSES:\r\n            case RESPONSE_EXTENSIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TBS$2:\r\n                return (memberValue.byteLength === 0);\r\n            case RESPONDER_ID:\r\n                return (Object.keys(memberValue).length === 0);\r\n            case PRODUCED_AT:\r\n                return (memberValue === ResponseData.defaultValues(memberName));\r\n            case RESPONSES:\r\n            case RESPONSE_EXTENSIONS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || RESPONSE_DATA),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Integer({ name: (names.version || RESPONSE_DATA_VERSION) })]\r\n                }),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        new asn1js.Constructed({\r\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 1\r\n                            },\r\n                            value: [RelativeDistinguishedNames.schema(names.ResponseDataByName || {\r\n                                    names: {\r\n                                        blockName: \"ResponseData.byName\"\r\n                                    }\r\n                                })]\r\n                        }),\r\n                        new asn1js.Constructed({\r\n                            name: (names.responderID || RESPONSE_DATA_RESPONDER_ID),\r\n                            idBlock: {\r\n                                tagClass: 3,\r\n                                tagNumber: 2\r\n                            },\r\n                            value: [new asn1js.OctetString({ name: (names.ResponseDataByKey || \"ResponseData.byKey\") })]\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.GeneralizedTime({ name: (names.producedAt || RESPONSE_DATA_PRODUCED_AT) }),\r\n                new asn1js.Sequence({\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: RESPONSE_DATA_RESPONSES,\r\n                            value: SingleResponse.schema(names.response || {})\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [Extensions.schema(names.extensions || {\r\n                            names: {\r\n                                blockName: RESPONSE_DATA_RESPONSE_EXTENSIONS\r\n                            }\r\n                        })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$h);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseData.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsView = asn1.result.ResponseData.valueBeforeDecodeView;\r\n        if (RESPONSE_DATA_VERSION in asn1.result)\r\n            this.version = asn1.result[RESPONSE_DATA_VERSION].valueBlock.valueDec;\r\n        if (asn1.result[RESPONSE_DATA_RESPONDER_ID].idBlock.tagNumber === 1)\r\n            this.responderID = new RelativeDistinguishedNames({ schema: asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0] });\r\n        else\r\n            this.responderID = asn1.result[RESPONSE_DATA_RESPONDER_ID].valueBlock.value[0];\r\n        this.producedAt = asn1.result[RESPONSE_DATA_PRODUCED_AT].toDate();\r\n        this.responses = Array.from(asn1.result[RESPONSE_DATA_RESPONSES], element => new SingleResponse({ schema: element }));\r\n        if (RESPONSE_DATA_RESPONSE_EXTENSIONS in asn1.result)\r\n            this.responseExtensions = Array.from(asn1.result[RESPONSE_DATA_RESPONSE_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        let tbsSchema;\r\n        if (encodeFlag === false) {\r\n            if (!this.tbsView.byteLength) {\r\n                return ResponseData.schema();\r\n            }\r\n            const asn1 = asn1js.fromBER(this.tbsView);\r\n            AsnError.assert(asn1, \"TBS Response Data\");\r\n            tbsSchema = asn1.result;\r\n        }\r\n        else {\r\n            const outputArray = [];\r\n            if (VERSION$7 in this) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Integer({ value: this.version })]\r\n                }));\r\n            }\r\n            if (this.responderID instanceof RelativeDistinguishedNames) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [this.responderID.toSchema()]\r\n                }));\r\n            }\r\n            else {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: [this.responderID]\r\n                }));\r\n            }\r\n            outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.producedAt }));\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.responses, o => o.toSchema())\r\n            }));\r\n            if (this.responseExtensions) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [new asn1js.Sequence({\r\n                            value: Array.from(this.responseExtensions, o => o.toSchema())\r\n                        })]\r\n                }));\r\n            }\r\n            tbsSchema = new asn1js.Sequence({\r\n                value: outputArray\r\n            });\r\n        }\r\n        return tbsSchema;\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (VERSION$7 in this) {\r\n            res.version = this.version;\r\n        }\r\n        if (this.responderID) {\r\n            res.responderID = this.responderID;\r\n        }\r\n        if (this.producedAt) {\r\n            res.producedAt = this.producedAt;\r\n        }\r\n        if (this.responses) {\r\n            res.responses = Array.from(this.responses, o => o.toJSON());\r\n        }\r\n        if (this.responseExtensions) {\r\n            res.responseExtensions = Array.from(this.responseExtensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nResponseData.CLASS_NAME = \"ResponseData\";\n\nconst TRUSTED_CERTS = \"trustedCerts\";\r\nconst CERTS$2 = \"certs\";\r\nconst CRLS$1 = \"crls\";\r\nconst OCSPS$1 = \"ocsps\";\r\nconst CHECK_DATE = \"checkDate\";\r\nconst FIND_ORIGIN = \"findOrigin\";\r\nconst FIND_ISSUER = \"findIssuer\";\r\nvar ChainValidationCode;\r\n(function (ChainValidationCode) {\r\n    ChainValidationCode[ChainValidationCode[\"unknown\"] = -1] = \"unknown\";\r\n    ChainValidationCode[ChainValidationCode[\"success\"] = 0] = \"success\";\r\n    ChainValidationCode[ChainValidationCode[\"noRevocation\"] = 11] = \"noRevocation\";\r\n    ChainValidationCode[ChainValidationCode[\"noPath\"] = 60] = \"noPath\";\r\n    ChainValidationCode[ChainValidationCode[\"noValidPath\"] = 97] = \"noValidPath\";\r\n})(ChainValidationCode || (ChainValidationCode = {}));\r\nclass ChainValidationError extends Error {\r\n    constructor(code, message) {\r\n        super(message);\r\n        this.name = ChainValidationError.NAME;\r\n        this.code = code;\r\n        this.message = message;\r\n    }\r\n}\r\nChainValidationError.NAME = \"ChainValidationError\";\r\nfunction isTrusted(cert, trustedList) {\r\n    for (let i = 0; i < trustedList.length; i++) {\r\n        if (pvtsutils.BufferSourceConverter.isEqual(cert.tbsView, trustedList[i].tbsView)) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\nclass CertificateChainValidationEngine {\r\n    constructor(parameters = {}) {\r\n        this.trustedCerts = pvutils.getParametersValue(parameters, TRUSTED_CERTS, this.defaultValues(TRUSTED_CERTS));\r\n        this.certs = pvutils.getParametersValue(parameters, CERTS$2, this.defaultValues(CERTS$2));\r\n        this.crls = pvutils.getParametersValue(parameters, CRLS$1, this.defaultValues(CRLS$1));\r\n        this.ocsps = pvutils.getParametersValue(parameters, OCSPS$1, this.defaultValues(OCSPS$1));\r\n        this.checkDate = pvutils.getParametersValue(parameters, CHECK_DATE, this.defaultValues(CHECK_DATE));\r\n        this.findOrigin = pvutils.getParametersValue(parameters, FIND_ORIGIN, this.defaultValues(FIND_ORIGIN));\r\n        this.findIssuer = pvutils.getParametersValue(parameters, FIND_ISSUER, this.defaultValues(FIND_ISSUER));\r\n    }\r\n    static defaultFindOrigin(certificate, validationEngine) {\r\n        if (certificate.tbsView.byteLength === 0) {\r\n            certificate.tbsView = new Uint8Array(certificate.encodeTBS().toBER());\r\n        }\r\n        for (const localCert of validationEngine.certs) {\r\n            if (localCert.tbsView.byteLength === 0) {\r\n                localCert.tbsView = new Uint8Array(localCert.encodeTBS().toBER());\r\n            }\r\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, localCert.tbsView))\r\n                return \"Intermediate Certificates\";\r\n        }\r\n        for (const trustedCert of validationEngine.trustedCerts) {\r\n            if (trustedCert.tbsView.byteLength === 0)\r\n                trustedCert.tbsView = new Uint8Array(trustedCert.encodeTBS().toBER());\r\n            if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, trustedCert.tbsView))\r\n                return \"Trusted Certificates\";\r\n        }\r\n        return \"Unknown\";\r\n    }\r\n    async defaultFindIssuer(certificate, validationEngine, crypto = getCrypto(true)) {\r\n        const result = [];\r\n        let keyIdentifier = null;\r\n        let authorityCertIssuer = null;\r\n        let authorityCertSerialNumber = null;\r\n        if (certificate.subject.isEqual(certificate.issuer)) {\r\n            try {\r\n                const verificationResult = await certificate.verify(undefined, crypto);\r\n                if (verificationResult) {\r\n                    return [certificate];\r\n                }\r\n            }\r\n            catch (ex) {\r\n            }\r\n        }\r\n        if (certificate.extensions) {\r\n            for (const extension of certificate.extensions) {\r\n                if (extension.extnID === id_AuthorityKeyIdentifier && extension.parsedValue instanceof AuthorityKeyIdentifier) {\r\n                    if (extension.parsedValue.keyIdentifier) {\r\n                        keyIdentifier = extension.parsedValue.keyIdentifier;\r\n                    }\r\n                    else {\r\n                        if (extension.parsedValue.authorityCertIssuer) {\r\n                            authorityCertIssuer = extension.parsedValue.authorityCertIssuer;\r\n                        }\r\n                        if (extension.parsedValue.authorityCertSerialNumber) {\r\n                            authorityCertSerialNumber = extension.parsedValue.authorityCertSerialNumber;\r\n                        }\r\n                    }\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        function checkCertificate(possibleIssuer) {\r\n            if (keyIdentifier !== null) {\r\n                if (possibleIssuer.extensions) {\r\n                    let extensionFound = false;\r\n                    for (const extension of possibleIssuer.extensions) {\r\n                        if (extension.extnID === id_SubjectKeyIdentifier && extension.parsedValue) {\r\n                            extensionFound = true;\r\n                            if (pvtsutils.BufferSourceConverter.isEqual(extension.parsedValue.valueBlock.valueHex, keyIdentifier.valueBlock.valueHexView)) {\r\n                                result.push(possibleIssuer);\r\n                            }\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (extensionFound) {\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n            let authorityCertSerialNumberEqual = false;\r\n            if (authorityCertSerialNumber !== null)\r\n                authorityCertSerialNumberEqual = possibleIssuer.serialNumber.isEqual(authorityCertSerialNumber);\r\n            if (authorityCertIssuer !== null) {\r\n                if (possibleIssuer.subject.isEqual(authorityCertIssuer)) {\r\n                    if (authorityCertSerialNumberEqual)\r\n                        result.push(possibleIssuer);\r\n                }\r\n            }\r\n            else {\r\n                if (certificate.issuer.isEqual(possibleIssuer.subject))\r\n                    result.push(possibleIssuer);\r\n            }\r\n        }\r\n        for (const trustedCert of validationEngine.trustedCerts) {\r\n            checkCertificate(trustedCert);\r\n        }\r\n        for (const intermediateCert of validationEngine.certs) {\r\n            checkCertificate(intermediateCert);\r\n        }\r\n        for (let i = 0; i < result.length; i++) {\r\n            try {\r\n                const verificationResult = await certificate.verify(result[i], crypto);\r\n                if (verificationResult === false)\r\n                    result.splice(i, 1);\r\n            }\r\n            catch (ex) {\r\n                result.splice(i, 1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TRUSTED_CERTS:\r\n                return [];\r\n            case CERTS$2:\r\n                return [];\r\n            case CRLS$1:\r\n                return [];\r\n            case OCSPS$1:\r\n                return [];\r\n            case CHECK_DATE:\r\n                return new Date();\r\n            case FIND_ORIGIN:\r\n                return CertificateChainValidationEngine.defaultFindOrigin;\r\n            case FIND_ISSUER:\r\n                return this.defaultFindIssuer;\r\n            default:\r\n                throw new Error(`Invalid member name for CertificateChainValidationEngine class: ${memberName}`);\r\n        }\r\n    }\r\n    async sort(passedWhenNotRevValues = false, crypto = getCrypto(true)) {\r\n        const localCerts = [];\r\n        const buildPath = async (certificate, crypto) => {\r\n            const result = [];\r\n            function checkUnique(array) {\r\n                let unique = true;\r\n                for (let i = 0; i < array.length; i++) {\r\n                    for (let j = 0; j < array.length; j++) {\r\n                        if (j === i)\r\n                            continue;\r\n                        if (array[i] === array[j]) {\r\n                            unique = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!unique)\r\n                        break;\r\n                }\r\n                return unique;\r\n            }\r\n            if (isTrusted(certificate, this.trustedCerts)) {\r\n                return [[certificate]];\r\n            }\r\n            const findIssuerResult = await this.findIssuer(certificate, this, crypto);\r\n            if (findIssuerResult.length === 0) {\r\n                throw new Error(\"No valid certificate paths found\");\r\n            }\r\n            for (let i = 0; i < findIssuerResult.length; i++) {\r\n                if (pvtsutils.BufferSourceConverter.isEqual(findIssuerResult[i].tbsView, certificate.tbsView)) {\r\n                    result.push([findIssuerResult[i]]);\r\n                    continue;\r\n                }\r\n                const buildPathResult = await buildPath(findIssuerResult[i], crypto);\r\n                for (let j = 0; j < buildPathResult.length; j++) {\r\n                    const copy = buildPathResult[j].slice();\r\n                    copy.splice(0, 0, findIssuerResult[i]);\r\n                    if (checkUnique(copy))\r\n                        result.push(copy);\r\n                    else\r\n                        result.push(buildPathResult[j]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        const findCRL = async (certificate) => {\r\n            const issuerCertificates = [];\r\n            const crls = [];\r\n            const crlsAndCertificates = [];\r\n            issuerCertificates.push(...localCerts.filter(element => certificate.issuer.isEqual(element.subject)));\r\n            if (issuerCertificates.length === 0) {\r\n                return {\r\n                    status: 1,\r\n                    statusMessage: \"No certificate's issuers\"\r\n                };\r\n            }\r\n            crls.push(...this.crls.filter(o => o.issuer.isEqual(certificate.issuer)));\r\n            if (crls.length === 0) {\r\n                return {\r\n                    status: 2,\r\n                    statusMessage: \"No CRLs for specific certificate issuer\"\r\n                };\r\n            }\r\n            for (let i = 0; i < crls.length; i++) {\r\n                const crl = crls[i];\r\n                if (crl.nextUpdate && crl.nextUpdate.value < this.checkDate) {\r\n                    continue;\r\n                }\r\n                for (let j = 0; j < issuerCertificates.length; j++) {\r\n                    try {\r\n                        const result = await crls[i].verify({ issuerCertificate: issuerCertificates[j] }, crypto);\r\n                        if (result) {\r\n                            crlsAndCertificates.push({\r\n                                crl: crls[i],\r\n                                certificate: issuerCertificates[j]\r\n                            });\r\n                            break;\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                    }\r\n                }\r\n            }\r\n            if (crlsAndCertificates.length) {\r\n                return {\r\n                    status: 0,\r\n                    statusMessage: EMPTY_STRING,\r\n                    result: crlsAndCertificates\r\n                };\r\n            }\r\n            return {\r\n                status: 3,\r\n                statusMessage: \"No valid CRLs found\"\r\n            };\r\n        };\r\n        const findOCSP = async (certificate, issuerCertificate) => {\r\n            const hashAlgorithm = crypto.getAlgorithmByOID(certificate.signatureAlgorithm.algorithmId);\r\n            if (!hashAlgorithm.name) {\r\n                return 1;\r\n            }\r\n            if (!hashAlgorithm.hash) {\r\n                return 1;\r\n            }\r\n            for (let i = 0; i < this.ocsps.length; i++) {\r\n                const ocsp = this.ocsps[i];\r\n                const result = await ocsp.getCertificateStatus(certificate, issuerCertificate, crypto);\r\n                if (result.isForCertificate) {\r\n                    if (result.status === 0)\r\n                        return 0;\r\n                    return 1;\r\n                }\r\n            }\r\n            return 2;\r\n        };\r\n        async function checkForCA(certificate, needToCheckCRL = false) {\r\n            let isCA = false;\r\n            let mustBeCA = false;\r\n            let keyUsagePresent = false;\r\n            let cRLSign = false;\r\n            if (certificate.extensions) {\r\n                for (let j = 0; j < certificate.extensions.length; j++) {\r\n                    const extension = certificate.extensions[j];\r\n                    if (extension.critical && !extension.parsedValue) {\r\n                        return {\r\n                            result: false,\r\n                            resultCode: 6,\r\n                            resultMessage: `Unable to parse critical certificate extension: ${extension.extnID}`\r\n                        };\r\n                    }\r\n                    if (extension.extnID === id_KeyUsage) {\r\n                        keyUsagePresent = true;\r\n                        const view = new Uint8Array(extension.parsedValue.valueBlock.valueHex);\r\n                        if ((view[0] & 0x04) === 0x04)\r\n                            mustBeCA = true;\r\n                        if ((view[0] & 0x02) === 0x02)\r\n                            cRLSign = true;\r\n                    }\r\n                    if (extension.extnID === id_BasicConstraints) {\r\n                        if (\"cA\" in extension.parsedValue) {\r\n                            if (extension.parsedValue.cA === true)\r\n                                isCA = true;\r\n                        }\r\n                    }\r\n                }\r\n                if ((mustBeCA === true) && (isCA === false)) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: 3,\r\n                        resultMessage: \"Unable to build certificate chain - using \\\"keyCertSign\\\" flag set without BasicConstraints\"\r\n                    };\r\n                }\r\n                if ((keyUsagePresent === true) && (isCA === true) && (mustBeCA === false)) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: 4,\r\n                        resultMessage: \"Unable to build certificate chain - \\\"keyCertSign\\\" flag was not set\"\r\n                    };\r\n                }\r\n                if ((isCA === true) && (keyUsagePresent === true) && ((needToCheckCRL) && (cRLSign === false))) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: 5,\r\n                        resultMessage: \"Unable to build certificate chain - intermediate certificate must have \\\"cRLSign\\\" key usage flag\"\r\n                    };\r\n                }\r\n            }\r\n            if (isCA === false) {\r\n                return {\r\n                    result: false,\r\n                    resultCode: 7,\r\n                    resultMessage: \"Unable to build certificate chain - more than one possible end-user certificate\"\r\n                };\r\n            }\r\n            return {\r\n                result: true,\r\n                resultCode: 0,\r\n                resultMessage: EMPTY_STRING\r\n            };\r\n        }\r\n        const basicCheck = async (path, checkDate) => {\r\n            for (let i = 0; i < path.length; i++) {\r\n                if ((path[i].notBefore.value > checkDate) ||\r\n                    (path[i].notAfter.value < checkDate)) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: 8,\r\n                        resultMessage: \"The certificate is either not yet valid or expired\"\r\n                    };\r\n                }\r\n            }\r\n            if (path.length < 2) {\r\n                return {\r\n                    result: false,\r\n                    resultCode: 9,\r\n                    resultMessage: \"Too short certificate path\"\r\n                };\r\n            }\r\n            for (let i = (path.length - 2); i >= 0; i--) {\r\n                if (path[i].issuer.isEqual(path[i].subject) === false) {\r\n                    if (path[i].issuer.isEqual(path[i + 1].subject) === false) {\r\n                        return {\r\n                            result: false,\r\n                            resultCode: 10,\r\n                            resultMessage: \"Incorrect name chaining\"\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n            if ((this.crls.length !== 0) || (this.ocsps.length !== 0)) {\r\n                for (let i = 0; i < (path.length - 1); i++) {\r\n                    let ocspResult = 2;\r\n                    let crlResult = {\r\n                        status: 0,\r\n                        statusMessage: EMPTY_STRING\r\n                    };\r\n                    if (this.ocsps.length !== 0) {\r\n                        ocspResult = await findOCSP(path[i], path[i + 1]);\r\n                        switch (ocspResult) {\r\n                            case 0:\r\n                                continue;\r\n                            case 1:\r\n                                return {\r\n                                    result: false,\r\n                                    resultCode: 12,\r\n                                    resultMessage: \"One of certificates was revoked via OCSP response\"\r\n                                };\r\n                        }\r\n                    }\r\n                    if (this.crls.length !== 0) {\r\n                        crlResult = await findCRL(path[i]);\r\n                        if (crlResult.status === 0 && crlResult.result) {\r\n                            for (let j = 0; j < crlResult.result.length; j++) {\r\n                                const isCertificateRevoked = crlResult.result[j].crl.isCertificateRevoked(path[i]);\r\n                                if (isCertificateRevoked) {\r\n                                    return {\r\n                                        result: false,\r\n                                        resultCode: 12,\r\n                                        resultMessage: \"One of certificates had been revoked\"\r\n                                    };\r\n                                }\r\n                                const isCertificateCA = await checkForCA(crlResult.result[j].certificate, true);\r\n                                if (isCertificateCA.result === false) {\r\n                                    return {\r\n                                        result: false,\r\n                                        resultCode: 13,\r\n                                        resultMessage: \"CRL issuer certificate is not a CA certificate or does not have crlSign flag\"\r\n                                    };\r\n                                }\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (passedWhenNotRevValues === false) {\r\n                                throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (ocspResult === 2) {\r\n                            return {\r\n                                result: false,\r\n                                resultCode: 11,\r\n                                resultMessage: \"No revocation values found for one of certificates\"\r\n                            };\r\n                        }\r\n                    }\r\n                    if ((ocspResult === 2) && (crlResult.status === 2) && passedWhenNotRevValues) {\r\n                        const issuerCertificate = path[i + 1];\r\n                        let extensionFound = false;\r\n                        if (issuerCertificate.extensions) {\r\n                            for (const extension of issuerCertificate.extensions) {\r\n                                switch (extension.extnID) {\r\n                                    case id_CRLDistributionPoints:\r\n                                    case id_FreshestCRL:\r\n                                    case id_AuthorityInfoAccess:\r\n                                        extensionFound = true;\r\n                                        break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (extensionFound) {\r\n                            throw new ChainValidationError(ChainValidationCode.noRevocation, `No revocation values found for one of certificates: ${crlResult.statusMessage}`);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (const [i, cert] of path.entries()) {\r\n                if (!i) {\r\n                    continue;\r\n                }\r\n                const result = await checkForCA(cert);\r\n                if (!result.result) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: 14,\r\n                        resultMessage: \"One of intermediate certificates is not a CA certificate\"\r\n                    };\r\n                }\r\n            }\r\n            return {\r\n                result: true\r\n            };\r\n        };\r\n        localCerts.push(...this.trustedCerts);\r\n        localCerts.push(...this.certs);\r\n        for (let i = 0; i < localCerts.length; i++) {\r\n            for (let j = 0; j < localCerts.length; j++) {\r\n                if (i === j)\r\n                    continue;\r\n                if (pvtsutils.BufferSourceConverter.isEqual(localCerts[i].tbsView, localCerts[j].tbsView)) {\r\n                    localCerts.splice(j, 1);\r\n                    i = 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        const leafCert = localCerts[localCerts.length - 1];\r\n        let result;\r\n        const certificatePath = [leafCert];\r\n        result = await buildPath(leafCert, crypto);\r\n        if (result.length === 0) {\r\n            throw new ChainValidationError(ChainValidationCode.noPath, \"Unable to find certificate path\");\r\n        }\r\n        for (let i = 0; i < result.length; i++) {\r\n            let found = false;\r\n            for (let j = 0; j < (result[i]).length; j++) {\r\n                const certificate = (result[i])[j];\r\n                for (let k = 0; k < this.trustedCerts.length; k++) {\r\n                    if (pvtsutils.BufferSourceConverter.isEqual(certificate.tbsView, this.trustedCerts[k].tbsView)) {\r\n                        found = true;\r\n                        break;\r\n                    }\r\n                }\r\n                if (found)\r\n                    break;\r\n            }\r\n            if (!found) {\r\n                result.splice(i, 1);\r\n                i = 0;\r\n            }\r\n        }\r\n        if (result.length === 0) {\r\n            throw new ChainValidationError(ChainValidationCode.noValidPath, \"No valid certificate paths found\");\r\n        }\r\n        let shortestLength = result[0].length;\r\n        let shortestIndex = 0;\r\n        for (let i = 0; i < result.length; i++) {\r\n            if (result[i].length < shortestLength) {\r\n                shortestLength = result[i].length;\r\n                shortestIndex = i;\r\n            }\r\n        }\r\n        for (let i = 0; i < result[shortestIndex].length; i++)\r\n            certificatePath.push((result[shortestIndex])[i]);\r\n        result = await basicCheck(certificatePath, this.checkDate);\r\n        if (result.result === false)\r\n            throw result;\r\n        return certificatePath;\r\n    }\r\n    async verify(parameters = {}, crypto = getCrypto(true)) {\r\n        function compareDNSName(name, constraint) {\r\n            const namePrepared = stringPrep(name);\r\n            const constraintPrepared = stringPrep(constraint);\r\n            const nameSplitted = namePrepared.split(\".\");\r\n            const constraintSplitted = constraintPrepared.split(\".\");\r\n            const nameLen = nameSplitted.length;\r\n            const constrLen = constraintSplitted.length;\r\n            if ((nameLen === 0) || (constrLen === 0) || (nameLen < constrLen)) {\r\n                return false;\r\n            }\r\n            for (let i = 0; i < nameLen; i++) {\r\n                if (nameSplitted[i].length === 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            for (let i = 0; i < constrLen; i++) {\r\n                if (constraintSplitted[i].length === 0) {\r\n                    if (i === 0) {\r\n                        if (constrLen === 1) {\r\n                            return false;\r\n                        }\r\n                        continue;\r\n                    }\r\n                    return false;\r\n                }\r\n            }\r\n            for (let i = 0; i < constrLen; i++) {\r\n                if (constraintSplitted[constrLen - 1 - i].length === 0) {\r\n                    continue;\r\n                }\r\n                if (nameSplitted[nameLen - 1 - i].localeCompare(constraintSplitted[constrLen - 1 - i]) !== 0) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n        function compareRFC822Name(name, constraint) {\r\n            const namePrepared = stringPrep(name);\r\n            const constraintPrepared = stringPrep(constraint);\r\n            const nameSplitted = namePrepared.split(\"@\");\r\n            const constraintSplitted = constraintPrepared.split(\"@\");\r\n            if ((nameSplitted.length === 0) || (constraintSplitted.length === 0) || (nameSplitted.length < constraintSplitted.length))\r\n                return false;\r\n            if (constraintSplitted.length === 1) {\r\n                const result = compareDNSName(nameSplitted[1], constraintSplitted[0]);\r\n                if (result) {\r\n                    const ns = nameSplitted[1].split(\".\");\r\n                    const cs = constraintSplitted[0].split(\".\");\r\n                    if (cs[0].length === 0)\r\n                        return true;\r\n                    return ns.length === cs.length;\r\n                }\r\n                return false;\r\n            }\r\n            return (namePrepared.localeCompare(constraintPrepared) === 0);\r\n        }\r\n        function compareUniformResourceIdentifier(name, constraint) {\r\n            let namePrepared = stringPrep(name);\r\n            const constraintPrepared = stringPrep(constraint);\r\n            const ns = namePrepared.split(\"/\");\r\n            const cs = constraintPrepared.split(\"/\");\r\n            if (cs.length > 1)\r\n                return false;\r\n            if (ns.length > 1) {\r\n                for (let i = 0; i < ns.length; i++) {\r\n                    if ((ns[i].length > 0) && (ns[i].charAt(ns[i].length - 1) !== \":\")) {\r\n                        const nsPort = ns[i].split(\":\");\r\n                        namePrepared = nsPort[0];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            const result = compareDNSName(namePrepared, constraintPrepared);\r\n            if (result) {\r\n                const nameSplitted = namePrepared.split(\".\");\r\n                const constraintSplitted = constraintPrepared.split(\".\");\r\n                if (constraintSplitted[0].length === 0)\r\n                    return true;\r\n                return nameSplitted.length === constraintSplitted.length;\r\n            }\r\n            return false;\r\n        }\r\n        function compareIPAddress(name, constraint) {\r\n            const nameView = name.valueBlock.valueHexView;\r\n            const constraintView = constraint.valueBlock.valueHexView;\r\n            if ((nameView.length === 4) && (constraintView.length === 8)) {\r\n                for (let i = 0; i < 4; i++) {\r\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 4])\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            if ((nameView.length === 16) && (constraintView.length === 32)) {\r\n                for (let i = 0; i < 16; i++) {\r\n                    if ((nameView[i] ^ constraintView[i]) & constraintView[i + 16])\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n        function compareDirectoryName(name, constraint) {\r\n            if ((name.typesAndValues.length === 0) || (constraint.typesAndValues.length === 0))\r\n                return true;\r\n            if (name.typesAndValues.length < constraint.typesAndValues.length)\r\n                return false;\r\n            let result = true;\r\n            let nameStart = 0;\r\n            for (let i = 0; i < constraint.typesAndValues.length; i++) {\r\n                let localResult = false;\r\n                for (let j = nameStart; j < name.typesAndValues.length; j++) {\r\n                    localResult = name.typesAndValues[j].isEqual(constraint.typesAndValues[i]);\r\n                    if (name.typesAndValues[j].type === constraint.typesAndValues[i].type)\r\n                        result = result && localResult;\r\n                    if (localResult === true) {\r\n                        if ((nameStart === 0) || (nameStart === j)) {\r\n                            nameStart = j + 1;\r\n                            break;\r\n                        }\r\n                        else\r\n                            return false;\r\n                    }\r\n                }\r\n                if (localResult === false)\r\n                    return false;\r\n            }\r\n            return (nameStart === 0) ? false : result;\r\n        }\r\n        try {\r\n            if (this.certs.length === 0)\r\n                throw new Error(\"Empty certificate array\");\r\n            const passedWhenNotRevValues = parameters.passedWhenNotRevValues || false;\r\n            const initialPolicySet = parameters.initialPolicySet || [id_AnyPolicy];\r\n            const initialExplicitPolicy = parameters.initialExplicitPolicy || false;\r\n            const initialPolicyMappingInhibit = parameters.initialPolicyMappingInhibit || false;\r\n            const initialInhibitPolicy = parameters.initialInhibitPolicy || false;\r\n            const initialPermittedSubtreesSet = parameters.initialPermittedSubtreesSet || [];\r\n            const initialExcludedSubtreesSet = parameters.initialExcludedSubtreesSet || [];\r\n            const initialRequiredNameForms = parameters.initialRequiredNameForms || [];\r\n            let explicitPolicyIndicator = initialExplicitPolicy;\r\n            let policyMappingInhibitIndicator = initialPolicyMappingInhibit;\r\n            let inhibitAnyPolicyIndicator = initialInhibitPolicy;\r\n            const pendingConstraints = [\r\n                false,\r\n                false,\r\n                false,\r\n            ];\r\n            let explicitPolicyPending = 0;\r\n            let policyMappingInhibitPending = 0;\r\n            let inhibitAnyPolicyPending = 0;\r\n            let permittedSubtrees = initialPermittedSubtreesSet;\r\n            let excludedSubtrees = initialExcludedSubtreesSet;\r\n            const requiredNameForms = initialRequiredNameForms;\r\n            let pathDepth = 1;\r\n            this.certs = await this.sort(passedWhenNotRevValues, crypto);\r\n            const allPolicies = [];\r\n            allPolicies.push(id_AnyPolicy);\r\n            const policiesAndCerts = [];\r\n            const anyPolicyArray = new Array(this.certs.length - 1);\r\n            for (let ii = 0; ii < (this.certs.length - 1); ii++)\r\n                anyPolicyArray[ii] = true;\r\n            policiesAndCerts.push(anyPolicyArray);\r\n            const policyMappings = new Array(this.certs.length - 1);\r\n            const certPolicies = new Array(this.certs.length - 1);\r\n            let explicitPolicyStart = (explicitPolicyIndicator) ? (this.certs.length - 1) : (-1);\r\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\r\n                const cert = this.certs[i];\r\n                if (cert.extensions) {\r\n                    for (let j = 0; j < cert.extensions.length; j++) {\r\n                        const extension = cert.extensions[j];\r\n                        if (extension.extnID === id_CertificatePolicies) {\r\n                            certPolicies[i] = extension.parsedValue;\r\n                            for (let s = 0; s < allPolicies.length; s++) {\r\n                                if (allPolicies[s] === id_AnyPolicy) {\r\n                                    delete (policiesAndCerts[s])[i];\r\n                                    break;\r\n                                }\r\n                            }\r\n                            for (let k = 0; k < extension.parsedValue.certificatePolicies.length; k++) {\r\n                                let policyIndex = (-1);\r\n                                const policyId = extension.parsedValue.certificatePolicies[k].policyIdentifier;\r\n                                for (let s = 0; s < allPolicies.length; s++) {\r\n                                    if (policyId === allPolicies[s]) {\r\n                                        policyIndex = s;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (policyIndex === (-1)) {\r\n                                    allPolicies.push(policyId);\r\n                                    const certArray = new Array(this.certs.length - 1);\r\n                                    certArray[i] = true;\r\n                                    policiesAndCerts.push(certArray);\r\n                                }\r\n                                else\r\n                                    (policiesAndCerts[policyIndex])[i] = true;\r\n                            }\r\n                        }\r\n                        if (extension.extnID === id_PolicyMappings) {\r\n                            if (policyMappingInhibitIndicator) {\r\n                                return {\r\n                                    result: false,\r\n                                    resultCode: 98,\r\n                                    resultMessage: \"Policy mapping prohibited\"\r\n                                };\r\n                            }\r\n                            policyMappings[i] = extension.parsedValue;\r\n                        }\r\n                        if (extension.extnID === id_PolicyConstraints) {\r\n                            if (explicitPolicyIndicator === false) {\r\n                                if (extension.parsedValue.requireExplicitPolicy === 0) {\r\n                                    explicitPolicyIndicator = true;\r\n                                    explicitPolicyStart = i;\r\n                                }\r\n                                else {\r\n                                    if (pendingConstraints[0] === false) {\r\n                                        pendingConstraints[0] = true;\r\n                                        explicitPolicyPending = extension.parsedValue.requireExplicitPolicy;\r\n                                    }\r\n                                    else\r\n                                        explicitPolicyPending = (explicitPolicyPending > extension.parsedValue.requireExplicitPolicy) ? extension.parsedValue.requireExplicitPolicy : explicitPolicyPending;\r\n                                }\r\n                                if (extension.parsedValue.inhibitPolicyMapping === 0)\r\n                                    policyMappingInhibitIndicator = true;\r\n                                else {\r\n                                    if (pendingConstraints[1] === false) {\r\n                                        pendingConstraints[1] = true;\r\n                                        policyMappingInhibitPending = extension.parsedValue.inhibitPolicyMapping + 1;\r\n                                    }\r\n                                    else\r\n                                        policyMappingInhibitPending = (policyMappingInhibitPending > (extension.parsedValue.inhibitPolicyMapping + 1)) ? (extension.parsedValue.inhibitPolicyMapping + 1) : policyMappingInhibitPending;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (extension.extnID === id_InhibitAnyPolicy) {\r\n                            if (inhibitAnyPolicyIndicator === false) {\r\n                                if (extension.parsedValue.valueBlock.valueDec === 0)\r\n                                    inhibitAnyPolicyIndicator = true;\r\n                                else {\r\n                                    if (pendingConstraints[2] === false) {\r\n                                        pendingConstraints[2] = true;\r\n                                        inhibitAnyPolicyPending = extension.parsedValue.valueBlock.valueDec;\r\n                                    }\r\n                                    else\r\n                                        inhibitAnyPolicyPending = (inhibitAnyPolicyPending > extension.parsedValue.valueBlock.valueDec) ? extension.parsedValue.valueBlock.valueDec : inhibitAnyPolicyPending;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inhibitAnyPolicyIndicator === true) {\r\n                        let policyIndex = (-1);\r\n                        for (let searchAnyPolicy = 0; searchAnyPolicy < allPolicies.length; searchAnyPolicy++) {\r\n                            if (allPolicies[searchAnyPolicy] === id_AnyPolicy) {\r\n                                policyIndex = searchAnyPolicy;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (policyIndex !== (-1))\r\n                            delete (policiesAndCerts[0])[i];\r\n                    }\r\n                    if (explicitPolicyIndicator === false) {\r\n                        if (pendingConstraints[0] === true) {\r\n                            explicitPolicyPending--;\r\n                            if (explicitPolicyPending === 0) {\r\n                                explicitPolicyIndicator = true;\r\n                                explicitPolicyStart = i;\r\n                                pendingConstraints[0] = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (policyMappingInhibitIndicator === false) {\r\n                        if (pendingConstraints[1] === true) {\r\n                            policyMappingInhibitPending--;\r\n                            if (policyMappingInhibitPending === 0) {\r\n                                policyMappingInhibitIndicator = true;\r\n                                pendingConstraints[1] = false;\r\n                            }\r\n                        }\r\n                    }\r\n                    if (inhibitAnyPolicyIndicator === false) {\r\n                        if (pendingConstraints[2] === true) {\r\n                            inhibitAnyPolicyPending--;\r\n                            if (inhibitAnyPolicyPending === 0) {\r\n                                inhibitAnyPolicyIndicator = true;\r\n                                pendingConstraints[2] = false;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < (this.certs.length - 1); i++) {\r\n                if ((i < (this.certs.length - 2)) && (typeof policyMappings[i + 1] !== \"undefined\")) {\r\n                    for (let k = 0; k < policyMappings[i + 1].mappings.length; k++) {\r\n                        if ((policyMappings[i + 1].mappings[k].issuerDomainPolicy === id_AnyPolicy) || (policyMappings[i + 1].mappings[k].subjectDomainPolicy === id_AnyPolicy)) {\r\n                            return {\r\n                                result: false,\r\n                                resultCode: 99,\r\n                                resultMessage: \"The \\\"anyPolicy\\\" should not be a part of policy mapping scheme\"\r\n                            };\r\n                        }\r\n                        let issuerDomainPolicyIndex = (-1);\r\n                        let subjectDomainPolicyIndex = (-1);\r\n                        for (let n = 0; n < allPolicies.length; n++) {\r\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].issuerDomainPolicy)\r\n                                issuerDomainPolicyIndex = n;\r\n                            if (allPolicies[n] === policyMappings[i + 1].mappings[k].subjectDomainPolicy)\r\n                                subjectDomainPolicyIndex = n;\r\n                        }\r\n                        if (typeof (policiesAndCerts[issuerDomainPolicyIndex])[i] !== \"undefined\")\r\n                            delete (policiesAndCerts[issuerDomainPolicyIndex])[i];\r\n                        for (let j = 0; j < certPolicies[i].certificatePolicies.length; j++) {\r\n                            if (policyMappings[i + 1].mappings[k].subjectDomainPolicy === certPolicies[i].certificatePolicies[j].policyIdentifier) {\r\n                                if ((issuerDomainPolicyIndex !== (-1)) && (subjectDomainPolicyIndex !== (-1))) {\r\n                                    for (let m = 0; m <= i; m++) {\r\n                                        if (typeof (policiesAndCerts[subjectDomainPolicyIndex])[m] !== \"undefined\") {\r\n                                            (policiesAndCerts[issuerDomainPolicyIndex])[m] = true;\r\n                                            delete (policiesAndCerts[subjectDomainPolicyIndex])[m];\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            for (let i = 0; i < allPolicies.length; i++) {\r\n                if (allPolicies[i] === id_AnyPolicy) {\r\n                    for (let j = 0; j < explicitPolicyStart; j++)\r\n                        delete (policiesAndCerts[i])[j];\r\n                }\r\n            }\r\n            const authConstrPolicies = [];\r\n            for (let i = 0; i < policiesAndCerts.length; i++) {\r\n                let found = true;\r\n                for (let j = 0; j < (this.certs.length - 1); j++) {\r\n                    let anyPolicyFound = false;\r\n                    if ((j < explicitPolicyStart) && (allPolicies[i] === id_AnyPolicy) && (allPolicies.length > 1)) {\r\n                        found = false;\r\n                        break;\r\n                    }\r\n                    if (typeof (policiesAndCerts[i])[j] === \"undefined\") {\r\n                        if (j >= explicitPolicyStart) {\r\n                            for (let k = 0; k < allPolicies.length; k++) {\r\n                                if (allPolicies[k] === id_AnyPolicy) {\r\n                                    if ((policiesAndCerts[k])[j] === true)\r\n                                        anyPolicyFound = true;\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                        if (!anyPolicyFound) {\r\n                            found = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n                if (found === true)\r\n                    authConstrPolicies.push(allPolicies[i]);\r\n            }\r\n            let userConstrPolicies = [];\r\n            if ((initialPolicySet.length === 1) && (initialPolicySet[0] === id_AnyPolicy) && (explicitPolicyIndicator === false))\r\n                userConstrPolicies = initialPolicySet;\r\n            else {\r\n                if ((authConstrPolicies.length === 1) && (authConstrPolicies[0] === id_AnyPolicy))\r\n                    userConstrPolicies = initialPolicySet;\r\n                else {\r\n                    for (let i = 0; i < authConstrPolicies.length; i++) {\r\n                        for (let j = 0; j < initialPolicySet.length; j++) {\r\n                            if ((initialPolicySet[j] === authConstrPolicies[i]) || (initialPolicySet[j] === id_AnyPolicy)) {\r\n                                userConstrPolicies.push(authConstrPolicies[i]);\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            const policyResult = {\r\n                result: (userConstrPolicies.length > 0),\r\n                resultCode: 0,\r\n                resultMessage: (userConstrPolicies.length > 0) ? EMPTY_STRING : \"Zero \\\"userConstrPolicies\\\" array, no intersections with \\\"authConstrPolicies\\\"\",\r\n                authConstrPolicies,\r\n                userConstrPolicies,\r\n                explicitPolicyIndicator,\r\n                policyMappings,\r\n                certificatePath: this.certs\r\n            };\r\n            if (userConstrPolicies.length === 0)\r\n                return policyResult;\r\n            if (policyResult.result === false)\r\n                return policyResult;\r\n            pathDepth = 1;\r\n            for (let i = (this.certs.length - 2); i >= 0; i--, pathDepth++) {\r\n                const cert = this.certs[i];\r\n                let subjectAltNames = [];\r\n                let certPermittedSubtrees = [];\r\n                let certExcludedSubtrees = [];\r\n                if (cert.extensions) {\r\n                    for (let j = 0; j < cert.extensions.length; j++) {\r\n                        const extension = cert.extensions[j];\r\n                        if (extension.extnID === id_NameConstraints) {\r\n                            if (\"permittedSubtrees\" in extension.parsedValue)\r\n                                certPermittedSubtrees = certPermittedSubtrees.concat(extension.parsedValue.permittedSubtrees);\r\n                            if (\"excludedSubtrees\" in extension.parsedValue)\r\n                                certExcludedSubtrees = certExcludedSubtrees.concat(extension.parsedValue.excludedSubtrees);\r\n                        }\r\n                        if (extension.extnID === id_SubjectAltName)\r\n                            subjectAltNames = subjectAltNames.concat(extension.parsedValue.altNames);\r\n                    }\r\n                }\r\n                let formFound = (requiredNameForms.length <= 0);\r\n                for (let j = 0; j < requiredNameForms.length; j++) {\r\n                    switch (requiredNameForms[j].base.type) {\r\n                        case 4:\r\n                            {\r\n                                if (requiredNameForms[j].base.value.typesAndValues.length !== cert.subject.typesAndValues.length)\r\n                                    continue;\r\n                                formFound = true;\r\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\r\n                                    if (cert.subject.typesAndValues[k].type !== requiredNameForms[j].base.value.typesAndValues[k].type) {\r\n                                        formFound = false;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (formFound === true)\r\n                                    break;\r\n                            }\r\n                            break;\r\n                        default:\r\n                    }\r\n                }\r\n                if (formFound === false) {\r\n                    policyResult.result = false;\r\n                    policyResult.resultCode = 21;\r\n                    policyResult.resultMessage = \"No necessary name form found\";\r\n                    throw policyResult;\r\n                }\r\n                const constrGroups = [\r\n                    [],\r\n                    [],\r\n                    [],\r\n                    [],\r\n                    [],\r\n                ];\r\n                for (let j = 0; j < permittedSubtrees.length; j++) {\r\n                    switch (permittedSubtrees[j].base.type) {\r\n                        case 1:\r\n                            constrGroups[0].push(permittedSubtrees[j]);\r\n                            break;\r\n                        case 2:\r\n                            constrGroups[1].push(permittedSubtrees[j]);\r\n                            break;\r\n                        case 4:\r\n                            constrGroups[2].push(permittedSubtrees[j]);\r\n                            break;\r\n                        case 6:\r\n                            constrGroups[3].push(permittedSubtrees[j]);\r\n                            break;\r\n                        case 7:\r\n                            constrGroups[4].push(permittedSubtrees[j]);\r\n                            break;\r\n                        default:\r\n                    }\r\n                }\r\n                for (let p = 0; p < 5; p++) {\r\n                    let groupPermitted = false;\r\n                    let valueExists = false;\r\n                    const group = constrGroups[p];\r\n                    for (let j = 0; j < group.length; j++) {\r\n                        switch (p) {\r\n                            case 0:\r\n                                if (subjectAltNames.length > 0) {\r\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                        if (subjectAltNames[k].type === 1) {\r\n                                            valueExists = true;\r\n                                            groupPermitted = groupPermitted || compareRFC822Name(subjectAltNames[k].value, group[j].base.value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                else {\r\n                                    for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\r\n                                        if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\r\n                                            (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\")) {\r\n                                            valueExists = true;\r\n                                            groupPermitted = groupPermitted || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, group[j].base.value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 1:\r\n                                if (subjectAltNames.length > 0) {\r\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                        if (subjectAltNames[k].type === 2) {\r\n                                            valueExists = true;\r\n                                            groupPermitted = groupPermitted || compareDNSName(subjectAltNames[k].value, group[j].base.value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 2:\r\n                                valueExists = true;\r\n                                groupPermitted = compareDirectoryName(cert.subject, group[j].base.value);\r\n                                break;\r\n                            case 3:\r\n                                if (subjectAltNames.length > 0) {\r\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                        if (subjectAltNames[k].type === 6) {\r\n                                            valueExists = true;\r\n                                            groupPermitted = groupPermitted || compareUniformResourceIdentifier(subjectAltNames[k].value, group[j].base.value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            case 4:\r\n                                if (subjectAltNames.length > 0) {\r\n                                    for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                        if (subjectAltNames[k].type === 7) {\r\n                                            valueExists = true;\r\n                                            groupPermitted = groupPermitted || compareIPAddress(subjectAltNames[k].value, group[j].base.value);\r\n                                        }\r\n                                    }\r\n                                }\r\n                                break;\r\n                            default:\r\n                        }\r\n                        if (groupPermitted)\r\n                            break;\r\n                    }\r\n                    if ((groupPermitted === false) && (group.length > 0) && valueExists) {\r\n                        policyResult.result = false;\r\n                        policyResult.resultCode = 41;\r\n                        policyResult.resultMessage = \"Failed to meet \\\"permitted sub-trees\\\" name constraint\";\r\n                        throw policyResult;\r\n                    }\r\n                }\r\n                let excluded = false;\r\n                for (let j = 0; j < excludedSubtrees.length; j++) {\r\n                    switch (excludedSubtrees[j].base.type) {\r\n                        case 1:\r\n                            if (subjectAltNames.length >= 0) {\r\n                                for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                    if (subjectAltNames[k].type === 1)\r\n                                        excluded = excluded || compareRFC822Name(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n                                }\r\n                            }\r\n                            else {\r\n                                for (let k = 0; k < cert.subject.typesAndValues.length; k++) {\r\n                                    if ((cert.subject.typesAndValues[k].type === \"1.2.840.113549.1.9.1\") ||\r\n                                        (cert.subject.typesAndValues[k].type === \"0.9.2342.19200300.100.1.3\"))\r\n                                        excluded = excluded || compareRFC822Name(cert.subject.typesAndValues[k].value.valueBlock.value, excludedSubtrees[j].base.value);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 2:\r\n                            if (subjectAltNames.length > 0) {\r\n                                for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                    if (subjectAltNames[k].type === 2)\r\n                                        excluded = excluded || compareDNSName(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 4:\r\n                            excluded = excluded || compareDirectoryName(cert.subject, excludedSubtrees[j].base.value);\r\n                            break;\r\n                        case 6:\r\n                            if (subjectAltNames.length > 0) {\r\n                                for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                    if (subjectAltNames[k].type === 6)\r\n                                        excluded = excluded || compareUniformResourceIdentifier(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 7:\r\n                            if (subjectAltNames.length > 0) {\r\n                                for (let k = 0; k < subjectAltNames.length; k++) {\r\n                                    if (subjectAltNames[k].type === 7)\r\n                                        excluded = excluded || compareIPAddress(subjectAltNames[k].value, excludedSubtrees[j].base.value);\r\n                                }\r\n                            }\r\n                            break;\r\n                        default:\r\n                    }\r\n                    if (excluded)\r\n                        break;\r\n                }\r\n                if (excluded === true) {\r\n                    policyResult.result = false;\r\n                    policyResult.resultCode = 42;\r\n                    policyResult.resultMessage = \"Failed to meet \\\"excluded sub-trees\\\" name constraint\";\r\n                    throw policyResult;\r\n                }\r\n                permittedSubtrees = permittedSubtrees.concat(certPermittedSubtrees);\r\n                excludedSubtrees = excludedSubtrees.concat(certExcludedSubtrees);\r\n            }\r\n            return policyResult;\r\n        }\r\n        catch (error) {\r\n            if (error instanceof Error) {\r\n                if (error instanceof ChainValidationError) {\r\n                    return {\r\n                        result: false,\r\n                        resultCode: error.code,\r\n                        resultMessage: error.message,\r\n                        error: error,\r\n                    };\r\n                }\r\n                return {\r\n                    result: false,\r\n                    resultCode: ChainValidationCode.unknown,\r\n                    resultMessage: error.message,\r\n                    error: error,\r\n                };\r\n            }\r\n            if (error && typeof error === \"object\" && \"resultMessage\" in error) {\r\n                return error;\r\n            }\r\n            return {\r\n                result: false,\r\n                resultCode: -1,\r\n                resultMessage: `${error}`,\r\n            };\r\n        }\r\n    }\r\n}\n\nconst TBS_RESPONSE_DATA = \"tbsResponseData\";\r\nconst SIGNATURE_ALGORITHM$3 = \"signatureAlgorithm\";\r\nconst SIGNATURE$2 = \"signature\";\r\nconst CERTS$1 = \"certs\";\r\nconst BASIC_OCSP_RESPONSE = \"BasicOCSPResponse\";\r\nconst BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA = `${BASIC_OCSP_RESPONSE}.${TBS_RESPONSE_DATA}`;\r\nconst BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM = `${BASIC_OCSP_RESPONSE}.${SIGNATURE_ALGORITHM$3}`;\r\nconst BASIC_OCSP_RESPONSE_SIGNATURE = `${BASIC_OCSP_RESPONSE}.${SIGNATURE$2}`;\r\nconst BASIC_OCSP_RESPONSE_CERTS = `${BASIC_OCSP_RESPONSE}.${CERTS$1}`;\r\nconst CLEAR_PROPS$g = [\r\n    BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA,\r\n    BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM,\r\n    BASIC_OCSP_RESPONSE_SIGNATURE,\r\n    BASIC_OCSP_RESPONSE_CERTS\r\n];\r\nclass BasicOCSPResponse extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsResponseData = pvutils.getParametersValue(parameters, TBS_RESPONSE_DATA, BasicOCSPResponse.defaultValues(TBS_RESPONSE_DATA));\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$3, BasicOCSPResponse.defaultValues(SIGNATURE_ALGORITHM$3));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$2, BasicOCSPResponse.defaultValues(SIGNATURE$2));\r\n        if (CERTS$1 in parameters) {\r\n            this.certs = pvutils.getParametersValue(parameters, CERTS$1, BasicOCSPResponse.defaultValues(CERTS$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS_RESPONSE_DATA:\r\n                return new ResponseData();\r\n            case SIGNATURE_ALGORITHM$3:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE$2:\r\n                return new asn1js.BitString();\r\n            case CERTS$1:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case \"type\":\r\n                {\r\n                    let comparisonResult = ((ResponseData.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n                        (ResponseData.compareWithDefault(\"responderID\", memberValue.responderID)) &&\r\n                        (ResponseData.compareWithDefault(\"producedAt\", memberValue.producedAt)) &&\r\n                        (ResponseData.compareWithDefault(\"responses\", memberValue.responses)));\r\n                    if (\"responseExtensions\" in memberValue)\r\n                        comparisonResult = comparisonResult && (ResponseData.compareWithDefault(\"responseExtensions\", memberValue.responseExtensions));\r\n                    return comparisonResult;\r\n                }\r\n            case SIGNATURE_ALGORITHM$3:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case SIGNATURE$2:\r\n                return (memberValue.isEqual(BasicOCSPResponse.defaultValues(memberName)));\r\n            case CERTS$1:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || BASIC_OCSP_RESPONSE),\r\n            value: [\r\n                ResponseData.schema(names.tbsResponseData || {\r\n                    names: {\r\n                        blockName: BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA\r\n                    }\r\n                }),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n                    names: {\r\n                        blockName: BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM\r\n                    }\r\n                }),\r\n                new asn1js.BitString({ name: (names.signature || BASIC_OCSP_RESPONSE_SIGNATURE) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Sequence({\r\n                            value: [new asn1js.Repeated({\r\n                                    name: BASIC_OCSP_RESPONSE_CERTS,\r\n                                    value: Certificate.schema(names.certs || {})\r\n                                })]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$g);\r\n        const asn1 = asn1js.compareSchema(schema, schema, BasicOCSPResponse.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsResponseData = new ResponseData({ schema: asn1.result[BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA] });\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM] });\r\n        this.signature = asn1.result[BASIC_OCSP_RESPONSE_SIGNATURE];\r\n        if (BASIC_OCSP_RESPONSE_CERTS in asn1.result) {\r\n            this.certs = Array.from(asn1.result[BASIC_OCSP_RESPONSE_CERTS], element => new Certificate({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.tbsResponseData.toSchema());\r\n        outputArray.push(this.signatureAlgorithm.toSchema());\r\n        outputArray.push(this.signature);\r\n        if (this.certs) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Sequence({\r\n                        value: Array.from(this.certs, o => o.toSchema())\r\n                    })\r\n                ]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            tbsResponseData: this.tbsResponseData.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n        };\r\n        if (this.certs) {\r\n            res.certs = Array.from(this.certs, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\r\n        const result = {\r\n            isForCertificate: false,\r\n            status: 2\r\n        };\r\n        const hashesObject = {};\r\n        const certIDs = [];\r\n        for (const response of this.tbsResponseData.responses) {\r\n            const hashAlgorithm = crypto.getAlgorithmByOID(response.certID.hashAlgorithm.algorithmId, true, \"CertID.hashAlgorithm\");\r\n            if (!hashesObject[hashAlgorithm.name]) {\r\n                hashesObject[hashAlgorithm.name] = 1;\r\n                const certID = new CertID();\r\n                certIDs.push(certID);\r\n                await certID.createForCertificate(certificate, {\r\n                    hashAlgorithm: hashAlgorithm.name,\r\n                    issuerCertificate\r\n                }, crypto);\r\n            }\r\n        }\r\n        for (const response of this.tbsResponseData.responses) {\r\n            for (const id of certIDs) {\r\n                if (response.certID.isEqual(id)) {\r\n                    result.isForCertificate = true;\r\n                    try {\r\n                        switch (response.certStatus.idBlock.isConstructed) {\r\n                            case true:\r\n                                if (response.certStatus.idBlock.tagNumber === 1)\r\n                                    result.status = 1;\r\n                                break;\r\n                            case false:\r\n                                switch (response.certStatus.idBlock.tagNumber) {\r\n                                    case 0:\r\n                                        result.status = 0;\r\n                                        break;\r\n                                    case 2:\r\n                                        result.status = 2;\r\n                                        break;\r\n                                    default:\r\n                                }\r\n                                break;\r\n                            default:\r\n                        }\r\n                    }\r\n                    catch (ex) {\r\n                    }\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        if (!privateKey) {\r\n            throw new Error(\"Need to provide a private key for signing\");\r\n        }\r\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const algorithm = signatureParams.parameters.algorithm;\r\n        if (!(\"name\" in algorithm)) {\r\n            throw new Error(\"Empty algorithm\");\r\n        }\r\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\r\n        this.tbsResponseData.tbsView = new Uint8Array(this.tbsResponseData.toSchema(true).toBER());\r\n        const signature = await crypto.signWithPrivateKey(this.tbsResponseData.tbsView, privateKey, { algorithm });\r\n        this.signature = new asn1js.BitString({ valueHex: signature });\r\n    }\r\n    async verify(params = {}, crypto = getCrypto(true)) {\r\n        let signerCert = null;\r\n        let certIndex = -1;\r\n        const trustedCerts = params.trustedCerts || [];\r\n        if (!this.certs) {\r\n            throw new Error(\"No certificates attached to the BasicOCSPResponse\");\r\n        }\r\n        switch (true) {\r\n            case (this.tbsResponseData.responderID instanceof RelativeDistinguishedNames):\r\n                for (const [index, certificate] of this.certs.entries()) {\r\n                    if (certificate.subject.isEqual(this.tbsResponseData.responderID)) {\r\n                        certIndex = index;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            case (this.tbsResponseData.responderID instanceof asn1js.OctetString):\r\n                for (const [index, cert] of this.certs.entries()) {\r\n                    const hash = await crypto.digest({ name: \"sha-1\" }, cert.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\r\n                    if (pvutils.isEqualBuffer(hash, this.tbsResponseData.responderID.valueBlock.valueHex)) {\r\n                        certIndex = index;\r\n                        break;\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong value for responderID\");\r\n        }\r\n        if (certIndex === (-1))\r\n            throw new Error(\"Correct certificate was not found in OCSP response\");\r\n        signerCert = this.certs[certIndex];\r\n        const additionalCerts = [signerCert];\r\n        for (const cert of this.certs) {\r\n            const caCert = await checkCA(cert, signerCert);\r\n            if (caCert) {\r\n                additionalCerts.push(caCert);\r\n            }\r\n        }\r\n        const certChain = new CertificateChainValidationEngine({\r\n            certs: additionalCerts,\r\n            trustedCerts,\r\n        });\r\n        const verificationResult = await certChain.verify({}, crypto);\r\n        if (!verificationResult.result) {\r\n            throw new Error(\"Validation of signer's certificate failed\");\r\n        }\r\n        return crypto.verifyWithPublicKey(this.tbsResponseData.tbsView, this.signature, this.certs[certIndex].subjectPublicKeyInfo, this.signatureAlgorithm);\r\n    }\r\n}\r\nBasicOCSPResponse.CLASS_NAME = \"BasicOCSPResponse\";\n\nconst TBS$1 = \"tbs\";\r\nconst VERSION$6 = \"version\";\r\nconst SUBJECT = \"subject\";\r\nconst SPKI = \"subjectPublicKeyInfo\";\r\nconst ATTRIBUTES$1 = \"attributes\";\r\nconst SIGNATURE_ALGORITHM$2 = \"signatureAlgorithm\";\r\nconst SIGNATURE_VALUE = \"signatureValue\";\r\nconst CSR_INFO = \"CertificationRequestInfo\";\r\nconst CSR_INFO_VERSION = `${CSR_INFO}.version`;\r\nconst CSR_INFO_SUBJECT = `${CSR_INFO}.subject`;\r\nconst CSR_INFO_SPKI = `${CSR_INFO}.subjectPublicKeyInfo`;\r\nconst CSR_INFO_ATTRS = `${CSR_INFO}.attributes`;\r\nconst CLEAR_PROPS$f = [\r\n    CSR_INFO,\r\n    CSR_INFO_VERSION,\r\n    CSR_INFO_SUBJECT,\r\n    CSR_INFO_SPKI,\r\n    CSR_INFO_ATTRS,\r\n    SIGNATURE_ALGORITHM$2,\r\n    SIGNATURE_VALUE\r\n];\r\nfunction CertificationRequestInfo(parameters = {}) {\r\n    const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n    return (new asn1js.Sequence({\r\n        name: (names.CertificationRequestInfo || CSR_INFO),\r\n        value: [\r\n            new asn1js.Integer({ name: (names.CertificationRequestInfoVersion || CSR_INFO_VERSION) }),\r\n            RelativeDistinguishedNames.schema(names.subject || {\r\n                names: {\r\n                    blockName: CSR_INFO_SUBJECT\r\n                }\r\n            }),\r\n            PublicKeyInfo.schema({\r\n                names: {\r\n                    blockName: CSR_INFO_SPKI\r\n                }\r\n            }),\r\n            new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Repeated({\r\n                        optional: true,\r\n                        name: (names.CertificationRequestInfoAttributes || CSR_INFO_ATTRS),\r\n                        value: Attribute.schema(names.attributes || {})\r\n                    })\r\n                ]\r\n            })\r\n        ]\r\n    }));\r\n}\r\nclass CertificationRequest extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS$1, CertificationRequest.defaultValues(TBS$1)));\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$6, CertificationRequest.defaultValues(VERSION$6));\r\n        this.subject = pvutils.getParametersValue(parameters, SUBJECT, CertificationRequest.defaultValues(SUBJECT));\r\n        this.subjectPublicKeyInfo = pvutils.getParametersValue(parameters, SPKI, CertificationRequest.defaultValues(SPKI));\r\n        if (ATTRIBUTES$1 in parameters) {\r\n            this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES$1, CertificationRequest.defaultValues(ATTRIBUTES$1));\r\n        }\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$2, CertificationRequest.defaultValues(SIGNATURE_ALGORITHM$2));\r\n        this.signatureValue = pvutils.getParametersValue(parameters, SIGNATURE_VALUE, CertificationRequest.defaultValues(SIGNATURE_VALUE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get tbs() {\r\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\r\n    }\r\n    set tbs(value) {\r\n        this.tbsView = new Uint8Array(value);\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS$1:\r\n                return EMPTY_BUFFER;\r\n            case VERSION$6:\r\n                return 0;\r\n            case SUBJECT:\r\n                return new RelativeDistinguishedNames();\r\n            case SPKI:\r\n                return new PublicKeyInfo();\r\n            case ATTRIBUTES$1:\r\n                return [];\r\n            case SIGNATURE_ALGORITHM$2:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE_VALUE:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                CertificationRequestInfo(names.certificationRequestInfo || {}),\r\n                new asn1js.Sequence({\r\n                    name: (names.signatureAlgorithm || SIGNATURE_ALGORITHM$2),\r\n                    value: [\r\n                        new asn1js.ObjectIdentifier(),\r\n                        new asn1js.Any({ optional: true })\r\n                    ]\r\n                }),\r\n                new asn1js.BitString({ name: (names.signatureValue || SIGNATURE_VALUE) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$f);\r\n        const asn1 = asn1js.compareSchema(schema, schema, CertificationRequest.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsView = asn1.result.CertificationRequestInfo.valueBeforeDecodeView;\r\n        this.version = asn1.result[CSR_INFO_VERSION].valueBlock.valueDec;\r\n        this.subject = new RelativeDistinguishedNames({ schema: asn1.result[CSR_INFO_SUBJECT] });\r\n        this.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[CSR_INFO_SPKI] });\r\n        if (CSR_INFO_ATTRS in asn1.result) {\r\n            this.attributes = Array.from(asn1.result[CSR_INFO_ATTRS], element => new Attribute({ schema: element }));\r\n        }\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signatureValue = asn1.result.signatureValue;\r\n    }\r\n    encodeTBS() {\r\n        const outputArray = [\r\n            new asn1js.Integer({ value: this.version }),\r\n            this.subject.toSchema(),\r\n            this.subjectPublicKeyInfo.toSchema()\r\n        ];\r\n        if (ATTRIBUTES$1 in this) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: Array.from(this.attributes || [], o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        let tbsSchema;\r\n        if (encodeFlag === false) {\r\n            if (this.tbsView.byteLength === 0) {\r\n                return CertificationRequest.schema();\r\n            }\r\n            const asn1 = asn1js.fromBER(this.tbsView);\r\n            AsnError.assert(asn1, \"PKCS#10 Certificate Request\");\r\n            tbsSchema = asn1.result;\r\n        }\r\n        else {\r\n            tbsSchema = this.encodeTBS();\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                tbsSchema,\r\n                this.signatureAlgorithm.toSchema(),\r\n                this.signatureValue\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            tbs: pvtsutils.Convert.ToHex(this.tbsView),\r\n            version: this.version,\r\n            subject: this.subject.toJSON(),\r\n            subjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signatureValue: this.signatureValue.toJSON(),\r\n        };\r\n        if (ATTRIBUTES$1 in this) {\r\n            object.attributes = Array.from(this.attributes || [], o => o.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        if (!privateKey) {\r\n            throw new Error(\"Need to provide a private key for signing\");\r\n        }\r\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const parameters = signatureParams.parameters;\r\n        this.signatureAlgorithm = signatureParams.signatureAlgorithm;\r\n        this.tbsView = new Uint8Array(this.encodeTBS().toBER());\r\n        const signature = await crypto.signWithPrivateKey(this.tbsView, privateKey, parameters);\r\n        this.signatureValue = new asn1js.BitString({ valueHex: signature });\r\n    }\r\n    async verify(crypto = getCrypto(true)) {\r\n        return crypto.verifyWithPublicKey(this.tbsView, this.signatureValue, this.subjectPublicKeyInfo, this.signatureAlgorithm);\r\n    }\r\n    async getPublicKey(parameters, crypto = getCrypto(true)) {\r\n        return crypto.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n    }\r\n}\r\nCertificationRequest.CLASS_NAME = \"CertificationRequest\";\n\nconst DIGEST_ALGORITHM$1 = \"digestAlgorithm\";\r\nconst DIGEST = \"digest\";\r\nconst CLEAR_PROPS$e = [\r\n    DIGEST_ALGORITHM$1,\r\n    DIGEST\r\n];\r\nclass DigestInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM$1, DigestInfo.defaultValues(DIGEST_ALGORITHM$1));\r\n        this.digest = pvutils.getParametersValue(parameters, DIGEST, DigestInfo.defaultValues(DIGEST));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case DIGEST_ALGORITHM$1:\r\n                return new AlgorithmIdentifier();\r\n            case DIGEST:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case DIGEST_ALGORITHM$1:\r\n                return ((AlgorithmIdentifier.compareWithDefault(\"algorithmId\", memberValue.algorithmId)) &&\r\n                    ((\"algorithmParams\" in memberValue) === false));\r\n            case DIGEST:\r\n                return (memberValue.isEqual(DigestInfo.defaultValues(memberName)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n                    names: {\r\n                        blockName: DIGEST_ALGORITHM$1\r\n                    }\r\n                }),\r\n                new asn1js.OctetString({ name: (names.digest || DIGEST) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$e);\r\n        const asn1 = asn1js.compareSchema(schema, schema, DigestInfo.schema({\r\n            names: {\r\n                digestAlgorithm: {\r\n                    names: {\r\n                        blockName: DIGEST_ALGORITHM$1\r\n                    }\r\n                },\r\n                digest: DIGEST\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.digestAlgorithm });\r\n        this.digest = asn1.result.digest;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.digestAlgorithm.toSchema(),\r\n                this.digest\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\r\n            digest: this.digest.toJSON(),\r\n        };\r\n    }\r\n}\r\nDigestInfo.CLASS_NAME = \"DigestInfo\";\n\nconst E_CONTENT_TYPE = \"eContentType\";\r\nconst E_CONTENT = \"eContent\";\r\nconst CLEAR_PROPS$d = [\r\n    E_CONTENT_TYPE,\r\n    E_CONTENT,\r\n];\r\nclass EncapsulatedContentInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.eContentType = pvutils.getParametersValue(parameters, E_CONTENT_TYPE, EncapsulatedContentInfo.defaultValues(E_CONTENT_TYPE));\r\n        if (E_CONTENT in parameters) {\r\n            this.eContent = pvutils.getParametersValue(parameters, E_CONTENT, EncapsulatedContentInfo.defaultValues(E_CONTENT));\r\n            if ((this.eContent.idBlock.tagClass === 1) &&\r\n                (this.eContent.idBlock.tagNumber === 4)) {\r\n                if (this.eContent.idBlock.isConstructed === false) {\r\n                    const constrString = new asn1js.OctetString({\r\n                        idBlock: { isConstructed: true },\r\n                        isConstructed: true\r\n                    });\r\n                    let offset = 0;\r\n                    const viewHex = this.eContent.valueBlock.valueHexView.slice().buffer;\r\n                    let length = viewHex.byteLength;\r\n                    while (length > 0) {\r\n                        const pieceView = new Uint8Array(viewHex, offset, ((offset + 65536) > viewHex.byteLength) ? (viewHex.byteLength - offset) : 65536);\r\n                        const _array = new ArrayBuffer(pieceView.length);\r\n                        const _view = new Uint8Array(_array);\r\n                        for (let i = 0; i < _view.length; i++) {\r\n                            _view[i] = pieceView[i];\r\n                        }\r\n                        constrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n                        length -= pieceView.length;\r\n                        offset += pieceView.length;\r\n                    }\r\n                    this.eContent = constrString;\r\n                }\r\n            }\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case E_CONTENT_TYPE:\r\n                return EMPTY_STRING;\r\n            case E_CONTENT:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case E_CONTENT_TYPE:\r\n                return (memberValue === EMPTY_STRING);\r\n            case E_CONTENT:\r\n                {\r\n                    if ((memberValue.idBlock.tagClass === 1) && (memberValue.idBlock.tagNumber === 4))\r\n                        return (memberValue.isEqual(EncapsulatedContentInfo.defaultValues(E_CONTENT)));\r\n                    return false;\r\n                }\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.eContentType || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Any({ name: (names.eContent || EMPTY_STRING) })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$d);\r\n        const asn1 = asn1js.compareSchema(schema, schema, EncapsulatedContentInfo.schema({\r\n            names: {\r\n                eContentType: E_CONTENT_TYPE,\r\n                eContent: E_CONTENT\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.eContentType = asn1.result.eContentType.valueBlock.toString();\r\n        if (E_CONTENT in asn1.result)\r\n            this.eContent = asn1.result.eContent;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.eContentType }));\r\n        if (this.eContent) {\r\n            if (EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [this.eContent]\r\n                }));\r\n            }\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            eContentType: this.eContentType\r\n        };\r\n        if (this.eContent && EncapsulatedContentInfo.compareWithDefault(E_CONTENT, this.eContent) === false) {\r\n            res.eContent = this.eContent.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nEncapsulatedContentInfo.CLASS_NAME = \"EncapsulatedContentInfo\";\n\nclass KeyBag extends PrivateKeyInfo {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n    }\r\n}\n\nconst MAC = \"mac\";\r\nconst MAC_SALT = \"macSalt\";\r\nconst ITERATIONS = \"iterations\";\r\nconst CLEAR_PROPS$c = [\r\n    MAC,\r\n    MAC_SALT,\r\n    ITERATIONS\r\n];\r\nclass MacData extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.mac = pvutils.getParametersValue(parameters, MAC, MacData.defaultValues(MAC));\r\n        this.macSalt = pvutils.getParametersValue(parameters, MAC_SALT, MacData.defaultValues(MAC_SALT));\r\n        if (ITERATIONS in parameters) {\r\n            this.iterations = pvutils.getParametersValue(parameters, ITERATIONS, MacData.defaultValues(ITERATIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case MAC:\r\n                return new DigestInfo();\r\n            case MAC_SALT:\r\n                return new asn1js.OctetString();\r\n            case ITERATIONS:\r\n                return 1;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case MAC:\r\n                return ((DigestInfo.compareWithDefault(\"digestAlgorithm\", memberValue.digestAlgorithm)) &&\r\n                    (DigestInfo.compareWithDefault(\"digest\", memberValue.digest)));\r\n            case MAC_SALT:\r\n                return (memberValue.isEqual(MacData.defaultValues(memberName)));\r\n            case ITERATIONS:\r\n                return (memberValue === MacData.defaultValues(memberName));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            optional: (names.optional || true),\r\n            value: [\r\n                DigestInfo.schema(names.mac || {\r\n                    names: {\r\n                        blockName: MAC\r\n                    }\r\n                }),\r\n                new asn1js.OctetString({ name: (names.macSalt || MAC_SALT) }),\r\n                new asn1js.Integer({\r\n                    optional: true,\r\n                    name: (names.iterations || ITERATIONS)\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$c);\r\n        const asn1 = asn1js.compareSchema(schema, schema, MacData.schema({\r\n            names: {\r\n                mac: {\r\n                    names: {\r\n                        blockName: MAC\r\n                    }\r\n                },\r\n                macSalt: MAC_SALT,\r\n                iterations: ITERATIONS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.mac = new DigestInfo({ schema: asn1.result.mac });\r\n        this.macSalt = asn1.result.macSalt;\r\n        if (ITERATIONS in asn1.result)\r\n            this.iterations = asn1.result.iterations.valueBlock.valueDec;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            this.mac.toSchema(),\r\n            this.macSalt\r\n        ];\r\n        if (this.iterations !== undefined) {\r\n            outputArray.push(new asn1js.Integer({ value: this.iterations }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            mac: this.mac.toJSON(),\r\n            macSalt: this.macSalt.toJSON(),\r\n        };\r\n        if (this.iterations !== undefined) {\r\n            res.iterations = this.iterations;\r\n        }\r\n        return res;\r\n    }\r\n}\r\nMacData.CLASS_NAME = \"MacData\";\n\nconst HASH_ALGORITHM = \"hashAlgorithm\";\r\nconst HASHED_MESSAGE = \"hashedMessage\";\r\nconst CLEAR_PROPS$b = [\r\n    HASH_ALGORITHM,\r\n    HASHED_MESSAGE,\r\n];\r\nclass MessageImprint extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.hashAlgorithm = pvutils.getParametersValue(parameters, HASH_ALGORITHM, MessageImprint.defaultValues(HASH_ALGORITHM));\r\n        this.hashedMessage = pvutils.getParametersValue(parameters, HASHED_MESSAGE, MessageImprint.defaultValues(HASHED_MESSAGE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static async create(hashAlgorithm, message, crypto = getCrypto(true)) {\r\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\r\n        const hashedMessage = await crypto.digest(hashAlgorithm, message);\r\n        const res = new MessageImprint({\r\n            hashAlgorithm: new AlgorithmIdentifier({\r\n                algorithmId: hashAlgorithmOID,\r\n                algorithmParams: new asn1js.Null(),\r\n            }),\r\n            hashedMessage: new asn1js.OctetString({ valueHex: hashedMessage })\r\n        });\r\n        return res;\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case HASHED_MESSAGE:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case HASH_ALGORITHM:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case HASHED_MESSAGE:\r\n                return (memberValue.isEqual(MessageImprint.defaultValues(memberName)) === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.hashAlgorithm || {}),\r\n                new asn1js.OctetString({ name: (names.hashedMessage || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$b);\r\n        const asn1 = asn1js.compareSchema(schema, schema, MessageImprint.schema({\r\n            names: {\r\n                hashAlgorithm: {\r\n                    names: {\r\n                        blockName: HASH_ALGORITHM\r\n                    }\r\n                },\r\n                hashedMessage: HASHED_MESSAGE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n        this.hashedMessage = asn1.result.hashedMessage;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                this.hashAlgorithm.toSchema(),\r\n                this.hashedMessage\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            hashAlgorithm: this.hashAlgorithm.toJSON(),\r\n            hashedMessage: this.hashedMessage.toJSON(),\r\n        };\r\n    }\r\n}\r\nMessageImprint.CLASS_NAME = \"MessageImprint\";\n\nconst REQ_CERT = \"reqCert\";\r\nconst SINGLE_REQUEST_EXTENSIONS = \"singleRequestExtensions\";\r\nconst CLEAR_PROPS$a = [\r\n    REQ_CERT,\r\n    SINGLE_REQUEST_EXTENSIONS,\r\n];\r\nclass Request extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.reqCert = pvutils.getParametersValue(parameters, REQ_CERT, Request.defaultValues(REQ_CERT));\r\n        if (SINGLE_REQUEST_EXTENSIONS in parameters) {\r\n            this.singleRequestExtensions = pvutils.getParametersValue(parameters, SINGLE_REQUEST_EXTENSIONS, Request.defaultValues(SINGLE_REQUEST_EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case REQ_CERT:\r\n                return new CertID();\r\n            case SINGLE_REQUEST_EXTENSIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case REQ_CERT:\r\n                return (memberValue.isEqual(Request.defaultValues(memberName)));\r\n            case SINGLE_REQUEST_EXTENSIONS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                CertID.schema(names.reqCert || {}),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [Extension.schema(names.extensions || {\r\n                            names: {\r\n                                blockName: (names.singleRequestExtensions || EMPTY_STRING)\r\n                            }\r\n                        })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$a);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Request.schema({\r\n            names: {\r\n                reqCert: {\r\n                    names: {\r\n                        blockName: REQ_CERT\r\n                    }\r\n                },\r\n                extensions: {\r\n                    names: {\r\n                        blockName: SINGLE_REQUEST_EXTENSIONS\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.reqCert = new CertID({ schema: asn1.result.reqCert });\r\n        if (SINGLE_REQUEST_EXTENSIONS in asn1.result) {\r\n            this.singleRequestExtensions = Array.from(asn1.result.singleRequestExtensions.valueBlock.value, element => new Extension({ schema: element }));\r\n        }\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.reqCert.toSchema());\r\n        if (this.singleRequestExtensions) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Sequence({\r\n                        value: Array.from(this.singleRequestExtensions, o => o.toSchema())\r\n                    })\r\n                ]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            reqCert: this.reqCert.toJSON()\r\n        };\r\n        if (this.singleRequestExtensions) {\r\n            res.singleRequestExtensions = Array.from(this.singleRequestExtensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nRequest.CLASS_NAME = \"Request\";\n\nconst TBS = \"tbs\";\r\nconst VERSION$5 = \"version\";\r\nconst REQUESTOR_NAME = \"requestorName\";\r\nconst REQUEST_LIST = \"requestList\";\r\nconst REQUEST_EXTENSIONS = \"requestExtensions\";\r\nconst TBS_REQUEST$1 = \"TBSRequest\";\r\nconst TBS_REQUEST_VERSION = `${TBS_REQUEST$1}.${VERSION$5}`;\r\nconst TBS_REQUEST_REQUESTOR_NAME = `${TBS_REQUEST$1}.${REQUESTOR_NAME}`;\r\nconst TBS_REQUEST_REQUESTS = `${TBS_REQUEST$1}.requests`;\r\nconst TBS_REQUEST_REQUEST_EXTENSIONS = `${TBS_REQUEST$1}.${REQUEST_EXTENSIONS}`;\r\nconst CLEAR_PROPS$9 = [\r\n    TBS_REQUEST$1,\r\n    TBS_REQUEST_VERSION,\r\n    TBS_REQUEST_REQUESTOR_NAME,\r\n    TBS_REQUEST_REQUESTS,\r\n    TBS_REQUEST_REQUEST_EXTENSIONS\r\n];\r\nclass TBSRequest extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsView = new Uint8Array(pvutils.getParametersValue(parameters, TBS, TBSRequest.defaultValues(TBS)));\r\n        if (VERSION$5 in parameters) {\r\n            this.version = pvutils.getParametersValue(parameters, VERSION$5, TBSRequest.defaultValues(VERSION$5));\r\n        }\r\n        if (REQUESTOR_NAME in parameters) {\r\n            this.requestorName = pvutils.getParametersValue(parameters, REQUESTOR_NAME, TBSRequest.defaultValues(REQUESTOR_NAME));\r\n        }\r\n        this.requestList = pvutils.getParametersValue(parameters, REQUEST_LIST, TBSRequest.defaultValues(REQUEST_LIST));\r\n        if (REQUEST_EXTENSIONS in parameters) {\r\n            this.requestExtensions = pvutils.getParametersValue(parameters, REQUEST_EXTENSIONS, TBSRequest.defaultValues(REQUEST_EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    get tbs() {\r\n        return pvtsutils.BufferSourceConverter.toArrayBuffer(this.tbsView);\r\n    }\r\n    set tbs(value) {\r\n        this.tbsView = new Uint8Array(value);\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS:\r\n                return EMPTY_BUFFER;\r\n            case VERSION$5:\r\n                return 0;\r\n            case REQUESTOR_NAME:\r\n                return new GeneralName();\r\n            case REQUEST_LIST:\r\n            case REQUEST_EXTENSIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TBS:\r\n                return (memberValue.byteLength === 0);\r\n            case VERSION$5:\r\n                return (memberValue === TBSRequest.defaultValues(memberName));\r\n            case REQUESTOR_NAME:\r\n                return ((memberValue.type === GeneralName.defaultValues(\"type\")) && (Object.keys(memberValue.value).length === 0));\r\n            case REQUEST_LIST:\r\n            case REQUEST_EXTENSIONS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || TBS_REQUEST$1),\r\n            value: [\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Integer({ name: (names.TBSRequestVersion || TBS_REQUEST_VERSION) })]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [GeneralName.schema(names.requestorName || {\r\n                            names: {\r\n                                blockName: TBS_REQUEST_REQUESTOR_NAME\r\n                            }\r\n                        })]\r\n                }),\r\n                new asn1js.Sequence({\r\n                    name: (names.requestList || \"TBSRequest.requestList\"),\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.requests || TBS_REQUEST_REQUESTS),\r\n                            value: Request.schema(names.requestNames || {})\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: [Extensions.schema(names.extensions || {\r\n                            names: {\r\n                                blockName: (names.requestExtensions || TBS_REQUEST_REQUEST_EXTENSIONS)\r\n                            }\r\n                        })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$9);\r\n        const asn1 = asn1js.compareSchema(schema, schema, TBSRequest.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsView = asn1.result.TBSRequest.valueBeforeDecodeView;\r\n        if (TBS_REQUEST_VERSION in asn1.result)\r\n            this.version = asn1.result[TBS_REQUEST_VERSION].valueBlock.valueDec;\r\n        if (TBS_REQUEST_REQUESTOR_NAME in asn1.result)\r\n            this.requestorName = new GeneralName({ schema: asn1.result[TBS_REQUEST_REQUESTOR_NAME] });\r\n        this.requestList = Array.from(asn1.result[TBS_REQUEST_REQUESTS], element => new Request({ schema: element }));\r\n        if (TBS_REQUEST_REQUEST_EXTENSIONS in asn1.result)\r\n            this.requestExtensions = Array.from(asn1.result[TBS_REQUEST_REQUEST_EXTENSIONS].valueBlock.value, element => new Extension({ schema: element }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        let tbsSchema;\r\n        if (encodeFlag === false) {\r\n            if (this.tbsView.byteLength === 0)\r\n                return TBSRequest.schema();\r\n            const asn1 = asn1js.fromBER(this.tbsView);\r\n            AsnError.assert(asn1, \"TBS Request\");\r\n            if (!(asn1.result instanceof asn1js.Sequence)) {\r\n                throw new Error(\"ASN.1 result should be SEQUENCE\");\r\n            }\r\n            tbsSchema = asn1.result;\r\n        }\r\n        else {\r\n            const outputArray = [];\r\n            if (this.version !== undefined) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Integer({ value: this.version })]\r\n                }));\r\n            }\r\n            if (this.requestorName) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [this.requestorName.toSchema()]\r\n                }));\r\n            }\r\n            outputArray.push(new asn1js.Sequence({\r\n                value: Array.from(this.requestList, o => o.toSchema())\r\n            }));\r\n            if (this.requestExtensions) {\r\n                outputArray.push(new asn1js.Constructed({\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 2\r\n                    },\r\n                    value: [\r\n                        new asn1js.Sequence({\r\n                            value: Array.from(this.requestExtensions, o => o.toSchema())\r\n                        })\r\n                    ]\r\n                }));\r\n            }\r\n            tbsSchema = new asn1js.Sequence({\r\n                value: outputArray\r\n            });\r\n        }\r\n        return tbsSchema;\r\n    }\r\n    toJSON() {\r\n        const res = {};\r\n        if (this.version != undefined)\r\n            res.version = this.version;\r\n        if (this.requestorName) {\r\n            res.requestorName = this.requestorName.toJSON();\r\n        }\r\n        res.requestList = Array.from(this.requestList, o => o.toJSON());\r\n        if (this.requestExtensions) {\r\n            res.requestExtensions = Array.from(this.requestExtensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nTBSRequest.CLASS_NAME = \"TBSRequest\";\n\nconst SIGNATURE_ALGORITHM$1 = \"signatureAlgorithm\";\r\nconst SIGNATURE$1 = \"signature\";\r\nconst CERTS = \"certs\";\r\nclass Signature extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM$1, Signature.defaultValues(SIGNATURE_ALGORITHM$1));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE$1, Signature.defaultValues(SIGNATURE$1));\r\n        if (CERTS in parameters) {\r\n            this.certs = pvutils.getParametersValue(parameters, CERTS, Signature.defaultValues(CERTS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case SIGNATURE_ALGORITHM$1:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE$1:\r\n                return new asn1js.BitString();\r\n            case CERTS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case SIGNATURE_ALGORITHM$1:\r\n                return ((memberValue.algorithmId === EMPTY_STRING) && ((\"algorithmParams\" in memberValue) === false));\r\n            case SIGNATURE$1:\r\n                return (memberValue.isEqual(Signature.defaultValues(memberName)));\r\n            case CERTS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {}),\r\n                new asn1js.BitString({ name: (names.signature || EMPTY_STRING) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        new asn1js.Sequence({\r\n                            value: [new asn1js.Repeated({\r\n                                    name: (names.certs || EMPTY_STRING),\r\n                                    value: Certificate.schema({})\r\n                                })]\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            SIGNATURE_ALGORITHM$1,\r\n            SIGNATURE$1,\r\n            CERTS\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, Signature.schema({\r\n            names: {\r\n                signatureAlgorithm: {\r\n                    names: {\r\n                        blockName: SIGNATURE_ALGORITHM$1\r\n                    }\r\n                },\r\n                signature: SIGNATURE$1,\r\n                certs: CERTS\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n        this.signature = asn1.result.signature;\r\n        if (CERTS in asn1.result)\r\n            this.certs = Array.from(asn1.result.certs, element => new Certificate({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.signatureAlgorithm.toSchema());\r\n        outputArray.push(this.signature);\r\n        if (this.certs) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    new asn1js.Sequence({\r\n                        value: Array.from(this.certs, o => o.toSchema())\r\n                    })\r\n                ]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n        };\r\n        if (this.certs) {\r\n            res.certs = Array.from(this.certs, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nSignature.CLASS_NAME = \"Signature\";\n\nconst TBS_REQUEST = \"tbsRequest\";\r\nconst OPTIONAL_SIGNATURE = \"optionalSignature\";\r\nconst CLEAR_PROPS$8 = [\r\n    TBS_REQUEST,\r\n    OPTIONAL_SIGNATURE\r\n];\r\nclass OCSPRequest extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.tbsRequest = pvutils.getParametersValue(parameters, TBS_REQUEST, OCSPRequest.defaultValues(TBS_REQUEST));\r\n        if (OPTIONAL_SIGNATURE in parameters) {\r\n            this.optionalSignature = pvutils.getParametersValue(parameters, OPTIONAL_SIGNATURE, OCSPRequest.defaultValues(OPTIONAL_SIGNATURE));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TBS_REQUEST:\r\n                return new TBSRequest();\r\n            case OPTIONAL_SIGNATURE:\r\n                return new Signature();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TBS_REQUEST:\r\n                return ((TBSRequest.compareWithDefault(\"tbs\", memberValue.tbs)) &&\r\n                    (TBSRequest.compareWithDefault(\"version\", memberValue.version)) &&\r\n                    (TBSRequest.compareWithDefault(\"requestorName\", memberValue.requestorName)) &&\r\n                    (TBSRequest.compareWithDefault(\"requestList\", memberValue.requestList)) &&\r\n                    (TBSRequest.compareWithDefault(\"requestExtensions\", memberValue.requestExtensions)));\r\n            case OPTIONAL_SIGNATURE:\r\n                return ((Signature.compareWithDefault(\"signatureAlgorithm\", memberValue.signatureAlgorithm)) &&\r\n                    (Signature.compareWithDefault(\"signature\", memberValue.signature)) &&\r\n                    (Signature.compareWithDefault(\"certs\", memberValue.certs)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: names.blockName || \"OCSPRequest\",\r\n            value: [\r\n                TBSRequest.schema(names.tbsRequest || {\r\n                    names: {\r\n                        blockName: TBS_REQUEST\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        Signature.schema(names.optionalSignature || {\r\n                            names: {\r\n                                blockName: OPTIONAL_SIGNATURE\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$8);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPRequest.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.tbsRequest = new TBSRequest({ schema: asn1.result.tbsRequest });\r\n        if (OPTIONAL_SIGNATURE in asn1.result)\r\n            this.optionalSignature = new Signature({ schema: asn1.result.optionalSignature });\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        const outputArray = [];\r\n        outputArray.push(this.tbsRequest.toSchema(encodeFlag));\r\n        if (this.optionalSignature)\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [\r\n                    this.optionalSignature.toSchema()\r\n                ]\r\n            }));\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            tbsRequest: this.tbsRequest.toJSON()\r\n        };\r\n        if (this.optionalSignature) {\r\n            res.optionalSignature = this.optionalSignature.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n    async createForCertificate(certificate, parameters, crypto = getCrypto(true)) {\r\n        const certID = new CertID();\r\n        await certID.createForCertificate(certificate, parameters, crypto);\r\n        this.tbsRequest.requestList.push(new Request({\r\n            reqCert: certID,\r\n        }));\r\n    }\r\n    async sign(privateKey, hashAlgorithm = \"SHA-1\", crypto = getCrypto(true)) {\r\n        ParameterError.assertEmpty(privateKey, \"privateKey\", \"OCSPRequest.sign method\");\r\n        if (!this.optionalSignature) {\r\n            throw new Error(\"Need to create \\\"optionalSignature\\\" field before signing\");\r\n        }\r\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const parameters = signatureParams.parameters;\r\n        this.optionalSignature.signatureAlgorithm = signatureParams.signatureAlgorithm;\r\n        const tbs = this.tbsRequest.toSchema(true).toBER(false);\r\n        const signature = await crypto.signWithPrivateKey(tbs, privateKey, parameters);\r\n        this.optionalSignature.signature = new asn1js.BitString({ valueHex: signature });\r\n    }\r\n    verify() {\r\n    }\r\n}\r\nOCSPRequest.CLASS_NAME = \"OCSPRequest\";\n\nconst RESPONSE_TYPE = \"responseType\";\r\nconst RESPONSE = \"response\";\r\nconst CLEAR_PROPS$7 = [\r\n    RESPONSE_TYPE,\r\n    RESPONSE\r\n];\r\nclass ResponseBytes extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.responseType = pvutils.getParametersValue(parameters, RESPONSE_TYPE, ResponseBytes.defaultValues(RESPONSE_TYPE));\r\n        this.response = pvutils.getParametersValue(parameters, RESPONSE, ResponseBytes.defaultValues(RESPONSE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case RESPONSE_TYPE:\r\n                return EMPTY_STRING;\r\n            case RESPONSE:\r\n                return new asn1js.OctetString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case RESPONSE_TYPE:\r\n                return (memberValue === EMPTY_STRING);\r\n            case RESPONSE:\r\n                return (memberValue.isEqual(ResponseBytes.defaultValues(memberName)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ name: (names.responseType || EMPTY_STRING) }),\r\n                new asn1js.OctetString({ name: (names.response || EMPTY_STRING) })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$7);\r\n        const asn1 = asn1js.compareSchema(schema, schema, ResponseBytes.schema({\r\n            names: {\r\n                responseType: RESPONSE_TYPE,\r\n                response: RESPONSE\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.responseType = asn1.result.responseType.valueBlock.toString();\r\n        this.response = asn1.result.response;\r\n    }\r\n    toSchema() {\r\n        return (new asn1js.Sequence({\r\n            value: [\r\n                new asn1js.ObjectIdentifier({ value: this.responseType }),\r\n                this.response\r\n            ]\r\n        }));\r\n    }\r\n    toJSON() {\r\n        return {\r\n            responseType: this.responseType,\r\n            response: this.response.toJSON(),\r\n        };\r\n    }\r\n}\r\nResponseBytes.CLASS_NAME = \"ResponseBytes\";\n\nconst RESPONSE_STATUS = \"responseStatus\";\r\nconst RESPONSE_BYTES = \"responseBytes\";\r\nclass OCSPResponse extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.responseStatus = pvutils.getParametersValue(parameters, RESPONSE_STATUS, OCSPResponse.defaultValues(RESPONSE_STATUS));\r\n        if (RESPONSE_BYTES in parameters) {\r\n            this.responseBytes = pvutils.getParametersValue(parameters, RESPONSE_BYTES, OCSPResponse.defaultValues(RESPONSE_BYTES));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case RESPONSE_STATUS:\r\n                return new asn1js.Enumerated();\r\n            case RESPONSE_BYTES:\r\n                return new ResponseBytes();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case RESPONSE_STATUS:\r\n                return (memberValue.isEqual(OCSPResponse.defaultValues(memberName)));\r\n            case RESPONSE_BYTES:\r\n                return ((ResponseBytes.compareWithDefault(\"responseType\", memberValue.responseType)) &&\r\n                    (ResponseBytes.compareWithDefault(\"response\", memberValue.response)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || \"OCSPResponse\"),\r\n            value: [\r\n                new asn1js.Enumerated({ name: (names.responseStatus || RESPONSE_STATUS) }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [\r\n                        ResponseBytes.schema(names.responseBytes || {\r\n                            names: {\r\n                                blockName: RESPONSE_BYTES\r\n                            }\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, [\r\n            RESPONSE_STATUS,\r\n            RESPONSE_BYTES\r\n        ]);\r\n        const asn1 = asn1js.compareSchema(schema, schema, OCSPResponse.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.responseStatus = asn1.result.responseStatus;\r\n        if (RESPONSE_BYTES in asn1.result)\r\n            this.responseBytes = new ResponseBytes({ schema: asn1.result.responseBytes });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.responseStatus);\r\n        if (this.responseBytes) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.responseBytes.toSchema()]\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            responseStatus: this.responseStatus.toJSON()\r\n        };\r\n        if (this.responseBytes) {\r\n            res.responseBytes = this.responseBytes.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n    async getCertificateStatus(certificate, issuerCertificate, crypto = getCrypto(true)) {\r\n        let basicResponse;\r\n        const result = {\r\n            isForCertificate: false,\r\n            status: 2\r\n        };\r\n        if (!this.responseBytes)\r\n            return result;\r\n        if (this.responseBytes.responseType !== id_PKIX_OCSP_Basic)\r\n            return result;\r\n        try {\r\n            const asn1Basic = asn1js.fromBER(this.responseBytes.response.valueBlock.valueHexView);\r\n            AsnError.assert(asn1Basic, \"Basic OCSP response\");\r\n            basicResponse = new BasicOCSPResponse({ schema: asn1Basic.result });\r\n        }\r\n        catch (ex) {\r\n            return result;\r\n        }\r\n        return basicResponse.getCertificateStatus(certificate, issuerCertificate, crypto);\r\n    }\r\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\r\n        var _a;\r\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\r\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\r\n            return basicResponse.sign(privateKey, hashAlgorithm, crypto);\r\n        }\r\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\r\n    }\r\n    async verify(issuerCertificate = null, crypto = getCrypto(true)) {\r\n        var _a;\r\n        if ((RESPONSE_BYTES in this) === false)\r\n            throw new Error(\"Empty ResponseBytes field\");\r\n        if (this.responseBytes && this.responseBytes.responseType === id_PKIX_OCSP_Basic) {\r\n            const basicResponse = BasicOCSPResponse.fromBER(this.responseBytes.response.valueBlock.valueHexView);\r\n            if (issuerCertificate !== null) {\r\n                if (!basicResponse.certs) {\r\n                    basicResponse.certs = [];\r\n                }\r\n                basicResponse.certs.push(issuerCertificate);\r\n            }\r\n            return basicResponse.verify({}, crypto);\r\n        }\r\n        throw new Error(`Unknown ResponseBytes type: ${((_a = this.responseBytes) === null || _a === void 0 ? void 0 : _a.responseType) || \"Unknown\"}`);\r\n    }\r\n}\r\nOCSPResponse.CLASS_NAME = \"OCSPResponse\";\n\nconst TYPE = \"type\";\r\nconst ATTRIBUTES = \"attributes\";\r\nconst ENCODED_VALUE = \"encodedValue\";\r\nconst CLEAR_PROPS$6 = [\r\n    ATTRIBUTES\r\n];\r\nclass SignedAndUnsignedAttributes extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.type = pvutils.getParametersValue(parameters, TYPE, SignedAndUnsignedAttributes.defaultValues(TYPE));\r\n        this.attributes = pvutils.getParametersValue(parameters, ATTRIBUTES, SignedAndUnsignedAttributes.defaultValues(ATTRIBUTES));\r\n        this.encodedValue = pvutils.getParametersValue(parameters, ENCODED_VALUE, SignedAndUnsignedAttributes.defaultValues(ENCODED_VALUE));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case TYPE:\r\n                return (-1);\r\n            case ATTRIBUTES:\r\n                return [];\r\n            case ENCODED_VALUE:\r\n                return EMPTY_BUFFER;\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case TYPE:\r\n                return (memberValue === SignedAndUnsignedAttributes.defaultValues(TYPE));\r\n            case ATTRIBUTES:\r\n                return (memberValue.length === 0);\r\n            case ENCODED_VALUE:\r\n                return (memberValue.byteLength === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Constructed({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            optional: true,\r\n            idBlock: {\r\n                tagClass: 3,\r\n                tagNumber: names.tagNumber || 0\r\n            },\r\n            value: [\r\n                new asn1js.Repeated({\r\n                    name: (names.attributes || EMPTY_STRING),\r\n                    value: Attribute.schema()\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$6);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SignedAndUnsignedAttributes.schema({\r\n            names: {\r\n                tagNumber: this.type,\r\n                attributes: ATTRIBUTES\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.type = asn1.result.idBlock.tagNumber;\r\n        this.encodedValue = pvtsutils.BufferSourceConverter.toArrayBuffer(asn1.result.valueBeforeDecodeView);\r\n        const encodedView = new Uint8Array(this.encodedValue);\r\n        encodedView[0] = 0x31;\r\n        if ((ATTRIBUTES in asn1.result) === false) {\r\n            if (this.type === 0)\r\n                throw new Error(\"Wrong structure of SignedUnsignedAttributes\");\r\n            else\r\n                return;\r\n        }\r\n        this.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\r\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n        return (new asn1js.Constructed({\r\n            optional: true,\r\n            idBlock: {\r\n                tagClass: 3,\r\n                tagNumber: this.type\r\n            },\r\n            value: Array.from(this.attributes, o => o.toSchema())\r\n        }));\r\n    }\r\n    toJSON() {\r\n        if (SignedAndUnsignedAttributes.compareWithDefault(TYPE, this.type) || SignedAndUnsignedAttributes.compareWithDefault(ATTRIBUTES, this.attributes))\r\n            throw new Error(\"Incorrectly initialized \\\"SignedAndUnsignedAttributes\\\" class\");\r\n        return {\r\n            type: this.type,\r\n            attributes: Array.from(this.attributes, o => o.toJSON())\r\n        };\r\n    }\r\n}\r\nSignedAndUnsignedAttributes.CLASS_NAME = \"SignedAndUnsignedAttributes\";\n\nconst VERSION$4 = \"version\";\r\nconst SID = \"sid\";\r\nconst DIGEST_ALGORITHM = \"digestAlgorithm\";\r\nconst SIGNED_ATTRS = \"signedAttrs\";\r\nconst SIGNATURE_ALGORITHM = \"signatureAlgorithm\";\r\nconst SIGNATURE = \"signature\";\r\nconst UNSIGNED_ATTRS = \"unsignedAttrs\";\r\nconst SIGNER_INFO = \"SignerInfo\";\r\nconst SIGNER_INFO_VERSION = `${SIGNER_INFO}.${VERSION$4}`;\r\nconst SIGNER_INFO_SID = `${SIGNER_INFO}.${SID}`;\r\nconst SIGNER_INFO_DIGEST_ALGORITHM = `${SIGNER_INFO}.${DIGEST_ALGORITHM}`;\r\nconst SIGNER_INFO_SIGNED_ATTRS = `${SIGNER_INFO}.${SIGNED_ATTRS}`;\r\nconst SIGNER_INFO_SIGNATURE_ALGORITHM = `${SIGNER_INFO}.${SIGNATURE_ALGORITHM}`;\r\nconst SIGNER_INFO_SIGNATURE = `${SIGNER_INFO}.${SIGNATURE}`;\r\nconst SIGNER_INFO_UNSIGNED_ATTRS = `${SIGNER_INFO}.${UNSIGNED_ATTRS}`;\r\nconst CLEAR_PROPS$5 = [\r\n    SIGNER_INFO_VERSION,\r\n    SIGNER_INFO_SID,\r\n    SIGNER_INFO_DIGEST_ALGORITHM,\r\n    SIGNER_INFO_SIGNED_ATTRS,\r\n    SIGNER_INFO_SIGNATURE_ALGORITHM,\r\n    SIGNER_INFO_SIGNATURE,\r\n    SIGNER_INFO_UNSIGNED_ATTRS\r\n];\r\nclass SignerInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$4, SignerInfo.defaultValues(VERSION$4));\r\n        this.sid = pvutils.getParametersValue(parameters, SID, SignerInfo.defaultValues(SID));\r\n        this.digestAlgorithm = pvutils.getParametersValue(parameters, DIGEST_ALGORITHM, SignerInfo.defaultValues(DIGEST_ALGORITHM));\r\n        if (SIGNED_ATTRS in parameters) {\r\n            this.signedAttrs = pvutils.getParametersValue(parameters, SIGNED_ATTRS, SignerInfo.defaultValues(SIGNED_ATTRS));\r\n        }\r\n        this.signatureAlgorithm = pvutils.getParametersValue(parameters, SIGNATURE_ALGORITHM, SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\r\n        this.signature = pvutils.getParametersValue(parameters, SIGNATURE, SignerInfo.defaultValues(SIGNATURE));\r\n        if (UNSIGNED_ATTRS in parameters) {\r\n            this.unsignedAttrs = pvutils.getParametersValue(parameters, UNSIGNED_ATTRS, SignerInfo.defaultValues(UNSIGNED_ATTRS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$4:\r\n                return 0;\r\n            case SID:\r\n                return new asn1js.Any();\r\n            case DIGEST_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNED_ATTRS:\r\n                return new SignedAndUnsignedAttributes({ type: 0 });\r\n            case SIGNATURE_ALGORITHM:\r\n                return new AlgorithmIdentifier();\r\n            case SIGNATURE:\r\n                return new asn1js.OctetString();\r\n            case UNSIGNED_ATTRS:\r\n                return new SignedAndUnsignedAttributes({ type: 1 });\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$4:\r\n                return (SignerInfo.defaultValues(VERSION$4) === memberValue);\r\n            case SID:\r\n                return (memberValue instanceof asn1js.Any);\r\n            case DIGEST_ALGORITHM:\r\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\r\n                    return false;\r\n                return memberValue.isEqual(SignerInfo.defaultValues(DIGEST_ALGORITHM));\r\n            case SIGNED_ATTRS:\r\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n            case SIGNATURE_ALGORITHM:\r\n                if ((memberValue instanceof AlgorithmIdentifier) === false)\r\n                    return false;\r\n                return memberValue.isEqual(SignerInfo.defaultValues(SIGNATURE_ALGORITHM));\r\n            case SIGNATURE:\r\n            case UNSIGNED_ATTRS:\r\n                return ((SignedAndUnsignedAttributes.compareWithDefault(\"type\", memberValue.type))\r\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"attributes\", memberValue.attributes))\r\n                    && (SignedAndUnsignedAttributes.compareWithDefault(\"encodedValue\", memberValue.encodedValue)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: SIGNER_INFO,\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || SIGNER_INFO_VERSION) }),\r\n                new asn1js.Choice({\r\n                    value: [\r\n                        IssuerAndSerialNumber.schema(names.sidSchema || {\r\n                            names: {\r\n                                blockName: SIGNER_INFO_SID\r\n                            }\r\n                        }),\r\n                        new asn1js.Choice({\r\n                            value: [\r\n                                new asn1js.Constructed({\r\n                                    optional: true,\r\n                                    name: (names.sid || SIGNER_INFO_SID),\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 0\r\n                                    },\r\n                                    value: [new asn1js.OctetString()]\r\n                                }),\r\n                                new asn1js.Primitive({\r\n                                    optional: true,\r\n                                    name: (names.sid || SIGNER_INFO_SID),\r\n                                    idBlock: {\r\n                                        tagClass: 3,\r\n                                        tagNumber: 0\r\n                                    }\r\n                                }),\r\n                            ]\r\n                        }),\r\n                    ]\r\n                }),\r\n                AlgorithmIdentifier.schema(names.digestAlgorithm || {\r\n                    names: {\r\n                        blockName: SIGNER_INFO_DIGEST_ALGORITHM\r\n                    }\r\n                }),\r\n                SignedAndUnsignedAttributes.schema(names.signedAttrs || {\r\n                    names: {\r\n                        blockName: SIGNER_INFO_SIGNED_ATTRS,\r\n                        tagNumber: 0\r\n                    }\r\n                }),\r\n                AlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n                    names: {\r\n                        blockName: SIGNER_INFO_SIGNATURE_ALGORITHM\r\n                    }\r\n                }),\r\n                new asn1js.OctetString({ name: (names.signature || SIGNER_INFO_SIGNATURE) }),\r\n                SignedAndUnsignedAttributes.schema(names.unsignedAttrs || {\r\n                    names: {\r\n                        blockName: SIGNER_INFO_UNSIGNED_ATTRS,\r\n                        tagNumber: 1\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$5);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SignerInfo.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result[SIGNER_INFO_VERSION].valueBlock.valueDec;\r\n        const currentSid = asn1.result[SIGNER_INFO_SID];\r\n        if (currentSid.idBlock.tagClass === 1)\r\n            this.sid = new IssuerAndSerialNumber({ schema: currentSid });\r\n        else\r\n            this.sid = currentSid;\r\n        this.digestAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_DIGEST_ALGORITHM] });\r\n        if (SIGNER_INFO_SIGNED_ATTRS in asn1.result)\r\n            this.signedAttrs = new SignedAndUnsignedAttributes({ type: 0, schema: asn1.result[SIGNER_INFO_SIGNED_ATTRS] });\r\n        this.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result[SIGNER_INFO_SIGNATURE_ALGORITHM] });\r\n        this.signature = asn1.result[SIGNER_INFO_SIGNATURE];\r\n        if (SIGNER_INFO_UNSIGNED_ATTRS in asn1.result)\r\n            this.unsignedAttrs = new SignedAndUnsignedAttributes({ type: 1, schema: asn1.result[SIGNER_INFO_UNSIGNED_ATTRS] });\r\n    }\r\n    toSchema() {\r\n        if (SignerInfo.compareWithDefault(SID, this.sid))\r\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        if (this.sid instanceof IssuerAndSerialNumber)\r\n            outputArray.push(this.sid.toSchema());\r\n        else\r\n            outputArray.push(this.sid);\r\n        outputArray.push(this.digestAlgorithm.toSchema());\r\n        if (this.signedAttrs) {\r\n            if (SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false)\r\n                outputArray.push(this.signedAttrs.toSchema());\r\n        }\r\n        outputArray.push(this.signatureAlgorithm.toSchema());\r\n        outputArray.push(this.signature);\r\n        if (this.unsignedAttrs) {\r\n            if (SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false)\r\n                outputArray.push(this.unsignedAttrs.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        if (SignerInfo.compareWithDefault(SID, this.sid)) {\r\n            throw new Error(\"Incorrectly initialized \\\"SignerInfo\\\" class\");\r\n        }\r\n        const res = {\r\n            version: this.version,\r\n            digestAlgorithm: this.digestAlgorithm.toJSON(),\r\n            signatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n            signature: this.signature.toJSON(),\r\n        };\r\n        if (!(this.sid instanceof asn1js.Any))\r\n            res.sid = this.sid.toJSON();\r\n        if (this.signedAttrs && SignerInfo.compareWithDefault(SIGNED_ATTRS, this.signedAttrs) === false) {\r\n            res.signedAttrs = this.signedAttrs.toJSON();\r\n        }\r\n        if (this.unsignedAttrs && SignerInfo.compareWithDefault(UNSIGNED_ATTRS, this.unsignedAttrs) === false) {\r\n            res.unsignedAttrs = this.unsignedAttrs.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nSignerInfo.CLASS_NAME = \"SignerInfo\";\n\nconst VERSION$3 = \"version\";\r\nconst POLICY = \"policy\";\r\nconst MESSAGE_IMPRINT$1 = \"messageImprint\";\r\nconst SERIAL_NUMBER = \"serialNumber\";\r\nconst GEN_TIME = \"genTime\";\r\nconst ORDERING = \"ordering\";\r\nconst NONCE$1 = \"nonce\";\r\nconst ACCURACY = \"accuracy\";\r\nconst TSA = \"tsa\";\r\nconst EXTENSIONS$1 = \"extensions\";\r\nconst TST_INFO = \"TSTInfo\";\r\nconst TST_INFO_VERSION = `${TST_INFO}.${VERSION$3}`;\r\nconst TST_INFO_POLICY = `${TST_INFO}.${POLICY}`;\r\nconst TST_INFO_MESSAGE_IMPRINT = `${TST_INFO}.${MESSAGE_IMPRINT$1}`;\r\nconst TST_INFO_SERIAL_NUMBER = `${TST_INFO}.${SERIAL_NUMBER}`;\r\nconst TST_INFO_GEN_TIME = `${TST_INFO}.${GEN_TIME}`;\r\nconst TST_INFO_ACCURACY = `${TST_INFO}.${ACCURACY}`;\r\nconst TST_INFO_ORDERING = `${TST_INFO}.${ORDERING}`;\r\nconst TST_INFO_NONCE = `${TST_INFO}.${NONCE$1}`;\r\nconst TST_INFO_TSA = `${TST_INFO}.${TSA}`;\r\nconst TST_INFO_EXTENSIONS = `${TST_INFO}.${EXTENSIONS$1}`;\r\nconst CLEAR_PROPS$4 = [\r\n    TST_INFO_VERSION,\r\n    TST_INFO_POLICY,\r\n    TST_INFO_MESSAGE_IMPRINT,\r\n    TST_INFO_SERIAL_NUMBER,\r\n    TST_INFO_GEN_TIME,\r\n    TST_INFO_ACCURACY,\r\n    TST_INFO_ORDERING,\r\n    TST_INFO_NONCE,\r\n    TST_INFO_TSA,\r\n    TST_INFO_EXTENSIONS\r\n];\r\nclass TSTInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$3, TSTInfo.defaultValues(VERSION$3));\r\n        this.policy = pvutils.getParametersValue(parameters, POLICY, TSTInfo.defaultValues(POLICY));\r\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT$1, TSTInfo.defaultValues(MESSAGE_IMPRINT$1));\r\n        this.serialNumber = pvutils.getParametersValue(parameters, SERIAL_NUMBER, TSTInfo.defaultValues(SERIAL_NUMBER));\r\n        this.genTime = pvutils.getParametersValue(parameters, GEN_TIME, TSTInfo.defaultValues(GEN_TIME));\r\n        if (ACCURACY in parameters) {\r\n            this.accuracy = pvutils.getParametersValue(parameters, ACCURACY, TSTInfo.defaultValues(ACCURACY));\r\n        }\r\n        if (ORDERING in parameters) {\r\n            this.ordering = pvutils.getParametersValue(parameters, ORDERING, TSTInfo.defaultValues(ORDERING));\r\n        }\r\n        if (NONCE$1 in parameters) {\r\n            this.nonce = pvutils.getParametersValue(parameters, NONCE$1, TSTInfo.defaultValues(NONCE$1));\r\n        }\r\n        if (TSA in parameters) {\r\n            this.tsa = pvutils.getParametersValue(parameters, TSA, TSTInfo.defaultValues(TSA));\r\n        }\r\n        if (EXTENSIONS$1 in parameters) {\r\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS$1, TSTInfo.defaultValues(EXTENSIONS$1));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$3:\r\n                return 0;\r\n            case POLICY:\r\n                return EMPTY_STRING;\r\n            case MESSAGE_IMPRINT$1:\r\n                return new MessageImprint();\r\n            case SERIAL_NUMBER:\r\n                return new asn1js.Integer();\r\n            case GEN_TIME:\r\n                return new Date(0, 0, 0);\r\n            case ACCURACY:\r\n                return new Accuracy();\r\n            case ORDERING:\r\n                return false;\r\n            case NONCE$1:\r\n                return new asn1js.Integer();\r\n            case TSA:\r\n                return new GeneralName();\r\n            case EXTENSIONS$1:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$3:\r\n            case POLICY:\r\n            case GEN_TIME:\r\n            case ORDERING:\r\n                return (memberValue === TSTInfo.defaultValues(ORDERING));\r\n            case MESSAGE_IMPRINT$1:\r\n                return ((MessageImprint.compareWithDefault(HASH_ALGORITHM, memberValue.hashAlgorithm)) &&\r\n                    (MessageImprint.compareWithDefault(HASHED_MESSAGE, memberValue.hashedMessage)));\r\n            case SERIAL_NUMBER:\r\n            case NONCE$1:\r\n                return (memberValue.isEqual(TSTInfo.defaultValues(NONCE$1)));\r\n            case ACCURACY:\r\n                return ((Accuracy.compareWithDefault(SECONDS, memberValue.seconds)) &&\r\n                    (Accuracy.compareWithDefault(MILLIS, memberValue.millis)) &&\r\n                    (Accuracy.compareWithDefault(MICROS, memberValue.micros)));\r\n            case TSA:\r\n                return ((GeneralName.compareWithDefault(TYPE$4, memberValue.type)) &&\r\n                    (GeneralName.compareWithDefault(VALUE$5, memberValue.value)));\r\n            case EXTENSIONS$1:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || TST_INFO),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || TST_INFO_VERSION) }),\r\n                new asn1js.ObjectIdentifier({ name: (names.policy || TST_INFO_POLICY) }),\r\n                MessageImprint.schema(names.messageImprint || {\r\n                    names: {\r\n                        blockName: TST_INFO_MESSAGE_IMPRINT\r\n                    }\r\n                }),\r\n                new asn1js.Integer({ name: (names.serialNumber || TST_INFO_SERIAL_NUMBER) }),\r\n                new asn1js.GeneralizedTime({ name: (names.genTime || TST_INFO_GEN_TIME) }),\r\n                Accuracy.schema(names.accuracy || {\r\n                    names: {\r\n                        blockName: TST_INFO_ACCURACY\r\n                    }\r\n                }),\r\n                new asn1js.Boolean({\r\n                    name: (names.ordering || TST_INFO_ORDERING),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Integer({\r\n                    name: (names.nonce || TST_INFO_NONCE),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [GeneralName.schema(names.tsa || {\r\n                            names: {\r\n                                blockName: TST_INFO_TSA\r\n                            }\r\n                        })]\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.extensions || TST_INFO_EXTENSIONS),\r\n                            value: Extension.schema(names.extension || {})\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$4);\r\n        const asn1 = asn1js.compareSchema(schema, schema, TSTInfo.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result[TST_INFO_VERSION].valueBlock.valueDec;\r\n        this.policy = asn1.result[TST_INFO_POLICY].valueBlock.toString();\r\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TST_INFO_MESSAGE_IMPRINT] });\r\n        this.serialNumber = asn1.result[TST_INFO_SERIAL_NUMBER];\r\n        this.genTime = asn1.result[TST_INFO_GEN_TIME].toDate();\r\n        if (TST_INFO_ACCURACY in asn1.result)\r\n            this.accuracy = new Accuracy({ schema: asn1.result[TST_INFO_ACCURACY] });\r\n        if (TST_INFO_ORDERING in asn1.result)\r\n            this.ordering = asn1.result[TST_INFO_ORDERING].valueBlock.value;\r\n        if (TST_INFO_NONCE in asn1.result)\r\n            this.nonce = asn1.result[TST_INFO_NONCE];\r\n        if (TST_INFO_TSA in asn1.result)\r\n            this.tsa = new GeneralName({ schema: asn1.result[TST_INFO_TSA] });\r\n        if (TST_INFO_EXTENSIONS in asn1.result)\r\n            this.extensions = Array.from(asn1.result[TST_INFO_EXTENSIONS], element => new Extension({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(new asn1js.ObjectIdentifier({ value: this.policy }));\r\n        outputArray.push(this.messageImprint.toSchema());\r\n        outputArray.push(this.serialNumber);\r\n        outputArray.push(new asn1js.GeneralizedTime({ valueDate: this.genTime }));\r\n        if (this.accuracy)\r\n            outputArray.push(this.accuracy.toSchema());\r\n        if (this.ordering !== undefined)\r\n            outputArray.push(new asn1js.Boolean({ value: this.ordering }));\r\n        if (this.nonce)\r\n            outputArray.push(this.nonce);\r\n        if (this.tsa) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: [this.tsa.toSchema()]\r\n            }));\r\n        }\r\n        if (this.extensions) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                optional: true,\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.extensions, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            policy: this.policy,\r\n            messageImprint: this.messageImprint.toJSON(),\r\n            serialNumber: this.serialNumber.toJSON(),\r\n            genTime: this.genTime\r\n        };\r\n        if (this.accuracy)\r\n            res.accuracy = this.accuracy.toJSON();\r\n        if (this.ordering !== undefined)\r\n            res.ordering = this.ordering;\r\n        if (this.nonce)\r\n            res.nonce = this.nonce.toJSON();\r\n        if (this.tsa)\r\n            res.tsa = this.tsa.toJSON();\r\n        if (this.extensions)\r\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\r\n        return res;\r\n    }\r\n    async verify(params, crypto = getCrypto(true)) {\r\n        if (!params.data) {\r\n            throw new Error(\"\\\"data\\\" is a mandatory attribute for TST_INFO verification\");\r\n        }\r\n        const data = params.data;\r\n        if (params.notBefore) {\r\n            if (this.genTime < params.notBefore)\r\n                throw new Error(\"Generation time for TSTInfo object is less than notBefore value\");\r\n        }\r\n        if (params.notAfter) {\r\n            if (this.genTime > params.notAfter)\r\n                throw new Error(\"Generation time for TSTInfo object is more than notAfter value\");\r\n        }\r\n        const shaAlgorithm = crypto.getAlgorithmByOID(this.messageImprint.hashAlgorithm.algorithmId, true, \"MessageImprint.hashAlgorithm\");\r\n        const hash = await crypto.digest(shaAlgorithm.name, new Uint8Array(data));\r\n        return pvtsutils.BufferSourceConverter.isEqual(hash, this.messageImprint.hashedMessage.valueBlock.valueHexView);\r\n    }\r\n}\r\nTSTInfo.CLASS_NAME = \"TSTInfo\";\n\nconst VERSION$2 = \"version\";\r\nconst DIGEST_ALGORITHMS = \"digestAlgorithms\";\r\nconst ENCAP_CONTENT_INFO = \"encapContentInfo\";\r\nconst CERTIFICATES = \"certificates\";\r\nconst CRLS = \"crls\";\r\nconst SIGNER_INFOS = \"signerInfos\";\r\nconst OCSPS = \"ocsps\";\r\nconst SIGNED_DATA = \"SignedData\";\r\nconst SIGNED_DATA_VERSION = `${SIGNED_DATA}.${VERSION$2}`;\r\nconst SIGNED_DATA_DIGEST_ALGORITHMS = `${SIGNED_DATA}.${DIGEST_ALGORITHMS}`;\r\nconst SIGNED_DATA_ENCAP_CONTENT_INFO = `${SIGNED_DATA}.${ENCAP_CONTENT_INFO}`;\r\nconst SIGNED_DATA_CERTIFICATES = `${SIGNED_DATA}.${CERTIFICATES}`;\r\nconst SIGNED_DATA_CRLS = `${SIGNED_DATA}.${CRLS}`;\r\nconst SIGNED_DATA_SIGNER_INFOS = `${SIGNED_DATA}.${SIGNER_INFOS}`;\r\nconst CLEAR_PROPS$3 = [\r\n    SIGNED_DATA_VERSION,\r\n    SIGNED_DATA_DIGEST_ALGORITHMS,\r\n    SIGNED_DATA_ENCAP_CONTENT_INFO,\r\n    SIGNED_DATA_CERTIFICATES,\r\n    SIGNED_DATA_CRLS,\r\n    SIGNED_DATA_SIGNER_INFOS\r\n];\r\nclass SignedDataVerifyError extends Error {\r\n    constructor({ message, code = 0, date = new Date(), signatureVerified = null, signerCertificate = null, signerCertificateVerified = null, timestampSerial = null, certificatePath = [], }) {\r\n        super(message);\r\n        this.name = \"SignedDataVerifyError\";\r\n        this.date = date;\r\n        this.code = code;\r\n        this.timestampSerial = timestampSerial;\r\n        this.signatureVerified = signatureVerified;\r\n        this.signerCertificate = signerCertificate;\r\n        this.signerCertificateVerified = signerCertificateVerified;\r\n        this.certificatePath = certificatePath;\r\n    }\r\n}\r\nclass SignedData extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$2, SignedData.defaultValues(VERSION$2));\r\n        this.digestAlgorithms = pvutils.getParametersValue(parameters, DIGEST_ALGORITHMS, SignedData.defaultValues(DIGEST_ALGORITHMS));\r\n        this.encapContentInfo = pvutils.getParametersValue(parameters, ENCAP_CONTENT_INFO, SignedData.defaultValues(ENCAP_CONTENT_INFO));\r\n        if (CERTIFICATES in parameters) {\r\n            this.certificates = pvutils.getParametersValue(parameters, CERTIFICATES, SignedData.defaultValues(CERTIFICATES));\r\n        }\r\n        if (CRLS in parameters) {\r\n            this.crls = pvutils.getParametersValue(parameters, CRLS, SignedData.defaultValues(CRLS));\r\n        }\r\n        if (OCSPS in parameters) {\r\n            this.ocsps = pvutils.getParametersValue(parameters, OCSPS, SignedData.defaultValues(OCSPS));\r\n        }\r\n        this.signerInfos = pvutils.getParametersValue(parameters, SIGNER_INFOS, SignedData.defaultValues(SIGNER_INFOS));\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$2:\r\n                return 0;\r\n            case DIGEST_ALGORITHMS:\r\n                return [];\r\n            case ENCAP_CONTENT_INFO:\r\n                return new EncapsulatedContentInfo();\r\n            case CERTIFICATES:\r\n                return [];\r\n            case CRLS:\r\n                return [];\r\n            case OCSPS:\r\n                return [];\r\n            case SIGNER_INFOS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$2:\r\n                return (memberValue === SignedData.defaultValues(VERSION$2));\r\n            case ENCAP_CONTENT_INFO:\r\n                return EncapsulatedContentInfo.compareWithDefault(\"eContentType\", memberValue.eContentType) &&\r\n                    EncapsulatedContentInfo.compareWithDefault(\"eContent\", memberValue.eContent);\r\n            case DIGEST_ALGORITHMS:\r\n            case CERTIFICATES:\r\n            case CRLS:\r\n            case OCSPS:\r\n            case SIGNER_INFOS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        if (names.optional === undefined) {\r\n            names.optional = false;\r\n        }\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || SIGNED_DATA),\r\n            optional: names.optional,\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || SIGNED_DATA_VERSION) }),\r\n                new asn1js.Set({\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.digestAlgorithms || SIGNED_DATA_DIGEST_ALGORITHMS),\r\n                            value: AlgorithmIdentifier.schema()\r\n                        })\r\n                    ]\r\n                }),\r\n                EncapsulatedContentInfo.schema(names.encapContentInfo || {\r\n                    names: {\r\n                        blockName: SIGNED_DATA_ENCAP_CONTENT_INFO\r\n                    }\r\n                }),\r\n                new asn1js.Constructed({\r\n                    name: (names.certificates || SIGNED_DATA_CERTIFICATES),\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: CertificateSet.schema().valueBlock.value\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 1\r\n                    },\r\n                    value: RevocationInfoChoices.schema(names.crls || {\r\n                        names: {\r\n                            crls: SIGNED_DATA_CRLS\r\n                        }\r\n                    }).valueBlock.value\r\n                }),\r\n                new asn1js.Set({\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.signerInfos || SIGNED_DATA_SIGNER_INFOS),\r\n                            value: SignerInfo.schema()\r\n                        })\r\n                    ]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$3);\r\n        const asn1 = asn1js.compareSchema(schema, schema, SignedData.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result[SIGNED_DATA_VERSION].valueBlock.valueDec;\r\n        if (SIGNED_DATA_DIGEST_ALGORITHMS in asn1.result)\r\n            this.digestAlgorithms = Array.from(asn1.result[SIGNED_DATA_DIGEST_ALGORITHMS], algorithm => new AlgorithmIdentifier({ schema: algorithm }));\r\n        this.encapContentInfo = new EncapsulatedContentInfo({ schema: asn1.result[SIGNED_DATA_ENCAP_CONTENT_INFO] });\r\n        if (SIGNED_DATA_CERTIFICATES in asn1.result) {\r\n            const certificateSet = new CertificateSet({\r\n                schema: new asn1js.Set({\r\n                    value: asn1.result[SIGNED_DATA_CERTIFICATES].valueBlock.value\r\n                })\r\n            });\r\n            this.certificates = certificateSet.certificates.slice(0);\r\n        }\r\n        if (SIGNED_DATA_CRLS in asn1.result) {\r\n            this.crls = Array.from(asn1.result[SIGNED_DATA_CRLS], (crl) => {\r\n                if (crl.idBlock.tagClass === 1)\r\n                    return new CertificateRevocationList({ schema: crl });\r\n                crl.idBlock.tagClass = 1;\r\n                crl.idBlock.tagNumber = 16;\r\n                return new OtherRevocationInfoFormat({ schema: crl });\r\n            });\r\n        }\r\n        if (SIGNED_DATA_SIGNER_INFOS in asn1.result)\r\n            this.signerInfos = Array.from(asn1.result[SIGNED_DATA_SIGNER_INFOS], signerInfoSchema => new SignerInfo({ schema: signerInfoSchema }));\r\n    }\r\n    toSchema(encodeFlag = false) {\r\n        const outputArray = [];\r\n        if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof OtherCertificateFormat))\r\n            || (this.crls && this.crls.length && this.crls.some(o => o instanceof OtherRevocationInfoFormat))) {\r\n            this.version = 5;\r\n        }\r\n        else if (this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV2)) {\r\n            this.version = 4;\r\n        }\r\n        else if ((this.certificates && this.certificates.length && this.certificates.some(o => o instanceof AttributeCertificateV1))\r\n            || this.signerInfos.some(o => o.version === 3)\r\n            || this.encapContentInfo.eContentType !== SignedData.ID_DATA) {\r\n            this.version = 3;\r\n        }\r\n        else {\r\n            this.version = 1;\r\n        }\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(new asn1js.Set({\r\n            value: Array.from(this.digestAlgorithms, algorithm => algorithm.toSchema())\r\n        }));\r\n        outputArray.push(this.encapContentInfo.toSchema());\r\n        if (this.certificates) {\r\n            const certificateSet = new CertificateSet({ certificates: this.certificates });\r\n            const certificateSetSchema = certificateSet.toSchema();\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: certificateSetSchema.valueBlock.value\r\n            }));\r\n        }\r\n        if (this.crls) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 1\r\n                },\r\n                value: Array.from(this.crls, crl => {\r\n                    if (crl instanceof OtherRevocationInfoFormat) {\r\n                        const crlSchema = crl.toSchema();\r\n                        crlSchema.idBlock.tagClass = 3;\r\n                        crlSchema.idBlock.tagNumber = 1;\r\n                        return crlSchema;\r\n                    }\r\n                    return crl.toSchema(encodeFlag);\r\n                })\r\n            }));\r\n        }\r\n        outputArray.push(new asn1js.Set({\r\n            value: Array.from(this.signerInfos, signerInfo => signerInfo.toSchema())\r\n        }));\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            digestAlgorithms: Array.from(this.digestAlgorithms, algorithm => algorithm.toJSON()),\r\n            encapContentInfo: this.encapContentInfo.toJSON(),\r\n            signerInfos: Array.from(this.signerInfos, signerInfo => signerInfo.toJSON()),\r\n        };\r\n        if (this.certificates) {\r\n            res.certificates = Array.from(this.certificates, certificate => certificate.toJSON());\r\n        }\r\n        if (this.crls) {\r\n            res.crls = Array.from(this.crls, crl => crl.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n    async verify({ signer = (-1), data = (EMPTY_BUFFER), trustedCerts = [], checkDate = (new Date()), checkChain = false, passedWhenNotRevValues = false, extendedMode = false, findOrigin = null, findIssuer = null } = {}, crypto = getCrypto(true)) {\r\n        let signerCert = null;\r\n        let timestampSerial = null;\r\n        try {\r\n            let messageDigestValue = EMPTY_BUFFER;\r\n            let shaAlgorithm = EMPTY_STRING;\r\n            let certificatePath = [];\r\n            const signerInfo = this.signerInfos[signer];\r\n            if (!signerInfo) {\r\n                throw new SignedDataVerifyError({\r\n                    date: checkDate,\r\n                    code: 1,\r\n                    message: \"Unable to get signer by supplied index\",\r\n                });\r\n            }\r\n            if (!this.certificates) {\r\n                throw new SignedDataVerifyError({\r\n                    date: checkDate,\r\n                    code: 2,\r\n                    message: \"No certificates attached to this signed data\",\r\n                });\r\n            }\r\n            if (signerInfo.sid instanceof IssuerAndSerialNumber) {\r\n                for (const certificate of this.certificates) {\r\n                    if (!(certificate instanceof Certificate))\r\n                        continue;\r\n                    if ((certificate.issuer.isEqual(signerInfo.sid.issuer)) &&\r\n                        (certificate.serialNumber.isEqual(signerInfo.sid.serialNumber))) {\r\n                        signerCert = certificate;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const sid = signerInfo.sid;\r\n                const keyId = sid.idBlock.isConstructed\r\n                    ? sid.valueBlock.value[0].valueBlock.valueHex\r\n                    : sid.valueBlock.valueHex;\r\n                for (const certificate of this.certificates) {\r\n                    if (!(certificate instanceof Certificate)) {\r\n                        continue;\r\n                    }\r\n                    const digest = await crypto.digest({ name: \"sha-1\" }, certificate.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHexView);\r\n                    if (pvutils.isEqualBuffer(digest, keyId)) {\r\n                        signerCert = certificate;\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            if (!signerCert) {\r\n                throw new SignedDataVerifyError({\r\n                    date: checkDate,\r\n                    code: 3,\r\n                    message: \"Unable to find signer certificate\",\r\n                });\r\n            }\r\n            if (this.encapContentInfo.eContentType === id_eContentType_TSTInfo) {\r\n                if (!this.encapContentInfo.eContent) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 15,\r\n                        message: \"Error during verification: TSTInfo eContent is empty\",\r\n                        signatureVerified: null,\r\n                        signerCertificate: signerCert,\r\n                        timestampSerial,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n                let tstInfo;\r\n                try {\r\n                    tstInfo = TSTInfo.fromBER(this.encapContentInfo.eContent.valueBlock.valueHexView);\r\n                }\r\n                catch (ex) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 15,\r\n                        message: \"Error during verification: TSTInfo wrong ASN.1 schema \",\r\n                        signatureVerified: null,\r\n                        signerCertificate: signerCert,\r\n                        timestampSerial,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n                checkDate = tstInfo.genTime;\r\n                timestampSerial = tstInfo.serialNumber.valueBlock.valueHexView.slice();\r\n                if (data.byteLength === 0) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 4,\r\n                        message: \"Missed detached data input array\",\r\n                    });\r\n                }\r\n                if (!(await tstInfo.verify({ data }, crypto))) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 15,\r\n                        message: \"Error during verification: TSTInfo verification is failed\",\r\n                        signatureVerified: false,\r\n                        signerCertificate: signerCert,\r\n                        timestampSerial,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n            }\r\n            if (checkChain) {\r\n                const certs = this.certificates.filter(certificate => (certificate instanceof Certificate && !!checkCA(certificate, signerCert)));\r\n                const chainParams = {\r\n                    checkDate,\r\n                    certs,\r\n                    trustedCerts,\r\n                };\r\n                if (findIssuer) {\r\n                    chainParams.findIssuer = findIssuer;\r\n                }\r\n                if (findOrigin) {\r\n                    chainParams.findOrigin = findOrigin;\r\n                }\r\n                const chainEngine = new CertificateChainValidationEngine(chainParams);\r\n                chainEngine.certs.push(signerCert);\r\n                if (this.crls) {\r\n                    for (const crl of this.crls) {\r\n                        if (\"thisUpdate\" in crl)\r\n                            chainEngine.crls.push(crl);\r\n                        else {\r\n                            if (crl.otherRevInfoFormat === id_PKIX_OCSP_Basic)\r\n                                chainEngine.ocsps.push(new BasicOCSPResponse({ schema: crl.otherRevInfo }));\r\n                        }\r\n                    }\r\n                }\r\n                if (this.ocsps) {\r\n                    chainEngine.ocsps.push(...(this.ocsps));\r\n                }\r\n                const verificationResult = await chainEngine.verify({ passedWhenNotRevValues }, crypto)\r\n                    .catch(e => {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 5,\r\n                        message: `Validation of signer's certificate failed with error: ${((e instanceof Object) ? e.resultMessage : e)}`,\r\n                        signerCertificate: signerCert,\r\n                        signerCertificateVerified: false\r\n                    });\r\n                });\r\n                if (verificationResult.certificatePath) {\r\n                    certificatePath = verificationResult.certificatePath;\r\n                }\r\n                if (!verificationResult.result)\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 5,\r\n                        message: `Validation of signer's certificate failed: ${verificationResult.resultMessage}`,\r\n                        signerCertificate: signerCert,\r\n                        signerCertificateVerified: false\r\n                    });\r\n            }\r\n            const signerInfoHashAlgorithm = crypto.getAlgorithmByOID(signerInfo.digestAlgorithm.algorithmId);\r\n            if (!(\"name\" in signerInfoHashAlgorithm)) {\r\n                throw new SignedDataVerifyError({\r\n                    date: checkDate,\r\n                    code: 7,\r\n                    message: `Unsupported signature algorithm: ${signerInfo.digestAlgorithm.algorithmId}`,\r\n                    signerCertificate: signerCert,\r\n                    signerCertificateVerified: true\r\n                });\r\n            }\r\n            shaAlgorithm = signerInfoHashAlgorithm.name;\r\n            const eContent = this.encapContentInfo.eContent;\r\n            if (eContent) {\r\n                if ((eContent.idBlock.tagClass === 1) &&\r\n                    (eContent.idBlock.tagNumber === 4)) {\r\n                    data = eContent.getValue();\r\n                }\r\n                else\r\n                    data = eContent.valueBlock.valueBeforeDecodeView;\r\n            }\r\n            else {\r\n                if (data.byteLength === 0) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 8,\r\n                        message: \"Missed detached data input array\",\r\n                        signerCertificate: signerCert,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n            }\r\n            if (signerInfo.signedAttrs) {\r\n                let foundContentType = false;\r\n                let foundMessageDigest = false;\r\n                for (const attribute of signerInfo.signedAttrs.attributes) {\r\n                    if (attribute.type === \"1.2.840.113549.1.9.3\")\r\n                        foundContentType = true;\r\n                    if (attribute.type === \"1.2.840.113549.1.9.4\") {\r\n                        foundMessageDigest = true;\r\n                        messageDigestValue = attribute.values[0].valueBlock.valueHex;\r\n                    }\r\n                    if (foundContentType && foundMessageDigest)\r\n                        break;\r\n                }\r\n                if (foundContentType === false) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 9,\r\n                        message: \"Attribute \\\"content-type\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n                        signerCertificate: signerCert,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n                if (foundMessageDigest === false) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 10,\r\n                        message: \"Attribute \\\"message-digest\\\" is a mandatory attribute for \\\"signed attributes\\\"\",\r\n                        signatureVerified: null,\r\n                        signerCertificate: signerCert,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n            }\r\n            if (signerInfo.signedAttrs) {\r\n                const messageDigest = await crypto.digest(shaAlgorithm, new Uint8Array(data));\r\n                if (!pvutils.isEqualBuffer(messageDigest, messageDigestValue)) {\r\n                    throw new SignedDataVerifyError({\r\n                        date: checkDate,\r\n                        code: 15,\r\n                        message: \"Error during verification: Message digest doesn't match\",\r\n                        signatureVerified: null,\r\n                        signerCertificate: signerCert,\r\n                        timestampSerial,\r\n                        signerCertificateVerified: true\r\n                    });\r\n                }\r\n                data = signerInfo.signedAttrs.encodedValue;\r\n            }\r\n            const verifyResult = await crypto.verifyWithPublicKey(data, signerInfo.signature, signerCert.subjectPublicKeyInfo, signerCert.signatureAlgorithm, shaAlgorithm);\r\n            if (extendedMode) {\r\n                return {\r\n                    date: checkDate,\r\n                    code: 14,\r\n                    message: EMPTY_STRING,\r\n                    signatureVerified: verifyResult,\r\n                    signerCertificate: signerCert,\r\n                    timestampSerial,\r\n                    signerCertificateVerified: true,\r\n                    certificatePath\r\n                };\r\n            }\r\n            else {\r\n                return verifyResult;\r\n            }\r\n        }\r\n        catch (e) {\r\n            if (e instanceof SignedDataVerifyError) {\r\n                throw e;\r\n            }\r\n            throw new SignedDataVerifyError({\r\n                date: checkDate,\r\n                code: 15,\r\n                message: `Error during verification: ${e instanceof Error ? e.message : e}`,\r\n                signatureVerified: null,\r\n                signerCertificate: signerCert,\r\n                timestampSerial,\r\n                signerCertificateVerified: true\r\n            });\r\n        }\r\n    }\r\n    async sign(privateKey, signerIndex, hashAlgorithm = \"SHA-1\", data = (EMPTY_BUFFER), crypto = getCrypto(true)) {\r\n        if (!privateKey)\r\n            throw new Error(\"Need to provide a private key for signing\");\r\n        const hashAlgorithmOID = crypto.getOIDByAlgorithm({ name: hashAlgorithm }, true, \"hashAlgorithm\");\r\n        if ((this.digestAlgorithms.filter(algorithm => algorithm.algorithmId === hashAlgorithmOID)).length === 0) {\r\n            this.digestAlgorithms.push(new AlgorithmIdentifier({\r\n                algorithmId: hashAlgorithmOID,\r\n                algorithmParams: new asn1js.Null()\r\n            }));\r\n        }\r\n        const signerInfo = this.signerInfos[signerIndex];\r\n        if (!signerInfo) {\r\n            throw new RangeError(\"SignerInfo index is out of range\");\r\n        }\r\n        signerInfo.digestAlgorithm = new AlgorithmIdentifier({\r\n            algorithmId: hashAlgorithmOID,\r\n            algorithmParams: new asn1js.Null()\r\n        });\r\n        const signatureParams = await crypto.getSignatureParameters(privateKey, hashAlgorithm);\r\n        const parameters = signatureParams.parameters;\r\n        signerInfo.signatureAlgorithm = signatureParams.signatureAlgorithm;\r\n        if (signerInfo.signedAttrs) {\r\n            if (signerInfo.signedAttrs.encodedValue.byteLength !== 0)\r\n                data = signerInfo.signedAttrs.encodedValue;\r\n            else {\r\n                data = signerInfo.signedAttrs.toSchema().toBER();\r\n                const view = pvtsutils.BufferSourceConverter.toUint8Array(data);\r\n                view[0] = 0x31;\r\n            }\r\n        }\r\n        else {\r\n            const eContent = this.encapContentInfo.eContent;\r\n            if (eContent) {\r\n                if ((eContent.idBlock.tagClass === 1) &&\r\n                    (eContent.idBlock.tagNumber === 4)) {\r\n                    data = eContent.getValue();\r\n                }\r\n                else\r\n                    data = eContent.valueBlock.valueBeforeDecodeView;\r\n            }\r\n            else {\r\n                if (data.byteLength === 0)\r\n                    throw new Error(\"Missed detached data input array\");\r\n            }\r\n        }\r\n        const signature = await crypto.signWithPrivateKey(data, privateKey, parameters);\r\n        signerInfo.signature = new asn1js.OctetString({ valueHex: signature });\r\n    }\r\n}\r\nSignedData.CLASS_NAME = \"SignedData\";\r\nSignedData.ID_DATA = id_ContentType_Data;\n\nconst VERSION$1 = \"version\";\r\nconst AUTH_SAFE = \"authSafe\";\r\nconst MAC_DATA = \"macData\";\r\nconst PARSED_VALUE = \"parsedValue\";\r\nconst CLERA_PROPS = [\r\n    VERSION$1,\r\n    AUTH_SAFE,\r\n    MAC_DATA\r\n];\r\nclass PFX extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION$1, PFX.defaultValues(VERSION$1));\r\n        this.authSafe = pvutils.getParametersValue(parameters, AUTH_SAFE, PFX.defaultValues(AUTH_SAFE));\r\n        if (MAC_DATA in parameters) {\r\n            this.macData = pvutils.getParametersValue(parameters, MAC_DATA, PFX.defaultValues(MAC_DATA));\r\n        }\r\n        if (PARSED_VALUE in parameters) {\r\n            this.parsedValue = pvutils.getParametersValue(parameters, PARSED_VALUE, PFX.defaultValues(PARSED_VALUE));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION$1:\r\n                return 3;\r\n            case AUTH_SAFE:\r\n                return (new ContentInfo());\r\n            case MAC_DATA:\r\n                return (new MacData());\r\n            case PARSED_VALUE:\r\n                return {};\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION$1:\r\n                return (memberValue === PFX.defaultValues(memberName));\r\n            case AUTH_SAFE:\r\n                return ((ContentInfo.compareWithDefault(\"contentType\", memberValue.contentType)) &&\r\n                    (ContentInfo.compareWithDefault(\"content\", memberValue.content)));\r\n            case MAC_DATA:\r\n                return ((MacData.compareWithDefault(\"mac\", memberValue.mac)) &&\r\n                    (MacData.compareWithDefault(\"macSalt\", memberValue.macSalt)) &&\r\n                    (MacData.compareWithDefault(\"iterations\", memberValue.iterations)));\r\n            case PARSED_VALUE:\r\n                return ((memberValue instanceof Object) && (Object.keys(memberValue).length === 0));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || VERSION$1) }),\r\n                ContentInfo.schema(names.authSafe || {\r\n                    names: {\r\n                        blockName: AUTH_SAFE\r\n                    }\r\n                }),\r\n                MacData.schema(names.macData || {\r\n                    names: {\r\n                        blockName: MAC_DATA,\r\n                        optional: true\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLERA_PROPS);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PFX.schema({\r\n            names: {\r\n                version: VERSION$1,\r\n                authSafe: {\r\n                    names: {\r\n                        blockName: AUTH_SAFE\r\n                    }\r\n                },\r\n                macData: {\r\n                    names: {\r\n                        blockName: MAC_DATA\r\n                    }\r\n                }\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result.version.valueBlock.valueDec;\r\n        this.authSafe = new ContentInfo({ schema: asn1.result.authSafe });\r\n        if (MAC_DATA in asn1.result)\r\n            this.macData = new MacData({ schema: asn1.result.macData });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [\r\n            new asn1js.Integer({ value: this.version }),\r\n            this.authSafe.toSchema()\r\n        ];\r\n        if (this.macData) {\r\n            outputArray.push(this.macData.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const output = {\r\n            version: this.version,\r\n            authSafe: this.authSafe.toJSON()\r\n        };\r\n        if (this.macData) {\r\n            output.macData = this.macData.toJSON();\r\n        }\r\n        return output;\r\n    }\r\n    async makeInternalValues(parameters = {}, crypto = getCrypto(true)) {\r\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\r\n        if (!this.parsedValue) {\r\n            throw new Error(\"Please call \\\"parseValues\\\" function first in order to make \\\"parsedValue\\\" data\");\r\n        }\r\n        ParameterError.assertEmpty(this.parsedValue.integrityMode, \"integrityMode\", \"parsedValue\");\r\n        ParameterError.assertEmpty(this.parsedValue.authenticatedSafe, \"authenticatedSafe\", \"parsedValue\");\r\n        switch (this.parsedValue.integrityMode) {\r\n            case 0:\r\n                {\r\n                    if (!(\"iterations\" in parameters))\r\n                        throw new ParameterError(\"iterations\");\r\n                    ParameterError.assertEmpty(parameters.pbkdf2HashAlgorithm, \"pbkdf2HashAlgorithm\");\r\n                    ParameterError.assertEmpty(parameters.hmacHashAlgorithm, \"hmacHashAlgorithm\");\r\n                    ParameterError.assertEmpty(parameters.password, \"password\");\r\n                    const saltBuffer = new ArrayBuffer(64);\r\n                    const saltView = new Uint8Array(saltBuffer);\r\n                    crypto.getRandomValues(saltView);\r\n                    const data = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n                    this.authSafe = new ContentInfo({\r\n                        contentType: ContentInfo.DATA,\r\n                        content: new asn1js.OctetString({ valueHex: data })\r\n                    });\r\n                    const result = await crypto.stampDataWithPassword({\r\n                        password: parameters.password,\r\n                        hashAlgorithm: parameters.hmacHashAlgorithm,\r\n                        salt: saltBuffer,\r\n                        iterationCount: parameters.iterations,\r\n                        contentToStamp: data\r\n                    });\r\n                    this.macData = new MacData({\r\n                        mac: new DigestInfo({\r\n                            digestAlgorithm: new AlgorithmIdentifier({\r\n                                algorithmId: crypto.getOIDByAlgorithm({ name: parameters.hmacHashAlgorithm }, true, \"hmacHashAlgorithm\"),\r\n                            }),\r\n                            digest: new asn1js.OctetString({ valueHex: result })\r\n                        }),\r\n                        macSalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n                        iterations: parameters.iterations\r\n                    });\r\n                }\r\n                break;\r\n            case 1:\r\n                {\r\n                    if (!(\"signingCertificate\" in parameters)) {\r\n                        throw new ParameterError(\"signingCertificate\");\r\n                    }\r\n                    ParameterError.assertEmpty(parameters.privateKey, \"privateKey\");\r\n                    ParameterError.assertEmpty(parameters.hashAlgorithm, \"hashAlgorithm\");\r\n                    const toBeSigned = this.parsedValue.authenticatedSafe.toSchema().toBER(false);\r\n                    const cmsSigned = new SignedData({\r\n                        version: 1,\r\n                        encapContentInfo: new EncapsulatedContentInfo({\r\n                            eContentType: \"1.2.840.113549.1.7.1\",\r\n                            eContent: new asn1js.OctetString({ valueHex: toBeSigned })\r\n                        }),\r\n                        certificates: [parameters.signingCertificate]\r\n                    });\r\n                    const result = await crypto.digest({ name: parameters.hashAlgorithm }, new Uint8Array(toBeSigned));\r\n                    const signedAttr = [];\r\n                    signedAttr.push(new Attribute({\r\n                        type: \"1.2.840.113549.1.9.3\",\r\n                        values: [\r\n                            new asn1js.ObjectIdentifier({ value: \"1.2.840.113549.1.7.1\" })\r\n                        ]\r\n                    }));\r\n                    signedAttr.push(new Attribute({\r\n                        type: \"1.2.840.113549.1.9.5\",\r\n                        values: [\r\n                            new asn1js.UTCTime({ valueDate: new Date() })\r\n                        ]\r\n                    }));\r\n                    signedAttr.push(new Attribute({\r\n                        type: \"1.2.840.113549.1.9.4\",\r\n                        values: [\r\n                            new asn1js.OctetString({ valueHex: result })\r\n                        ]\r\n                    }));\r\n                    cmsSigned.signerInfos.push(new SignerInfo({\r\n                        version: 1,\r\n                        sid: new IssuerAndSerialNumber({\r\n                            issuer: parameters.signingCertificate.issuer,\r\n                            serialNumber: parameters.signingCertificate.serialNumber\r\n                        }),\r\n                        signedAttrs: new SignedAndUnsignedAttributes({\r\n                            type: 0,\r\n                            attributes: signedAttr\r\n                        })\r\n                    }));\r\n                    await cmsSigned.sign(parameters.privateKey, 0, parameters.hashAlgorithm, undefined, crypto);\r\n                    this.authSafe = new ContentInfo({\r\n                        contentType: \"1.2.840.113549.1.7.2\",\r\n                        content: cmsSigned.toSchema(true)\r\n                    });\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Parameter \"integrityMode\" has unknown value: ${this.parsedValue.integrityMode}`);\r\n        }\r\n    }\r\n    async parseInternalValues(parameters, crypto = getCrypto(true)) {\r\n        ArgumentError.assert(parameters, \"parameters\", \"object\");\r\n        if (parameters.checkIntegrity === undefined) {\r\n            parameters.checkIntegrity = true;\r\n        }\r\n        this.parsedValue = {};\r\n        switch (this.authSafe.contentType) {\r\n            case ContentInfo.DATA:\r\n                {\r\n                    ParameterError.assertEmpty(parameters.password, \"password\");\r\n                    this.parsedValue.integrityMode = 0;\r\n                    ArgumentError.assert(this.authSafe.content, \"authSafe.content\", asn1js.OctetString);\r\n                    const authSafeContent = this.authSafe.content.getValue();\r\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(authSafeContent);\r\n                    if (parameters.checkIntegrity) {\r\n                        if (!this.macData) {\r\n                            throw new Error(\"Absent \\\"macData\\\" value, can not check PKCS#12 data integrity\");\r\n                        }\r\n                        const hashAlgorithm = crypto.getAlgorithmByOID(this.macData.mac.digestAlgorithm.algorithmId, true, \"digestAlgorithm\");\r\n                        const result = await crypto.verifyDataStampedWithPassword({\r\n                            password: parameters.password,\r\n                            hashAlgorithm: hashAlgorithm.name,\r\n                            salt: BufferSourceConverter.toArrayBuffer(this.macData.macSalt.valueBlock.valueHexView),\r\n                            iterationCount: this.macData.iterations || 0,\r\n                            contentToVerify: authSafeContent,\r\n                            signatureToVerify: BufferSourceConverter.toArrayBuffer(this.macData.mac.digest.valueBlock.valueHexView),\r\n                        });\r\n                        if (!result) {\r\n                            throw new Error(\"Integrity for the PKCS#12 data is broken!\");\r\n                        }\r\n                    }\r\n                }\r\n                break;\r\n            case ContentInfo.SIGNED_DATA:\r\n                {\r\n                    this.parsedValue.integrityMode = 1;\r\n                    const cmsSigned = new SignedData({ schema: this.authSafe.content });\r\n                    const eContent = cmsSigned.encapContentInfo.eContent;\r\n                    ParameterError.assert(eContent, \"eContent\", \"cmsSigned.encapContentInfo\");\r\n                    ArgumentError.assert(eContent, \"eContent\", asn1js.OctetString);\r\n                    const data = eContent.getValue();\r\n                    this.parsedValue.authenticatedSafe = AuthenticatedSafe.fromBER(data);\r\n                    const ok = await cmsSigned.verify({ signer: 0, checkChain: false }, crypto);\r\n                    if (!ok) {\r\n                        throw new Error(\"Integrity for the PKCS#12 data is broken!\");\r\n                    }\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Incorrect value for \"this.authSafe.contentType\": ${this.authSafe.contentType}`);\r\n        }\r\n    }\r\n}\r\nPFX.CLASS_NAME = \"PFX\";\n\nconst STATUS$1 = \"status\";\r\nconst STATUS_STRINGS = \"statusStrings\";\r\nconst FAIL_INFO = \"failInfo\";\r\nconst CLEAR_PROPS$2 = [\r\n    STATUS$1,\r\n    STATUS_STRINGS,\r\n    FAIL_INFO\r\n];\r\nvar PKIStatus;\r\n(function (PKIStatus) {\r\n    PKIStatus[PKIStatus[\"granted\"] = 0] = \"granted\";\r\n    PKIStatus[PKIStatus[\"grantedWithMods\"] = 1] = \"grantedWithMods\";\r\n    PKIStatus[PKIStatus[\"rejection\"] = 2] = \"rejection\";\r\n    PKIStatus[PKIStatus[\"waiting\"] = 3] = \"waiting\";\r\n    PKIStatus[PKIStatus[\"revocationWarning\"] = 4] = \"revocationWarning\";\r\n    PKIStatus[PKIStatus[\"revocationNotification\"] = 5] = \"revocationNotification\";\r\n})(PKIStatus || (PKIStatus = {}));\r\nclass PKIStatusInfo extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.status = pvutils.getParametersValue(parameters, STATUS$1, PKIStatusInfo.defaultValues(STATUS$1));\r\n        if (STATUS_STRINGS in parameters) {\r\n            this.statusStrings = pvutils.getParametersValue(parameters, STATUS_STRINGS, PKIStatusInfo.defaultValues(STATUS_STRINGS));\r\n        }\r\n        if (FAIL_INFO in parameters) {\r\n            this.failInfo = pvutils.getParametersValue(parameters, FAIL_INFO, PKIStatusInfo.defaultValues(FAIL_INFO));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case STATUS$1:\r\n                return 2;\r\n            case STATUS_STRINGS:\r\n                return [];\r\n            case FAIL_INFO:\r\n                return new asn1js.BitString();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case STATUS$1:\r\n                return (memberValue === PKIStatusInfo.defaultValues(memberName));\r\n            case STATUS_STRINGS:\r\n                return (memberValue.length === 0);\r\n            case FAIL_INFO:\r\n                return (memberValue.isEqual(PKIStatusInfo.defaultValues(memberName)));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || EMPTY_STRING),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.status || EMPTY_STRING) }),\r\n                new asn1js.Sequence({\r\n                    optional: true,\r\n                    value: [\r\n                        new asn1js.Repeated({\r\n                            name: (names.statusStrings || EMPTY_STRING),\r\n                            value: new asn1js.Utf8String()\r\n                        })\r\n                    ]\r\n                }),\r\n                new asn1js.BitString({\r\n                    name: (names.failInfo || EMPTY_STRING),\r\n                    optional: true\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$2);\r\n        const asn1 = asn1js.compareSchema(schema, schema, PKIStatusInfo.schema({\r\n            names: {\r\n                status: STATUS$1,\r\n                statusStrings: STATUS_STRINGS,\r\n                failInfo: FAIL_INFO\r\n            }\r\n        }));\r\n        AsnError.assertSchema(asn1, this.className);\r\n        const _status = asn1.result.status;\r\n        if ((_status.valueBlock.isHexOnly === true) ||\r\n            (_status.valueBlock.valueDec < 0) ||\r\n            (_status.valueBlock.valueDec > 5))\r\n            throw new Error(\"PKIStatusInfo \\\"status\\\" has invalid value\");\r\n        this.status = _status.valueBlock.valueDec;\r\n        if (STATUS_STRINGS in asn1.result)\r\n            this.statusStrings = asn1.result.statusStrings;\r\n        if (FAIL_INFO in asn1.result)\r\n            this.failInfo = asn1.result.failInfo;\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.status }));\r\n        if (this.statusStrings) {\r\n            outputArray.push(new asn1js.Sequence({\r\n                optional: true,\r\n                value: this.statusStrings\r\n            }));\r\n        }\r\n        if (this.failInfo) {\r\n            outputArray.push(this.failInfo);\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            status: this.status\r\n        };\r\n        if (this.statusStrings) {\r\n            res.statusStrings = Array.from(this.statusStrings, o => o.toJSON());\r\n        }\r\n        if (this.failInfo) {\r\n            res.failInfo = this.failInfo.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n}\r\nPKIStatusInfo.CLASS_NAME = \"PKIStatusInfo\";\n\nconst VERSION = \"version\";\r\nconst MESSAGE_IMPRINT = \"messageImprint\";\r\nconst REQ_POLICY = \"reqPolicy\";\r\nconst NONCE = \"nonce\";\r\nconst CERT_REQ = \"certReq\";\r\nconst EXTENSIONS = \"extensions\";\r\nconst TIME_STAMP_REQ = \"TimeStampReq\";\r\nconst TIME_STAMP_REQ_VERSION = `${TIME_STAMP_REQ}.${VERSION}`;\r\nconst TIME_STAMP_REQ_MESSAGE_IMPRINT = `${TIME_STAMP_REQ}.${MESSAGE_IMPRINT}`;\r\nconst TIME_STAMP_REQ_POLICY = `${TIME_STAMP_REQ}.${REQ_POLICY}`;\r\nconst TIME_STAMP_REQ_NONCE = `${TIME_STAMP_REQ}.${NONCE}`;\r\nconst TIME_STAMP_REQ_CERT_REQ = `${TIME_STAMP_REQ}.${CERT_REQ}`;\r\nconst TIME_STAMP_REQ_EXTENSIONS = `${TIME_STAMP_REQ}.${EXTENSIONS}`;\r\nconst CLEAR_PROPS$1 = [\r\n    TIME_STAMP_REQ_VERSION,\r\n    TIME_STAMP_REQ_MESSAGE_IMPRINT,\r\n    TIME_STAMP_REQ_POLICY,\r\n    TIME_STAMP_REQ_NONCE,\r\n    TIME_STAMP_REQ_CERT_REQ,\r\n    TIME_STAMP_REQ_EXTENSIONS,\r\n];\r\nclass TimeStampReq extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.version = pvutils.getParametersValue(parameters, VERSION, TimeStampReq.defaultValues(VERSION));\r\n        this.messageImprint = pvutils.getParametersValue(parameters, MESSAGE_IMPRINT, TimeStampReq.defaultValues(MESSAGE_IMPRINT));\r\n        if (REQ_POLICY in parameters) {\r\n            this.reqPolicy = pvutils.getParametersValue(parameters, REQ_POLICY, TimeStampReq.defaultValues(REQ_POLICY));\r\n        }\r\n        if (NONCE in parameters) {\r\n            this.nonce = pvutils.getParametersValue(parameters, NONCE, TimeStampReq.defaultValues(NONCE));\r\n        }\r\n        if (CERT_REQ in parameters) {\r\n            this.certReq = pvutils.getParametersValue(parameters, CERT_REQ, TimeStampReq.defaultValues(CERT_REQ));\r\n        }\r\n        if (EXTENSIONS in parameters) {\r\n            this.extensions = pvutils.getParametersValue(parameters, EXTENSIONS, TimeStampReq.defaultValues(EXTENSIONS));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case VERSION:\r\n                return 0;\r\n            case MESSAGE_IMPRINT:\r\n                return new MessageImprint();\r\n            case REQ_POLICY:\r\n                return EMPTY_STRING;\r\n            case NONCE:\r\n                return new asn1js.Integer();\r\n            case CERT_REQ:\r\n                return false;\r\n            case EXTENSIONS:\r\n                return [];\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case VERSION:\r\n            case REQ_POLICY:\r\n            case CERT_REQ:\r\n                return (memberValue === TimeStampReq.defaultValues(memberName));\r\n            case MESSAGE_IMPRINT:\r\n                return ((MessageImprint.compareWithDefault(\"hashAlgorithm\", memberValue.hashAlgorithm)) &&\r\n                    (MessageImprint.compareWithDefault(\"hashedMessage\", memberValue.hashedMessage)));\r\n            case NONCE:\r\n                return (memberValue.isEqual(TimeStampReq.defaultValues(memberName)));\r\n            case EXTENSIONS:\r\n                return (memberValue.length === 0);\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || TIME_STAMP_REQ),\r\n            value: [\r\n                new asn1js.Integer({ name: (names.version || TIME_STAMP_REQ_VERSION) }),\r\n                MessageImprint.schema(names.messageImprint || {\r\n                    names: {\r\n                        blockName: TIME_STAMP_REQ_MESSAGE_IMPRINT\r\n                    }\r\n                }),\r\n                new asn1js.ObjectIdentifier({\r\n                    name: (names.reqPolicy || TIME_STAMP_REQ_POLICY),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Integer({\r\n                    name: (names.nonce || TIME_STAMP_REQ_NONCE),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Boolean({\r\n                    name: (names.certReq || TIME_STAMP_REQ_CERT_REQ),\r\n                    optional: true\r\n                }),\r\n                new asn1js.Constructed({\r\n                    optional: true,\r\n                    idBlock: {\r\n                        tagClass: 3,\r\n                        tagNumber: 0\r\n                    },\r\n                    value: [new asn1js.Repeated({\r\n                            name: (names.extensions || TIME_STAMP_REQ_EXTENSIONS),\r\n                            value: Extension.schema()\r\n                        })]\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS$1);\r\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampReq.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.version = asn1.result[TIME_STAMP_REQ_VERSION].valueBlock.valueDec;\r\n        this.messageImprint = new MessageImprint({ schema: asn1.result[TIME_STAMP_REQ_MESSAGE_IMPRINT] });\r\n        if (TIME_STAMP_REQ_POLICY in asn1.result)\r\n            this.reqPolicy = asn1.result[TIME_STAMP_REQ_POLICY].valueBlock.toString();\r\n        if (TIME_STAMP_REQ_NONCE in asn1.result)\r\n            this.nonce = asn1.result[TIME_STAMP_REQ_NONCE];\r\n        if (TIME_STAMP_REQ_CERT_REQ in asn1.result)\r\n            this.certReq = asn1.result[TIME_STAMP_REQ_CERT_REQ].valueBlock.value;\r\n        if (TIME_STAMP_REQ_EXTENSIONS in asn1.result)\r\n            this.extensions = Array.from(asn1.result[TIME_STAMP_REQ_EXTENSIONS], element => new Extension({ schema: element }));\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(new asn1js.Integer({ value: this.version }));\r\n        outputArray.push(this.messageImprint.toSchema());\r\n        if (this.reqPolicy)\r\n            outputArray.push(new asn1js.ObjectIdentifier({ value: this.reqPolicy }));\r\n        if (this.nonce)\r\n            outputArray.push(this.nonce);\r\n        if ((CERT_REQ in this) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\r\n            outputArray.push(new asn1js.Boolean({ value: this.certReq }));\r\n        if (this.extensions) {\r\n            outputArray.push(new asn1js.Constructed({\r\n                idBlock: {\r\n                    tagClass: 3,\r\n                    tagNumber: 0\r\n                },\r\n                value: Array.from(this.extensions, o => o.toSchema())\r\n            }));\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            version: this.version,\r\n            messageImprint: this.messageImprint.toJSON()\r\n        };\r\n        if (this.reqPolicy !== undefined)\r\n            res.reqPolicy = this.reqPolicy;\r\n        if (this.nonce !== undefined)\r\n            res.nonce = this.nonce.toJSON();\r\n        if ((this.certReq !== undefined) && (TimeStampReq.compareWithDefault(CERT_REQ, this.certReq) === false))\r\n            res.certReq = this.certReq;\r\n        if (this.extensions) {\r\n            res.extensions = Array.from(this.extensions, o => o.toJSON());\r\n        }\r\n        return res;\r\n    }\r\n}\r\nTimeStampReq.CLASS_NAME = \"TimeStampReq\";\n\nconst STATUS = \"status\";\r\nconst TIME_STAMP_TOKEN = \"timeStampToken\";\r\nconst TIME_STAMP_RESP = \"TimeStampResp\";\r\nconst TIME_STAMP_RESP_STATUS = `${TIME_STAMP_RESP}.${STATUS}`;\r\nconst TIME_STAMP_RESP_TOKEN = `${TIME_STAMP_RESP}.${TIME_STAMP_TOKEN}`;\r\nconst CLEAR_PROPS = [\r\n    TIME_STAMP_RESP_STATUS,\r\n    TIME_STAMP_RESP_TOKEN\r\n];\r\nclass TimeStampResp extends PkiObject {\r\n    constructor(parameters = {}) {\r\n        super();\r\n        this.status = pvutils.getParametersValue(parameters, STATUS, TimeStampResp.defaultValues(STATUS));\r\n        if (TIME_STAMP_TOKEN in parameters) {\r\n            this.timeStampToken = pvutils.getParametersValue(parameters, TIME_STAMP_TOKEN, TimeStampResp.defaultValues(TIME_STAMP_TOKEN));\r\n        }\r\n        if (parameters.schema) {\r\n            this.fromSchema(parameters.schema);\r\n        }\r\n    }\r\n    static defaultValues(memberName) {\r\n        switch (memberName) {\r\n            case STATUS:\r\n                return new PKIStatusInfo();\r\n            case TIME_STAMP_TOKEN:\r\n                return new ContentInfo();\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static compareWithDefault(memberName, memberValue) {\r\n        switch (memberName) {\r\n            case STATUS:\r\n                return ((PKIStatusInfo.compareWithDefault(STATUS, memberValue.status)) &&\r\n                    ((\"statusStrings\" in memberValue) === false) &&\r\n                    ((\"failInfo\" in memberValue) === false));\r\n            case TIME_STAMP_TOKEN:\r\n                return ((memberValue.contentType === EMPTY_STRING) &&\r\n                    (memberValue.content instanceof asn1js.Any));\r\n            default:\r\n                return super.defaultValues(memberName);\r\n        }\r\n    }\r\n    static schema(parameters = {}) {\r\n        const names = pvutils.getParametersValue(parameters, \"names\", {});\r\n        return (new asn1js.Sequence({\r\n            name: (names.blockName || TIME_STAMP_RESP),\r\n            value: [\r\n                PKIStatusInfo.schema(names.status || {\r\n                    names: {\r\n                        blockName: TIME_STAMP_RESP_STATUS\r\n                    }\r\n                }),\r\n                ContentInfo.schema(names.timeStampToken || {\r\n                    names: {\r\n                        blockName: TIME_STAMP_RESP_TOKEN,\r\n                        optional: true\r\n                    }\r\n                })\r\n            ]\r\n        }));\r\n    }\r\n    fromSchema(schema) {\r\n        pvutils.clearProps(schema, CLEAR_PROPS);\r\n        const asn1 = asn1js.compareSchema(schema, schema, TimeStampResp.schema());\r\n        AsnError.assertSchema(asn1, this.className);\r\n        this.status = new PKIStatusInfo({ schema: asn1.result[TIME_STAMP_RESP_STATUS] });\r\n        if (TIME_STAMP_RESP_TOKEN in asn1.result)\r\n            this.timeStampToken = new ContentInfo({ schema: asn1.result[TIME_STAMP_RESP_TOKEN] });\r\n    }\r\n    toSchema() {\r\n        const outputArray = [];\r\n        outputArray.push(this.status.toSchema());\r\n        if (this.timeStampToken) {\r\n            outputArray.push(this.timeStampToken.toSchema());\r\n        }\r\n        return (new asn1js.Sequence({\r\n            value: outputArray\r\n        }));\r\n    }\r\n    toJSON() {\r\n        const res = {\r\n            status: this.status.toJSON()\r\n        };\r\n        if (this.timeStampToken) {\r\n            res.timeStampToken = this.timeStampToken.toJSON();\r\n        }\r\n        return res;\r\n    }\r\n    async sign(privateKey, hashAlgorithm, crypto = getCrypto(true)) {\r\n        this.assertContentType();\r\n        const signed = new SignedData({ schema: this.timeStampToken.content });\r\n        return signed.sign(privateKey, 0, hashAlgorithm, undefined, crypto);\r\n    }\r\n    async verify(verificationParameters = { signer: 0, trustedCerts: [], data: EMPTY_BUFFER }, crypto = getCrypto(true)) {\r\n        this.assertContentType();\r\n        const signed = new SignedData({ schema: this.timeStampToken.content });\r\n        return signed.verify(verificationParameters, crypto);\r\n    }\r\n    assertContentType() {\r\n        if (!this.timeStampToken) {\r\n            throw new Error(\"timeStampToken is absent in TSP response\");\r\n        }\r\n        if (this.timeStampToken.contentType !== id_ContentType_SignedData) {\r\n            throw new Error(`Wrong format of timeStampToken: ${this.timeStampToken.contentType}`);\r\n        }\r\n    }\r\n}\r\nTimeStampResp.CLASS_NAME = \"TimeStampResp\";\n\nfunction initCryptoEngine() {\r\n    if (typeof self !== \"undefined\") {\r\n        if (\"crypto\" in self) {\r\n            let engineName = \"webcrypto\";\r\n            if (\"webkitSubtle\" in self.crypto) {\r\n                engineName = \"safari\";\r\n            }\r\n            setEngine(engineName, new CryptoEngine({ name: engineName, crypto: crypto }));\r\n        }\r\n    }\r\n    else if (typeof crypto !== \"undefined\" && \"webcrypto\" in crypto) {\r\n        const name = \"NodeJS ^15\";\r\n        const nodeCrypto = crypto.webcrypto;\r\n        setEngine(name, new CryptoEngine({ name, crypto: nodeCrypto }));\r\n    }\r\n}\n\ninitCryptoEngine();\n\nexport { AbstractCryptoEngine, AccessDescription, Accuracy, AlgorithmIdentifier, AltName, ArgumentError, AsnError, AttCertValidityPeriod, Attribute, AttributeCertificateInfoV1, AttributeCertificateInfoV2, AttributeCertificateV1, AttributeCertificateV2, AttributeTypeAndValue, AuthenticatedSafe, AuthorityKeyIdentifier, BasicConstraints, BasicOCSPResponse, CAVersion, CRLBag, CRLDistributionPoints, CertBag, CertID, Certificate, CertificateChainValidationEngine, CertificatePolicies, CertificateRevocationList, CertificateSet, CertificateTemplate, CertificationRequest, ChainValidationCode, ChainValidationError, ContentInfo, CryptoEngine, DigestInfo, DistributionPoint, ECCCMSSharedInfo, ECNamedCurves, ECPrivateKey, ECPublicKey, EncapsulatedContentInfo, EncryptedContentInfo, EncryptedData, EnvelopedData, ExtKeyUsage, Extension, ExtensionValueFactory, Extensions, GeneralName, GeneralNames, GeneralSubtree, HASHED_MESSAGE, HASH_ALGORITHM, Holder, InfoAccess, IssuerAndSerialNumber, IssuerSerial, IssuingDistributionPoint, KEKIdentifier, KEKRecipientInfo, KeyAgreeRecipientIdentifier, KeyAgreeRecipientInfo, KeyBag, KeyTransRecipientInfo, MICROS, MILLIS, MacData, MessageImprint, NameConstraints, OCSPRequest, OCSPResponse, ObjectDigestInfo, OriginatorIdentifierOrKey, OriginatorInfo, OriginatorPublicKey, OtherCertificateFormat, OtherKeyAttribute, OtherPrimeInfo, OtherRecipientInfo, OtherRevocationInfoFormat, PBES2Params, PBKDF2Params, PFX, PKCS8ShroudedKeyBag, PKIStatus, PKIStatusInfo, POLICY_IDENTIFIER, POLICY_QUALIFIERS, ParameterError, PasswordRecipientinfo, PkiObject, PolicyConstraints, PolicyInformation, PolicyMapping, PolicyMappings, PolicyQualifierInfo, PrivateKeyInfo, PrivateKeyUsagePeriod, PublicKeyInfo, QCStatement, QCStatements, RDN, RSAESOAEPParams, RSAPrivateKey, RSAPublicKey, RSASSAPSSParams, RecipientEncryptedKey, RecipientEncryptedKeys, RecipientIdentifier, RecipientInfo, RecipientKeyIdentifier, RelativeDistinguishedNames, Request, ResponseBytes, ResponseData, RevocationInfoChoices, RevokedCertificate, SECONDS, SafeBag, SafeBagValueFactory, SafeContents, SecretBag, Signature, SignedAndUnsignedAttributes, SignedCertificateTimestamp, SignedCertificateTimestampList, SignedData, SignedDataVerifyError, SignerInfo, SingleResponse, SubjectDirectoryAttributes, TBSRequest, TSTInfo, TYPE$4 as TYPE, TYPE_AND_VALUES, Time, TimeStampReq, TimeStampResp, TimeType, V2Form, VALUE$5 as VALUE, VALUE_BEFORE_DECODE, checkCA, createCMSECDSASignature, createECDSASignatureFromCMS, engine, getAlgorithmByOID, getAlgorithmParameters, getCrypto, getEngine, getHashAlgorithm, getOIDByAlgorithm, getRandomValues, id_AnyPolicy, id_AuthorityInfoAccess, id_AuthorityKeyIdentifier, id_BaseCRLNumber, id_BasicConstraints, id_CRLBag_X509CRL, id_CRLDistributionPoints, id_CRLNumber, id_CRLReason, id_CertBag_AttributeCertificate, id_CertBag_SDSICertificate, id_CertBag_X509Certificate, id_CertificateIssuer, id_CertificatePolicies, id_ContentType_Data, id_ContentType_EncryptedData, id_ContentType_EnvelopedData, id_ContentType_SignedData, id_ExtKeyUsage, id_FreshestCRL, id_InhibitAnyPolicy, id_InvalidityDate, id_IssuerAltName, id_IssuingDistributionPoint, id_KeyUsage, id_MicrosoftAppPolicies, id_MicrosoftCaVersion, id_MicrosoftCertTemplateV1, id_MicrosoftCertTemplateV2, id_MicrosoftPrevCaCertHash, id_NameConstraints, id_PKIX_OCSP_Basic, id_PolicyConstraints, id_PolicyMappings, id_PrivateKeyUsagePeriod, id_QCStatements, id_SignedCertificateTimestampList, id_SubjectAltName, id_SubjectDirectoryAttributes, id_SubjectInfoAccess, id_SubjectKeyIdentifier, id_ad, id_ad_caIssuers, id_ad_ocsp, id_eContentType_TSTInfo, id_pkix, id_sha1, id_sha256, id_sha384, id_sha512, kdf, setEngine, stringPrep, verifySCTsForCertificate };\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\r\nclass BufferSourceConverter {\r\n    static isArrayBuffer(data) {\r\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\r\n    }\r\n    static toArrayBuffer(data) {\r\n        if (this.isArrayBuffer(data)) {\r\n            return data;\r\n        }\r\n        if (data.byteLength === data.buffer.byteLength) {\r\n            return data.buffer;\r\n        }\r\n        return this.toUint8Array(data).slice().buffer;\r\n    }\r\n    static toUint8Array(data) {\r\n        return this.toView(data, Uint8Array);\r\n    }\r\n    static toView(data, type) {\r\n        if (data.constructor === type) {\r\n            return data;\r\n        }\r\n        if (this.isArrayBuffer(data)) {\r\n            return new type(data);\r\n        }\r\n        if (this.isArrayBufferView(data)) {\r\n            return new type(data.buffer, data.byteOffset, data.byteLength);\r\n        }\r\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n    }\r\n    static isBufferSource(data) {\r\n        return this.isArrayBufferView(data)\r\n            || this.isArrayBuffer(data);\r\n    }\r\n    static isArrayBufferView(data) {\r\n        return ArrayBuffer.isView(data)\r\n            || (data && this.isArrayBuffer(data.buffer));\r\n    }\r\n    static isEqual(a, b) {\r\n        const aView = BufferSourceConverter.toUint8Array(a);\r\n        const bView = BufferSourceConverter.toUint8Array(b);\r\n        if (aView.length !== bView.byteLength) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < aView.length; i++) {\r\n            if (aView[i] !== bView[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static concat(...args) {\r\n        if (Array.isArray(args[0])) {\r\n            const buffers = args[0];\r\n            let size = 0;\r\n            for (const buffer of buffers) {\r\n                size += buffer.byteLength;\r\n            }\r\n            const res = new Uint8Array(size);\r\n            let offset = 0;\r\n            for (const buffer of buffers) {\r\n                const view = this.toUint8Array(buffer);\r\n                res.set(view, offset);\r\n                offset += view.length;\r\n            }\r\n            if (args[1]) {\r\n                return this.toView(res, args[1]);\r\n            }\r\n            return res.buffer;\r\n        }\r\n        else {\r\n            return this.concat(args);\r\n        }\r\n    }\r\n}\n\nclass Utf8Converter {\r\n    static fromString(text) {\r\n        const s = unescape(encodeURIComponent(text));\r\n        const uintArray = new Uint8Array(s.length);\r\n        for (let i = 0; i < s.length; i++) {\r\n            uintArray[i] = s.charCodeAt(i);\r\n        }\r\n        return uintArray.buffer;\r\n    }\r\n    static toString(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let encodedString = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            encodedString += String.fromCharCode(buf[i]);\r\n        }\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n}\r\nclass Utf16Converter {\r\n    static toString(buffer, littleEndian = false) {\r\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\r\n        const dataView = new DataView(arrayBuffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\r\n            const code = dataView.getUint16(i, littleEndian);\r\n            res += String.fromCharCode(code);\r\n        }\r\n        return res;\r\n    }\r\n    static fromString(text, littleEndian = false) {\r\n        const res = new ArrayBuffer(text.length * 2);\r\n        const dataView = new DataView(res);\r\n        for (let i = 0; i < text.length; i++) {\r\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nclass Convert {\r\n    static isHex(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-z0-9]+$/i.test(data);\r\n    }\r\n    static isBase64(data) {\r\n        return typeof data === \"string\"\r\n            && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n    }\r\n    static isBase64Url(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n    }\r\n    static ToString(buffer, enc = \"utf8\") {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.ToUtf8String(buf);\r\n            case \"binary\":\r\n                return this.ToBinary(buf);\r\n            case \"hex\":\r\n                return this.ToHex(buf);\r\n            case \"base64\":\r\n                return this.ToBase64(buf);\r\n            case \"base64url\":\r\n                return this.ToBase64Url(buf);\r\n            case \"utf16le\":\r\n                return Utf16Converter.toString(buf, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buf);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static FromString(str, enc = \"utf8\") {\r\n        if (!str) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.FromUtf8String(str);\r\n            case \"binary\":\r\n                return this.FromBinary(str);\r\n            case \"hex\":\r\n                return this.FromHex(str);\r\n            case \"base64\":\r\n                return this.FromBase64(str);\r\n            case \"base64url\":\r\n                return this.FromBase64Url(str);\r\n            case \"utf16le\":\r\n                return Utf16Converter.fromString(str, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(str);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static ToBase64(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        if (typeof btoa !== \"undefined\") {\r\n            const binary = this.ToString(buf, \"binary\");\r\n            return btoa(binary);\r\n        }\r\n        else {\r\n            return Buffer.from(buf).toString(\"base64\");\r\n        }\r\n    }\r\n    static FromBase64(base64) {\r\n        const formatted = this.formatString(base64);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64(formatted)) {\r\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n        }\r\n        if (typeof atob !== \"undefined\") {\r\n            return this.FromBinary(atob(formatted));\r\n        }\r\n        else {\r\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n        }\r\n    }\r\n    static FromBase64Url(base64url) {\r\n        const formatted = this.formatString(base64url);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64Url(formatted)) {\r\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n        }\r\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n    }\r\n    static ToBase64Url(data) {\r\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n    }\r\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.FromBinary(text);\r\n            case \"utf8\":\r\n                return Utf8Converter.fromString(text);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(text);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.fromString(text, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.ToBinary(buffer);\r\n            case \"utf8\":\r\n                return Utf8Converter.toString(buffer);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buffer);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.toString(buffer, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static FromBinary(text) {\r\n        const stringLength = text.length;\r\n        const resultView = new Uint8Array(stringLength);\r\n        for (let i = 0; i < stringLength; i++) {\r\n            resultView[i] = text.charCodeAt(i);\r\n        }\r\n        return resultView.buffer;\r\n    }\r\n    static ToBinary(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            res += String.fromCharCode(buf[i]);\r\n        }\r\n        return res;\r\n    }\r\n    static ToHex(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        const splitter = \"\";\r\n        const res = [];\r\n        const len = buf.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const char = buf[i].toString(16).padStart(2, \"0\");\r\n            res.push(char);\r\n        }\r\n        return res.join(splitter);\r\n    }\r\n    static FromHex(hexString) {\r\n        let formatted = this.formatString(hexString);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isHex(formatted)) {\r\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n        }\r\n        if (formatted.length % 2) {\r\n            formatted = `0${formatted}`;\r\n        }\r\n        const res = new Uint8Array(formatted.length / 2);\r\n        for (let i = 0; i < formatted.length; i = i + 2) {\r\n            const c = formatted.slice(i, i + 2);\r\n            res[i / 2] = parseInt(c, 16);\r\n        }\r\n        return res.buffer;\r\n    }\r\n    static ToUtf16String(buffer, littleEndian = false) {\r\n        return Utf16Converter.toString(buffer, littleEndian);\r\n    }\r\n    static FromUtf16String(text, littleEndian = false) {\r\n        return Utf16Converter.fromString(text, littleEndian);\r\n    }\r\n    static Base64Padding(base64) {\r\n        const padCount = 4 - (base64.length % 4);\r\n        if (padCount < 4) {\r\n            for (let i = 0; i < padCount; i++) {\r\n                base64 += \"=\";\r\n            }\r\n        }\r\n        return base64;\r\n    }\r\n    static formatString(data) {\r\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n    }\r\n}\r\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\r\n    const res = arguments[0];\r\n    for (let i = 1; i < arguments.length; i++) {\r\n        const obj = arguments[i];\r\n        for (const prop in obj) {\r\n            res[prop] = obj[prop];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction combine(...buf) {\r\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n    const res = new Uint8Array(totalByteLength);\r\n    let currentPos = 0;\r\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n        for (const item2 of arr) {\r\n            res[currentPos++] = item2;\r\n        }\r\n    });\r\n    return res.buffer;\r\n}\r\nfunction isEqual(bytes1, bytes2) {\r\n    if (!(bytes1 && bytes2)) {\r\n        return false;\r\n    }\r\n    if (bytes1.byteLength !== bytes2.byteLength) {\r\n        return false;\r\n    }\r\n    const b1 = new Uint8Array(bytes1);\r\n    const b2 = new Uint8Array(bytes2);\r\n    for (let i = 0; i < bytes1.byteLength; i++) {\r\n        if (b1[i] !== b2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct.bind();\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}"],"names":["assertBigInt","BigInt","Error","concat","buffers","outputLength","prevLength","i","length","byteLength","retView","Uint8Array","buffer","set","checkBufferParams","baseBlock","inputBuffer","inputOffset","inputLength","error","ViewWriter","constructor","this","items","write","buf","push","final","powers2","digitsString","NAME","VALUE_HEX_VIEW","EMPTY_STRING","EMPTY_BUFFER","ArrayBuffer","EMPTY_VIEW","END_OF_CONTENT_NAME","OCTET_STRING_NAME","BIT_STRING_NAME","HexBlock","BaseClass","_a","args","super","params","isHexOnly","valueHexView","valueHex","slice","value","fromBER","view","endLength","subarray","blockLength","warnings","toBER","sizeOnly","toJSON","LocalBaseBlock","valueBeforeDecode","valueBeforeDecodeView","static","blockName","ValueBlock","TypeError","writer","LocalIdentificationBlock","idBlock","_b","_c","_d","tagClass","tagNumber","isConstructed","firstOctet","number","encodedBuf","encodedView","size","curView","inputView","intBuffer","tagNumberMask","count","intTagNumberBuffer","tagNumberBufferMaxLength","tempBufferView","LocalLengthBlock","lenBlock","isIndefiniteForm","longFormUsed","lenOffset","lengthBufferView","retBuf","typeStore","BaseBlock","name","optional","primitiveSchema","parameters","valueBlockType","valueBlock","resultOffset","_writer","prepareIndefiniteForm","idBlockBuf","valueBlockBuf","lenBlockBuf","object","toString","encoding","onAsciiEncoding","isEqual","other","thisRaw","otherRaw","Constructed","BaseStringBlock","stringValueBlockType","fromString","getValue","setValue","fromBuffer","LocalPrimitiveValueBlock","_a$w","_a$v","_a$u","_a$t","_a$s","_a$r","_a$q","_a$p","_a$o","_a$n","_a$m","_a$l","_a$k","_a$j","_a$i","_a$h","_a$g","_a$f","_a$e","_a$d","_a$c","_a$b","_a$a","_a$9","_a$8","_a$7","_a$6","_a$5","_a$4","_a$3","_a$2","_a$1","Primitive","localFromBER","incomingOffset","returnObject","offset","result","newASN1Type","EndOfContent","Boolean","Integer","BitString","OctetString","Null","ObjectIdentifier","Enumerated","Utf8String","RelativeObjectIdentifier","TIME","Sequence","Set","NumericString","PrintableString","TeletexString","VideotexString","IA5String","UTCTime","GeneralizedTime","GraphicString","VisibleString","GeneralString","UniversalString","CharacterString","BmpString","DATE","TimeOfDay","DateTime","Duration","newObject","inputObject","newType","localChangeType","LocalConstructedValueBlock","currentOffset","indefiniteLength","pop","values","split","map","o","join","LocalEndOfContentValueBlock","override","LocalBooleanValueBlock","octet","LocalOctetStringValueBlock","prototype","call","currentBlockName","asn","e","array","content","LocalBitStringValueBlock","unusedBits","bits","byte","padStart","bitsStr","substring","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","counter","power2","n","p","digits","newValue","viewSub","b","LocalIntegerValueBlock","_valueDec","setValueHex","undefined","valueDec","v","fromDER","expectedLength","toDER","updatedView","firstBit","currentByte","bitNumber","asn1View","flag","byteNumber","charAt","Object","defineProperty","get","toBigInt","bigIntValue","hex","replace","secondInt","convertToDER","integer","convertFromDER","LocalSidValueBlock","isFirstSid","tempView","valueBigInt","bytes","parseInt","len","sidValue","LocalObjectIdentifierValueBlock","sidBlock","retBuffers","valueBuf","string","pos1","pos2","sid","indexOf","plus","parsedSID","isNaN","Number","MAX_SAFE_INTEGER","sidStr","sidArray","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","LocalStringValueBlock","LocalSimpleStringValueBlock","LocalSimpleStringBlock","String","fromCharCode","apply","inputString","strLen","charCodeAt","LocalUtf8StringValueBlock","ex","LocalBmpStringValueBlock","LocalUniversalStringValueBlock","copyBuffer","isView","valueView","Uint32Array","strLength","codeBuf","codeView","dif","j","valueDate","year","month","day","hour","minute","fromDate","toBuffer","str","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parserArray","exec","outputArray","Array","toISOString","millisecond","getUTCMilliseconds","parser","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","valueOf","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","Any","Choice","Repeated","local","RawData","data","dataView","compareSchema","root","inputData","inputSchema","verified","_result","hasOwnProperty","encodedId","schemaView","admission","maxLength","_optional","arrayRoot","asn1","exports","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","code","start","end","num","output","base64","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","arg","encodingOrOffset","allocUnsafe","from","isEncoding","actual","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","obj","isBuffer","checked","numberIsNaN","type","isArray","fromObject","toPrimitive","assertSize","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","enumerable","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","log","LN2","ByteStream","fromUint8Array","fromHexString","hexstring","stub","_view","_buffer","clear","stringLength","hexString","hexMap","Map","temp","toHexString","toUpperCase","realloc","append","stream","initialSize","streamViewLength","subarrayView","insert","isEqualView","findPattern","pattern","start_","length_","backward_","backward","prepareFindParameters","patternLength","patternArray","equal","equalStart","findFirstIn","patterns","id","position","valid","findAllIn","patternFound","findAllPatternIn","findFirstNotIn","left","right","currentLength","findAllNotIn","findFirstSequence","firstIn","skipNotPatterns","firstNotIn","skipPatterns","findAllSequences","findPairedPatterns","leftPattern","rightPattern","currentPositionLeft","leftPatterns","rightPatterns","splice","sort","findPairedArrays","inputLeftPatterns","inputRightPatterns","replacePattern","searchPattern","findAllResult","status","searchPatternPositions","replacePatternPositions","element","patternDifference","changedBuffer","changedView","currentPosition","k","SeqStream","_stream","_length","_start","appendBlock","prevStart","resetPosition","gap","beforeAppend","appendView","appendChar","char","appendUint16","Uint16Array","appendUint24","appendUint32","appendInt16","Int16Array","appendInt32","Int32Array","getBlock","changeLength","getUint16","block","getInt16","negative","getUint24","getUint32","getInt32","APPEND_BLOCK","ArgumentError","types","isType","typeNames","Function","ParameterError","field","fields","assert","AsnError","PkiObject","CLASS_NAME","raw","schema","memberName","className","toSchema","stringPrep","isSpace","cutResult","TYPE$5","VALUE$6","AttributeTypeAndValue","defaultValues","fromSchema","names","assertSchema","typeValue","_object","keys","compareTo","stringBlockNames","isStringPair","thisName","value1","value2","localeCompare","TYPE_AND_VALUES","VALUE_BEFORE_DECODE","RelativeDistinguishedNames","typesAndValues","memberValue","repeatedSequence","repeatedSet","typeAndValue","RDN","index","entries","TYPE$4","VALUE$5","builtInStandardAttributes","country_name","administration_domain_name","network_address","terminal_identifier","private_domain_name","organization_name","numeric_user_identifier","personal_name","organizational_unit_names","builtInDomainDefinedAttributes","extensionAttributes","GeneralName","directoryName","otherName","rfc822Name","dNSName","x400Address","ediPartyName","uniformResourceIdentifier","iPAddress","registeredID","valueBER","asnValue","ACCESS_METHOD","ACCESS_LOCATION","CLEAR_PROPS$1v","AccessDescription","accessMethod","accessLocation","SECONDS","MILLIS","MICROS","Accuracy","seconds","millis","micros","intMillis","intMicros","ALGORITHM_ID","ALGORITHM_PARAMS","ALGORITHM$2","PARAMS","CLEAR_PROPS$1u","AlgorithmIdentifier","algorithmId","algorithmParams","algorithmIdentifier","algorithm","JSON","stringify","ALT_NAMES","CLEAR_PROPS$1t","AltName","altNames","TYPE$3","VALUES$1","CLEAR_PROPS$1s","Attribute","setName","NOT_BEFORE_TIME","NOT_AFTER_TIME","CLEAR_PROPS$1r","AttCertValidityPeriod","notBeforeTime","notAfterTime","NAMES","GENERAL_NAMES","GeneralNames","generalNames","id_SubjectAltName","id_IssuerAltName","id_BasicConstraints","id_IssuingDistributionPoint","id_CertificateIssuer","id_NameConstraints","id_CRLDistributionPoints","id_FreshestCRL","id_CertificatePolicies","id_AnyPolicy","id_PolicyMappings","id_AuthorityKeyIdentifier","id_PolicyConstraints","id_AuthorityInfoAccess","id_SignedCertificateTimestampList","id_ContentType_Data","id_ContentType_SignedData","id_ContentType_EnvelopedData","id_ContentType_EncryptedData","id_CertBag_X509Certificate","id_CertBag_AttributeCertificate","id_CRLBag_X509CRL","id_ad","id_PKIX_OCSP_Basic","KEY_IDENTIFIER$1","AUTHORITY_CERT_ISSUER","AUTHORITY_CERT_SERIAL_NUMBER","CLEAR_PROPS$1q","AuthorityKeyIdentifier","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","PATH_LENGTH_CONSTRAINT","CA","BasicConstraints","cA","pathLenConstraint","CERTIFICATE_INDEX","KEY_INDEX","CAVersion","certificateIndex","keyIndex","tempValue","keyIndexBuffer","keyIndexView8","keyIndexView16","certificateIndexBuffer","certificateIndexView8","certificateIndexView16","POLICY_QUALIFIER_ID","QUALIFIER","CLEAR_PROPS$1p","PolicyQualifierInfo","policyQualifierId","qualifier","POLICY_IDENTIFIER","POLICY_QUALIFIERS","CLEAR_PROPS$1o","PolicyInformation","policyIdentifier","policyQualifiers","CERTIFICATE_POLICIES","CLEAR_PROPS$1n","CertificatePolicies","certificatePolicies","TEMPLATE_ID","TEMPLATE_MAJOR_VERSION","TEMPLATE_MINOR_VERSION","CLEAR_PROPS$1m","CertificateTemplate","templateID","templateMajorVersion","templateMinorVersion","DISTRIBUTION_POINT$1","DISTRIBUTION_POINT_NAMES$1","REASONS","CRL_ISSUER","CRL_ISSUER_NAMES","CLEAR_PROPS$1l","DistributionPoint","distributionPoint","reasons","cRLIssuer","distributionPointNames","cRLIssuerNames","internalValue","DISTRIBUTION_POINTS","CLEAR_PROPS$1k","CRLDistributionPoints","distributionPoints","KEY_PURPOSES","CLEAR_PROPS$1j","ExtKeyUsage","keyPurposes","ACCESS_DESCRIPTIONS","InfoAccess","accessDescriptions","DISTRIBUTION_POINT","DISTRIBUTION_POINT_NAMES","ONLY_CONTAINS_USER_CERTS","ONLY_CONTAINS_CA_CERTS","ONLY_SOME_REASON","INDIRECT_CRL","ONLY_CONTAINS_ATTRIBUTE_CERTS","CLEAR_PROPS$1i","IssuingDistributionPoint","onlyContainsUserCerts","onlyContainsCACerts","onlySomeReasons","indirectCRL","onlyContainsAttributeCerts","BASE","MINIMUM","MAXIMUM","CLEAR_PROPS$1h","GeneralSubtree","base","minimum","maximum","valueMinimum","valueMaximum","PERMITTED_SUBTREES","EXCLUDED_SUBTREES","CLEAR_PROPS$1g","NameConstraints","permittedSubtrees","excludedSubtrees","REQUIRE_EXPLICIT_POLICY","INHIBIT_POLICY_MAPPING","CLEAR_PROPS$1f","PolicyConstraints","requireExplicitPolicy","inhibitPolicyMapping","field1","ber1","int1","field2","ber2","int2","ISSUER_DOMAIN_POLICY","SUBJECT_DOMAIN_POLICY","CLEAR_PROPS$1e","PolicyMapping","issuerDomainPolicy","subjectDomainPolicy","MAPPINGS","CLEAR_PROPS$1d","PolicyMappings","mappings","NOT_BEFORE$1","NOT_AFTER$1","CLEAR_PROPS$1c","PrivateKeyUsagePeriod","notBefore","notAfter","localNotBefore","localNotAfter","ID","TYPE$2","VALUES","QC_STATEMENT_CLEAR_PROPS","QC_STATEMENTS_CLEAR_PROPS","QCStatement","QCStatements","ECNamedCurves","namedCurves","nameOrId","register","X","Y","NAMED_CURVE$1","ECPublicKey","namedCurve","json","fromJSON","schema1","find","coordinateLength","crv","xConvertBuffer","convertBufferView","yConvertBuffer","MODULUS$1","PUBLIC_EXPONENT$1","CLEAR_PROPS$1b","RSAPublicKey","modulus","publicExponent","ALGORITHM$1","SUBJECT_PUBLIC_KEY","CLEAR_PROPS$1a","PublicKeyInfo","subjectPublicKey","parsedKey","_parsedKey","publicKeyASN1","jwk","kty","publicKeyJWK","assign","async","publicKey","crypto","getCrypto","exportedKey","exportKey","exception","VERSION$l","PRIVATE_KEY$1","NAMED_CURVE","PUBLIC_KEY$1","CLEAR_PROPS$19","ECPrivateKey","version","privateKey","compareWithDefault","publicKeyData","curve","privateKeyJSON","publicKeyJSON","convertBuffer","PRIME","EXPONENT","COEFFICIENT$1","CLEAR_PROPS$18","OtherPrimeInfo","prime","exponent","coefficient","r","t","VERSION$k","MODULUS","PUBLIC_EXPONENT","PRIVATE_EXPONENT","PRIME1","PRIME2","EXPONENT1","EXPONENT2","COEFFICIENT","OTHER_PRIME_INFOS","CLEAR_PROPS$17","RSAPrivateKey","privateExponent","prime1","prime2","exponent1","exponent2","otherPrimeInfos","otherPrimeInfosName","otherPrimeInfo","q","dp","dq","qi","oth","VERSION$j","PRIVATE_KEY_ALGORITHM","PRIVATE_KEY","ATTRIBUTES$5","PARSED_KEY","CLEAR_PROPS$16","PrivateKeyInfo","privateKeyAlgorithm","attributes","privateKeyASN1","CONTENT_TYPE$1","CONTENT_ENCRYPTION_ALGORITHM","ENCRYPTED_CONTENT","CLEAR_PROPS$15","EncryptedContentInfo","contentType","contentEncryptionAlgorithm","encryptedContent","constrString","pieceSize","pieceView","_array","sequenceLengthBlock","encryptedValue","getEncryptedContent","HASH_ALGORITHM$4","MASK_GEN_ALGORITHM$1","SALT_LENGTH","TRAILER_FIELD","CLEAR_PROPS$14","RSASSAPSSParams","hashAlgorithm","maskGenAlgorithm","saltLength","trailerField","SALT","ITERATION_COUNT","KEY_LENGTH","PRF","CLEAR_PROPS$13","PBKDF2Params","salt","iterationCount","keyLength","prf","saltPrimitive","saltConstructed","KEY_DERIVATION_FUNC","ENCRYPTION_SCHEME","CLEAR_PROPS$12","PBES2Params","keyDerivationFunc","encryptionScheme","AbstractCryptoEngine","subtle","webkitSubtle","encrypt","decrypt","sign","verify","digest","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","importKey","getRandomValues","makePKCS12B2Key","cryptoEngine","password","u","passwordViewInitial","passwordTransformed","passwordTransformedView","D","dView","sLen","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","internalSequence","Promise","resolve","then","_I","dAndI","dAndIView","roundBuffer","B","bView","iRound","sliceStart","sliceLength","chunk","l","resultBuffer","prepareAlgorithm","hash","CryptoEngine","format","keyData","extractable","keyUsages","_e","_f","alg","publicKeyInfo","key_ops","privateKeyInfo","key","parse","inputFormat","outputFormat","getAlgorithmByOID","oid","safety","kdf","getOIDByAlgorithm","getAlgorithmParameters","algorithmName","operation","usages","modulusLength","public","iv","info","iterations","getHashAlgorithm","signatureAlgorithm","contentEncryptionOID","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","pbkdfKey","derivedKey","encryptedData","pbes2Parameters","encryptedContentInfo","dataBuffer","hmacAlgorithm","pkcsKey","hmacKey","contentToStamp","signatureToVerify","contentToVerify","paramsObject","hashAlgorithmOID","pssParameters","signature","signatureBuffer","rBuffer","rInteger","sBuffer","sInteger","createCMSECDSASignature","fillPublicKeyParameters","shaAlgorithm","algorithmObject","publicKeyAlgorithm","publicKeyAlgorithmParams","curveObject","publicKeyInfoBuffer","algorithmParamsChecked","getPublicKey","signatureValue","cmsSignature","pointSize","rValueView","sValueView","createECDSASignatureFromCMS","hashAlgo","engine","isCryptoEngine","setEngine","self","cryptoArg","subtleArg","process","g","window","pid","pkijs","_engine","getEngine","kdfWithCounter","hashFunction","zBuffer","Counter","SharedInfo","counterBuffer","counterView","combinedBuffer","Zbuffer","keydatalen","hashLength","maxCounter","quotient","incomingResult","currentCounter","newBuffer","newView","combinedView","VERSION$i","LOG_ID","EXTENSIONS$6","TIMESTAMP","HASH_ALGORITHM$3","SIGNATURE_ALGORITHM$8","SIGNATURE$7","NONE","SHA1","SHA224","SHA256","SHA384","SHA512","ANONYMOUS","ECDSA","SignedCertificateTimestamp","logID","timestamp","extensions","fromStream","seqStream","extensionsLength","signatureLength","signatureData","toStream","timeBuffer","timeView","baseArray","_hashAlgorithm","_signatureAlgorithm","_signature","logs","dataType","logId","publicKeyBase64","log_id","pki","verifyWithPublicKey","TIMESTAMPS","SignedCertificateTimestampList","timestamps","overallLength","timestampsData","timestampStream","ATTRIBUTES$4","CLEAR_PROPS$11","SubjectDirectoryAttributes","ExtensionValueFactory","item","parsingError","getItems","EXTN_ID","CRITICAL","EXTN_VALUE","PARSED_VALUE$5","CLEAR_PROPS$10","Extension","extnID","critical","extnValue","parsedValue","_parsedValue","EXTENSIONS$5","CLEAR_PROPS$$","Extensions","extension","ISSUER$5","SERIAL_NUMBER$6","ISSUER_UID","CLEAR_PROPS$_","IssuerSerial","issuer","serialNumber","issuerUID","VERSION$h","BASE_CERTIFICATE_ID$2","SUBJECT_NAME","ISSUER$4","SIGNATURE$6","SERIAL_NUMBER$5","ATTR_CERT_VALIDITY_PERIOD$1","ATTRIBUTES$3","ISSUER_UNIQUE_ID$2","EXTENSIONS$4","CLEAR_PROPS$Z","AttributeCertificateInfoV1","baseCertificateID","subjectName","attrCertValidityPeriod","issuerUniqueID","ACINFO$1","SIGNATURE_ALGORITHM$7","SIGNATURE_VALUE$4","CLEAR_PROPS$Y","AttributeCertificateV1","acinfo","DIGESTED_OBJECT_TYPE","OTHER_OBJECT_TYPE_ID","DIGEST_ALGORITHM$2","OBJECT_DIGEST","CLEAR_PROPS$X","ObjectDigestInfo","digestedObjectType","otherObjectTypeID","digestAlgorithm","objectDigest","ISSUER_NAME","BASE_CERTIFICATE_ID$1","OBJECT_DIGEST_INFO$1","CLEAR_PROPS$W","V2Form","issuerName","objectDigestInfo","BASE_CERTIFICATE_ID","ENTITY_NAME","OBJECT_DIGEST_INFO","CLEAR_PROPS$V","Holder","entityName","VERSION$g","HOLDER","ISSUER$3","SIGNATURE$5","SERIAL_NUMBER$4","ATTR_CERT_VALIDITY_PERIOD","ATTRIBUTES$2","ISSUER_UNIQUE_ID$1","EXTENSIONS$3","CLEAR_PROPS$U","AttributeCertificateInfoV2","holder","ACINFO","SIGNATURE_ALGORITHM$6","SIGNATURE_VALUE$3","CLEAR_PROPS$T","AttributeCertificateV2","CONTENT_TYPE","CONTENT","CLEAR_PROPS$S","ContentInfo","DATA","SIGNED_DATA","ENVELOPED_DATA","ENCRYPTED_DATA","TYPE$1","VALUE$4","UTC_TIME_NAME","GENERAL_TIME_NAME","CLEAR_PROPS$R","TimeType","Time","utcTimeName","generalTimeName","TBS$4","VERSION$f","SERIAL_NUMBER$3","SIGNATURE$4","ISSUER$2","NOT_BEFORE","NOT_AFTER","SUBJECT$1","SUBJECT_PUBLIC_KEY_INFO","ISSUER_UNIQUE_ID","SUBJECT_UNIQUE_ID","EXTENSIONS$2","SIGNATURE_ALGORITHM$5","SIGNATURE_VALUE$2","TBS_CERTIFICATE","TBS_CERTIFICATE_VERSION","TBS_CERTIFICATE_SERIAL_NUMBER","TBS_CERTIFICATE_SIGNATURE","TBS_CERTIFICATE_ISSUER","TBS_CERTIFICATE_NOT_BEFORE","TBS_CERTIFICATE_NOT_AFTER","TBS_CERTIFICATE_SUBJECT","TBS_CERTIFICATE_SUBJECT_PUBLIC_KEY","TBS_CERTIFICATE_ISSUER_UNIQUE_ID","TBS_CERTIFICATE_SUBJECT_UNIQUE_ID","TBS_CERTIFICATE_EXTENSIONS","CLEAR_PROPS$Q","tbsCertificate","tbsCertificateVersion","tbsCertificateSerialNumber","tbsCertificateValidity","subject","subjectPublicKeyInfo","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","Certificate","tbsView","subjectUniqueID","tbs","encodeTBS","encodeFlag","tbsSchema","signatureParameters","getSignatureParameters","signWithPrivateKey","issuerCertificate","checkCA","cert","signerCert","isCA","CERT_ID$1","CERT_VALUE","PARSED_VALUE$4","CLEAR_PROPS$P","CertBag","certId","certValue","certValueHex","USER_CERTIFICATE","REVOCATION_DATE","CRL_ENTRY_EXTENSIONS","CLEAR_PROPS$O","RevokedCertificate","userCertificate","revocationDate","crlEntryExtensions","TBS$3","VERSION$e","SIGNATURE$3","ISSUER$1","THIS_UPDATE$1","NEXT_UPDATE$1","REVOKED_CERTIFICATES","CRL_EXTENSIONS","SIGNATURE_ALGORITHM$4","SIGNATURE_VALUE$1","TBS_CERT_LIST","TBS_CERT_LIST_VERSION","TBS_CERT_LIST_SIGNATURE","TBS_CERT_LIST_ISSUER","TBS_CERT_LIST_THIS_UPDATE","TBS_CERT_LIST_NEXT_UPDATE","TBS_CERT_LIST_REVOKED_CERTIFICATES","TBS_CERT_LIST_EXTENSIONS","CLEAR_PROPS$N","tbsCertList","tbsCertListVersion","tbsCertListThisUpdate","tbsCertListNextUpdate","tbsCertListRevokedCertificates","crlExtensions","WELL_KNOWN_EXTENSIONS","CertificateRevocationList","thisUpdate","nextUpdate","revokedCertificates","isCertificateRevoked","certificate","revokedCertificate","CRL_ID","CRL_VALUE","PARSED_VALUE$3","CLEAR_PROPS$M","CRLBag","crlId","crlValue","VERSION$d","ENCRYPTED_CONTENT_INFO$1","UNPROTECTED_ATTRS$1","CLEAR_PROPS$L","EncryptedData","unprotectedAttrs","encryptParams","encryptEncryptedContentInfo","decryptParams","decryptEncryptedContentInfo","ENCRYPTION_ALGORITHM","PARSED_VALUE$2","CLEAR_PROPS$K","PKCS8ShroudedKeyBag","encryptionAlgorithm","cmsEncrypted","decryptedData","SECRET_TYPE_ID","SECRET_VALUE","CLEAR_PROPS$J","SecretBag","secretTypeId","secretValue","SafeBagValueFactory","SafeContents","BAG_ID","BAG_VALUE","BAG_ATTRIBUTES","CLEAR_PROPS$I","SafeBag","bagId","bagValue","bagAttributes","bagType","SAFE_BUGS","safeBags","OTHER_CERT_FORMAT","OTHER_CERT","CLEAR_PROPS$H","OtherCertificateFormat","otherCertFormat","otherCert","CERTIFICATES$1","CLEAR_PROPS$G","CertificateSet","certificates","initialTagNumber","elementSequence","OTHER_REV_INFO_FORMAT","OTHER_REV_INFO","CLEAR_PROPS$F","OtherRevocationInfoFormat","otherRevInfoFormat","otherRevInfo","CRLS$3","OTHER_REVOCATION_INFOS","CLEAR_PROPS$E","RevocationInfoChoices","crls","otherRevocationInfos","CERTS$3","CRLS$2","CLEAR_PROPS$D","OriginatorInfo","certs","sequenceValue","ISSUER","SERIAL_NUMBER$2","CLEAR_PROPS$C","IssuerAndSerialNumber","VARIANT$3","VALUE$3","CLEAR_PROPS$B","RecipientIdentifier","variant","VERSION$c","RID$1","KEY_ENCRYPTION_ALGORITHM$3","ENCRYPTED_KEY$3","RECIPIENT_CERTIFICATE$1","CLEAR_PROPS$A","KeyTransRecipientInfo","rid","keyEncryptionAlgorithm","encryptedKey","recipientCertificate","ALGORITHM","PUBLIC_KEY","CLEAR_PROPS$z","OriginatorPublicKey","VARIANT$2","VALUE$2","CLEAR_PROPS$y","OriginatorIdentifierOrKey","_schema","KEY_ATTR_ID","KEY_ATTR","CLEAR_PROPS$x","OtherKeyAttribute","keyAttrId","keyAttr","SUBJECT_KEY_IDENTIFIER","DATE$1","OTHER$1","CLEAR_PROPS$w","RecipientKeyIdentifier","subjectKeyIdentifier","date","VARIANT$1","VALUE$1","CLEAR_PROPS$v","KeyAgreeRecipientIdentifier","issuerAndSerialNumber","rKeyId","RID","ENCRYPTED_KEY$2","CLEAR_PROPS$u","RecipientEncryptedKey","ENCRYPTED_KEYS","RECIPIENT_ENCRYPTED_KEYS","CLEAR_PROPS$t","RecipientEncryptedKeys","encryptedKeys","VERSION$b","ORIGINATOR","UKM","KEY_ENCRYPTION_ALGORITHM$2","RECIPIENT_ENCRYPTED_KEY","RECIPIENT_CERTIFICATE","RECIPIENT_PUBLIC_KEY","CLEAR_PROPS$s","KeyAgreeRecipientInfo","originator","ukm","recipientEncryptedKeys","recipientPublicKey","KEY_IDENTIFIER","OTHER","CLEAR_PROPS$r","KEKIdentifier","VERSION$a","KEK_ID","KEY_ENCRYPTION_ALGORITHM$1","ENCRYPTED_KEY$1","PER_DEFINED_KEK","CLEAR_PROPS$q","KEKRecipientInfo","kekid","preDefinedKEK","VERSION$9","KEY_DERIVATION_ALGORITHM","KEY_ENCRYPTION_ALGORITHM","ENCRYPTED_KEY","PASSWORD","CLEAR_PROPS$p","PasswordRecipientinfo","keyDerivationAlgorithm","ORI_TYPE","ORI_VALUE","CLEAR_PROPS$o","OtherRecipientInfo","oriType","oriValue","VARIANT","VALUE","CLEAR_PROPS$n","RecipientInfo","blockSequence","assertEmpty","HASH_ALGORITHM$2","MASK_GEN_ALGORITHM","P_SOURCE_ALGORITHM","CLEAR_PROPS$m","RSAESOAEPParams","pSourceAlgorithm","KEY_INFO","ENTITY_U_INFO","SUPP_PUB_INFO","CLEAR_PROPS$l","ECCCMSSharedInfo","keyInfo","entityUInfo","suppPubInfo","VERSION$8","ORIGINATOR_INFO","RECIPIENT_INFOS","ENCRYPTED_CONTENT_INFO","UNPROTECTED_ATTRS","CLEAR_PROPS$k","defaultEncryptionParams","kdfAlgorithm","kekEncryptionLength","curveLengthByName","EnvelopedData","originatorInfo","recipientInfos","addRecipientByCertificate","encryptionParameters","useOAEP","oaepHashAlgorithm","hashOID","recipientIdentifier","_addKeyAgreeRecipientInfo","addRecipientByPreDefinedData","preDefinedData","keyIdentifierBuffer","keyIdentifierView","keyEncryptionAlgorithmParams","kekOID","addRecipientByKeyIdentifier","keyId","extraRecipientInfoParams","aesKWoid","aesKW","ecdhOID","ukmBuffer","ukmView","recipientInfoParams","sessionKey","exportedSessionKey","SubKeyAgreeRecipientInfo","recipientInfo","recipientCurve","recipientCurveLength","ecdhKeys","exportedECDHPublicKey","derivedBits","aesKWAlgorithm","kwAlgorithm","kwLength","kwLengthBuffer","kwLengthView","encodedInfo","ecdhAlgorithm","derivedKeyRaw","awsKW","wrappedKey","ecdhPrivateKey","SubKeyTransRecipientInfo","algorithmParameters","rsaOAEPParams","SubKEKRecipientInfo","kekAlgorithm","kekKey","SubPasswordRecipientinfo","derivationKey","recipientIndex","decryptionParameters","curveOID","recipientPrivateKey","ecdhPublicKey","sharedSecret","applyKDF","includeAlgorithmParams","keyInfoAlgorithm","kdfResult","importAesKwKey","aesKwKey","unwrapSessionKey","importedKey","pbkdf2Key","unwrappedKey","SAFE_CONTENTS","PARSED_VALUE$1","CONTENT_INFOS","AuthenticatedSafe","safeContents","contentInfos","safeContent","errorTarget","authSafeContent","privacyMode","cmsEnveloped","envelopedData","recipientKey","decrypted","contentBuffer","currentParameters","encryptingCertificate","HASH_ALGORITHM$1","ISSUER_NAME_HASH","ISSUER_KEY_HASH","SERIAL_NUMBER$1","CLEAR_PROPS$j","CertID","issuerNameHash","issuerKeyHash","certID","createForCertificate","hashAlgorithmObject","certificateID","hashIssuerName","issuerKeyBuffer","hashIssuerKey","CERT_ID","CERT_STATUS","THIS_UPDATE","NEXT_UPDATE","SINGLE_EXTENSIONS","CLEAR_PROPS$i","SingleResponse","certStatus","singleExtensions","TBS$2","VERSION$7","RESPONDER_ID","PRODUCED_AT","RESPONSES","RESPONSE_EXTENSIONS","RESPONSE_DATA","RESPONSE_DATA_VERSION","RESPONSE_DATA_RESPONDER_ID","RESPONSE_DATA_PRODUCED_AT","RESPONSE_DATA_RESPONSES","RESPONSE_DATA_RESPONSE_EXTENSIONS","CLEAR_PROPS$h","ResponseData","responderID","producedAt","responses","responseExtensions","ResponseDataByName","ResponseDataByKey","response","TRUSTED_CERTS","CERTS$2","CRLS$1","OCSPS$1","CHECK_DATE","FIND_ORIGIN","FIND_ISSUER","ChainValidationCode","ChainValidationError","CertificateChainValidationEngine","trustedCerts","ocsps","checkDate","findOrigin","findIssuer","validationEngine","localCert","trustedCert","checkCertificate","possibleIssuer","extensionFound","authorityCertSerialNumberEqual","intermediateCert","defaultFindOrigin","defaultFindIssuer","passedWhenNotRevValues","localCerts","buildPath","checkUnique","unique","trustedList","isTrusted","findIssuerResult","buildPathResult","findCRL","issuerCertificates","crlsAndCertificates","filter","statusMessage","crl","findOCSP","ocsp","getCertificateStatus","isForCertificate","checkForCA","needToCheckCRL","mustBeCA","keyUsagePresent","cRLSign","resultCode","resultMessage","leafCert","certificatePath","noPath","noValidPath","shortestLength","shortestIndex","path","ocspResult","crlResult","noRevocation","basicCheck","compareDNSName","constraint","namePrepared","constraintPrepared","nameSplitted","constraintSplitted","nameLen","constrLen","compareRFC822Name","ns","cs","compareUniformResourceIdentifier","compareIPAddress","nameView","constraintView","compareDirectoryName","nameStart","localResult","initialPolicySet","initialExplicitPolicy","initialPolicyMappingInhibit","initialInhibitPolicy","initialPermittedSubtreesSet","initialExcludedSubtreesSet","initialRequiredNameForms","explicitPolicyIndicator","policyMappingInhibitIndicator","inhibitAnyPolicyIndicator","pendingConstraints","explicitPolicyPending","policyMappingInhibitPending","inhibitAnyPolicyPending","requiredNameForms","pathDepth","allPolicies","policiesAndCerts","anyPolicyArray","ii","policyMappings","certPolicies","explicitPolicyStart","policyIndex","policyId","certArray","searchAnyPolicy","issuerDomainPolicyIndex","subjectDomainPolicyIndex","authConstrPolicies","anyPolicyFound","userConstrPolicies","policyResult","subjectAltNames","certPermittedSubtrees","certExcludedSubtrees","formFound","constrGroups","groupPermitted","valueExists","group","excluded","unknown","TBS_RESPONSE_DATA","SIGNATURE_ALGORITHM$3","SIGNATURE$2","CERTS$1","BASIC_OCSP_RESPONSE","BASIC_OCSP_RESPONSE_TBS_RESPONSE_DATA","BASIC_OCSP_RESPONSE_SIGNATURE_ALGORITHM","BASIC_OCSP_RESPONSE_SIGNATURE","BASIC_OCSP_RESPONSE_CERTS","CLEAR_PROPS$g","BasicOCSPResponse","tbsResponseData","comparisonResult","hashesObject","certIDs","signatureParams","certIndex","additionalCerts","caCert","certChain","TBS$1","VERSION$6","SUBJECT","SPKI","ATTRIBUTES$1","SIGNATURE_ALGORITHM$2","SIGNATURE_VALUE","CSR_INFO","CSR_INFO_VERSION","CSR_INFO_SUBJECT","CSR_INFO_SPKI","CSR_INFO_ATTRS","CLEAR_PROPS$f","CertificationRequestInfo","CertificationRequestInfoVersion","CertificationRequestInfoAttributes","CertificationRequest","certificationRequestInfo","DIGEST_ALGORITHM$1","DIGEST","CLEAR_PROPS$e","DigestInfo","E_CONTENT_TYPE","E_CONTENT","CLEAR_PROPS$d","EncapsulatedContentInfo","eContentType","eContent","viewHex","MAC","MAC_SALT","ITERATIONS","CLEAR_PROPS$c","MacData","mac","macSalt","HASH_ALGORITHM","HASHED_MESSAGE","CLEAR_PROPS$b","MessageImprint","hashedMessage","REQ_CERT","SINGLE_REQUEST_EXTENSIONS","CLEAR_PROPS$a","Request","reqCert","singleRequestExtensions","TBS","VERSION$5","REQUESTOR_NAME","REQUEST_LIST","REQUEST_EXTENSIONS","TBS_REQUEST$1","TBS_REQUEST_VERSION","TBS_REQUEST_REQUESTOR_NAME","TBS_REQUEST_REQUESTS","TBS_REQUEST_REQUEST_EXTENSIONS","CLEAR_PROPS$9","TBSRequest","requestorName","requestList","requestExtensions","TBSRequestVersion","requests","requestNames","SIGNATURE_ALGORITHM$1","SIGNATURE$1","CERTS","Signature","TBS_REQUEST","OPTIONAL_SIGNATURE","CLEAR_PROPS$8","OCSPRequest","tbsRequest","optionalSignature","RESPONSE_TYPE","RESPONSE","CLEAR_PROPS$7","ResponseBytes","responseType","RESPONSE_STATUS","RESPONSE_BYTES","OCSPResponse","responseStatus","responseBytes","basicResponse","asn1Basic","TYPE","ATTRIBUTES","ENCODED_VALUE","CLEAR_PROPS$6","SignedAndUnsignedAttributes","encodedValue","VERSION$4","SID","DIGEST_ALGORITHM","SIGNED_ATTRS","SIGNATURE_ALGORITHM","SIGNATURE","UNSIGNED_ATTRS","SIGNER_INFO","SIGNER_INFO_VERSION","SIGNER_INFO_SID","SIGNER_INFO_DIGEST_ALGORITHM","SIGNER_INFO_SIGNED_ATTRS","SIGNER_INFO_SIGNATURE_ALGORITHM","SIGNER_INFO_SIGNATURE","SIGNER_INFO_UNSIGNED_ATTRS","CLEAR_PROPS$5","SignerInfo","signedAttrs","unsignedAttrs","sidSchema","currentSid","VERSION$3","POLICY","MESSAGE_IMPRINT$1","SERIAL_NUMBER","GEN_TIME","ORDERING","NONCE$1","ACCURACY","TSA","EXTENSIONS$1","TST_INFO","TST_INFO_VERSION","TST_INFO_POLICY","TST_INFO_MESSAGE_IMPRINT","TST_INFO_SERIAL_NUMBER","TST_INFO_GEN_TIME","TST_INFO_ACCURACY","TST_INFO_ORDERING","TST_INFO_NONCE","TST_INFO_TSA","TST_INFO_EXTENSIONS","CLEAR_PROPS$4","TSTInfo","policy","messageImprint","genTime","accuracy","ordering","nonce","tsa","VERSION$2","DIGEST_ALGORITHMS","ENCAP_CONTENT_INFO","CERTIFICATES","CRLS","SIGNER_INFOS","OCSPS","SIGNED_DATA_VERSION","SIGNED_DATA_DIGEST_ALGORITHMS","SIGNED_DATA_ENCAP_CONTENT_INFO","SIGNED_DATA_CERTIFICATES","SIGNED_DATA_CRLS","SIGNED_DATA_SIGNER_INFOS","CLEAR_PROPS$3","SignedDataVerifyError","signatureVerified","signerCertificate","signerCertificateVerified","timestampSerial","SignedData","digestAlgorithms","encapContentInfo","signerInfos","certificateSet","signerInfoSchema","some","ID_DATA","certificateSetSchema","crlSchema","signerInfo","signer","checkChain","extendedMode","messageDigestValue","tstInfo","chainParams","chainEngine","verificationResult","catch","signerInfoHashAlgorithm","foundContentType","foundMessageDigest","attribute","messageDigest","verifyResult","signerIndex","VERSION$1","AUTH_SAFE","MAC_DATA","PARSED_VALUE","CLERA_PROPS","PFX","authSafe","macData","integrityMode","authenticatedSafe","pbkdf2HashAlgorithm","stampDataWithPassword","toBeSigned","cmsSigned","signingCertificate","signedAttr","checkIntegrity","verifyDataStampedWithPassword","STATUS$1","STATUS_STRINGS","FAIL_INFO","CLEAR_PROPS$2","PKIStatus","PKIStatusInfo","statusStrings","failInfo","_status","VERSION","MESSAGE_IMPRINT","REQ_POLICY","NONCE","CERT_REQ","EXTENSIONS","TIME_STAMP_REQ","TIME_STAMP_REQ_VERSION","TIME_STAMP_REQ_MESSAGE_IMPRINT","TIME_STAMP_REQ_POLICY","TIME_STAMP_REQ_NONCE","TIME_STAMP_REQ_CERT_REQ","TIME_STAMP_REQ_EXTENSIONS","CLEAR_PROPS$1","TimeStampReq","reqPolicy","certReq","STATUS","TIME_STAMP_TOKEN","TIME_STAMP_RESP","TIME_STAMP_RESP_STATUS","TIME_STAMP_RESP_TOKEN","CLEAR_PROPS","TimeStampResp","timeStampToken","assertContentType","verificationParameters","engineName","nodeCrypto","webcrypto","initCryptoEngine","BufferSourceConverter","isArrayBuffer","toUint8Array","toView","isArrayBufferView","aView","Utf8Converter","text","unescape","encodeURIComponent","uintArray","encodedString","decodeURIComponent","escape","Utf16Converter","arrayBuffer","toArrayBuffer","DataView","setUint16","Convert","test","enc","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","ToString","formatted","formatString","isBase64","atob","base64url","isBase64Url","Base64Padding","DEFAULT_UTF8_ENCODING","resultView","isHex","padCount","getParametersValue","defaultValue","bufferToHexCodes","insertSpace","utilFromBase","inputBase","utilToBase","reserved","internalReserved","biggest","basis","utilConcatBuf","utilConcatView","views","utilDecodeTC","condition1","condition2","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","utilEncodeTC","modValue","tempBuf","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","padding","base64Template","base64UrlTemplate","toBase64","useUrlTemplate","skipPadding","skipLeadingZeros","flag1","flag2","template","nonZeroPosition","chr1","chr2","chr3","enc1","enc2","enc3","enc4","fromBase64","cutTailZeros","toSearch","incoming","nonZeroStart","arrayBufferToString","resultString","stringToArrayBuffer","log2","nearestPowerOf2","round","clearProps","propsArray","prop","f","h","w","C","sortIndex","performance","now","unstable_now","z","A","setTimeout","clearTimeout","F","setImmediate","G","callback","startTime","expirationTime","H","J","K","L","M","priorityLevel","navigator","scheduling","isInputPending","bind","N","O","Q","R","MessageChannel","T","U","port2","port1","onmessage","postMessage","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_Profiling","unstable_UserBlockingPriority","unstable_cancelCallback","unstable_continueExecution","unstable_forceFrameRate","unstable_getCurrentPriorityLevel","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_requestPaint","unstable_runWithPriority","unstable_scheduleCallback","delay","unstable_shouldYield","unstable_wrapCallback","module","_assertThisInitialized","ReferenceError","asyncGeneratorStep","gen","reject","_next","_throw","done","_asyncToGenerator","err","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_defineProperty","_getPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_possibleConstructorReturn","_setPrototypeOf","_arrayLikeToArray","arr2","_slicedToArray","_i","iterator","_s","_n","next","minLen","_typeof","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_construct","Parent","Class","_wrapNativeSuper","_cache","has","Wrapper"],"sourceRoot":""}