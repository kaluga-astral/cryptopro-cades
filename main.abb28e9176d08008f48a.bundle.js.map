{"version":3,"file":"main.abb28e9176d08008f48a.bundle.js","mappings":";oIAUYA,EAqBAC,EAoCMC,EAgCNC,EA+CAC,EAqBAC,EAqBAC,EAsBAC,EAgCAC,EAyCAC,EA+CAC,EAwEAC,uDA9YCC,EAAmB,eAMpBZ,GAAAA,EAAAA,EAAAA,sCAAAA,GAAAA,wCAAAA,EAAAA,EAAAA,uCAAAA,GAAAA,yCAAAA,EAAAA,EAAAA,qCAAAA,GAAAA,wCAAAA,IAAAA,EAAAA,cAqBAC,GAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,iBAAAA,KAAAA,mBAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qBAAAA,EAAAA,EAAAA,iBAAAA,IAAAA,mBAAAA,EAAAA,EAAAA,6BAAAA,MAAAA,+BAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,yBAAAA,IAAAA,EAAAA,cAoCMC,GAAAA,EAAAA,EAAAA,uBAAAA,GAAAA,yBAAAA,EAAAA,EAAAA,mBAAAA,GAAAA,qBAAAA,EAAAA,EAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,EAAAA,6BAAAA,IAAAA,+BAAAA,EAAAA,EAAAA,oBAAAA,OAAAA,uBAAAA,IAAAA,EAAAA,cAgCNC,GAAAA,EAAAA,mBAAAA,qEAAAA,EAAAA,2BAAAA,iEAAAA,EAAAA,mBAAAA,uDAAAA,EAAAA,2BAAAA,mDAAAA,EAAAA,0BAAAA,+DAAAA,EAAAA,0BAAAA,6EAAAA,EAAAA,0BAAAA,+DAAAA,EAAAA,0BAAAA,8EAAAA,IAAAA,EAAAA,cA+CAC,GAAAA,EAAAA,EAAAA,8CAAAA,GAAAA,gDAAAA,EAAAA,EAAAA,wCAAAA,GAAAA,0CAAAA,EAAAA,EAAAA,4CAAAA,GAAAA,+CAAAA,IAAAA,EAAAA,cAqBAC,GAAAA,EAAAA,EAAAA,qBAAAA,GAAAA,sBAAAA,EAAAA,EAAAA,uBAAAA,GAAAA,yBAAAA,EAAAA,EAAAA,uBAAAA,GAAAA,0BAAAA,IAAAA,EAAAA,cAqBAC,GAAAA,EAAAA,EAAAA,mBAAAA,YAAAA,qBAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,wBAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,yBAAAA,IAAAA,EAAAA,cAsBAC,GAAAA,EAAAA,EAAAA,6BAAAA,GAAAA,+BAAAA,EAAAA,EAAAA,8BAAAA,GAAAA,gCAAAA,EAAAA,EAAAA,mCAAAA,GAAAA,qCAAAA,EAAAA,EAAAA,iCAAAA,KAAAA,mCAAAA,EAAAA,EAAAA,oCAAAA,KAAAA,uCAAAA,IAAAA,EAAAA,cAgCAC,GAAAA,EAAAA,EAAAA,qBAAAA,GAAAA,uBAAAA,EAAAA,EAAAA,sBAAAA,GAAAA,wBAAAA,EAAAA,EAAAA,4BAAAA,GAAAA,8BAAAA,EAAAA,EAAAA,6BAAAA,GAAAA,+BAAAA,EAAAA,EAAAA,2BAAAA,GAAAA,6BAAAA,EAAAA,EAAAA,4BAAAA,GAAAA,8BAAAA,EAAAA,EAAAA,oCAAAA,GAAAA,sCAAAA,EAAAA,EAAAA,8BAAAA,GAAAA,gCAAAA,EAAAA,EAAAA,yBAAAA,KAAAA,4BAAAA,IAAAA,EAAAA,cAyCAC,GAAAA,EAAAA,EAAAA,sCAAAA,GAAAA,wCAAAA,EAAAA,EAAAA,qCAAAA,GAAAA,uCAAAA,EAAAA,EAAAA,qCAAAA,GAAAA,uCAAAA,EAAAA,EAAAA,oCAAAA,GAAAA,sCAAAA,EAAAA,EAAAA,8BAAAA,GAAAA,gCAAAA,EAAAA,EAAAA,6BAAAA,GAAAA,+BAAAA,EAAAA,EAAAA,mCAAAA,GAAAA,qCAAAA,EAAAA,EAAAA,kCAAAA,GAAAA,qCAAAA,IAAAA,EAAAA,cA+CAC,GAAAA,EAAAA,EAAAA,mCAAAA,GAAAA,qCAAAA,EAAAA,EAAAA,sCAAAA,GAAAA,wCAAAA,EAAAA,EAAAA,qCAAAA,GAAAA,uCAAAA,EAAAA,EAAAA,mCAAAA,GAAAA,qCAAAA,EAAAA,EAAAA,uCAAAA,GAAAA,yCAAAA,EAAAA,EAAAA,mCAAAA,GAAAA,qCAAAA,EAAAA,EAAAA,2CAAAA,GAAAA,6CAAAA,EAAAA,EAAAA,4CAAAA,GAAAA,8CAAAA,EAAAA,EAAAA,4CAAAA,GAAAA,8CAAAA,EAAAA,EAAAA,oCAAAA,GAAAA,sCAAAA,EAAAA,EAAAA,4CAAAA,IAAAA,8CAAAA,EAAAA,EAAAA,sCAAAA,IAAAA,wCAAAA,EAAAA,EAAAA,mCAAAA,IAAAA,sCAAAA,IAAAA,EAAAA,cAwEAC,GAAAA,EAAAA,EAAAA,oCAAAA,KAAAA,uCAAAA,IAAAA,EAAAA,KAmBL,IAOKE,YAAAA,GAAAA,EAAAA,EAAAA,uBAAAA,GAAAA,yBAAAA,EAAAA,EAAAA,+BAAAA,GAAAA,iCAAAA,EAAAA,EAAAA,6BAAAA,GAAAA,+BAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,wBAAAA,GAAAA,0BAAAA,EAAAA,EAAAA,2BAAAA,GAAAA,6BAAAA,EAAAA,EAAAA,wBAAAA,GAAAA,0BAAAA,EAAAA,EAAAA,oCAAAA,GAAAA,sCAAAA,EAAAA,EAAAA,yBAAAA,GAAAA,2BAAAA,EAAAA,EAAAA,4BAAAA,GAAAA,8BAAAA,EAAAA,EAAAA,oCAAAA,IAAAA,sCAAAA,EAAAA,EAAAA,6BAAAA,IAAAA,+BAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,0BAAAA,EAAAA,EAAAA,2BAAAA,IAAAA,6BAAAA,EAAAA,EAAAA,4BAAAA,IAAAA,8BAAAA,EAAAA,EAAAA,8BAAAA,IAAAA,gCAAAA,EAAAA,EAAAA,+BAAAA,IAAAA,iCAAAA,EAAAA,EAAAA,mBAAAA,IAAAA,qBAAAA,EAAAA,EAAAA,6BAAAA,IAAAA,+BAAAA,EAAAA,EAAAA,wBAAAA,IAAAA,0BAAAA,EAAAA,EAAAA,8BAAAA,IAAAA,gCAAAA,EAAAA,EAAAA,2BAAAA,IAAAA,6BAAAA,EAAAA,EAAAA,+BAAAA,IAAAA,iCAAAA,EAAAA,EAAAA,sCAAAA,IAAAA,wCAAAA,EAAAA,EAAAA,0CAAAA,IAAAA,4CAAAA,EAAAA,EAAAA,2CAAAA,IAAAA,6CAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,0BAAAA,IAAAA,4BAAAA,EAAAA,EAAAA,6CAAAA,IAAAA,+CAAAA,EAAAA,EAAAA,qCAAAA,IAAAA,uCAAAA,EAAAA,EAAAA,mCAAAA,IAAAA,qCAAAA,EAAAA,EAAAA,uBAAAA,IAAAA,yBAAAA,EAAAA,EAAAA,iCAAAA,IAAAA,mCAAAA,EAAAA,EAAAA,8BAAAA,IAAAA,gCAAAA,EAAAA,EAAAA,6BAAAA,OAAAA,+BAAAA,EAAAA,EAAAA,0BAAAA,OAAAA,4BAAAA,EAAAA,EAAAA,yBAAAA,OAAAA,4BAAAA,IAAAA,EAAAA,KA+LL,IAsEWC,YAAAA,GAAAA,EAAAA,EAAAA,oBAAAA,GAAAA,sBAAAA,EAAAA,EAAAA,mBAAAA,GAAAA,qBAAAA,EAAAA,EAAAA,iBAAAA,GAAAA,mBAAAA,EAAAA,EAAAA,iBAAAA,GAAAA,oBAAAA,IAAAA,EAAAA,KAsBX,IA4EWC,EC/wBNC,YD+wBMD,GAAAA,EAAAA,MAAAA,iBAAAA,EAAAA,OAAAA,oBAAAA,EAAAA,UAAAA,qBAAAA,EAAAA,MAAAA,iBAAAA,EAAAA,WAAAA,2BAAAA,EAAAA,cAAAA,2BAAAA,EAAAA,YAAAA,wBAAAA,IAAAA,EAAAA,cC/wBNC,GAAAA,EAAAA,IAAAA,MAAAA,EAAAA,UAAAA,YAAAA,EAAAA,SAAAA,YAAAA,IAAAA,EAAAA,KCDL,ICCKC,EDDCC,EAAmB,CAC9B,CACEC,aAAc,GACdC,aAAc,+DAEhB,CACED,aAAc,GACdC,aAAc,+DAEhB,CACED,aAAc,GACdC,aACE,sEAEJ,CACED,aAAc,EACdC,aAAc,2CAEhB,CACED,aAAc,GACdC,aAAc,yDAEhB,CACED,aAAc,GACdC,aAAc,2DAOLC,EAA0B,CACrCC,QAASJ,EAAiBK,MAAK,SAACC,GAAD,OAA0B,KAAnBA,EAAEL,gBACxCM,SAAUP,EAAiBK,MAAK,SAACC,GAAD,OAA0B,IAAnBA,EAAEL,iBAM9BO,EAAgCC,OAAOC,OAAO,CAAC,EAAG,GAAI,KAKtDC,EAAmCF,OAAOC,OAAO,CAAC,GAAI,GAAI,eC3C3DX,GAAAA,EAAAA,kBAAAA,oBAAAA,EAAAA,kBAAAA,qBAAAA,IAAAA,EAAAA,KAeL,IAAMa,EAAoCH,OAAOI,OACtDd,GAWWe,EAAgB,CAC3BC,WAAY,UACZC,QAAS,UACTC,KAAM,WACNC,QAAS,UACTC,SAAU,UACVC,OAAQ,UACRC,aAAc,WACdC,WAAY,WACZC,KAAM,WACNC,OAAQ,gBACRC,KAAM,gBACNC,MAAO,gBACPC,IAAK,oBACLC,MAAO,gBACPC,MAAO,+FCxCF,IAAMC,EAAoBrB,OAAOC,OAAO,CAC7C,CACEqB,KAAM,aACNC,QACE,4SAGJ,CACED,KAAM,aACNC,QACE,iIAEJ,CACED,KAAM,aACNC,QACE,sLAGJ,CACED,KAAM,aACNC,QACE,8IAIJ,CACED,KAAM,aACNC,QACE,+KAEJ,CACED,KAAM,aACNC,QACE,8KAEJ,CACED,KAAM,aACNC,QACE,6GAEJ,CACED,KAAM,aACNC,QACE,uEAEJ,CACED,KAAM,aACNC,QAAS,4DAEX,CACED,KAAM,aACNC,QACE,4HAEJ,CACED,KAAM,aACNC,QACE,8IAEJ,CACED,KAAM,aACNC,QACE,8IAEJ,CACED,KAAM,aACNC,QAAS,kCAEX,CACED,KAAM,aACNC,QACE,0FAEJ,CACED,KAAM,aACNC,QAAS,4BAEX,CACED,KAAM,aACNC,QAAS,4BAGX,CACED,KAAM,aACNC,QAAS,4BAGX,CACED,KAAM,aACNC,QACE,8HAGJ,CACED,KAAM,aACNC,QACE,4EAEJ,CACED,KAAM,aACNC,QAAS,uBAEX,CACED,KAAM,aACNC,QACE,qFAEJ,CACED,KAAM,aACNC,QACE,2GAEJ,CACED,KAAM,aACNC,QAAS,oCAEX,CACED,KAAM,aACNC,QAAS,sCAOAC,EAAgBxB,OAAOC,OAAO,CACzC,QAAS,iEACT,QAAS,6DACT,QACE,8EACF,QACE,8HACF,QACE,qGACF,QAAS,yBACT,QAAS,2DACT,QAAS,+BACT,QAAS,yCACT,QAAS,gCC5IEwB,EAAc,WAAqC,OAC9D,EAAAC,SAAQC,MAAR,oBCuCIC,EAAe,IAtCfC,sEAIuD,0BAK1C,+CAKsB,oCAKX,kDAM5B,SAAwBC,GACtBC,KAAKC,eAAeC,KAAKH,8BAO3B,SAAmBH,GACjBI,KAAKC,eAAeE,SAAQ,SAACJ,GAAD,OAAQA,EAAGH,YAlCrCE,IA+DND,EAAaO,kBAnBe,SAACR,GAC3B,GAAIC,EAAaQ,OAAST,EAAO,CAG/B,IAFA,IAAMU,EAAS,GACXC,EAAWX,EACD,MAAPW,GACLD,EAAOJ,KAAKK,GAEVA,EADEA,aAAeC,EACXD,EAAIE,WAEJ,KAINH,MAAAA,GAAAA,EAAQI,QACVhB,EAAYY,OAQlB,kcCtDO,IAAME,EAAb,oCA4CE,WAAoBD,GAA0B,4BAC5C,gBAD4C,iEA5B/B,KA4B+B,0BArB9B,KAqB8B,4BAhB5B,KAgB4B,yBAX/B,UAW+B,yBAN/B,IAQb,EAAKE,WAAaF,EAClB,EAAKf,QAAUe,MAAAA,OAAf,EAAeA,EAAKf,QACpB,EAAKmB,MAAQJ,MAAAA,OAAb,EAAaA,EAAKI,MAEdC,MAAMC,mBACRD,MAAMC,mBAAN,UAA8BL,GAPY,EA5ChD,uCA2DE,WACE,MAAO,CAACR,KAAKT,KAAMS,KAAKR,SAASsB,OAAOC,SAASC,KAAK,QA5D1D,6BA+IE,SAAwBT,GACtB,ICzJFX,EACmB,EDwJXqB,GCzJRrB,EDyJqCW,ECvJrC,UAAOW,OAAOC,mBAAd,aAAO,EAAoBC,aAAaxB,IDwJhCyB,EAAqB,iBAARd,EAAmBA,EAAMA,EAAIf,QAEhD,QAAQyB,MAAAA,OAAA,EAAAA,EAAezB,UAAW6B,GAAO,IAAIC,QAArC,KAAD,OAAmDtB,KAAKT,KAAxD,KAAiE,OAnJ5E,+BAqEE,SACEgB,EACAgB,GACa,cACPC,EAAc,IAAIhB,EAAYD,GAGpCiB,EAAYjC,KAAOgB,EAAIhB,MAAQiB,EAAYiB,aAAalB,GACxB,iBAArBiB,EAAYjC,MAAqBiC,EAAYjC,KAAKmB,OAAS,KACpEc,EAAYjC,KAAO,IAErB,IAAImC,EAAe,GAcnB,OAbKnB,EAAIf,UACPkC,EAAeF,EAAYG,gBAAgBpB,IAE7CiB,EAAYD,MAAZ,UAAoBA,MAAAA,EAAAA,EAAShB,EAAIf,eAAjC,QAA4CkC,EAC5CF,EAAYI,KAAZ,UAAmBrB,EAAIqB,YAAvB,QAA+B,QAC/BJ,EAAYI,MAAQ,0BACpBJ,EAAYhC,QAAZ,8BACEF,EAAkBzB,MAAK,SAACgE,GAAD,OAASA,EAAItC,MAAQiC,EAAYjC,eAD1D,aACE,EAA+DC,eADjE,QAEEe,EAAIf,eAFN,QAGEkC,EAEF5B,EAAAA,YAAyB0B,GAElBA,IA9FX,oBAyGE,SACEM,EACAP,EACAhB,EACAwB,GAEA,IAAMP,EAAc,IAAIhB,EAAYD,GASpC,OARAiB,EAAYf,WAAaF,EACzBiB,EAAYI,KAAO,QACnBJ,EAAYjC,KAAOuC,EACnBN,EAAYD,MAAQA,EACpBC,EAAYhC,QAAUuC,MAAAA,EAAAA,EAAmBtC,EAAc+B,EAAYjC,MAEnEO,EAAAA,YAAyB0B,GAElBA,IAxHX,0BAiIE,SAA4BjB,GAAoC,QAK9D,SAHG,UAAAA,EAAIf,eAAJ,eAAawC,MAAM,qBAAnB,UACCzB,EAAIf,eADL,aACC,EAAawC,MAAMxB,EAAYyB,uBAC/B,IAAI,IAAM,IACAX,QAAQ,QAAS,QAtInC,WAAiCV,gBAApBJ,EAAAA,sBAUT,4DENJ,SAAS0B,EACPC,EACAC,GACQ,YACR,IAAKD,EAAQ,CACX,IAAME,EAAe,2CAAH,OAA8CD,GAChE,MAAM5B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAGxD,OAAOF,MAAAA,GAAP,UAAOA,EAAQG,sBAAf,iBAAO,EAAwBzE,MAC7B,SAACC,GAAD,OAAOA,EAAE8D,MAAQtD,EAAc8D,aADjC,iBAAO,EAEJG,aAFH,iBAAO,EAEGC,kBAFV,aAAO,EAEeD,MAWxB,SAASE,EAAatD,GACpB,OAAOA,GAAqB,IAAdA,EAAIuB,QAAgBvB,EAAIuD,WAAW,MAC7CvD,EAAIwD,UAAU,EAAG,IACjBxD,EAOC,SAASyD,EAAiBC,GAA0B,UACzD,IAAKA,EAAYC,sBAAuB,CACtC,IAAMT,EAAe,2CACrB,MAAM7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAExD,IAAMU,GAAOC,EAAAA,EAAAA,IACX,IAAIC,WAAWC,EAAAA,GAAAA,KAAYL,EAAYC,sBAAuB,WAC3DK,QAECC,EAAa,IAAIC,EAAAA,EAAgB,CACrCC,OAAQP,EAAKQ,SAGTC,EACJJ,EAAWK,qBAAqBC,UAAUC,YAC5Cd,EAAYa,UAAYF,EACxBX,EAAYe,OAASxF,EAAwByF,SAASL,GAEtD,IAAMM,EAA6B,UAAGV,EAAWW,kBAAd,aAAG,EAAuBlG,MAC3D,SAACmG,GAAD,MN/CoC,cM+C7BA,EAAEC,UAEXpB,EAAYqB,aCtEP,SAAqBf,GAC1B,IAAKA,EACH,OAAO,KAMT,IAHA,IAAII,EAAS,GACPY,EAAa,IAAIlB,WAAWE,GAEzBiB,EAAI,EAAGA,EAAID,EAAWzD,OAAQ0D,IAAK,CAC1C,IAAMC,EAAMF,EAAWC,GAAGE,SAAS,IAAIC,cACvChB,IAA0B,IAAfc,EAAI3D,OAAe,IAAM,IAAM2D,EAE5C,OAAOd,ED0DoBiB,CACzBV,MAAAA,GADoC,UACpCA,EAA+BW,mBADK,iBACpC,EAA4CjC,kBADR,aACpC,EAAwDkC,UAG1DzG,OAAO0G,KAAK9B,EAAY+B,QAAQzE,SAAQ,SAAC0E,GACvChC,EAAY+B,OAAOC,GAAO3C,EAAWkB,EAAWwB,OAAQC,MAG1D5G,OAAO0G,KAAK9B,EAAYiC,SAAS3E,SAAQ,SAAC0E,GACxChC,EAAYiC,QAAQD,GAAO3C,EAAWkB,EAAW0B,QAASD,MAG5DhC,EAAY+B,OAAOzF,IAAMsD,EAAaI,EAAY+B,OAAOzF,KACzD0D,EAAYiC,QAAQ1F,MAAQqD,EAAaI,EAAYiC,QAAQ1F,OAC7DyD,EAAYiC,QAAQ3F,IAAMsD,EAAaI,EAAYiC,QAAQ3F,kBExF7D,khGAAAiF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQASO,IAAMW,GAAb,WA+HE,WAAoBC,IAAmB,sCA1GnC,CACFzG,WAAY,KACZC,QAAS,KACTC,KAAM,KACNC,QAAS,KACTC,SAAU,KACVC,OAAQ,KACRqG,aAAc,KACdnG,WAAY,KACZC,KAAM,KACNC,OAAQ,KACRC,KAAM,KACNC,MAAO,KACPE,MAAO,KACPD,IAAK,KACLE,MAAO,QA2F8B,qBAhFnC,CACFd,WAAY,KACZY,IAAK,KACLC,MAAO,QA6E8B,yBAtEX,OAsEW,wBAhEd,OAgEc,uBA1Df,OA0De,0BApDV,OAoDU,2BA9CT,OA8CS,oCAxCA,OAwCA,6BAlCD,OAkCC,2BA5BT,OA4BS,2BAtBT,OAsBS,6BAhBd,IAgBc,sBAXrB,IAWqB,wBANZ,MAOzBY,KAAKkF,eAAiBF,EAhI1B,yEAwIE,WAA+BG,GAA/B,gFACOA,EADP,sBAEU9C,EAAe,2CACf7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAH1D,YAKM8C,aAAgBJ,GALtB,yCAMWI,GANX,UAQQtC,EAAc,IAAIkC,EAAYI,KAEhCA,EAAKC,uBAAuBC,SAVlC,iCAWoCF,EAAKC,YAXzC,cAWIvC,EAAYyC,YAXhB,iBAYmCH,EAAKI,WAZxC,eAYI1C,EAAY2C,WAZhB,iBAaiCL,EAAKM,YAbtC,eAaI5C,EAAY6C,SAbhB,iBAckCP,EAAKQ,cAdvC,eAcI9C,EAAY+C,UAdhB,iBAe8CT,EAAKU,OAC7CjJ,EAAsBkJ,uBAhB5B,eAeIjD,EAAYC,sBAfhB,2BAmBwCqC,EAAKY,gBAnB7C,eAmBMlD,EAAYmD,cAnBlB,iBAoBgCb,EAAKc,WApBrC,eAoBYC,EApBZ,iBAqBuCA,EAAYxI,aArBnD,eAqBMmF,EAAYsD,aArBlB,iBAsBuCD,EAAYzI,aAtBnD,QAsBMoF,EAAYuD,aAtBlB,0DAyBM5F,EAAAA,iBAAA,yEAE+DqC,EAAY2C,WAF3E,MAIA3C,EAAYmD,eAAgB,EA7BlC,gCAgCInD,EAAYyC,YAAcH,EAAKC,YAC/BvC,EAAY2C,WAAaL,EAAKI,WAC9B1C,EAAY6C,SAAWP,EAAKM,YAC5B5C,EAAY+C,UAAYT,EAAKQ,cAC7B9C,EAAYC,sBAAwBqC,EAAKU,OACvCjJ,EAAsBkJ,uBAGxB,IACEjD,EAAYmD,cAAgBb,EAAKY,gBAC3BG,EAAcf,EAAKc,WACzBpD,EAAYsD,aAAeD,EAAYxI,aACvCmF,EAAYuD,aAAeF,EAAYzI,aACvC,MAAOmC,GAEPY,EAAAA,iBACEZ,EADF,oEAE+DiD,EAAY2C,WAF3E,MAIA3C,EAAYmD,eAAgB,EAnDlC,eAuDEpD,EAAiBC,GAvDnB,kBAyDSA,GAzDT,2DAxIF,qDCNO,SAASwD,KAAoB,MAElC,QAAQ,UAACnF,OAAOC,mBAAR,QAAC,EAAoBmF,iCCL/B,mhGAAAlC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQCKO,ICIHmC,GDJSC,GAAc,WACD,MAApB1G,EAAAA,QACF,EAAAH,SAAQ8G,KAAR,kCEPJ,+xMAUO,SAAeC,GAAtB,8EAAO,WAA4BC,GAA5B,2FACEC,IAAiB,kBAAC,wFAClBD,EADkB,sBAEfnG,EAAAA,OACJ,QACA,kCACA,MALmB,sBASfqG,EAASR,KACXnF,OAAOC,YAAYmF,kBAAkBK,GACrCzF,OAAOC,YAAY2F,aAAaH,cAEXtB,SAbJ,iCAaoBwB,EAbpB,gDAa6BA,EAb7B,+EAefrG,EAAAA,iBAAA,2CAE2BmG,IAjBZ,0DAAlBC,IADF,gFDVP,mhGAAAxC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,8xCAeO,SAAS2C,KAEc,IAD5BC,EAC4B,wDAC5B,OAAIT,KAAyBS,EACpB3B,QAAQ4B,QAAQV,IAGlBK,IAAiB,kBAAC,yGACnBL,IAAyBS,EADN,yCAEd3B,QAAQ4B,QAAQV,KAFF,OAIjBW,EAA8C,GAC9CC,EAAU,GALO,cAOwB3J,GAPxB,0EAORC,EAPQ,EAORA,aAAcC,EAPN,EAOMA,aAPN,oBASgBgJ,GAAarJ,EAAe+J,OAT5C,eASXC,EATW,iBAUkBA,EAAWC,WAC5C5J,EACAD,GAZe,eAUX8J,EAVW,YAcjBL,EAdiB,KAeDxJ,EAfC,KAgBDD,EAhBC,UAiBK8J,EAAWC,aAjBhB,qCAkBKD,EAAWE,aAlBhB,qCAmBKF,EAAWG,aAnBhB,0BAefhK,aAfe,KAgBfD,aAhBe,KAiBf+J,aAjBe,KAkBfC,aAlBe,KAmBfC,aAnBe,WAcQxH,KAdR,mEAsBjBiH,EAAQjH,KAAK,CACXmC,aAAc,kDAAF,OAAoD3E,EAApD,oBAA4ED,EAA5E,KACZmC,MAAK,OAxBU,wKA4Bb2G,GAAuBW,GA5BV,wCA8BrBC,EAAQjH,KAAK,CAAEN,MAAK,OA9BC,8BAiCrBuH,EAAQjH,KAAK,CAAEgH,yBAAAA,IACfV,GAAY,wBAAyBW,GAlChB,kGAAlBP,iBEtBT,mhGAAAxC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,8xCAgBA,IAAIuD,GAAsC,KAO7BC,GAAgB,WAC3B,OAAID,GACKtC,QAAQ4B,QAAQU,IAGlBf,IAAiB,kBAAC,qGACnBe,GADmB,yCAEdtC,QAAQ4B,QAAQU,KAFF,cAIjBE,EAAuB,CAC3BC,aAAc,GACdP,WAAY,KACZQ,oBAAoB,EACpBC,iBAAiB,EACjBC,mBAAoB,MAEhBd,EAAU,GAXO,kBAaYT,GAAarJ,EAAe+J,OAbxC,cAafC,EAbe,yBAecN,KAfd,yCAerB,IAAK,EAAL,qBAAWmB,EAA8C,QAErDlK,EAA8B6F,SAASqE,EAAezK,gBAEtDoK,EAAQG,iBAAkB,EAC1BH,EAAQI,mBACNtK,EAAwBI,SAASL,aACnCmK,EAAQN,WACNW,EAAeT,aAAe,IAAMS,EAAeR,cAGrDvJ,EAAiC0F,SAASqE,EAAezK,gBAEzDoK,EAAQE,oBAAqB,EAC7BF,EAAQI,mBACNtK,EAAwBC,QAAQF,aAClCmK,EAAQN,WACNW,EAAeT,aACf,IACAS,EAAeR,aACf,IACAQ,EAAeV,cApCA,yDAyCSH,EAAWc,cAzCpB,aAyCbC,EAzCa,0CA4CYA,EAAc9D,WA5C1B,QA4CjBuD,EAAQC,aA5CS,kBA8CdD,EAAQC,aA9CM,kCA+CYT,EAAWgB,QA/CvB,QA+CjBR,EAAQC,aA/CS,wEAkDbtH,EAAAA,iBAAA,KAEJ,6CApDiB,iCAwDbmH,GAAkBE,GAxDL,wCA0DrBV,EAAQjH,KAAK,CAAEN,MAAK,OA1DC,8BA6DrBuH,EAAQjH,KAAK,CAAE2H,QAAAA,IACfrB,GAAY,mBAAoBW,GA9DX,qFAAlBP,ICxBF,SAAS0B,GAAwBC,GACtC,IAAMvG,EAAQuG,EAAQvG,MAAM,uBAE5B,IAAKA,EACH,OAAO,EAGT,cAA8BA,EAA9B,GAAOwG,EAAP,KAAcC,EAAd,KAAqBC,EAArB,KAQA,OANAF,EAAQG,SAASH,GAEjBC,EAAQE,SAASF,GAEjBC,EAAQC,SAASD,GAIfF,EAAQ,KACc,IAApBG,SAASH,IAAoC,IAApBG,SAASF,IAAgBE,SAASD,GAAS,qBCtB1E,+xMAMA,IAQaE,GAAqB,oCAAG,WACnCC,GADmC,qFAG9BA,EAAWtB,WAHmB,0CAI1B,GAJ0B,uBAMLR,KANK,cAM7B+B,EAN6B,OAQ/BC,GAA+B,EAC/BC,GAA4B,EAE5BH,EAAWd,oBAMXkB,OALIA,EAAeH,EAAgBjL,MAAK,SAACqL,GAAD,OACxC/K,EAAiC0F,SAASqF,EAAGzL,mBAI7CwL,EAAcxB,eACdwB,MAAAA,OAAA,EAAAA,EAAcxB,eA1BuB,IA4BrCsB,GAA+B,GAI/BF,EAAWb,iBAKTmB,OAJEA,EAAYL,EAAgBjL,MAAK,SAACqL,GAAD,OACrClL,EAA8B6F,SAASqF,EAAGzL,mBAGxC0L,EAAW1B,eACPc,EAAUa,YACdD,MAAAA,OAAA,EAAAA,EAAW1B,cAAe,KAAM0B,MAAAA,OAAhC,EAAgCA,EAAWzB,eAG7CsB,EAA4BT,GAzCM,KAOH,kBAsC5BQ,GAAgCC,GAtCJ,4CAAH,oECdlC,mhGAAA5E,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAYO,IAAMiF,GAAkB,oCAAG,gGAC5BR,EAAiC,KACjCS,GAAU,EACRnC,EAAU,GAHgB,2BAMTS,KANS,OAM5BiB,EAN4B,+DAQtBrI,EAAAA,iBAAA,KAEJ,0CAV0B,WAczB8H,GAAwBO,EAAWf,cAdV,uBAetBtH,EAAAA,OACJ,QACA,oCACA,MAlB0B,WAsBxBqI,EAAWd,oBAAsBc,EAAWb,gBAtBpB,uBAuBtBxH,EAAAA,OACJ,QACA,yCACA,MA1B0B,YA8B1BqI,EAAWtB,YAAeqB,GAAsBC,GA9BtB,uBA+BtBrI,EAAAA,OAAmB,QAAS,+BAAgC,MA/BtC,QAiC9B8I,GAAU,EAjCoB,kDAmC9BnC,EAAQjH,KAAK,CAAEN,MAAK,OAnCU,yBAqC9BuH,EAAQjH,KAAK,CAAEoJ,QAAAA,IACf9C,GAAY,wBAAyBW,GAtCP,8CAyCzBmC,GAzCyB,uEAAH,mECZ/B,+xMAOA,IAAIC,IAAyB,EAOtB,SAAS3C,GACd7G,GAEA,yBAAO,4GACCyJ,EAAkBD,GACnBA,GAFA,0BAKDE,EAAQ,KALP,qDAOKjJ,EAAAA,OACJ,QACA,4CAFI,MAPL,OAcH+I,IAAgB,EAdb,WAiBArI,OAAOC,YAjBP,uBAkBGX,EAAAA,OACJ,QACA,qDACA,MArBC,uBA0BCU,OAAOC,uBAAuBkE,SA1B/B,kCA2BKnE,OAAOC,YA3BZ,iEA8BGX,EAAAA,OACJ,QACA,2DAFI,MA9BH,WAqCDV,EAAAA,6BACFoB,OAAOC,YAAYuI,cAAcxI,OAAOC,YAAYwI,kBAIlD7J,EAAAA,kBAAkC0J,EA1CjC,kCA2CGH,KA3CH,uBAAUO,EAAV,yBAAUA,EAAV,cA8CCC,EAAiB9J,EAAG+J,MAAM,KAAMF,cAERvE,SAhDzB,kCAiDGwE,EAjDH,iCAoDEA,GApDF,iECEF,SAASE,GACdC,EACAnF,EACAtC,GAEA,IACM8D,MTlBgB4D,ESmBVD,EAAI,WAAD,OAAYnF,IAAOtC,GTlBrB0H,EACT5D,OACF,kBAAC,wGAEkB4D,EAFlB,mEAISzJ,EAAAA,OAAmB,QAAS,UAA5B,MAJT,uDAAD,ISmBEwJ,EAAInF,GAAOtC,EAEb,MAAOhC,GACP,MAAMC,EAAAA,iBACJD,EADI,gDAEqCsE,IT3BxC,IAAiBoF,gBUPxB,mhGAAA7F,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAYO,SAAe8F,GAAtB,gFAAO,WACLrH,EACAsH,GAFK,iFAMD5G,EAAwB,OAE1BV,aAAuBkC,IARpB,qBASClC,EATD,sCAWOkC,GAAAA,WAAuBlC,GAX9B,6BAOCsC,EAPD,MAaDgF,EAbC,kCAcYA,EAAqBhF,GAdjC,QAcH5B,EAdG,+BAgBGjD,EAAS,GACV6E,EAAKa,eACR1F,EAAOJ,KAAK,4BAERkK,EAAM,IAAIC,KACZlF,EAAKO,UAAY0E,EAAMjF,EAAKO,UAC9BpF,EAAOJ,KAAK,2BAEViF,EAAKS,WAAawE,EAAMjF,EAAKS,WAC/BtF,EAAOJ,KAAK,6BAETiF,EAAKvB,QACRtD,EAAOJ,KAAK,oCAGVI,EAAOI,SACT6C,EAAS,kCAAoCjD,EAAOU,KAAK,OAhCxD,iCAoCEuC,GApCF,iFCZP,+xMA0BO,SAAS+G,GACdzH,EACA0H,GAIiB,IAHjBC,IAGiB,yDAFjBC,IAEiB,yDADjBC,EACiB,wDACjB,OAAO9D,IAAiB,kBAAC,2GACjBO,EAAU,IACRjH,KAAK,CACX2C,YAAAA,EACA0H,KAAAA,EACAC,OAAAA,EACAC,iBAAAA,EACAC,cAAAA,IAPqB,SAUhBH,EAVgB,sBAWblI,EAAe,oCACf7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAZnC,UAchBQ,EAdgB,sBAebR,EACJ,2DACI7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAjBnC,UAoBfsI,EACJJ,aAAgBK,YACZ1H,EAAAA,GAAAA,KAAYqH,GAAMjG,SAAS,UAC3BiG,EAENpD,EAAQjH,KAAK,CAAEyK,aAAAA,IAEXxF,EAA4B,KAE9BA,EADEtC,aAAuBkC,GAClBlC,MAAAA,OAAH,EAAGA,EAAaqC,eAEbrC,EAGJ6H,IAAmBvF,EAlCH,kCAmCQ+E,GAAoB/E,GAnC5B,aAmCb9C,EAnCa,+BAsCX7B,EAAAA,OACJ,QACA,6CACA,KACA6B,GA1Ce,yBA+CUqE,GAAarJ,EAAewN,QA/CtC,eA+CfA,EA/Ce,iBAgDqBnE,GACxCrJ,EAAeyN,YAjDI,QAgDfA,EAhDe,iBAsDnBf,GAAkBc,EAAQ,cAAe1F,GACrCsF,GACFV,GACEc,EACA,UACAnO,EAAmCqO,yCAIvChB,GACEe,EACA,kBxByhB+B,GwBphBjCf,GAAkBe,EAAY,UAAWH,GAtEtB,yDAwEbnK,EAAAA,iBAAA,KAEJ,gDA1EiB,wBA+EbwK,EAAaF,EAAWG,UAC5BJ,EACArO,EAAoB0O,mBACpBV,cAIsBnF,SAtFL,kCAsFqB2F,EAtFrB,iDAsFkCA,EAtFlC,eAqFbG,EArFa,KAwFnBhE,EAAQjH,KAAK,CAAEiL,IAAAA,IAxFI,kBA0FZA,GA1FY,yCA4Fb3K,EAAAA,iBAAA,KAEJ,8CA9FiB,gEAkGrB2G,EAAQjH,KAAK,CAAEN,MAAK,OAlGC,8BAqGrB4G,GAAY,UAAWW,GArGF,6FAAlBP,iBCjCT,+xMAsBO,IAAMwE,GAA0B,SAACvI,GACtC,OAAQA,EAAYa,WAClB,KAAKnG,EAAyB8N,kBAC5B,OAAO5O,EAAkC6O,0BAE3C,KAAK/N,EAAyBgO,kBAC5B,OAAO9O,EAAkC+O,0BAE3C,QACE,MAAMhL,EAAAA,OACJ,QADI,gCAEqBqC,EAAYa,UAFjC,gDAGJ,QAUK+H,GAA0B,SAAC5I,GACtC,OAAQA,EAAYa,WAClB,KAAKnG,EAAyB8N,kBAC5B,OAAO5O,EAAkCiP,0BAE3C,KAAKnO,EAAyBgO,kBAC5B,OAAO9O,EAAkCkP,0BAE3C,QACE,MAAMnL,EAAAA,OACJ,QADI,gCAEqBqC,EAAYa,UAFjC,gDAGJ,QAaKkI,GAAU,SACrB/I,EACA0H,GAGoB,IAFpBsB,EAEoB,uDAF4BvP,EAA4BwP,sCAC5EpB,EACoB,wDACpB,OAAO9D,IAAiB,kBAAC,2GACjBO,EAAU,IACRjH,KAAK,CAAE2C,YAAAA,EAAa0H,KAAAA,EAAMsB,iBAAAA,EAAkBnB,cAAAA,IAF7B,SAIhBH,EAJgB,sBAKblI,EAAe,oCACf7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GANnC,UAQhBQ,EARgB,sBASbR,EACJ,2DACI7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAXnC,UAcfsI,EACJJ,aAAgBK,YACZ1H,EAAAA,GAAAA,KAAYqH,GAAMjG,SAAS,UAC3BiG,EAENpD,EAAQjH,KAAK,CAAEyK,aAAAA,MAGb9H,aAAuBkC,IAtBJ,sBAuBflC,EAvBe,yCAyBTkC,GAAAA,WAAuBlC,GAzBd,+BAqBfsC,EArBe,KA2BhBuF,IAAmBvF,EA3BH,kCA4BQ+E,GAAoB/E,GA5B5B,aA4Bb9C,EA5Ba,+BA+BX7B,EAAAA,OACJ,QACA,6CACA,KACA6B,GAnCe,yBAwCUqE,GAAarJ,EAAewN,QAxCtC,eAwCfA,EAxCe,iBAyCgBnE,GACnCrJ,EAAe0O,WA1CI,QAyCfjB,EAzCe,iBA+CnBf,GAAkBc,EAAQ,cAAe1F,EAAKD,gBAI9C6E,GAAkBe,EAAY,UAAWH,GAGzCZ,GAAkBe,EAAY,gBAAiBe,GAG/C9B,GACEe,EACA,kBACAM,GAAwBjG,IAI1B4E,GACEe,EACA,eACAW,GAAwBtG,IAnEP,yDAsEb3E,EAAAA,iBAAA,KAEJ,gDAxEiB,wBA6EbwK,EAAaF,EAAWkB,KAAKnB,cAGXxF,SAhFL,kCAgFqB2F,EAhFrB,iDAgFkCA,EAhFlC,eA+EbG,EA/Ea,KAkFnBhE,EAAQjH,KAAK,CAAEiL,IAAAA,IAlFI,kBAoFZA,GApFY,yCAsFb3K,EAAAA,iBAAA,KAEJ,8CAxFiB,gEA4FrB2G,EAAQjH,KAAK,CAAEN,MAAK,OA5FC,8BA+FrB4G,GAAY,aAAcW,GA/FL,6FAAlBP,kBC3ET,uzOAoBO,SAASqF,GACd1B,EACA2B,GAEA,OAAOtF,IAAiB,kBAAC,6GACjBO,EAAU,IACRjH,KAAK,CAAEqK,KAAAA,EAAM2B,sBAAAA,IAFE,SAIhB3B,EAJgB,sBAKblI,EAAe,oCACf7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GANnC,UAShB6J,GAA2D,KAAlCA,MAAAA,OAAA,EAAAA,EAAuBxL,QAThC,sBAUb2B,EACJ,6DACI7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAZnC,cAefsI,EACJJ,aAAgBK,YACZ1H,EAAAA,GAAAA,KAAYqH,GAAMjG,SAAS,UAC3BiG,EAENpD,EAAQjH,KAAK,CAAEyK,aAAAA,IApBM,UAsBwBjE,GAC3CrJ,EAAe8O,eAvBI,QAsBfA,EAtBe,iBA6BnBpC,GACEoC,EACA,kB1BokB+B,G0BjkBjCpC,GAAkBoC,EAAe,UAAWxB,GAlCzB,yDAoCbnK,EAAAA,iBAAA,KAEJ,gDAtCiB,mCA2CmB2L,EAAcC,WA3CjC,QA2CbC,EA3Ca,YA6CgBH,GA7ChB,kEA6CRI,EA7CQ,kBA8CXD,EAAWE,IAAID,GA9CJ,0MAiDb9L,EAAAA,iBAAA,KAEJ,yEAnDiB,wBA2DbgM,EAAgBL,EAAcM,QAClC7P,EAAsBkJ,kCAIGT,SAhER,kCAiEPmH,EAjEO,iDAkEbA,EAlEa,eA+DbE,EA/Da,KAoEnBvF,EAAQjH,KAAK,CAAEwM,cAAAA,IApEI,kBAsEZA,GAtEY,yCAwEblM,EAAAA,iBAAA,KAEJ,iCA1EiB,gEA8ErB2G,EAAQjH,KAAK,CAAEN,MAAK,OA9EC,8BAiFrB4G,GAAY,aAAcW,GAjFL,mHAAlBP,iBCxBT,+xMAeO,SAAS+F,GAAQD,GACtB,OAAO9F,IAAiB,kBAAC,mGACjBO,EAAU,IACRjH,KAAK,CAAEwM,cAAAA,IAFQ,SAKhBA,EALgB,sBAMbrK,EAAe,qCACf7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GAPnC,cAUfsI,EACJ+B,aAAyB9B,YACrB1H,EAAAA,GAAAA,KAAYwJ,GAAepI,SAAS,UACpCoI,EAENvF,EAAQjH,KAAK,CAAEyK,aAAAA,IAfM,UAiBwBjE,GAC3CrJ,EAAe8O,eAlBI,QAiBfA,EAjBe,iBAuBnBpC,GACEoC,EACA,kB3BklB+B,G2B3mBd,yDA6Bb3L,EAAAA,iBAAA,KAEJ,iDA/BiB,wBAsCboM,EAAgBT,EAAcU,QAAQlC,cACftF,SAvCV,kCAwCXuH,EAxCW,aA4CjBT,EAAcW,mBAAmBzH,SA5ChB,kCA6CP8G,EAAcW,QA7CP,iDA8CbX,EAAcW,QA9CD,eA2CbC,EA3Ca,KAgDnB5F,EAAQjH,KAAK,CAAE6M,cAAAA,IAhDI,kBAkDZA,GAlDY,yCAoDbvM,EAAAA,iBAAA,KAEJ,kCAtDiB,gEA0DrB2G,EAAQjH,KAAK,CAAEN,MAAK,OA1DC,8BA6DrB4G,GAAY,aAAcW,GA7DL,6FAAlBP,iBChBT,mhGAAAxC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAmBO,SAAS4I,KAIG,IAHjBC,EAGiB,uDAHenQ,EAAeoQ,2BAC/CC,EAEiB,uDAFGjQ,EACpBkQ,EACiB,uDADmBvQ,EAAwBwQ,iCAE5D,OAAOzG,IAAiB,kBAAC,uGACKF,GAAarJ,EAAeiQ,OADjC,cACjBA,EADiB,gBAIfzL,EAAMyL,EAAMC,KAAKN,EAAeE,EAAWC,GAJ5B,SAMfvL,EANe,6DAQfrB,EAAAA,iBAAA,KAEJ,2CAVmB,iCAchB8M,GAdgB,yDAAlB1G,iBCxBT,+xMAgBA,IAAM4G,GAAoB,YAQXC,GAAyB,8EAAxC,WAAwCH,GAAxC,uFACQ/J,EAAwB,GAE1BmK,EAAoB,EAH1B,kBAKyBJ,EAAMK,aAL/B,cAKIC,EALJ,gBAM8BA,EAAaC,MAN3C,OAMIH,EANJ,+DAQUlN,EAAAA,iBAAA,KAEJ,yCAVN,YAeSkN,EAfT,4CAiB0CE,EAAaE,KAC/CJ,KAlBR,eAiBYK,EAjBZ,iBAoBsChJ,GAAAA,WAAuBgJ,GApB7D,SAoBY5I,EApBZ,QAuBevB,QACPL,EAAOrD,KAAKiF,GAxBpB,mDA4BM3E,EAAAA,iBAAA,KAAkC,iCA5BxC,yDAgCS+C,GAhCT,kGAwCeyK,gFAAf,8FACMV,EAAuB,KAD7B,kBAGkBN,GAAUlQ,EAAemR,0BAH3C,cAGIX,EAHJ,gBAIiBG,GAAyBH,GAJ1C,mFAMUA,SANV,aAMU,EAAOY,QANjB,wHAeeC,gFAAf,8FACMb,EAAuB,KAD7B,kBAGkBN,GACZlQ,EAAeoQ,2BACfhQ,EACAL,EAAwBuR,oCAN9B,cAGId,EAHJ,gBAQiBG,GAAyBH,GAR1C,mFAUUA,SAVV,aAUU,EAAOY,QAVjB,+GAqBO,SAASG,KAGU,IAFxBC,EAEwB,uDAFAhR,EAAWiR,IACnCvH,EACwB,wDACxB,OAAIwG,GAAkBc,KAAetH,EAC5B3B,QAAQ4B,QAAQuG,GAAkBc,IAEpC1H,IAAiB,kBAAC,iGACnB4G,GAAkBc,IAAetH,EADd,yCAEdwG,GAAkBc,IAFJ,OAIjBnH,EAAU,GACZ5D,EAAwB,GALL,cAQb+K,EARa,cASdhR,EAAWkR,UATG,SAcdlR,EAAWmR,SAdG,UAmBdnR,EAAWiR,IAnBG,oCAUFP,KAVE,eAUjBzK,EAViB,OAWjB4D,EAAQjH,KAAK,CAAEoO,UAAAA,EAAW/K,OAAAA,IAXT,8CAeF4K,KAfE,eAejB5K,EAfiB,OAgBjB4D,EAAQjH,KAAK,CAAEoO,UAAAA,EAAW/K,OAAAA,IAhBT,8CAoBF4K,KApBE,eAoBjB5K,EApBiB,OAqBjB4D,EAAQjH,KAAK,CAAEoO,UAAW,WAAY/K,OAAAA,IArBrB,UAsBkByK,KAtBlB,eAsBXU,EAtBW,OAuBjBvH,EAAQjH,KAAK,CAAEoO,UAAW,MAAO/K,OAAAA,IAEjCA,GADAA,EAASA,EAAOoL,OAAOD,IACP5N,QACd,SAACqE,EAAMyJ,GAAP,OACErL,EAAOsL,WACL,SAACC,GAAD,OAAWA,EAAMtJ,aAAeL,EAAKK,gBACjCoJ,KA7BO,oCAkCbtB,EAAuB,KAlCV,oBAoCDN,KApCC,eAoCfM,EApCe,iBAsCAG,GAAyBH,GAtCzB,QAsCf/J,EAtCe,OAuCf4D,EAAQjH,KAAK,CAAEoO,UAAW,UAAW/K,OAAAA,IAvCtB,6CAyCT+J,SAzCS,aAyCT,EAAOY,QAzCE,gIA8CrB/G,EAAQjH,KAAK,CAAEN,MAAK,OA9CC,8BAiDrBuH,EAAQjH,KAAK,CAAEqD,OAAAA,IACfiD,GAAY,mBAAD,OAAoB8H,EAApB,QAAqCnH,GAlD3B,8CAqDfqG,GAAkBc,GAAa/K,GArDhB,4EAAlBqD,iBC3GT,mhGAAAxC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,0oDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQASO,SAAe2K,GAAtB,8EAAO,WACL7K,GADK,2EAGAA,EAHA,sBAIG7B,EACJ,+DACI7B,EAAAA,OAAmB,QAAS6B,EAAc,KAAMA,GANnD,gCASWgM,KATX,uCAS8BxQ,MAC/B,SAACmR,GAAD,OAAOA,EAAE9K,cAAgBA,MAVxB,sCAaG1D,EAAAA,iBAAA,KAAkC,iCAbrC,8FCHMyO,GAAkB,SAAC,GAAD,IAC7BpM,EAD6B,EAC7BA,YACAqM,EAF6B,EAE7BA,SAF6B,OAI7BrM,GACE,kBAAKsM,QAAS,SAACnL,GAAD,OAAOkL,GAAYA,EAASrM,EAAYqB,eAAtD,WACE,8BACE,uDAEE,eACEkL,SAAQ,UAAKvM,EAAYiC,QAAQvG,WAAzB,QACR8Q,KAAI,iDAA4CxM,EAAYC,uBAF9D,SAIGD,EAAYiC,QAAQvG,aANzB,gCAUA,oBACA,4CACA,kBACE4Q,QAAS,SAACnL,GAAD,OACPsL,UAAUC,UAAUC,UAAU3M,EAAYqB,eAF9C,SAKGrB,EAAYqB,kBAGhBjG,OAAO0G,KAAK9B,GACV/B,QACC,SAAC+D,GAAD,OACG,CACC,wBACA,iBACA,gBACAhB,SAASgB,MAEd4K,KAAI,SAAC5K,EAAK+J,GAAN,eACH,mBAAMc,MAAO,CAAEC,QAAS,SAAxB,WACE,0BAAI9K,EAAJ,OAAc,IACbhC,EAAYgC,aAAgB5G,OACzB2R,KAAKC,UAAUhN,EAAYgC,IAD9B,oBAEGhC,EAAYgC,UAFf,aAEG,EAAkBP,kBAFrB,QAEmC,SAJEsK,SAQ5C,MC9COkB,GAAqB,SAAC,GAAD,IAAG5H,EAAH,EAAGA,eAAH,OAChC,mCACE,mBAAMwH,MAAO,CAAEC,QAAS,SAAxB,WACE,iCADF,IACezH,EAAexK,iBAE9B,mBAAMgS,MAAO,CAAEC,QAAS,SAAxB,WACE,iCADF,IACezH,EAAezK,iBAE9B,mBAAMiS,MAAO,CAAEC,QAAS,SAAxB,WACE,oCADF,IACkBzH,EAAeT,aADjC,IACgDS,EAAeR,aAD/D,IAEIQ,EAAeV,kCCfvB,+xMA0BA,IAAMuI,GAAY,WAAM,MACtBlQ,EAAamQ,kBAAmB,EAChCnQ,EAAaQ,OAAQ,EAErB,OAAwC4P,EAAAA,EAAAA,UAAwB,IAAhE,eAAOrC,EAAP,KAAqBsC,EAArB,KACA,GAAsCD,EAAAA,EAAAA,YAAtC,eAAOE,EAAP,KAAoBC,EAApB,KACA,GAA8CH,EAAAA,EAAAA,UAA4B,IAA1E,eAAOnH,EAAP,KAAwBuH,EAAxB,KACA,GAAgDJ,EAAAA,EAAAA,YAAhD,eAAOK,EAAP,KAAyBC,EAAzB,KACA,GAAsDN,EAAAA,EAAAA,YAAtD,eAAOO,EAAP,KAA4BC,EAA5B,KACA,GAAsDR,EAAAA,EAAAA,YAAtD,eAAOS,EAAP,KAA4BC,EAA5B,KACA,GAAwCV,EAAAA,EAAAA,YAAxC,eAAOW,EAAP,KAAqBC,EAArB,KACA,GACEZ,EAAAA,EAAAA,YADF,eAAOa,EAAP,KAA4BC,EAA5B,KAEA,GACEd,EAAAA,EAAAA,YADF,eAAOe,EAAP,KAAkCC,EAAlC,MAGAC,EAAAA,EAAAA,YAAU,WAAM,yCACd,8GAE6BtJ,KAF7B,OAEUiB,EAFV,OAGIuH,EAAevH,GAHnB,gDAKI3H,OAAOiQ,MAAP,MALJ,0DADc,+DASd,qGACoC9C,GAAgB/Q,EAAWiR,KAD/D,OACQ6C,EADR,OAGElB,EAAgBkB,GAGXV,GACHC,EACES,EAAoBvT,MAAK,SAACmR,GAAD,OAAOA,EAAEpL,QAAUoL,EAAEhJ,kBARpD,4CATc,+DAqBd,qGACgCe,KADhC,OACQ+B,EADR,OAEEuH,EAAmBvH,GAFrB,2CArBc,wBA0BV0H,GA1BU,mCA2BZa,GAEEf,GA7BU,mCA8BZgB,GA9BY,mCAgCdC,KACC,CAACf,EAAqBF,EAAkBI,IAM3C,IAAMc,EAAoB,oCAAG,WAAOC,GAAP,4EACvBA,EADuB,gCAEC1C,GAAsB0C,GAFvB,QAEnB5O,EAFmB,SAIvB8N,EAAuB9N,GAJA,2CAAH,sDAcpB6O,EAAc,SAACC,EAAYlT,GAC/B,IAAMmT,EAAM1Q,OAAO2Q,IAAIC,gBAAgBH,GACjCI,EAAI7Q,OAAO8Q,SAASC,cAAc,KACxCF,EAAErC,MAAMC,QAAU,SAClBzO,OAAO8Q,SAASE,KAAKC,YAAYJ,GACjCA,EAAE1C,KAAOuC,EACTG,EAAE3C,SAAW3Q,EACbsT,EAAEK,QACFlR,OAAO2Q,IAAIQ,gBAAgBT,GAC3BG,EAAEO,UAMEC,EAAQ,oCAAG,wFACV7B,EADU,uBAEbxP,OAAOiQ,MAAM,wBAFA,6BAKVP,EALU,uBAMb1P,OAAOiQ,MAAM,8BANA,+CAWK7G,GAXL,KAYXoG,EAZW,UAaLE,EAAa4B,cAbR,wEAWPrH,EAXO,YAgBbuG,EAhBa,UAgBKe,EAAoBtH,GAhBzB,yBAgB+ByF,EAAanS,KAAO,QAhBnD,qEAkBbiB,EAAY,EAAD,IACXwB,OAAOiQ,MAAP,kCAAa,KAAO7M,YAnBP,0DAAH,qDA0BRoO,EAAW,oCAAG,WAClB7G,GADkB,2EAGb6E,EAHa,uBAIhBxP,OAAOiQ,MAAM,wBAJG,6BAObP,EAPa,uBAQhB1P,OAAOiQ,MAAM,8BARG,+CAaEvF,GAbF,KAcd8E,EAdc,UAeRE,EAAa4B,cAfL,gCAgBd3G,EAhBc,kDAaVV,EAbU,YAmBhBuG,EAnBgB,UAoBRe,EAAoBtH,GApBZ,yBAqBdyF,EAAanS,KAAK6C,QAAQ,OAAQ,IAAM,YArB1B,qEAwBhB5B,EAAY,EAAD,IACXwB,OAAOiQ,MAAP,kCAAa,KAAO7M,YAzBJ,0DAAH,sDAgCXqO,EAAc,oCAAG,wFAChB7B,EADgB,uBAEnB5P,OAAOiQ,MAAM,mCAFM,6BAKhBP,EALgB,uBAMnB1P,OAAOiQ,MAAM,iCANM,+CAWSlF,GAXT,UAYX2E,EAAa4B,cAZF,gCAajB,CAAC1B,GAbgB,6CAWbpE,EAXa,YAgBnBgF,EAhBmB,UAiBXe,EAAoB/F,GAjBT,yBAkBjBkE,EAAanS,KAAO,QAlBH,qEAqBnBiB,EAAY,EAAD,IACXwB,OAAOiQ,MAAP,kCAAa,KAAO7M,YAtBD,0DAAH,qDA6BdsO,EAAc,oCAAG,wFAChBhC,EADgB,uBAEnB1P,OAAOiQ,MAAM,kCAFM,+CAOSxE,GAPT,SAQXiE,EAAa4B,cARF,kEAObzF,EAPa,YAWnB2E,EAXmB,UAYXe,EAAoB1F,GAZT,yBAajB6D,EAAanS,KAAO,cAbH,qEAgBnBiB,EAAY,EAAD,IACXwB,OAAOiQ,MAAP,kCAAa,KAAO7M,YAjBD,0DAAH,qDAwBduO,EAAmB,oCAAG,8FACrBnC,EADqB,uBAExBxP,OAAOiQ,MAAM,wBAFW,iCAKpB2B,EAAe,eALK,kBAQI7G,GAC1B/I,EAAAA,GAAAA,KAAY4P,GAAcxO,SAAS,UACnC,CAACoM,EAAoBxL,iBAVC,cAQlBwH,EARkB,iBAaIC,GAAQD,GAbZ,QAalBK,EAbkB,OAclBgG,EACJ7P,EAAAA,GAAAA,KAAY6J,EAAe,UAAUzI,SAAS,WAAawO,EAE7D5R,OAAOiQ,MACL4B,EAAO,wCAA0C,qBAlB3B,kDAqBxBrT,EAAY,EAAD,IACXwB,OAAOiQ,MAAM,KAAM7M,YAtBK,0DAAH,qDAgCnBmO,EAAsB,SAC1BO,GAD0B,IAE1BpR,EAF0B,uDAEX,2BAFW,OAI1BV,OACG+R,MADH,eACiBrR,EADjB,mBACgCoR,IAC7BE,MAAK,SAACrR,GAAD,OAAmBA,EAAI8P,WAM3BwB,GAAiB,oCAAG,WACxB5I,GADwB,+EAGnBA,EAHmB,uBAItB0G,OAA6BmC,GAC7BrC,OAAuBqC,GALD,6BASlBC,EAAsB,SAAClQ,GAC3B,OAAO,IAAImQ,aAAcC,OAAOpQ,IAG5BqQ,EAbkB,oCAaK,WAAOrQ,GAAP,0FACauD,GACtCrJ,EAAewF,aAFU,cACrBA,EADqB,OAIrBmQ,EAAS9P,EAAAA,GAAAA,KAAYC,GAAQmB,SAAS,UAJjB,SAKrBzB,EAAY4Q,OAAOT,GALE,cAM3B/B,EAA6B+B,GAC7BjC,EAAuBlO,GAPI,kBAQpBA,GARoB,2CAbL,sDAwBlB6Q,EAxBkB,oCAwBM,WAAOV,GAAP,wFACYtM,GACtCrJ,EAAewF,aAFW,cACtBA,EADsB,gBAItBA,EAAY4Q,OAAOT,GAJG,cAK5B/B,EAA6B+B,GAC7BjC,EAAuBlO,GANK,kBAOrBA,GAPqB,2CAxBN,iEAkClB0H,aAAgBK,aAlCE,2CAoCZ4I,EAAqBjJ,GApCT,iEAsClB7K,EAAY,EAAD,IAtCO,UAuCZgU,EAAsBL,EAAoB9I,IAvC9B,2DA2CZiJ,EAAqBtQ,EAAAA,GAAAA,KAAYqH,IA3CrB,kEA6ClB7K,EAAY,EAAD,IA7CO,UA8CZgU,EAAsBnJ,GA9CV,0DAkDtB7K,EAAY,EAAD,IACXwB,OAAOiQ,MAAM,KAAM3R,SAnDG,yEAAH,sDAuDvB,OACE,mCACE,4CAAmB2Q,MAAAA,OAAnB,EAAmBA,EAAarI,iBAChC,qDAA4BqI,MAAAA,OAA5B,EAA4BA,EAAa5I,eACzC,oBAAQ4H,QAAS,kBAAMsB,GAAwBD,IAA/C,SACIA,EAEE,0BADA,+BAGN,oBAAQrB,QAAS,kBAAMoB,GAAqBD,IAA5C,SACIA,EAA4C,qBAAzB,0BAEvB,kBAAKZ,MAAO,CAAEC,QAASa,EAAsB,GAAK,QAAlD,8BAEG1H,MAAAA,OAFH,EAEGA,EAAiB2G,KAAI,SAACvH,EAAgB0G,GACrC,OACE,yBACE,UAACkB,GAAD,CAAoB5H,eAAgBA,KAD9B0G,UAMd,kBAAKc,MAAO,CAAEC,QAASW,EAAmB,GAAK,QAA/C,mCAEG1C,MAAAA,OAFH,EAEGA,EAAc6B,KAAI,SAACkE,EAAU/E,GAC5B,OACE,yBACE,UAACK,GAAD,CACEpM,YAAa8Q,EACbzE,SAAU,SAACuC,GAAD,OAAUD,EAAqBC,OAHrC7C,aAJd,QAWQ,oBAER,oBACA,oBACA,oBACA,6BACE,0GAIA,oBACA,mBANF,SAQE,mBACEc,MAAO,CAAEkE,MAAO,KAChBC,YAAY,qBACZC,SAAU,SAAC9P,GAAD,OAAOwN,EAAqBxN,EAAE7B,OAAOI,QAC/CA,MAAOmO,MAAAA,OAAF,EAAEA,EAAqBxM,eAE7BwM,GACC,mCACE,kDACA,UAACzB,GAAD,CAAiBpM,YAAa6N,OAE9B,KACHA,GACC,mCACE,oBACA,oBACA,oBAAQvB,QAAS,SAAC4E,GAAD,OAAOlB,KAAxB,+CAGA,sBAEA,MACJ,oBACA,mBA/BF,qCAiCE,mBACEjR,KAAK,OACLkS,SAAU,SAAC9P,GAAD,OAAO6M,EAAgB7M,EAAE7B,OAAO6R,MAAO,QAEnD,mBACCtD,GAAuBE,GACtB,mCACE,oBACA,oBAAQzB,QAAS,SAAC4E,GAAD,OAAOxB,KAAxB,8BAEA,KACH7B,GAAuBE,GACtB,mCACE,oBACA,oBACEzB,QAAS,SAAC4E,GAAD,OACPrB,EACEpW,EAA4BwP,wCAHlC,8CAUA,KACH4E,GAAuBE,GACtB,mCACE,oBACA,oBACEzB,QAAS,SAAC4E,GAAD,OACPrB,EACEpW,EAA4B2X,uCAHlC,6CAUA,MACJ,mBACCrD,GACC,mCACE,oBAAQzB,QAAS,SAAC4E,GAAD,OAAOnB,KAAxB,+BACA,sBAEA,MACJ,oBACA,mBAhFF,sDAkFE,mBAlFF,gCAmFE,mBACEhR,KAAK,OACLkS,SAAQ,oCAAE,WAAO9P,GAAP,8EACFmP,GADE,SACsBnP,EAAE7B,OAAO6R,MAAO,GAAGxB,cADzC,qIAAF,yDAIV,oBACA,sBACE9C,MAAO,CAAEkE,MAAO,IAAKM,OAAQ,KAC7B3R,MAAOyO,EACP8C,SAAQ,oCAAE,WAAO9P,GAAP,kFAAmBmP,GAAkBnP,EAAE7B,OAAOI,OAA9C,mFAAF,wDAETuO,GAAuBF,GACtB,mCACE,oBACA,oBAAQzB,QAAS,SAAC4E,GAAD,OAAOpB,KAAxB,gCAEA,YAYZ,SANY,kBACV,iBAAKwB,UAAU,MAAf,UACE,UAACpE,GAAD,OC9cSqE,EAAAA,WACXpC,SAASqC,eAAe,SAErBC,QACH,UAAC,aAAD,WACE,UAAC,GAAD,+MCFF,WAEE,IAAGpT,OAAOC,YAAV,CAGA,IAAIoT,aACAC,gBAAkB,EAClBC,cACAC,eACAC,QAAU,EACVC,UAAY,EACZC,SAAW,EACXC,SAAW,EACXC,aAAe7T,OAAOmE,QACtB2P,mCAAoC,EACpCC,0BAA2B,EAK3B9T,YAIAA,YAFD4T,WAEe,IAAI1P,SAAQ,SAAS4B,EAASiO,GAExCR,eAAiBzN,EACjBwN,cAAgBS,KAIN,GAmBlB,IAAIC,aAAeC,gBA+WfC,sCAAwC,CACxCC,eAAiB,EACjBC,UAAY,GAGZC,kBAAoB,SAA2BC,EAAYC,GACvD,IAAIC,EAAWN,sCAAsCE,UAAUE,GAC1DE,GACLA,EAAS7L,MAAM,KAAK4L,IAOxBE,KAAO,SAAcC,EAAcjM,EAAM+L,GACrC,IAAIG,EAAcH,GAAgC,mBAAbA,EACjCF,EAAaK,EAAcT,sCAAsCC,iBAAmB,EAEpFQ,IACAT,sCAAsCE,UAAUE,GAAcE,GAElE,IAAII,EAAS/D,SAASC,cAAc,UAChC+D,EAAU,IAAIC,MAAM,gBACxB,IACIF,EAAOG,aAAa,MAAO,gBAAkBL,EAAe,IAAMJ,EAAY,IAAMU,mBAAmBvG,KAAKC,UAAUjG,EAAMoM,KAC9H,MAAMhS,GACJmN,MAAMnN,GAEVgO,SAASoE,gBAAgBjE,YAAY4D,GACrCA,EAAOM,WAAWC,YAAYP,GAC9BA,EAAS,OA2QjB5U,YAAYoV,gBAAkB,QAC9BpV,YAAYqV,YAAcA,YAC1BrV,YAAYsV,IAAMC,iBAClBvV,YAAYuI,cAAgBA,cAC5BvI,YAAYC,aAAeA,aAC3BD,YAAYwV,oBAAsBA,oBAE/BC,6BAECzV,YAAYmF,kBAAoBA,kBAChCnF,YAAY0V,qBAAuBA,sBAGnCD,6BAEAzV,YAAY2F,aAAeA,cAG5B5F,OAAO4V,yBAENC,WAAWC,mBAAoB9V,OAAO4V,0BAItCC,WAAWC,mBAAoB,KAGnCC,qBAEA9V,YAAY+V,kBAAoB/V,YAAYgW,gBAC5CjW,OAAOC,YAAcA,YACrBiW,uBAxsBA,SAAShC,gBACL,IAA6BiC,EAAzBC,EAAIhI,UAAUiI,UAAgBC,EAAGF,EAAGtV,MAAM,2EAA6E,GAC3H,MAAG,WAAWyV,KAAKD,EAAE,IAEV,CAAE/Y,KAAK,KAAM8J,SADpB8O,EAAO,kBAAkBK,KAAKJ,IAAO,IACJ,IAAM,IAE/B,WAATE,EAAE,IAEU,OADXH,EAAMC,EAAGtV,MAAM,iCAEJ,CAAEvD,KAAM4Y,EAAI,GAAG/V,QAAQ,MAAO,SAAUiH,QAAS8O,EAAI,KAEpEG,EAAGA,EAAE,GAAI,CAACA,EAAE,GAAIA,EAAE,IAAK,CAAClI,UAAUqI,QAASrI,UAAUsI,WAAY,MACtB,OAAtCP,EAAMC,EAAGtV,MAAM,qBAChBwV,EAAEK,OAAO,EAAG,EAAGR,EAAI,IAChB,CAAC5Y,KAAK+Y,EAAE,GAAGjP,QAAQiP,EAAE,KAIhC,SAASM,kBAAkBC,EAAO1W,GAE9B,GAAuB,oBAAd,QAET,OAAI0W,GAAS5W,YAAY+V,mBACP/V,YAAYwI,gBAEZxI,YAAY6W,oBAEZ7W,YAAYgW,sBAL9B,EAWJ,SAASzN,cAAcqO,GACZA,IAAU5W,YAAYwI,iBACxBoO,IAAU5W,YAAY6W,gBACtBD,IAAU5W,YAAYgW,iBAI3BhW,YAAY+V,kBAAoBa,EAC5B5W,YAAY+V,oBAAsB/V,YAAYwI,iBAC9CmO,kBAAkB3W,YAAY6W,eAAgB,yCAC9C7W,YAAY+V,oBAAsB/V,YAAY6W,gBAC9CF,kBAAkB3W,YAAY6W,eAAgB,wCAC9C7W,YAAY+V,oBAAsB/V,YAAYgW,iBAC9CW,kBAAkB3W,YAAY6W,eAAgB,yCAC/CpB,6BAEKzV,YAAY+V,oBAAsB/V,YAAYwI,iBAC9CzI,OAAO+W,YAAY,sBAAuB,KAC1C9W,YAAY+V,oBAAsB/V,YAAY6W,gBAC9C9W,OAAO+W,YAAY,qBAAsB,KACzC9W,YAAY+V,oBAAsB/V,YAAYgW,iBAC9CjW,OAAO+W,YAAY,sBAAuB,OAjB9CH,kBAAkB3W,YAAYgW,gBAAiB,4CAA8CY,GAqBrG,SAASd,qBAEL9V,YAAY+W,qBAAuB,EACnC/W,YAAYgX,4BAA8B,EAC1ChX,YAAY+L,2BAA6B,EACzC/L,YAAYiX,8BAAgC,EAC5CjX,YAAYkX,sBAAwB,EACpClX,YAAYmX,6BAA+B,EAC3CnX,YAAYoX,4BAA8B,EAC1CpX,YAAYqX,+BAAiC,EAC7CrX,YAAY8M,yBAA2B,IAEvC9M,YAAYjE,iBAAmB,KAE/BiE,YAAYiN,mCAAqC,EAEjDjN,YAAYsX,sCAAwC,EAEpDtX,YAAY2K,sCAAwC,EACpD3K,YAAYuX,uCAAyC,EACrDvX,YAAY8S,qCAAuC,EAEnD9S,YAAYwX,uBAAyB,GACrCxX,YAAYyX,mBAAqB,GACjCzX,YAAY0X,iBAAmB,GAC/B1X,YAAY2X,6BAA+B,KAC3C3X,YAAY4X,sBAAwB,EAEpC5X,YAAY6X,2BAA6B,iEACzC7X,YAAY8X,2BAA6B,mDACzC9X,YAAY+X,mBAAqB,qEACjC/X,YAAYgY,mBAAqB,uDAEjChY,YAAYuK,0BAA4B,+DACxCvK,YAAYmK,0BAA4B,6EACxCnK,YAAYwK,0BAA4B,+DACxCxK,YAAYqK,0BAA4B,6EAExCrK,YAAYiY,uBAAyB,EACrCjY,YAAY+J,mBAAqB,EACjC/J,YAAYkY,iBAAmB,EAC/BlY,YAAYmY,6BAA+B,GAC3CnY,YAAYoY,oBAAsB,MAElCpY,YAAYqY,uBAAyB,EACrCrY,YAAYsY,uBAAyB,EACrCtY,YAAYuY,qBAAuB,EAEnCvY,YAAYwY,8CAAgD,EAC5DxY,YAAY4J,wCAA0C,EACtD5J,YAAYyY,4CAA8C,EAE1DzY,YAAY0Y,sCAAwC,EACpD1Y,YAAY2Y,qCAAuC,EAEnD3Y,YAAY4Y,mCAAqC,EACjD5Y,YAAYsX,sCAAwC,EACpDtX,YAAY6Y,qCAAuC,EACnD7Y,YAAY8Y,mCAAqC,EACjD9Y,YAAY+Y,uCAAyC,EACrD/Y,YAAYgZ,mCAAqC,EACjDhZ,YAAYiZ,2CAA6C,EACzDjZ,YAAYkZ,4CAA8C,EAC1DlZ,YAAYmZ,4CAA8C,EAC1DnZ,YAAYoZ,oCAAsC,EAClDpZ,YAAYqZ,4CAA8C,GAC1DrZ,YAAYsZ,sCAAwC,GACpDtZ,YAAYuZ,mCAAqC,GAEjDvZ,YAAYwZ,oCAAsC,IAElDxZ,YAAYyZ,4BAA8B,EAE1CzZ,YAAY0Z,kBAAoB,EAChC1Z,YAAY2Z,gCAAkC,GAE9C3Z,YAAY4Z,wBAA0B,EACtC5Z,YAAY6Z,4BAA8B,EAC1C7Z,YAAY8Z,kBAAoB,EAEhC9Z,YAAY+Z,6CAA+C,EAC3D/Z,YAAYga,8CAAgD,EAC5Dha,YAAYia,qDAAuD,EACnEja,YAAYka,8CAAgD,EAC5Dla,YAAYma,+CAAiD,EAC7Dna,YAAYoa,sDAAwD,EACpEpa,YAAYqa,8CAAgD,IAC5Dra,YAAYsa,0BAA4B,EAExCta,YAAYua,0BAA4B,EACxCva,YAAYwa,0BAA4B,EAExCxa,YAAYya,2BAA6B,EACzCza,YAAY0a,8BAAgC,EAC5C1a,YAAY2a,gCAAkC,EAE9C3a,YAAY4a,kCAAoC,EAChD5a,YAAY6a,kCAAoC,EAChD7a,YAAY8a,kCAAoC,EAChD9a,YAAY+a,mCAAqC,EACjD/a,YAAYgb,kCAAoC,EAChDhb,YAAYib,4CAA8C,GAE1Djb,YAAYkb,6BAA+B,EAC3Clb,YAAYmb,4BAA8B,EAC1Cnb,YAAYob,4BAA8B,EAC1Cpb,YAAYqb,4BAA8B,EAC1Crb,YAAYsb,gCAAkC,EAC9Ctb,YAAYub,gCAAkC,EAC9Cvb,YAAYwb,gCAAkC,EAC9Cxb,YAAYyb,qCAAuC,IACnDzb,YAAY0b,8CAAgD,IAC5D1b,YAAY2b,8CAAgD,IAC5D3b,YAAY4b,0CAA4C,IACxD5b,YAAY6b,mDAAqD,IACjE7b,YAAY8b,mDAAqD,IAEjE9b,YAAYwI,gBAAkB,EAC9BxI,YAAY6W,eAAiB,EAC7B7W,YAAYgW,gBAAkB,EAE9BhW,YAAY+b,mBAAqB,EACjC/b,YAAYgc,mCAAqC,EACjDhc,YAAYic,mCAAqC,EACjDjc,YAAYkc,4BAA8B,EAC1Clc,YAAYmc,4BAA8B,UAC1Cnc,YAAYoc,qCAAuC,UACnDpc,YAAYqc,2BAA6B,WAEzCrc,YAAYsc,wBAA0B,EACtCtc,YAAYuc,8BAAgC,EAC5Cvc,YAAYwc,2BAA6B,EACzCxc,YAAYyc,wBAA0B,EAEtCzc,YAAY0c,gCAAkC,EAC9C1c,YAAY2c,yBAA2B,EACvC3c,YAAY4c,sBAAwB,EACpC5c,YAAY6c,qBAAuB,EAEnC7c,YAAY8c,qBAAuB,EACnC9c,YAAY+c,sBAAwB,EACpC/c,YAAYgd,qBAAuB,EAEnChd,YAAYid,oBAAsB,EAClCjd,YAAYkd,mBAAqB,EACjCld,YAAYmd,iBAAmB,EAC/Bnd,YAAYod,iBAAmB,EAE/Bpd,YAAYqd,8BAAgC,EAC5Crd,YAAYsd,eAAiB,EAC7Btd,YAAYud,aAAe,EAE3Bvd,YAAYwd,uBAAyB,EACrCxd,YAAYyd,oBAAsB,EAClCzd,YAAY0d,uBAAyB,EACrC1d,YAAY2d,gCAAkC,EAC9C3d,YAAY4d,8BAAgC,GAC5C5d,YAAY6d,sCAAwC,GACpD7d,YAAY8d,qBAAuB,IAGvC,SAASzI,YAAY0I,GACjB,SAASC,EAAUC,EAAMC,GACrB,IAAI9b,EACJ,IACIA,EAAS+b,EAAUF,GAAMC,GAC3B,MAAO9e,GACL,OAAO8E,QAAQ6P,OAAO3U,GAE1B,OAAIgD,EAAOgc,KACAhc,EAAOhB,MAEP8C,QAAQ4B,QAAQ1D,EAAOhB,OAAO2Q,KAAKsM,EAAaC,GAG/D,IAAIH,EAAYJ,EAAcjJ,MAAMyJ,UAAUC,MAAM/J,KAAKgK,UAAW,IAChEJ,EAAcL,EAAUU,KAAKV,EAAW,QACxCM,EAAaN,EAAUU,KAAKV,EAAW,SAC3C,OAAOK,IAGX,SAASM,OAGL,MAA8B,OAAtB3K,aAAa1W,MAAuC,SAAtB0W,aAAa1W,KAGvD,SAASshB,QACL,OAAQzQ,UAAUiI,UAAUvV,MAAM,UAC9BsN,UAAUiI,UAAUvV,MAAM,UAC1BsN,UAAUiI,UAAUvV,MAAM,WAGlC,SAAS4U,2BAGL,OAAGkJ,SAGuB,QAAtB3K,aAAa1W,OAGS,cAAtB0W,aAAa1W,MACbqW,UAAW,GACJ,GAGc,UAAtBK,aAAa1W,MACZkW,SAAU,EACPQ,aAAa5M,SAAW,IAON,YAAtB4M,aAAa1W,MACZmW,WAAY,EACTO,aAAa5M,SAAW,IAON,WAAtB4M,aAAa1W,KACT0W,aAAa5M,SAAW,GAQN,WAAtB4M,aAAa1W,MACZoW,UAAW,EACRM,aAAa5M,SAAW,SAF/B,IAWJ,SAASzB,aAAarI,GAClB,GAAIshB,QAGA,OAAOC,2CAA2C,eAAgB,CAACvhB,IAEvE,GAAIqhB,OAAQ,CAER,GAAIrhB,EAAKuD,MAAM,mBACX,IAII,OADgCgQ,SAASqC,eAAe,mBACvBvN,aAAarI,GAElD,MAAOuF,GACH,IAEI,OADyBgO,SAASqC,eAAe,0BACvBvN,aAAarI,GAE3C,MAAO8B,GACH,KAAM,4HAKlB,IAEI,OADyByR,SAASqC,eAAe,mBACvBvN,aAAarI,GAE3C,MAAOuF,GAEX,OAAO,IAAIic,cAAcxhB,IAIzB,OAAO8V,aAAazN,aAAarI,GAGrC,SAASyhB,mBAAmBC,GAKxB,OAJIA,EAAS,IACTA,EAAS,WAAaA,EAAS,GAG5BA,EAAO7b,SAAS,IAAIC,cAG/B,SAAS6b,wBAAwBpc,GAC7B,IAAIzD,EAAMyD,EAAExE,QAMZ,OALKe,EAEMyD,EAAEmc,SACT5f,GAAO,OAAS2f,mBAAmBlc,EAAEmc,QAAU,KAF/C5f,EAAMyD,EAIHzD,EAGX,SAASa,aAAaif,GAClB,GAAGzJ,4BAA8BkJ,QAAUC,QACvC,OAAOK,wBAAwBC,GAGnC,IACI,OAAO9L,aAAanT,eACtB,MAAM4C,GACJ,OAAOoc,wBAAwBC,IAKvC,SAASxJ,uBACT,OAAOyJ,qBAAqBzJ,uBAI5B,SAASvQ,kBAAkB7H,GACvB,OAAO8V,aAAajO,kBAAkB7H,GAuC1C,SAASuhB,2CAA2CnK,aAAc0K,OAC9D,IAAIC,OACAC,GAUJ,GATApL,sCAAsCO,KAAKC,aAAc0K,OAAO,SAASvc,EAAG0c,UACxED,GAAKzc,EACL,IAAIK,IAAI,UAAUqc,SAClBC,KAAKtc,KACmB,iBAAb,SACPmc,OAASA,OAAOlf,QAAQ,SAAU,MAClCkf,OAASA,OAAOlf,QAAQ,SAAU,UAGvCmf,GACC,MAAMA,GACV,OAAOD,OAGX,SAASI,wCAEL,IAAK1f,OAAO2f,mCACZ,CACI,IAAIC,EAAM9O,SAASC,cAAc,OACjC6O,EAAIC,GAAK,kBACTD,EAAIpR,MAAQ,uHACZoR,EAAIE,UAAY,8nBAKhBhP,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAY2O,GACrD9O,SAASqC,eAAe,6BAA6B6M,iBAAiB,SAAQ,WAE1EC,oBAAoB,qBACpBnP,SAASqC,eAAe,mBAAmB3E,MAAM0R,WAAa,YAGlEN,EAAII,iBAAiB,SAAQ,WAEzBC,oBAAoB,qBACpBnP,SAASqC,eAAe,mBAAmB3E,MAAM0R,WAAa,YAElEN,EAAIpR,MAAM0R,WAAW,WAG7B,SAASC,mCACDngB,OAAOogB,uCACPpgB,OAAOogB,wCACXrM,0BAA2B,EAC3BqL,qBAAqBiB,oBAAoBC,cAAeL,qBAG5D,SAASM,qBACA3B,QAAWlL,WAAcC,UACtB3T,OAAOogB,uCACPpgB,OAAOogB,wCAEfpgB,OAAO+W,YAAY,2BAA4B,KAC/C/W,OAAOggB,iBAAiB,WAAW,SAAUQ,GACzC,GAA2B,iBAAhBA,EAAU,MAAmBA,EAAMnX,KAAKvI,MAAM,wBAErDgT,kCAAJ,CAEA,GAAGJ,WAAaC,SAChB,CAEI,IAAIjD,EAAM8P,EAAMnX,KAAK5H,UAAU+e,EAAMnX,KAAKoX,QAAQ,QAAU,GAC5D,IAAK/P,EAAI5P,MAAM,2DACP4P,EAAI5P,MAAM,yEAId,OAFA8V,kBAAkB3W,YAAYgW,gBAAiB,YAAevF,EAAM,iEACpEuP,sBAGJ,IAAIS,EAAU5P,SAASC,cAAc,UACrC2P,EAAQ1L,aAAa,OAAQ,mBAC7B0L,EAAQ1L,aAAa,MAAOtE,GAC5BgQ,EAAQC,QAAUV,oBAClBS,EAAQE,OAAST,iCACjBrP,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAYyP,QAErDtB,qBAAqBiB,oBAAoBC,cAAeL,qBAE5DnM,mCAAoC,MACrC,GAIP,SAAS+M,iBAQG,IAQIH,EAdThN,WAAaC,SAEZ4M,qBAGI9M,SAAWG,WACP8M,EAAU5P,SAASC,cAAc,WAC7BiE,aAAa,OAAQ,mBAC7B0L,EAAQ1L,aAAa,MAAO,6EAC5B0L,EAAQC,QAAUV,oBAClBS,EAAQE,OAASL,mBACjBzP,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAYyP,MAGjDA,EAAU5P,SAASC,cAAc,WAC7BiE,aAAa,OAAQ,mBAC7B0L,EAAQ1L,aAAa,MAAO,6EAC5B0L,EAAQC,QAAUV,oBAClBS,EAAQE,OAASL,mBACjBzP,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAYyP,IAMjE,SAASI,oBAEL,IAAIC,EAAOjQ,SAASC,cAAc,UAMlC,GALAgQ,EAAK/L,aAAa,KAAM,sBACxB+L,EAAK/L,aAAa,OAAQ,uBAC1B+L,EAAK/L,aAAa,QAAS,sBAC3BlE,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAY8P,GACrD1N,aAAevC,SAASqC,eAAe,sBACpCyL,OACH,CACI,IAAIoC,EAAQlQ,SAASC,cAAc,UACnCiQ,EAAMhM,aAAa,KAAM,0BACzBgM,EAAMhM,aAAa,UAAW,8CAC9BgM,EAAMhM,aAAa,QAAS,sBAC5BlE,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAY+P,GACrD,IAAIC,EAAQnQ,SAASC,cAAc,UACnCkQ,EAAMjM,aAAa,KAAM,mBACzBiM,EAAMjM,aAAa,UAAW,8CAC9BiM,EAAMjM,aAAa,QAAS,sBAC5BlE,SAASiP,qBAAqB,QAAQ,GAAG9O,YAAYgQ,IAK7D,SAASX,gBAELhN,gBAAkB,EACfO,WAECL,iBAEAxT,OAAO+W,YAAY,qBAAsB,KAKjD,SAASkJ,oBAAoB9f,QAEN,IAAV,GAAyC,iBAAV,IACpCA,EAAM,qBACVmT,gBAAkB,EACfO,WAECN,cAAcpT,GAEdH,OAAO+W,YAAY,yBAA0B,KAKrD,SAASjB,qBAEkB,IAApBxC,kBAEAI,YAEMK,0BACD2L,yCAERpM,gBAAkB,EACfO,WAECN,cAAc,2CAEdvT,OAAO+W,YAAY,yBAA0B,MAMrD,SAASmK,cAAc/C,GAEnB,OAAO,IAAIha,QAAQga,GAGvB,SAASgD,qBACL,IACiBvb,aAAa,kBAC1B0a,gBAEJ,MAAOjhB,GACHyR,SAASqC,eAAe,sBAAsB3E,MAAMC,QAAU,OAG9D,IAAI2S,EAAWhT,UAAUiT,UAAU,uBACnC,GAAID,EAGInB,oBAFSmB,EAASE,cAEE,2CAGA,oCAIxBrB,oBAAoB,sBAMhC,SAAS/J,uBAEL,IAAIqL,EAAMzQ,SAASC,cAAc,OACjCwQ,EAAIzB,UAAY,6CAC8C,IAAzCyB,EAAIxB,qBAAqB,KAAKvgB,OAE/CygB,oBAAoB,uDAIrBvK,2BAECmL,iBACMhN,WAUqB,aAAxB/C,SAAS0Q,YACRV,oBACAK,sBAEAnhB,OAAOggB,iBAAiB,QAAQ,SAAUQ,GACtCM,oBACAK,wBACD,GAhBPnhB,OAAOggB,iBAAiB,WAAW,SAAUQ,GAClB,6BAAfA,EAAMnX,OAEVyX,oBACAK,yBAEJ,GAeZ,SAAS3L,iBAAiB1M,GAEtBuK,aAAevK,EAGnB,SAAS2M,sBAEL,aAAgD,IAAnCxV,YAA6B,oBAAsBA,YAAYwhB,oBArsBnF,GA6uBD,iCAAezhB,OAAkB","sources":["webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cades.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/storeType.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/oids-dictionary.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/errorCodes.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/outputError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/PluginConfig.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/CryptoError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getLastError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/certificateParser.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/bufferToHex.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/Certificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/canAsync.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/deasync.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/outputDebug.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/createObject.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getSystemInfo.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/isSupportedCadesVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/isSupportedCSPVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/isValidSystemSetup.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/afterPluginLoaded.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/setCryptoProperty.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/validateCertificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/sign.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/signXml.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/encrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/decrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/openStore.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCertificates.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/findCertificateBySkid.ts","webpack://cryptopro-cades-example/./src/components/CertificateInfo.tsx","webpack://cryptopro-cades-example/./src/components/CryptoProviderInfo.tsx","webpack://cryptopro-cades-example/./src/App.tsx","webpack://cryptopro-cades-example/./src/index.tsx","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/vendor/cadesplugin_api.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Хранилище персональных сертификатов пользователя.\n */\nexport const CAPICOM_MY_STORE = 'My';\n\n/**\n * Тип подписи XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xml_signature_type\n */\nexport enum CADESCOM_XML_SIGNATURE_TYPE {\n  /**\n   * Вложенная подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0,\n\n  /**\n   * Оборачивающая подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1,\n\n  /**\n   * Подпись по шаблону.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2,\n}\n\n/**\n * Тип подписи XAdES-XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xades_type\n */\nexport enum CADESCOM_XADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (XAdES-X Long Type 1).\n   */\n  CADESCOM_XADES_DEFAULT = 0x00000010,\n\n  /**\n   * Тип подписи XAdES-A.\n   */\n  CADESCOM_XADES_A = 0x000007d0,\n\n  /**\n   * Тип подписи XAdES BES.\n   */\n  CADESCOM_XADES_BES = 0x00000020,\n\n  /**\n   * Тип подписи XAdES T.\n   */\n  CADESCOM_XADES_T = 0x00000050,\n\n  /**\n   * Тип подписи XAdES-X Long Type 1.\n   */\n  CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0,\n\n  /**\n   * Тип подписи XMLDSIG.\n   */\n  CADESCOM_XMLDSIG_TYPE = 0x00000000,\n}\n\n/**\n * Тип усовершенствованной подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_cades_type\n */\nexport const enum CADESCOM_CADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (CAdES-X Long Type 1).\n   */\n  CADESCOM_CADES_DEFAULT = 0,\n\n  /**\n   * Тип подписи CAdES BES.\n   */\n  CADESCOM_CADES_BES = 1,\n\n  /**\n   * Тип подписи CAdES T.\n   */\n  CADESCOM_CADES_T = 0x5,\n\n  /**\n   * Тип подписи CAdES-X Long Type 1.\n   */\n  CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d,\n\n  /**\n   * Тип подписи PKCS7.\n   */\n  CADESCOM_PKCS7_TYPE = 0xffff,\n}\n\n/**\n * Типы криптографических алгоритмов для XmlDsig\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-methods?id=Константы\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-samples/plugin-samples-sign-xml\n */\nexport enum XML_SIGNATURE_GOST_ALGORITHM_TYPE {\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411',\n\n  /**\n   * URL Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411',\n\n  /**\n   * URL Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3411Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3410Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3411Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3410Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512',\n}\n\n/**\n * The CAPICOM_CERTIFICATE_INCLUDE_OPTION enumeration type defines which certificates in a chain are saved.\n * This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-include-option\n */\nexport enum CAPICOM_CERTIFICATE_INCLUDE_OPTION {\n  /**\n   * Saves all certificates in the chain with the exception of the root entity.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0,\n\n  /**\n   * Saves the complete certificate chain.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1,\n\n  /**\n   * Saves only the end entity certificate.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2,\n}\n\n/**\n * Способ кодирования данных для подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_content_encoding_type\n */\nexport enum CADESCOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CADESCOM_ENCODE_ANY = -1,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CADESCOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CADESCOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Enumeration type indicates the encoding type used.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-encoding-type\n */\nexport enum CAPICOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_ENCODE_ANY = 0xffffffff,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CAPICOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CAPICOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Используется как параметр при открытии Хранилища через @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/store-open\n * Позволяет задать уровень доступа к открываемому Хранилищу.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-open-mode\n */\nexport enum CAPICOM_STORE_OPEN_MODE {\n  /**\n   * Open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_READ_ONLY = 0,\n\n  /**\n   * Open the store in read/write mode.\n   */\n  CAPICOM_STORE_OPEN_READ_WRITE = 1,\n\n  /**\n   * Open the store in read/write mode if the user has read/write permissions. If the user does not have read/write permissions, open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2,\n\n  /**\n   * Open existing stores only; do not create a new store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_EXISTING_ONLY = 128,\n\n  /**\n   * Include archived certificates when using the store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED = 256,\n}\n\n/**\n * Типы для указания расположения хранилища сертификатов.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_store_location\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-location\n */\nexport enum STORE_LOCATION {\n  /**\n   * Хранилище сертификатов в памяти компьютера. Любые изменения недопустимы.\n   */\n  CAPICOM_MEMORY_STORE = 0,\n  CADESCOM_MEMORY_STORE = 0,\n\n  /**\n   * Хранилище сертификатов компьютера. Если открыто на чтение/запись, то у вас есть права на изменения.\n   */\n  CAPICOM_LOCAL_MACHINE_STORE = 1,\n  CADESCOM_LOCAL_MACHINE_STORE = 1,\n\n  /**\n   * Хранилище сертификатов текущего пользователя. Доступ для изменения доступен для текущего пользователя.\n   */\n  CAPICOM_CURRENT_USER_STORE = 2,\n  CADESCOM_CURRENT_USER_STORE = 2,\n\n  /**\n   * Хранилище сертификатов в Active Directory.. Доступно только для чтения. Нельзя добавить или удалить сертификаты из данного хранилища.\n   */\n  CAPICOM_ACTIVE_DIRECTORY_USER_STORE = 3,\n\n  /**\n   * Хранилище сертификатов на смарткартах (поддерживается только с КриптоПро CSP 5.0.11823 и выше). Объявлено и доступно с CAPICOM 2.0.\n   */\n  CAPICOM_SMART_CARD_USER_STORE = 4,\n\n  /**\n   * Хранилище сертификатов из контейнеров закрытых ключей. В данный Store попадают все сертификаты из контейнеров закрытых ключей, которые доступны в системе в момент открытия.\n   * Доступно с CAdESCOM Plugin 2.0.13292\n   */\n  CADESCOM_CONTAINER_STORE = 100,\n}\n\n/**\n * The CAPICOM_CERT_INFO_TYPE enumeration type defines what information is to be queried from a certificate.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-cert-info-type\n * @type {number}\n */\nexport enum CAPICOM_CERT_INFO_TYPE {\n  /**\n   * Returns the display name from the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0,\n\n  /**\n   * Returns the display name of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1,\n\n  /**\n   * Returns the email address of the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_EMAIL_NAME = 2,\n\n  /**\n   * Returns the email address of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_EMAIL_NAME = 3,\n\n  /**\n   * Returns the UPN of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_UPN = 4,\n\n  /**\n   * Returns the UPN of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_UPN = 5,\n\n  /**\n   * Returns the DNS name of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_DNS_NAME = 6,\n\n  /**\n   * Returns the DNS name of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_DNS_NAME = 7,\n}\n\n/**\n * The CAPICOM_CERTIFICATE_FIND_TYPE enumeration type defines the type of search criteria used to find specific certificates. This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-find-type\n * @type {number}\n */\nexport enum CAPICOM_CERTIFICATE_FIND_TYPE {\n  /**\n   * Returns certificates matching a specified SHA1 hash.\n   */\n  CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0,\n\n  /**\n   * Returns certificates whose subject name exactly or partially matches a specified subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1,\n\n  /**\n   * Returns certificates whose issuer name exactly or partially matches a specified issuer name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2,\n\n  /**\n   * Returns certificates whose root subject name exactly or partially matches a specified root subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3,\n\n  /**\n   * Returns certificates whose template name matches a specified template name.\n   */\n  CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4,\n\n  /**\n   * Returns certificates that have an extension that matches a specified extension.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENSION = 5,\n\n  /**\n   * Returns certificates that have an extended property whose property identifier matches a specified property identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6,\n\n  /**\n   * Returns certificates in the store that have either an enhanced key usage extension or property combined with a usage identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7,\n\n  /**\n   * Returns certificates containing a specified policy OID.\n   */\n  CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8,\n\n  /**\n   * Returns certificates whose time is valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9,\n\n  /**\n   * Returns certificates whose time is not yet valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10,\n\n  /**\n   * Returns certificates whose time has expired.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11,\n\n  /**\n   * Returns certificates containing a key that can be used in the specified manner.\n   */\n  CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12,\n}\n\n/**\n * The CAPICOM_KEY_USAGE enumeration defines the ways in which a key can be used. Introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-key-usage\n * @type {number}\n */\nexport enum CAPICOM_KEY_USAGE {\n  /**\n   * The key can be used to create a digital signature.\n   */\n  CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128,\n\n  // other enums omited.\n}\n\n//region (cert.Find(..)) https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n/**\n * Возвращает DWORD значение, указывающее на закрытый ключ из\n *  CERT_KEY_CONTEXT_PROP_ID, если он есть.\n *  Иначе, если CERT_KEY_PROV_INFO_PROP_ID есть,\n *  то он будет источником dwKeySpec.\n *  (Find(CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,CERT_KEY_SPEC_PROP_ID)\n *   - вернет сертификаты, у к-ых есть ссылка на закрытый ключ)\n * @type {number}\n */\nexport const CERT_KEY_SPEC_PROP_ID = 6;\n\n/**\n * Свойства хэш объекта.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n * @type {number}\n */\nexport enum CAPICOM_PROPID {\n  /**\n   * Неизвестный тип свойства.\n   */\n  CAPICOM_PROPID_UNKNOWN = 0,\n\n  /**\n   * Обработчик ключа контейнера с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_HANDLE = 1,\n  /**\n   * Вывод только сертификатов с информацией о контейнерах с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_INFO = 2,\n\n  /**\n   * The properties of a hash object.\n   */\n  CAPICOM_PROPID_HASH_PROP = 3,\n\n  /**\n   * A SHA1 hash object.\n   */\n  CAPICOM_PROPID_SHA1_HASH = 3,\n\n  /**\n   * An MD5 hash object.\n   */\n  CAPICOM_PROPID_MD5_HASH = 4,\n\n  /**\n   * The key context.\n   */\n  CAPICOM_PROPID_KEY_CONTEXT = 5,\n\n  /**\n   * The specifications for a key.\n   */\n  CAPICOM_PROPID_KEY_SPEC = 6,\n\n  /**\n   * Information about whether the hash of the public key is reserved.\n   */\n  CAPICOM_PROPID_PUBKEY_HASH_RESERVED = 8,\n\n  /**\n   * A certificate trust list (CTL) usage.\n   */\n  CAPICOM_PROPID_CTL_USAGE = 9,\n\n  /**\n   * An enhanced key usage (EKU).\n   */\n  CAPICOM_PROPID_ENHKEY_USAGE = 9,\n\n  /**\n   * The location of the next update to the certificate revocation list (CRL).\n   */\n  CAPICOM_PROPID_NEXT_UPDATE_LOCATION = 10,\n\n  /**\n   * A human-readable name.\n   */\n  CAPICOM_PROPID_FRIENDLY_NAME = 11,\n\n  /**\n   * A file that contains a private key.\n   */\n  CAPICOM_PROPID_PVK_FILE = 12,\n\n  /**\n   * A human-readable description.\n   */\n  CAPICOM_PROPID_DESCRIPTION = 13,\n\n  /**\n   * The state of the access.\n   */\n  CAPICOM_PROPID_ACCESS_STATE = 14,\n\n  /**\n   * A hash of the signature.\n   */\n  CAPICOM_PROPID_SIGNATURE_HASH = 15,\n\n  /**\n   * Smart card data.\n   */\n  CAPICOM_PROPID_SMART_CARD_DATA = 16,\n\n  /**\n   * An Encrypting File System (EFS).\n   */\n  CAPICOM_PROPID_EFS = 17,\n\n  /**\n   * Data created using the cryptographic protocols and algorithms owned by the National Institute of Standards and Technology (NIST).\n   */\n  CAPICOM_PROPID_FORTEZZA_DATA = 18,\n\n  /**\n   * Information about whether the object is archived.\n   */\n  CAPICOM_PROPID_ARCHIVED = 19,\n\n  /**\n   * A key identifier.\n   */\n  CAPICOM_PROPID_KEY_IDENTIFIER = 20,\n\n  /**\n   * Auto-enrollment information for a certificate.\n   */\n  CAPICOM_PROPID_AUTO_ENROLL = 21,\n\n  /**\n   * Parameters for a public key algorithm.\n   */\n  CAPICOM_PROPID_PUBKEY_ALG_PARA = 22,\n\n  /**\n   * Information used to update dynamic cross certificates.\n   */\n  CAPICOM_PROPID_CROSS_CERT_DIST_POINTS = 23,\n\n  /**\n   * Information about whether the object is reserved in Internet Explorer 3.0.\n   */\n  CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH = 24,\n\n  /**\n   * The MD5 hash of the subject's public key.\n   */\n  CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH = 25,\n\n  /**\n   * Information about the certificate's enrollment.\n   */\n  CAPICOM_PROPID_ENROLLMENT = 26,\n\n  /**\n   * A date stamp.\n   */\n  CAPICOM_PROPID_DATE_STAMP = 27,\n\n  /**\n   * The MD5 hash of the issuer's serial number.\n   */\n  CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH = 28,\n\n  /**\n   * The MD5 hash of the subject's name.\n   */\n  CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH = 29,\n\n  /**\n   * Extended information about an error.\n   */\n  CAPICOM_PROPID_EXTENDED_ERROR_INFO = 30,\n\n  /**\n   * Information about the renewal of a certification authority.\n   */\n  CAPICOM_PROPID_RENEWAL = 64,\n\n  /**\n   * An archived hash of a key.\n   */\n  CAPICOM_PROPID_ARCHIVED_KEY_HASH = 65,\n\n  /**\n   * Information about the first reservation.\n   */\n  CAPICOM_PROPID_FIRST_RESERVED = 66,\n\n  /**\n   * Information about the most recent reservation.\n   */\n  CAPICOM_PROPID_LAST_RESERVED = 0x00007fff,\n\n  /**\n   * Information about the first user.\n   */\n  CAPICOM_PROPID_FIRST_USER = 0x00008000,\n\n  /**\n   * Information about the most recent user.\n   */\n  CAPICOM_PROPID_LAST_USER = 0x0000ffff,\n}\n\nexport const CAPICOM_OID_OTHER = 0;\nexport const CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\nexport const CAPICOM_EKU_CLIENT_AUTH = 2;\nexport const CAPICOM_EKU_SMARTCARD_LOGON = 5;\nexport const CAPICOM_EKU_OTHER = 0;\n\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\nexport const CADESCOM_ATTRIBUTE_OTHER = -1;\n\nexport const CADESCOM_STRING_TO_UCS2LE = 0;\nexport const CADESCOM_BASE64_TO_BINARY = 1;\n\nexport const CADESCOM_DISPLAY_DATA_NONE = 0;\nexport const CADESCOM_DISPLAY_DATA_CONTENT = 1;\nexport const CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\nexport const CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;\n\nexport const CADESCOM_HASH_ALGORITHM_SHA1 = 0;\nexport const CADESCOM_HASH_ALGORITHM_MD2 = 1;\nexport const CADESCOM_HASH_ALGORITHM_MD4 = 2;\nexport const CADESCOM_HASH_ALGORITHM_MD5 = 3;\nexport const CADESCOM_HASH_ALGORITHM_SHA_256 = 4;\nexport const CADESCOM_HASH_ALGORITHM_SHA_384 = 5;\nexport const CADESCOM_HASH_ALGORITHM_SHA_512 = 6;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112;\n\nexport const CADESCOM_AllowNone = 0;\nexport const CADESCOM_AllowNoOutstandingRequest = 0x1;\nexport const CADESCOM_AllowUntrustedCertificate = 0x2;\nexport const CADESCOM_AllowUntrustedRoot = 0x4;\nexport const CADESCOM_SkipInstallToStore = 0x10000000;\nexport const CADESCOM_InstallCertChainToContainer = 0x20000000;\nexport const CADESCOM_UseContainerStore = 0x40000000;\n\nexport const ENABLE_CARRIER_TYPE_CSP = 0x01;\nexport const ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\nexport const ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\nexport const ENABLE_ANY_CARRIER_TYPE = 0x07;\n\nexport const DISABLE_EVERY_CARRIER_OPERATION = 0x00;\nexport const ENABLE_CARRIER_OPEN_ENUM = 0x01;\nexport const ENABLE_CARRIER_CREATE = 0x02;\nexport const ENABLE_ANY_OPERATION = 0x03;\n\nexport const CADESCOM_PRODUCT_CSP = 0;\nexport const CADESCOM_PRODUCT_OCSP = 1;\nexport const CADESCOM_PRODUCT_TSP = 2;\n\n/**\n * Тип медиа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_media_type\n */\nexport const enum CADESCOM_MEDIA_TYPE {\n  /**\n   * Реестр.\n   */\n  MEDIA_TYPE_REGISTRY = 0x00000001,\n\n  /**\n   * Жесткий диск.\n   */\n  MEDIA_TYPE_HDIMAGE = 0x00000002,\n\n  /**\n   * Облачный носитель.\n   */\n  MEDIA_TYPE_CLOUD = 0x00000004,\n\n  /**\n   * Смарт-карта или любое другое устройство с интерфейсом смарт-карты.\n   */\n  MEDIA_TYPE_SCARD = 0x00000008,\n}\n\nexport const XCN_CRYPT_STRING_BASE64HEADER = 0;\nexport const AT_KEYEXCHANGE = 1;\nexport const AT_SIGNATURE = 2;\n\nexport const CARRIER_FLAG_REMOVABLE = 1;\nexport const CARRIER_FLAG_UNIQUE = 2;\nexport const CARRIER_FLAG_PROTECTED = 4;\nexport const CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\nexport const CARRIER_FLAG_SECURE_MESSAGING = 16;\nexport const CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\nexport const CARRIER_FLAG_VIRTUAL = 128;\n\n/**\n * OID (атрибут) сертификата.\n * The OID object represents an object identifier (OID) that is used by several CAPICOM properties.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/oid\n */\nexport interface CAPICOM_OID {\n  readonly CAPICOM_OID_OTHER: 0;\n  readonly CAPICOM_OID_KEY_USAGE_EXTENSION: 10;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER_EXTENSION: 1;\n  readonly CAPICOM_OID_KEY_ATTRIBUTES_EXTENSION: 2;\n  readonly CAPICOM_OID_CERT_POLICIES_95_EXTENSION: 3;\n  readonly CAPICOM_OID_KEY_USAGE_RESTRICTION_EXTENSION: 4;\n  readonly CAPICOM_OID_LEGACY_POLICY_MAPPINGS_EXTENSION: 5;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME_EXTENSION: 6;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME_EXTENSION: 7;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS_EXTENSION: 8;\n  readonly CAPICOM_OID_SUBJECT_KEY_IDENTIFIER_EXTENSION: 9;\n  readonly CAPICOM_OID_PRIVATEKEY_USAGE_PERIOD_EXTENSION: 11;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME2_EXTENSION: 12;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME2_EXTENSION: 13;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS2_EXTENSION: 14;\n  readonly CAPICOM_OID_NAME_CONSTRAINTS_EXTENSION: 15;\n  readonly CAPICOM_OID_CRL_DIST_POINTS_EXTENSION: 16;\n  readonly CAPICOM_OID_CERT_POLICIES_EXTENSION: 17;\n  readonly CAPICOM_OID_POLICY_MAPPINGS_EXTENSION: 18;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER2_EXTENSION: 19;\n  readonly CAPICOM_OID_POLICY_CONSTRAINTS_EXTENSION: 20;\n  readonly CAPICOM_OID_ENHANCED_KEY_USAGE_EXTENSION: 21;\n  readonly CAPICOM_OID_CERTIFICATE_TEMPLATE_EXTENSION: 22;\n  readonly CAPICOM_OID_APPLICATION_CERT_POLICIES_EXTENSION: 23;\n  readonly CAPICOM_OID_APPLICATION_POLICY_MAPPINGS_EXTENSION: 24;\n  readonly CAPICOM_OID_APPLICATION_POLICY_CONSTRAINTS_EXTENSION: 25;\n  readonly CAPICOM_OID_AUTHORITY_INFO_ACCESS_EXTENSION: 26;\n  readonly CAPICOM_OID_SERVER_AUTH_EKU: 100;\n  readonly CAPICOM_OID_CLIENT_AUTH_EKU: 101;\n  readonly CAPICOM_OID_CODE_SIGNING_EKU: 102;\n  readonly CAPICOM_OID_EMAIL_PROTECTION_EKU: 103;\n  readonly CAPICOM_OID_IPSEC_END_SYSTEM_EKU: 104;\n  readonly CAPICOM_OID_IPSEC_TUNNEL_EKU: 105;\n  readonly CAPICOM_OID_IPSEC_USER_EKU: 106;\n  readonly CAPICOM_OID_TIME_STAMPING_EKU: 107;\n  readonly CAPICOM_OID_CTL_USAGE_SIGNING_EKU: 108;\n  readonly CAPICOM_OID_TIME_STAMP_SIGNING_EKU: 109;\n  readonly CAPICOM_OID_SERVER_GATED_CRYPTO_EKU: 110;\n  readonly CAPICOM_OID_ENCRYPTING_FILE_SYSTEM_EKU: 111;\n  readonly CAPICOM_OID_EFS_RECOVERY_EKU: 112;\n  readonly CAPICOM_OID_WHQL_CRYPTO_EKU: 113;\n  readonly CAPICOM_OID_NT5_CRYPTO_EKU: 114;\n  readonly CAPICOM_OID_OEM_WHQL_CRYPTO_EKU: 115;\n  readonly CAPICOM_OID_EMBEDED_NT_CRYPTO_EKU: 116;\n  readonly CAPICOM_OID_ROOT_LIST_SIGNER_EKU: 117;\n  readonly CAPICOM_OID_QUALIFIED_SUBORDINATION_EKU: 118;\n  readonly CAPICOM_OID_KEY_RECOVERY_EKU: 119;\n  readonly CAPICOM_OID_DIGITAL_RIGHTS_EKU: 120;\n  readonly CAPICOM_OID_LICENSES_EKU: 121;\n  readonly CAPICOM_OID_LICENSE_SERVER_EKU: 122;\n  readonly CAPICOM_OID_SMART_CARD_LOGON_EKU: 123;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_CPS: 124;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_USERNOTICE: 125;\n}\n\n/**\n * Список крипто-объектов для передачи в createObject, (cadesplugin|capicom).CreateObject|CreateObjectAsync()\n */\nexport const enum CRYPTO_OBJECTS {\n  /**\n   * Объект позволяющий взаимодействовать с хранилищем сертификатов.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/store\n   */\n  store = 'CAdESCOM.Store',\n\n  /**\n   * Объект задающий параметры создания и содержащий информацию об усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpsigner\n   */\n  signer = 'CAdESCOM.CPSigner',\n\n  /**\n   * Объект задающий способ подписания Xml файла.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/signedxml\n   */\n  signedXml = 'CAdESCOM.SignedXML',\n\n  /**\n   * Объект предоставляет свойства и методы для работы с подписанным документом XML.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/about\n   */\n  about = 'CAdESCOM.About',\n\n  /**\n   * Объект предоставляет функционал по усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cadessigneddata\n   */\n  signedData = 'CAdESCOM.CadesSignedData',\n\n  /**\n   * Объект предоставляет функционал по шифрованию/расшифровке сообщения.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpenvelopeddata\n   */\n  envelopedData = 'CAdESCOM.CPEnvelopedData',\n\n  /**\n   * Объект сертификат.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpcertificate\n   */\n  certificate = 'CAdESCOM.Certificate',\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Источники сертификатов (Где искать сертификаты?).\n */\nexport enum STORE_TYPE {\n  ALL = 'ALL',\n  USB_TOKEN = 'USB_TOKEN',\n  REGISTRY = 'REGISTRY',\n}\n","/**\n * Справочник типок криптопровайдеров, с которыми работает плагин (для проверки поддержки).\n */\nexport const CRYPTO_PROVIDERS = [\n  {\n    ProviderType: 75,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 80,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 81,\n    ProviderName:\n      'Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 2,\n    ProviderName: 'Infotecs Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 77,\n    ProviderName: 'Infotecs GOST 2012/512 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 78,\n    ProviderName: 'Infotecs GOST 2012/1024 Cryptographic Service Provider',\n  },\n];\n\n/**\n * Криптопровайдер по-умолчанию.\n */\nexport const DEFAULT_CRYPTO_PROVIDER = {\n  Default: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 80)!,\n  Fallback: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 2)!,\n};\n\n/**\n * Криптопровайдеры VipNet.\n */\nexport const VIP_NET_CRYPTO_PROVIDER_TYPES = Object.freeze([2, 77, 78]);\n\n/**\n * Криптопровайдеры КриптоПРО.\n */\nexport const CRYPTO_PRO_CRYPTO_PROVIDER_TYPES = Object.freeze([75, 80, 81]);\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Типы ГОСТовских алгоритмов.\n */\nexport enum GOST_KEY_ALGORITHM_TYPES {\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 256 бит.\n   */\n  GOST_R3410_12_256 = '1.2.643.7.1.1.1.1',\n\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 512 бит\n   */\n  GOST_R3410_12_512 = '1.2.643.7.1.1.1.2',\n}\n\n/**\n * OID ГОСТовских алгоритмов.\n */\nexport const GOST_KEY_ALGORITHM_OIDS: string[] = Object.values(\n  GOST_KEY_ALGORITHM_TYPES\n);\n\n/**\n * OID SubjectKeyId расширения в сертификате.\n */\nexport const subjectKeyIdExtensionOid = '2.5.29.14';\n\n/**\n * OID атрибутов сертификата.\n */\nexport const attributeOids = {\n  commonName: '2.5.4.3',\n  surname: '2.5.4.4',\n  name: '2.5.4.42',\n  country: '2.5.4.6',\n  locality: '2.5.4.8',\n  street: '2.5.4.9',\n  organisation: '2.5.4.10',\n  department: '2.5.4.11',\n  post: '2.5.4.12',\n  ogrnip: '1.2.643.100.5',\n  ogrn: '1.2.643.100.1',\n  snils: '1.2.643.100.3',\n  inn: '1.2.643.3.131.1.1',\n  innLe: '1.2.643.100.4',\n  email: '1.2.840.113549.1.9.1',\n};\n","/**\n * Список возможных ошибок при работе с API CryptoPro Browser Plugin.\n * Это ошибки могут быть как от криптопровайдера (CSP), так и от операционной системы пользователя.\n * Часть ошибок описана тут @see https://docs.cryptopro.ru/pki/introduction/dllerrors\n * @type {{code: string, message: string}[]}\n */\nexport const CRYPTO_PRO_ERRORS = Object.freeze([\n  {\n    code: '0x80090008',\n    message:\n      'Указан неверный алгоритм. Операционная система не смогла выполнить операцию, так как криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить сертификат и проверить привязку к закрытому ключу, если не поможет, то переустановить криптопровайдер.',\n    // original: 'Код ошибки: 0x80090008 (Указан неверный алгоритм)'\n  },\n  {\n    code: '0x80090017',\n    message:\n      'Криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить криптопровайдер.',\n  },\n  {\n    code: '0x8007064A',\n    message:\n      'Возможно криптопровайдер КриптоПро частично удален с рабочего места или установлена устаревшая версия. Для устранения ошибки рекомендуется установить версию КриптоПро 4.0 и выше.',\n    // original: 'Ошибка КриптоПро CSP Загрузка информации о лицензии Код ошибки: 0x8007064A (Данные настройки для этого продукта повреждены. Обратитесь в службу поддержки организации)'\n  },\n  {\n    code: '0x80090019',\n    message:\n      'Набор ключей не определен. Проверьте на корректность сертификат и убедитесь что на машине установлен необходимый для него криптопровайдер.',\n    // original: 'Код ошибки: 0x80090019 (Набор ключей не определен.)'\n    // возникает так же если не установлен на компе криптопро\n  },\n  {\n    code: '0x8007139F',\n    message:\n      'Внутренняя ошибка КриптоПро. Группа или ресурс не находятся в нужном состоянии для выполнения требуемой операции. Вероятно не работает TSP сервер (служба штампов времени).',\n  },\n  {\n    code: '0x80070002',\n    message:\n      'Внутренняя ошибка КриптоПро. Если вы подписываете с помощью усовершенствованной подписи, убедитесь что ваши версии TSP client и OCSP client имеют неограниченную лицензию.',\n  },\n  {\n    code: '0xc2110128',\n    message:\n      'Внутренняя ошибка КриптоПро. Не удалось получить статус отзыва ЭП. Попробуйте повторить операцию позднее.',\n  },\n  {\n    code: '0xC2100121',\n    message:\n      'Внутренняя ошибка КриптоПро. Не задан адрес службы штампов времени.',\n  },\n  {\n    code: '0xC2110121',\n    message: 'Внутренняя ошибка КриптоПро. Не задан адрес службы OCSP.',\n  },\n  {\n    code: '0x80090020',\n    message:\n      'Внутренняя ошибка КриптоПро. Убедитесь, что на машине установлен только один криптопровайдер во избежание конфликтов ПО.',\n  },\n  {\n    code: '0x800B010A',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x800B0109',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x8007065B',\n    message: 'Истекла лицензия КриптоПро CSP',\n  },\n  {\n    code: '0x80092004',\n    message:\n      'Не установлена связь с закрытым ключом, привяжите личный сертификат к закрытому ключу.',\n  },\n  {\n    code: '0x8009200B',\n    message: 'Закрытый ключ не найден.',\n  },\n  {\n    code: '0x8000FFFF', // обычно если USB токен не вставлен\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x8000FFFF (Не удалось создать подпись из-за ошибки: Internal error)'\n  },\n  {\n    code: '0x80090016',\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x80090016 (Набор ключей не существует)'\n  },\n  {\n    code: '0x8009000D',\n    message:\n      'Ключ не существует. Для устранения ошибки рекомендуемся переустановить сертификат с повторной привязкой к закрытому ключу.',\n    // original: 'Код ошибки: 0x8009000D (Ключ не существует.)'\n  },\n  {\n    code: '0x8009200C',\n    message:\n      'Не удалось найти закрытый ключ для расшифровки зашифрованного документа.',\n  },\n  {\n    code: '0xC2110126',\n    message: 'Сертификат отозван.',\n  },\n  {\n    code: '0x80090010',\n    message:\n      'Отказано в доступе. Убедитесь, что подпись производится действующим сертификатом.',\n  },\n  {\n    code: '0x000004C7',\n    message:\n      'Операция отменена пользователем. Необходимо обновить страницу и предоставить доступ к криптопровайдеру.',\n  },\n  {\n    code: '0x800704C7',\n    message: 'Операция отменена пользователем.',\n  },\n  {\n    code: '0x8010006E',\n    message: 'Операция отменена пользователем.',\n  },\n]);\n\n/**\n * Список кастомных ошибок для различных ситуаций.\n */\nexport const PLUGIN_ERRORS = Object.freeze({\n  'CBP-0': 'Неизвестная ошибка при работе с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-1': 'Не удалось инициализировать КриптоПро ЭЦП Browser plug-in.',\n  'CBP-2':\n    'Ошибка инициализации библиотеки для работы с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-3':\n    'Используется устаревшая версия КриптоПро ЭЦП Browser Plug-in. Необходимо провести обновление до последней доступной версии.',\n  'CBP-4':\n    'Используется устаревшая версия КриптоПро CSP. Необходимо провести обновление до версии 4.0 и выше.',\n  'CBP-5': 'Ошибка формата данных.',\n  'CBP-6': 'Сертификат не прошёл проверку, использование невозможно.',\n  'CBP-7': 'Не верные входные параметры.',\n  'CBP-8': 'Не установлен ни один криптопровайдер.',\n  'CBP-9': 'Неизвестный алгоритм ключа.',\n});\n","/**\n * Логировать ошибку.\n * @param args параметры.\n */\nexport const outputError = (...args: (string | any)[]): void => {\n  console.error(...args);\n};\n","import { CryptoError } from './errors';\nimport { outputError } from './utils/outputError';\n\n/**\n * Настройки плагина.\n */\nclass PluginConfig {\n  /**\n   * Список подписчиков возникающих ошибок в системе.\n   */\n  private errorListeners: ((error: CryptoError) => void)[] = [];\n\n  /**\n   * Выводить дебаг-информацию.\n   */\n  Debug: boolean = false;\n\n  /**\n   * Выводить дебаг информацию по криптопро плагину.\n   */\n  DebugCryptoProBrowserPlugin: boolean = false;\n\n  /**\n   * Проверять систему при инициализации.\n   */\n  CheckSystemSetup: boolean = true;\n\n  /**\n   * Зарегистрировать подписчика ошибок.\n   * @param cb Функция обратного вызова.\n   */\n  public addErrorListener(cb: (error: CryptoError) => void) {\n    this.errorListeners.push(cb);\n  }\n\n  /**\n   * Уведомить подписчиков об ошибке.\n   * @param error Ошибка.\n   */\n  public notifyError(error: CryptoError) {\n    this.errorListeners.forEach((cb) => cb(error));\n  }\n}\n\nconst pluginConfig = new PluginConfig();\n\n/**\n * Функция логирования всех возникающих ошибок.\n * @param error Ошибка.\n */\nconst logErrorWhenInDebug = (error: CryptoError): void => {\n  if (pluginConfig.Debug && error) {\n    const errors = [];\n    let err: any = error;\n    while (err != null) {\n      errors.push(err);\n      if (err instanceof CryptoError) {\n        err = err.InnerError;\n      } else {\n        err = null;\n      }\n    }\n\n    if (errors?.length) {\n      outputError(errors);\n    }\n  }\n};\n\npluginConfig.addErrorListener(logErrorWhenInDebug);\n\nexport { pluginConfig };\nexport default pluginConfig;\n","import { getLastError } from '../api/getLastError';\nimport { IAnyError, ICryptoError, IErrorObject } from '../types';\n\nimport { CRYPTO_PRO_ERRORS, PLUGIN_ERRORS } from './errorCodes';\nimport PluginConfig from './../PluginConfig';\n\n/**\n * Описывает ошибку криптографического модуля.\n *\n *  @example\n *  try{...}\n *  catch(err){\n *    throw CryptoError.createCadesError(err, \"Ошибка инициализации контейнера\")\n *  }\n *\n * @class feature/crypto/CryptoError\n * @extends Error\n */\nexport class CryptoError extends Error implements ICryptoError {\n  /**\n   * Исходный объект ошибки.\n   */\n  public InnerError: IErrorObject | null;\n\n  /**\n   * Правило для выяснения типа ошибки (источника ошибки).\n   */\n  private static _RULE_MATCHING_CODE: RegExp =\n    /^(.*?)(?:(?:\\.?\\s?\\(?0x)|(?:\\.?$))/;\n\n  /**\n   * Код ошибки. Максимальная длина 16 символов.\n   * Для идентификации также смотрите @see #title @see #type.\n   */\n  code: string = '';\n\n  /**\n   * Название ошибки (Основной/короткий текст ошибки).\n   * По нему можно идентифицировать ошибку для изменения #message согласно\n   *  требованиям системы.\n   */\n  title: string = '';\n\n  /**\n   * Текст сообщения об ошибке. Для пользователя.\n   */\n  message: string = '';\n\n  /**\n   * Тип ошибки (обычный - Error, от CAdESCOM plugin - CAdES,...)\n   */\n  type: string = 'Error';\n\n  /**\n   * Унаследовано от родительского класса Error.\n   */\n  name: string = '';\n\n  /**\n   * Приватный конструктор. Для создания экземпляра используйте статические методы @createCadesError и @create\n   * @param err Объект ошибки.\n   */\n  private constructor(err: IErrorObject | null) {\n    super();\n    this.InnerError = err;\n    this.message = err?.message;\n    this.stack = err?.stack;\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, CryptoError);\n    }\n  }\n\n  /**\n   * Формирует текстовое представление ошибки в формате Код ошибки: Сообщение для пользователя\n   * @returns\n   */\n  toString() {\n    return [this.code, this.message].filter(Boolean).join(': ');\n  }\n\n  /**\n   * Создает ошибку на основе ошибки от CryptoPro Browser Plugin.\n   * @param err Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю)\n   * @returns {@CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static createCadesError(\n    err: IErrorObject,\n    title: string\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n\n    err = err as IAnyError;\n    cryptoError.code = err.code || CryptoError._extractCode(err);\n    if (typeof cryptoError.code === 'string' && cryptoError.code.length > 16) {\n      cryptoError.code = '';\n    }\n    let extractedMsg = '';\n    if (!err.message) {\n      extractedMsg = cryptoError._extractMessage(err);\n    }\n    cryptoError.title = title ?? err.message ?? extractedMsg;\n    cryptoError.type = err.type ?? 'CAdES';\n    cryptoError.type += ' < @astral/cades-plugin';\n    cryptoError.message =\n      CRYPTO_PRO_ERRORS.find((res) => res.code == cryptoError.code)?.message ??\n      err.message ??\n      extractedMsg;\n\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Создает формализованную ошибку криптографического модуля с указанным кодом ошибки.\n   * @param errorCode Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю).\n   * @param err Объект ошибки.\n   * @param overrideMessage Текст ошибки который будет указан вместо стандартного из справочника.\n   * @returns {@CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static create(\n    errorCode: keyof typeof PLUGIN_ERRORS,\n    title: string,\n    err: IErrorObject | null,\n    overrideMessage?: string\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n    cryptoError.InnerError = err;\n    cryptoError.type = 'Error';\n    cryptoError.code = errorCode;\n    cryptoError.title = title; // не показываем пользователю\n    cryptoError.message = overrideMessage ?? PLUGIN_ERRORS[cryptoError.code];\n\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Извлекаем код ошибки плагина (если это ошибка крипты).\n   * @param {Error} err - объект ошибки.\n   * @returns {number|string} .\n   * @private\n   */\n  private static _extractCode(err: IErrorObject): number | string {\n    const result =\n      (err.message?.match(/\\(?0x.{2,8}\\)?/) ||\n        err.message?.match(CryptoError._RULE_MATCHING_CODE) ||\n        [])[0] || '';\n    return result.replace(/[()]/g, '');\n  }\n\n  /**\n   * Выдираем из объекта Ошибки сообщение.\n   * @param {string|Error} err - объект ошибки, откуда вытащить собщение.\n   * @returns {*|string} .\n   * @private\n   */\n  private _extractMessage(err: IErrorObject): string | any {\n    const fullErrorData = getLastError(err);\n    const msg = typeof err === 'string' ? err : err.message;\n\n    return (fullErrorData?.message || msg || '').replace(` (${this.code})`, '');\n  }\n}\n","import { IAnyError, ICryptoError } from '../types';\n\n/**\n * Возвращает строку с описанием ошибки из исключения, порождённого плагином.\n * Для Firefox данный метод является единственным способом получения кода ошибки и её текстового описания от плагина.\n * @param {Error} error - ошибка, по которой нужно получить информацию.\n * @returns {Function} .\n */\nexport function getLastError(\n  error: ICryptoError | Error | IAnyError\n): Error | undefined {\n  return window.cadesplugin?.getLastError(error);\n}\n","import { Buffer } from 'buffer';\n\nimport RelativeDistinguishedNames from 'pkijs/src/RelativeDistinguishedNames';\nimport x509Certificate from 'pkijs/src/Certificate';\nimport { fromBER } from 'asn1js';\n\nimport { Certificate } from '../Certificate';\nimport {\n  GOST_KEY_ALGORITHM_OIDS,\n  attributeOids,\n  subjectKeyIdExtensionOid,\n} from '../constants/oids-dictionary';\nimport { CryptoError } from '../errors';\n\nimport { bufferToHex } from './bufferToHex';\n\n/**\n * Получить данные из сертификата.\n * @param target Объект данных (issuer или subject).\n * @param attributeName Наименование извлекаемого атрибута.\n * @returns Извлеченные данные.\n */\nfunction parseValue(\n  target: RelativeDistinguishedNames,\n  attributeName: string\n): string {\n  if (!target) {\n    const errorMessage = `Не задан объект для извлечения атрибута ${attributeName}`;\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n\n  return target?.typesAndValues?.find(\n    (t) => t.type == attributeOids[attributeName]\n  )?.value?.valueBlock?.value;\n}\n\n/**\n * Нормализовать ИНН.\n * @param inn ИНН.\n * @returns нормализованный ИНН.\n * @example\n * in 004028031214, out 4028031214\n * in 402701356218, out 402701356218\n */\nfunction normalizeInn(inn: string | null): string | null {\n  return inn && inn.length == 12 && inn.startsWith('00')\n    ? inn.substring(2, 10)\n    : inn;\n}\n\n/**\n * Парсит данные сертификата.\n * @param certificate Сертификат.\n */\nexport function parseCertificate(certificate: Certificate) {\n  if (!certificate.certificateBase64Data) {\n    const errorMessage = 'Не загружена открытая часть сертификата.';\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n  const asn1 = fromBER(\n    new Uint8Array(Buffer.from(certificate.certificateBase64Data, 'base64'))\n      .buffer\n  );\n  const parsedCert = new x509Certificate({\n    schema: asn1.result,\n  });\n\n  const publishKeyAlgorithm =\n    parsedCert.subjectPublicKeyInfo.algorithm.algorithmId;\n  certificate.algorithm = publishKeyAlgorithm;\n  certificate.isGost = GOST_KEY_ALGORITHM_OIDS.includes(publishKeyAlgorithm);\n\n  const subjectKeyIdentifierExtension = parsedCert.extensions?.find(\n    (e) => e.extnID === subjectKeyIdExtensionOid\n  );\n  certificate.subjectKeyId = bufferToHex(\n    subjectKeyIdentifierExtension?.parsedValue?.valueBlock?.valueHex\n  );\n\n  Object.keys(certificate.issuer).forEach((key) => {\n    certificate.issuer[key] = parseValue(parsedCert.issuer, key);\n  });\n\n  Object.keys(certificate.subject).forEach((key) => {\n    certificate.subject[key] = parseValue(parsedCert.subject, key);\n  });\n\n  certificate.issuer.inn = normalizeInn(certificate.issuer.inn);\n  certificate.subject.innLe = normalizeInn(certificate.subject.innLe);\n  certificate.subject.inn = normalizeInn(certificate.subject.inn);\n\n  // TODO: здесь можно допарсить данные из открытой части сертификата\n}\n","/**\n * Конвертировать массив байт в строкове 16-ричное представление.\n * @param buffer массив байт.\n * @returns строка в 16-ричном представлении.\n */\nexport function bufferToHex(buffer: ArrayBuffer): string | null {\n  if (!buffer) {\n    return null;\n  }\n\n  let result = '';\n  const int8Buffer = new Uint8Array(buffer);\n\n  for (let i = 0; i < int8Buffer.length; i++) {\n    const str = int8Buffer[i].toString(16).toUpperCase();\n    result += (str.length === 1 ? '0' : '') + str;\n  }\n  return result;\n}\n","import { CAPICOM_ENCODING_TYPE } from './constants';\nimport { CryptoError } from './errors';\nimport { ICertificate } from './types';\nimport { parseCertificate } from './utils/certificateParser';\n\n/**\n * Класс объекта Сертификата для удобной работы.\n * !!! НЕ является имплементацией @see ICertificate (к-ый является интерфейсом Крипто системы ОС).\n * @class Certificate\n */\nexport class Certificate {\n  /**\n   * Данные о владельце сертификата.\n   * @remarks названия полей должны совпадать с @attributeOids в oids-dictionary.ts\n   */\n  subject: {\n    commonName: string | null;\n    surname: string | null;\n    name: string | null;\n    country: string | null;\n    locality: string | null;\n    street: string | null;\n    organization: string | null;\n    department: string | null;\n    post: string | null;\n    ogrnip: string | null;\n    ogrn: string | null;\n    snils: string | null;\n    innLe: string | null;\n    inn: string | null;\n    email: string | null;\n  } = {\n    commonName: null,\n    surname: null,\n    name: null,\n    country: null,\n    locality: null,\n    street: null,\n    organization: null,\n    department: null,\n    post: null,\n    ogrnip: null,\n    ogrn: null,\n    snils: null,\n    innLe: null,\n    inn: null,\n    email: null,\n  };\n\n  /**\n   * Данные об издателе сертификата.\n   * @remarks названия полей должны совпадать с @attributeOids в oids-dictionary.ts\n   */\n  issuer: {\n    commonName: string | null;\n    inn: string | null;\n    innLe: string | null;\n  } = {\n    commonName: null,\n    inn: null,\n    innLe: null,\n  };\n\n  /**\n   *  Отпечаток сертификата (хэш SHA-1).\n   * @property {string|null}\n   */\n  thumbprint: string | null = null;\n\n  /**\n   *  Дата-время с которого сертификат вступает в силу.\n   * @property {Date|null}\n   */\n  notBefore: Date | null = null;\n\n  /**\n   * Дата-время до которого сертификат действует.\n   * @property {Date|null}\n   */\n  notAfter: Date | null = null;\n\n  /**\n   * Имя владельца сертификата.\n   * @property {string|null}\n   */\n  subjectName: string | null = null;\n\n  /**\n   *  Идентификатор субъекта сертификата.\n   * @property {string|null}\n   */\n  subjectKeyId: string | null = null;\n\n  /**\n   * Base64 строка открытой части сертификата.\n   * @property {string|null}\n   */\n  certificateBase64Data: string | null = null;\n\n  /**\n   * Исходный сертификат из плагина.\n   * @property {ICertificate|null}\n   */\n  certificateBin: ICertificate | null = null;\n\n  /**\n   * Имя криптопровайдера.\n   * @property {string|null}\n   */\n  providerName: string | null = null;\n\n  /**\n   * Тип криптопровайдера.\n   * @property {number|null}\n   */\n  providerType: number | null = null;\n\n  /**\n   * Есть ли закрытый ключ.\n   * @property {boolean}\n   */\n  hasPrivateKey: boolean = false;\n\n  /**\n   * Гостовский ключ или нет.\n   */\n  isGost: boolean = false;\n\n  /**\n   * OID алгоритма ключа.\n   */\n  algorithm: string | null = null;\n\n  /**\n   * Приватный конструктор.\n   * @param cfg сертификат из @see IStore.\n   */\n  private constructor(cfg: ICertificate) {\n    this.certificateBin = cfg;\n  }\n\n  /**\n   * Распарсить сертификат из исходного объекта.\n   * @param {ICertificate} cert исходный сертификат.\n   * @returns {Promise<Certificate>} распрасенный сертификат.\n   */\n  public static async CreateFrom(cert: ICertificate): Promise<Certificate> {\n    if (!cert) {\n      const errorMessage = 'Не указаны данные исходного сертификата.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n    if (cert instanceof Certificate) {\n      return cert;\n    }\n    const certificate = new Certificate(cert);\n\n    if (cert.SubjectName instanceof Promise) {\n      certificate.subjectName = await cert.SubjectName;\n      certificate.thumbprint = await cert.Thumbprint;\n      certificate.notAfter = await cert.ValidToDate;\n      certificate.notBefore = await cert.ValidFromDate;\n      certificate.certificateBase64Data = await cert.Export(\n        CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64\n      );\n      try {\n        certificate.hasPrivateKey = await cert.HasPrivateKey();\n        const oPrivateKey = await cert.PrivateKey;\n        certificate.providerName = await oPrivateKey.ProviderName;\n        certificate.providerType = await oPrivateKey.ProviderType;\n      } catch (error) {\n        // ошибка не критична, просто создаем ошибку (в дебаге оно залогируется само)\n        CryptoError.createCadesError(\n          error,\n          `Ошибка получения информации о приватном ключе сертификата ${certificate.thumbprint}.`\n        );\n        certificate.hasPrivateKey = false;\n      }\n    } else {\n      certificate.subjectName = cert.SubjectName;\n      certificate.thumbprint = cert.Thumbprint as string;\n      certificate.notAfter = cert.ValidToDate as Date;\n      certificate.notBefore = cert.ValidFromDate as Date;\n      certificate.certificateBase64Data = cert.Export(\n        CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64\n      );\n\n      try {\n        certificate.hasPrivateKey = cert.HasPrivateKey();\n        const oPrivateKey = cert.PrivateKey;\n        certificate.providerName = oPrivateKey.ProviderName;\n        certificate.providerType = oPrivateKey.ProviderType;\n      } catch (error) {\n        // ошибка не критична, просто создаем ошибку (в дебаге оно залогируется само)\n        CryptoError.createCadesError(\n          error,\n          `Ошибка получения информации о приватном ключе сертификата ${certificate.thumbprint}.`\n        );\n        certificate.hasPrivateKey = false;\n      }\n    }\n\n    parseCertificate(certificate);\n\n    return certificate;\n  }\n}\n","/**\n * Проверка доступности асинхронной функциональности.\n * @returns {boolean} .\n */\nexport function canAsync(): boolean {\n  // !!window.Promise || !!Iterator\n  return !!window.cadesplugin?.CreateObjectAsync;\n}\n","import { canAsync } from '../api/internal/canAsync';\nimport { CryptoError } from '../errors';\n\n/**\n * Обёртка для вызова асинхронной функции в синхронном контексте.\n * @param {Promise<*>} fn - функция или иное свойство от Promise.\n * @returns {*|Promise<*>} .\n */\nexport function deasync(fn: Promise<any>): any {\n  let result = fn;\n  if (canAsync()) {\n    (async () => {\n      try {\n        result = await fn;\n      } catch (err) {\n        throw CryptoError.create('CBP-0', 'deasync', err);\n      }\n    })();\n  }\n  return result;\n}\n","import PluginConfig from '../PluginConfig';\n\n/**\n * Логировать информацию (если включен Debug)\n * @param args\n */\nexport const outputDebug = (...args: (string | any)[]): void => {\n  if (PluginConfig.Debug) {\n    console.info(...args);\n  }\n};\n","import { CRYPTO_OBJECTS, CRYPTO_PROVIDERS } from '../constants';\nimport { IAbout, ICryptoProvider, IVersion } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nlet cryptoProvidersCache: ICryptoProvider[] | null;\n\n/**\n * Получить список криптопровайдеров.\n * @returns {Promise<ICryptoProvider[]>} информация о типе, наименовании и версии криптопровайдеров\n */\nexport function getCryptoProviders(\n  resetCache: boolean = false\n): Promise<ICryptoProvider[]> {\n  if (cryptoProvidersCache && !resetCache) {\n    return Promise.resolve(cryptoProvidersCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (cryptoProvidersCache && !resetCache) {\n      return Promise.resolve(cryptoProvidersCache);\n    }\n    const availableCryptoProviders: ICryptoProvider[] = [];\n    const logData = [];\n    try {\n      for (const { ProviderType, ProviderName } of CRYPTO_PROVIDERS) {\n        try {\n          const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n          const cspVersion: IVersion = await cadesAbout.CSPVersion(\n            ProviderName,\n            ProviderType\n          );\n          availableCryptoProviders.push({\n            ProviderName: ProviderName,\n            ProviderType: ProviderType,\n            BuildVersion: await cspVersion.BuildVersion,\n            MajorVersion: await cspVersion.MajorVersion,\n            MinorVersion: await cspVersion.MinorVersion,\n          });\n        } catch (error) {\n          logData.push({\n            errorMessage: `Ошибка получения информации о криптопровайдере ${ProviderName} с типом ${ProviderType}.`,\n            error,\n          });\n        }\n      }\n      return (cryptoProvidersCache = availableCryptoProviders);\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ availableCryptoProviders });\n      outputDebug('getCryptoProviders >>', logData);\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { canAsync } from './internal/canAsync';\n\n/**\n * Создание криптографического объекта.\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-activation\n * @param {string} objectIdentifier. наименование создаваемого объекта. Объекты указываются в @see CRYPTO_OBJECTS.\n * @returns {Promise<object|null|undefined>} Созданный объект.\n */\nexport async function createObject(objectIdentifier: string): Promise<any> {\n  return afterPluginLoaded(async () => {\n    if (!objectIdentifier) {\n      throw CryptoError.create(\n        'CBP-7',\n        'Не указан идентификатор объекта',\n        null\n      );\n    }\n    try {\n      const object = canAsync()\n        ? window.cadesplugin.CreateObjectAsync(objectIdentifier)\n        : window.cadesplugin.CreateObject(objectIdentifier);\n\n      return object instanceof Promise ? await object : object;\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        `Ошибка при создании объекта ${objectIdentifier}`\n      );\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport {\n  CRYPTO_OBJECTS,\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  DEFAULT_CRYPTO_PROVIDER,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../constants';\nimport { outputDebug } from '../utils/outputDebug';\nimport { IAbout, ISystemInfo } from '../types';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { getCryptoProviders } from './getCryptoProviders';\n\n/**\n * Кэш информации о системе.\n */\nlet systemInfoCache: ISystemInfo | null = null;\n\n/**\n * Предоставляет информацию о системе.\n *\n * @returns информацию о CSP и плагине.\n */\nexport const getSystemInfo = (): Promise<ISystemInfo> => {\n  if (systemInfoCache) {\n    return Promise.resolve(systemInfoCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (systemInfoCache) {\n      return Promise.resolve(systemInfoCache);\n    }\n    const sysInfo: ISystemInfo = {\n      cadesVersion: '',\n      cspVersion: null,\n      cryptoProInstalled: false,\n      vipNetInstalled: false,\n      cryptoProviderName: null,\n    };\n    const logData = [];\n    try {\n      const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n\n      for (const cryptoProvider of await getCryptoProviders()) {\n        if (\n          VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)\n        ) {\n          sysInfo.vipNetInstalled = true;\n          sysInfo.cryptoProviderName =\n            DEFAULT_CRYPTO_PROVIDER.Fallback.ProviderName;\n          sysInfo.cspVersion =\n            cryptoProvider.MajorVersion + '.' + cryptoProvider.MinorVersion;\n        }\n        if (\n          CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)\n        ) {\n          sysInfo.cryptoProInstalled = true;\n          sysInfo.cryptoProviderName =\n            DEFAULT_CRYPTO_PROVIDER.Default.ProviderName;\n          sysInfo.cspVersion =\n            cryptoProvider.MajorVersion +\n            '.' +\n            cryptoProvider.MinorVersion +\n            '.' +\n            cryptoProvider.BuildVersion;\n        }\n      }\n\n      try {\n        const pluginVersion = await cadesAbout.PluginVersion;\n\n        if (pluginVersion) {\n          sysInfo.cadesVersion = await pluginVersion.toString();\n        }\n        if (!sysInfo.cadesVersion) {\n          sysInfo.cadesVersion = await cadesAbout.Version;\n        }\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при получении информации о системе'\n        );\n      }\n\n      return (systemInfoCache = sysInfo);\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ sysInfo });\n      outputDebug('getSystemInfo >>', logData);\n    }\n  })();\n};\n","/**\n * В данный момент имеется версия не меньше указанной версия CAdESCOM Плагина.\n * @param {string} version полная версия Плагина для сверки.\n * @returns {boolean} .\n */\nexport function isSupportedCadesVersion(version: string): boolean {\n  const match = version.match(/(\\d+)\\.(\\d+)\\.(\\d+)/);\n\n  if (!match) {\n    return false;\n  }\n\n  let [, major, minor, patch] = match;\n  // @ts-ignore\n  major = parseInt(major);\n  // @ts-ignore\n  minor = parseInt(minor);\n  // @ts-ignore\n  patch = parseInt(patch);\n\n  return (\n    // @ts-ignore\n    major > 2 ||\n    !(parseInt(major) === 2 && parseInt(minor) === 0 && parseInt(patch) < 13292)\n  );\n}\n","import {\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../../constants';\nimport { ISystemInfo } from '../../types';\nimport { getCryptoProviders } from '../getCryptoProviders';\n\nconst oldestSupportedCryptoProCSPVersion = 4.0;\nconst oldestSupportedVipnetCSPVersion = 4.4;\n\n/**\n * В данный момент имеется версия не меньше указанной версия Крипто-Провайдера.\n * @param {string} systemInfo информация о системе.\n * @returns {boolean} true, если поддерживается.\n */\nexport const isSupportedCSPVersion = async (\n  systemInfo: ISystemInfo\n): Promise<boolean> => {\n  if (!systemInfo.cspVersion) {\n    return false;\n  }\n  const cryptoProviders = await getCryptoProviders();\n\n  let haveValidCryptoProCSPVersion = false;\n  let haveValidVipNetCSPVersion = false;\n\n  if (systemInfo.cryptoProInstalled) {\n    const cryptoProCSP = cryptoProviders.find((cp) =>\n      CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType)\n    );\n\n    if (\n      cryptoProCSP?.MajorVersion &&\n      cryptoProCSP?.MajorVersion >= oldestSupportedCryptoProCSPVersion\n    ) {\n      haveValidCryptoProCSPVersion = true;\n    }\n  }\n\n  if (systemInfo.vipNetInstalled) {\n    const vipNetCSP = cryptoProviders.find((cp) =>\n      VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType)\n    );\n\n    if (vipNetCSP?.MajorVersion) {\n      const version = parseFloat(\n        vipNetCSP?.MajorVersion + '.' + vipNetCSP?.MinorVersion\n      );\n\n      haveValidVipNetCSPVersion = version >= oldestSupportedVipnetCSPVersion;\n    }\n  }\n\n  return haveValidCryptoProCSPVersion || haveValidVipNetCSPVersion;\n};\n","import { CryptoError } from '../errors';\nimport { ISystemInfo } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { getSystemInfo } from './getSystemInfo';\nimport { isSupportedCadesVersion } from './internal/isSupportedCadesVersion';\nimport { isSupportedCSPVersion } from './internal/isSupportedCSPVersion';\n\n/**\n * Проверяет корректность настроек ЭП на машине.\n *\n * @returns {boolean} флаг корректности настроек.\n */\nexport const isValidSystemSetup = async (): Promise<boolean> => {\n  let systemInfo: ISystemInfo | null = null;\n  let isValid = false;\n  const logData = [];\n  try {\n    try {\n      systemInfo = await getSystemInfo();\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Настройки ЭП на данной машине не верны'\n      );\n    }\n\n    if (!isSupportedCadesVersion(systemInfo.cadesVersion)) {\n      throw CryptoError.create(\n        'CBP-3',\n        'Не поддерживаемая версия плагина.',\n        null\n      );\n    }\n\n    if (!(systemInfo.cryptoProInstalled || systemInfo.vipNetInstalled)) {\n      throw CryptoError.create(\n        'CBP-8',\n        'Не установлен ни один криптопровайдер.',\n        null\n      );\n    }\n\n    if (systemInfo.cspVersion && !isSupportedCSPVersion(systemInfo)) {\n      throw CryptoError.create('CBP-4', 'Не поддерживаемая версия CSP', null);\n    }\n    isValid = true;\n  } catch (error) {\n    logData.push({ error });\n  } finally {\n    logData.push({ isValid });\n    outputDebug('isValidSystemSetup >>', logData);\n  }\n\n  return isValid;\n};\n","import { isValidSystemSetup } from '../isValidSystemSetup';\n\nimport { CryptoError } from './../../errors';\nimport PluginConfig from './../../PluginConfig';\n\n/**\n * Сохранение статуса во избежание повторных инициализаций.\n */\nlet isPluginReady: boolean = false;\n\n/**\n * Обёртка для подготовки плагина перед вызовом функциональности.\n * @param {Function|Promise} cb - функция обратного вызова.\n * @returns {Promise} .функция ожидания.\n */\nexport function afterPluginLoaded(\n  cb: Function\n): (...args: any) => Promise<any> {\n  return async (...args) => {\n    const isAlreadyLoaded = isPluginReady;\n    if (!isPluginReady) {\n      try {\n        // eslint-disable-next-line import/extensions\n        require('./../../vendor/cadesplugin_api.js');\n      } catch (err) {\n        throw CryptoError.create(\n          'CBP-2',\n          'Ошибка загрузки библиотеки cadesplugin.js',\n          err\n        );\n      }\n\n      isPluginReady = true;\n    }\n\n    if (!window.cadesplugin) {\n      throw CryptoError.create(\n        'CBP-1',\n        'Не инициализирован модуль для работы с cadesplugin',\n        null\n      );\n    }\n\n    try {\n      if (window.cadesplugin instanceof Promise) {\n        await window.cadesplugin;\n      }\n    } catch (err) {\n      throw CryptoError.create(\n        'CBP-1',\n        'Ошибка при инициализации модуля для работы с cadesplugin',\n        err\n      );\n    }\n\n    if (PluginConfig.DebugCryptoProBrowserPlugin) {\n      window.cadesplugin.set_log_level(window.cadesplugin.LOG_LEVEL_DEBUG);\n    }\n\n    // для исключения зацикливания, проверку валидности системы делаем единожды.\n    if (PluginConfig.CheckSystemSetup && !isAlreadyLoaded) {\n      await isValidSystemSetup();\n    }\n\n    const callbackResult = cb.apply(null, args);\n\n    if (callbackResult instanceof Promise) {\n      await callbackResult;\n    }\n\n    return callbackResult;\n  };\n}\n","import { CryptoError } from '../../errors';\nimport { deasync } from '../../utils/deasync';\n\nimport { canAsync } from './canAsync';\n\n/**\n * описываем структуру параметр OBJ функции ниже.\n * интерфейс ради интерфейса >_<\n */\ninterface ICryptoObject {\n  [key: string]: any;\n}\n\n/**\n * Устанавливаем значение в указанное свойство переданного объекта.\n * @param {object} obj - объект-цель.\n * @param {string} key - имя свойства.\n * @param {*} value - значение для свойства.\n * @returns {void} .\n */\nexport function setCryptoProperty(\n  obj: ICryptoObject,\n  key: string,\n  value: any\n): void {\n  try {\n    if (canAsync()) {\n      deasync(obj[`propset_${key}`](value));\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      obj[key] = value;\n    }\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      `Не удалось установить значение в поле ${key}`\n    );\n  }\n}\n","import { Certificate } from '../Certificate';\nimport { ICertificate } from '../types';\n\n/**\n * Валидация сертификата.\n *\n *  @example\n *  validateCertificate(cert, async (cert) => await (await cert.IsValid()).Result)\n *\n * @param {ICertificate|Certificate} certificate - собственно сертификат.\n * @param {Function} customValidationFunc - иные условия валидации сертификата.\n * @returns {Promise<string|null>} .null, если сертификат валиден.\n */\nexport async function validateCertificate(\n  certificate: Certificate | ICertificate,\n  customValidationFunc?: (\n    cert: Certificate | ICertificate\n  ) => Promise<string | null>\n): Promise<string | null> {\n  let result: string | null = null;\n  const cert: Certificate =\n    certificate instanceof Certificate\n      ? certificate\n      : // парсим если пришло сырое\n        await Certificate.CreateFrom(certificate);\n\n  if (customValidationFunc) {\n    result = await customValidationFunc(cert);\n  } else {\n    const errors = [];\n    if (!cert.hasPrivateKey) {\n      errors.push('закрытый ключ недоступен');\n    }\n    const now = new Date();\n    if (cert.notAfter && now < cert.notAfter) {\n      errors.push('истёк срок его действия');\n    }\n    if (cert.notBefore && now > cert.notBefore) {\n      errors.push('срок действия не наступил');\n    }\n    if (!cert.isGost) {\n      errors.push('алгоритмы ГОСТ не поддерживаются');\n    }\n\n    if (errors.length) {\n      result = 'Сертификат не прошел проверки: ' + errors.join(', ');\n    }\n  }\n\n  return result;\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_BASE64_TO_BINARY,\n  CADESCOM_CADES_TYPE,\n  CAPICOM_CERTIFICATE_INCLUDE_OPTION,\n  CRYPTO_OBJECTS,\n} from '../constants';\nimport { CPSigner, CadesSignedData, ICertificate } from '../types';\nimport { Certificate } from '../Certificate';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\n\n/**\n * Подписать входные данные указанным сертификатом в формате CMS.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data -входные данные для подписи в формате Base64 или ArrayBuffer.\n * @param {boolean} [detach=true] присоединять подпись к данным или отдельно?\n * @param {boolean} [includeCertChain=true] - включать в результат всю цепочку сертификатов.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификатов.\n * @returns {Promise<string>} файл подписи в кодировке Base64.\n */\nexport function sign(\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  detach: boolean = true,\n  includeCertChain: boolean = true,\n  doNotValidate: boolean = false\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n    logData.push({\n      certificate,\n      data,\n      detach,\n      includeCertChain,\n      doNotValidate,\n    });\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для подписания.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n      if (!certificate) {\n        const errorMessage =\n          'Не указан сертификат для вычисления электронной подписи.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      let cert: ICertificate | null = null;\n      if (certificate instanceof Certificate) {\n        cert = certificate?.certificateBin;\n      } else {\n        cert = certificate;\n      }\n\n      if (!doNotValidate && !!cert) {\n        const errorMessage = await validateCertificate(cert);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-6',\n            'Сертификат не прошел проверку при подписи.',\n            null,\n            errorMessage\n          );\n        }\n      }\n\n      const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n      const signedData: CadesSignedData = await createObject(\n        CRYPTO_OBJECTS.signedData\n      );\n\n      // заполнение параметров для подписи\n      try {\n        setCryptoProperty(signer, 'Certificate', cert);\n        if (includeCertChain) {\n          setCryptoProperty(\n            signer,\n            'Options',\n            CAPICOM_CERTIFICATE_INCLUDE_OPTION.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN\n          );\n        }\n\n        setCryptoProperty(\n          signedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY\n        );\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        setCryptoProperty(signedData, 'Content', base64String);\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при заполнении параметров подписания.'\n        );\n      }\n\n      try {\n        const signResult = signedData.SignCades(\n          signer,\n          CADESCOM_CADES_TYPE.CADESCOM_CADES_BES,\n          detach\n        );\n\n        const sig =\n          signResult instanceof Promise ? await signResult : signResult;\n\n        logData.push({ sig });\n\n        return sig;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при вычислении электронной подписи.'\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('sign >>', logData);\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_XML_SIGNATURE_TYPE,\n  CRYPTO_OBJECTS,\n  GOST_KEY_ALGORITHM_TYPES,\n  XML_SIGNATURE_GOST_ALGORITHM_TYPE,\n} from '../constants';\nimport { CPSigner, ICertificate, ISignedXml } from '../types';\nimport { Certificate } from '../Certificate';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\n\n/**\n * Получить алгоритм вычисления подписи для Xml.\n * @param {Certificate} certificate сертификат.\n * @returns {string} алгоритм вычисления подписи.\n */\nexport const getXmlSignAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма подписи XmlDSig.`,\n        null\n      );\n  }\n};\n\n/**\n * Получить алгоритм вычисления хэша.\n * @param {Certificate} certificate сертификат.\n * @returns {string} алгоритм вычисления хэша.\n */\nexport const getXmlHashAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма хэширования xml.`,\n        null\n      );\n  }\n};\n\n/**\n * Подписать входные данные указанным сертификатом в формате XmlDSig.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data -входные данные для подписи в формате Base64 или ArrayBuffer.\n * @param {CADESCOM_XML_SIGNATURE_TYPE} xmlSignatureType - тип xml подписи.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификата.\n * @returns {Promise<string>} файл подписи в кодировке Base64.\n */\nexport const signXml = (\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE = CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED,\n  doNotValidate: boolean = false\n): Promise<string> => {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n    logData.push({ certificate, data, xmlSignatureType, doNotValidate });\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для подписания.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n      if (!certificate) {\n        const errorMessage =\n          'Не указан сертификат для вычисления электронной подписи.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      const cert: Certificate =\n        certificate instanceof Certificate\n          ? certificate\n          : // парсим если пришло сырое\n            await Certificate.CreateFrom(certificate);\n\n      if (!doNotValidate && !!cert) {\n        const errorMessage = await validateCertificate(cert);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-6',\n            'Сертификат не прошел проверку при подписи.',\n            null,\n            errorMessage\n          );\n        }\n      }\n\n      const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n      const signedData: ISignedXml = await createObject(\n        CRYPTO_OBJECTS.signedXml\n      );\n\n      // заполнение параметров для подписи\n      try {\n        setCryptoProperty(signer, 'Certificate', cert.certificateBin);\n\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        setCryptoProperty(signedData, 'Content', base64String);\n\n        // указываем тип подписи\n        setCryptoProperty(signedData, 'SignatureType', xmlSignatureType);\n\n        // указываем алгоритм подписи\n        setCryptoProperty(\n          signedData,\n          'SignatureMethod',\n          getXmlSignAlgorithmType(cert)\n        );\n\n        // указываем алгоритм хэширования\n        setCryptoProperty(\n          signedData,\n          'DigestMethod',\n          getXmlHashAlgorithmType(cert)\n        );\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров подписания.'\n        );\n      }\n\n      try {\n        const signResult = signedData.Sign(signer);\n\n        const sig =\n          signResult instanceof Promise ? await signResult : signResult;\n\n        logData.push({ sig });\n\n        return sig;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при вычислении электронной подписи.'\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('signXml >>', logData);\n    }\n  })();\n};\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_BASE64_TO_BINARY,\n  CAPICOM_ENCODING_TYPE,\n  CRYPTO_OBJECTS,\n} from '../constants';\nimport { CPEnvelopedData, ICertificate, IRecipients } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\n\n/**\n * Зашировать данные на указанные сертификаты.\n * @param {string} data -входные данные для расшифровки в формате Base64 или ArrayBuffer.\n * @param {ICertificate[]} recipientCertificates -список сертификатов получателей шифрованного сообщения.\n * @returns {Promise<string>} .Зашифрованная строка в кодировке Base64.\n */\nexport function encrypt(\n  data: ArrayBuffer | string,\n  recipientCertificates: ICertificate[]\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n    logData.push({ data, recipientCertificates });\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для шифрования.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      if (!recipientCertificates || recipientCertificates?.length === 0) {\n        const errorMessage =\n          'Не указаны сертификаты получателей шифрованного сообщения.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      const envelopedData: CPEnvelopedData = await createObject(\n        CRYPTO_OBJECTS.envelopedData\n      );\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        setCryptoProperty(\n          envelopedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY\n        );\n        setCryptoProperty(envelopedData, 'Content', base64String);\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров шифрования.'\n        );\n      }\n\n      try {\n        const recipients: IRecipients = await envelopedData.Recipients;\n\n        for (const recipientCertificate of recipientCertificates) {\n          await recipients.Add(recipientCertificate);\n        }\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при установке сертификатов получателей шифрованного сообщения.'\n        );\n      }\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому расшифровываем предварительно конвертированный в Base64\n\n        const encryptResult = envelopedData.Encrypt(\n          CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64\n        );\n\n        const encryptedData =\n          encryptResult instanceof Promise\n            ? await encryptResult\n            : encryptResult;\n\n        logData.push({ encryptedData });\n\n        return encryptedData;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при шифровании данных.'\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('encrypt >>', logData);\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport { CADESCOM_BASE64_TO_BINARY, CRYPTO_OBJECTS } from '../constants';\nimport { CPEnvelopedData } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\n\n/**\n * Расшифровать данные.\n * @param {string} encryptedData -входные данные для расшифровки в формате Base64 или ArrayBuffer.\n * @returns {Promise<string>} .Расшифрованная строка в кодировке Base64.\n */\nexport function decrypt(encryptedData: ArrayBuffer | string): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n    logData.push({ encryptedData });\n\n    try {\n      if (!encryptedData) {\n        const errorMessage = 'Не указаны данные для расшифровки.';\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        encryptedData instanceof ArrayBuffer\n          ? Buffer.from(encryptedData).toString('base64')\n          : encryptedData;\n\n      logData.push({ base64String });\n\n      const envelopedData: CPEnvelopedData = await createObject(\n        CRYPTO_OBJECTS.envelopedData\n      );\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        setCryptoProperty(\n          envelopedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY\n        );\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров расшифровки.'\n        );\n      }\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому расшифровываем предварительно конвертированный в Base64\n        const decryptResult = envelopedData.Decrypt(base64String);\n        if (decryptResult instanceof Promise) {\n          await decryptResult;\n        }\n\n        const decryptedData =\n          envelopedData.Content instanceof Promise\n            ? await envelopedData.Content\n            : envelopedData.Content;\n\n        logData.push({ decryptedData });\n\n        return decryptedData;\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при расшифровке данных.'\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('decrypt >>', logData);\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport { IStore } from '../types';\nimport {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  CRYPTO_OBJECTS,\n  STORE_LOCATION,\n} from '../constants';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\n\n/**\n * Открывает хранилище с сертификатами.\n * @returns {IStore} store хранилище с сертификатами.\n * @param {STORE_LOCATION} storeLocation - расположение хранилища.\n * @param {string} storeName - (!)будет проигнорирован если storeLocation = CAPICOM_SMART_CARD_USER_STORE.\n * @param {CAPICOM_STORE_OPEN_MODE} openMode - режим открытия хранилища.\n * @returns {Promise<IStore>} .\n */\nexport function openStore(\n  storeLocation: STORE_LOCATION = STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n  storeName: string = CAPICOM_MY_STORE,\n  openMode: CAPICOM_STORE_OPEN_MODE = CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_EXISTING_ONLY\n): Promise<IStore> {\n  return afterPluginLoaded(async () => {\n    const store: IStore = await createObject(CRYPTO_OBJECTS.store);\n\n    try {\n      const res = store.Open(storeLocation, storeName, openMode);\n\n      await res;\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка открытия хранилища сертификатов.'\n      );\n    }\n\n    return store;\n  })();\n}\n","import {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  STORE_LOCATION,\n  STORE_TYPE,\n} from '../constants';\nimport { Certificate } from '../Certificate';\nimport { ICertificate, ICertificates, IStore } from '../types';\nimport { outputDebug } from '../utils/outputDebug';\nimport { CryptoError } from '../errors';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { openStore } from './openStore';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nconst certificatesCache = {};\n\n/**\n * Возвращает список сертификатов из указанного хранилища.\n * @param {IStore} store Хранилище\n * @param {string} storeName Наименование хранилища.\n * @returns {Promise<Certificate[]>} .Список сертификатов.\n */\nasync function getCertificatesFromStore(store: IStore): Promise<Certificate[]> {\n  const result: Certificate[] = [];\n  let certificates: ICertificates;\n  let certificatesCount = 0;\n  try {\n    certificates = await store.Certificates;\n    certificatesCount = await certificates.Count;\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      'Ошибка получения списка сертификатов.'\n    );\n  }\n\n  // проверяем пригодность и превращаем сертификаты в наш внутренний тип\n  while (certificatesCount) {\n    try {\n      const certBin: ICertificate = await certificates.Item(\n        certificatesCount--\n      );\n      const cert: Certificate = await Certificate.CreateFrom(certBin);\n\n      // работаем только с гостовскими сертами\n      if (cert.isGost) {\n        result.push(cert);\n      }\n    } catch (err) {\n      // не критичная ошибка, просто логируем\n      CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n    }\n  }\n\n  return result;\n}\n\n/**\n * Получить сертификаты из USB токенов.\n * @param {STORE_TYPE} storeType Тип хранилища ключей.\n * @returns {Promise<Certificate[]>} .Список сертификатов из USB токенов.\n */\nasync function ReadCertificatesFromUsbToken(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n  try {\n    store = await openStore(STORE_LOCATION.CADESCOM_CONTAINER_STORE);\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Получить сертификаты из реестра.\n * @param {STORE_TYPE} storeType Тип хранилища ключей.\n * @returns {Promise<Certificate[]>} .Список сертификатов из реестра.\n */\nasync function ReadCertificatesFromRegistry(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n  try {\n    store = await openStore(\n      STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n      CAPICOM_MY_STORE,\n      CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n    );\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Возвращает список валидных доступных для работы сертификатов.\n *\n * @param {STORE_TYPE} storeType из какого хранилища требуется получить сертификаты (из токена, реестра, все...).\n * @param {resetCache} resetCache перезапросить данные, игнорируя закэшированные данные.\n * @returns {Promise<Certificate[]>} .сертификаты.\n */\nexport function getCertificates(\n  storeType: STORE_TYPE = STORE_TYPE.ALL,\n  resetCache: boolean = false\n): Promise<Certificate[]> {\n  if (certificatesCache[storeType] && !resetCache) {\n    return Promise.resolve(certificatesCache[storeType]);\n  }\n  return afterPluginLoaded(async () => {\n    if (certificatesCache[storeType] && !resetCache) {\n      return certificatesCache[storeType];\n    }\n    const logData = [];\n    let result: Certificate[] = [];\n\n    try {\n      switch (storeType) {\n        case STORE_TYPE.USB_TOKEN:\n          result = await ReadCertificatesFromUsbToken();\n          logData.push({ storeType, result });\n          break;\n\n        case STORE_TYPE.REGISTRY:\n          result = await ReadCertificatesFromRegistry();\n          logData.push({ storeType, result });\n          break;\n\n        case STORE_TYPE.ALL:\n          result = await ReadCertificatesFromRegistry();\n          logData.push({ storeType: 'registry', result });\n          const usbTokenCertificates = await ReadCertificatesFromUsbToken();\n          logData.push({ storeType: 'usb', result });\n          result = result.concat(usbTokenCertificates);\n          result = result.filter(\n            (cert, index) =>\n              result.findIndex(\n                (_cert) => _cert.thumbprint === cert.thumbprint\n              ) === index\n          );\n          break;\n\n        default:\n          let store: IStore | null = null;\n          try {\n            store = await openStore();\n\n            result = await getCertificatesFromStore(store);\n            logData.push({ storeType: 'default', result });\n          } finally {\n            await store?.Close();\n          }\n          break;\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ result });\n      outputDebug(`getCertificates(${storeType}) >>`, logData);\n    }\n\n    return (certificatesCache[storeType] = result);\n  })();\n}\n","import { Certificate } from '../Certificate';\nimport { CryptoError } from '../errors';\n\nimport { getCertificates } from './../api';\n\n/**\n * Поиск в хранилищах сертификата.\n * @param {string} subjectKeyId -идентификатор ключа субъекта.\n * @returns {@Promise<Certificate | undefined>} сертификат.\n */\nexport async function findCertificateBySkid(\n  subjectKeyId: string\n): Promise<Certificate | undefined> {\n  if (!subjectKeyId) {\n    const errorMessage =\n      'Не указан идентификатор ключа субъекта искомого сертификата.';\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n  try {\n    return (await getCertificates()).find(\n      (c) => c.subjectKeyId == subjectKeyId\n    );\n  } catch (err) {\n    throw CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n  }\n}\n","import { Certificate } from '@astral/cryptopro-cades';\n\ntype CertificateInfoProps = {\n  certificate: Certificate;\n  onSelect?: Function;\n};\n\nexport const CertificateInfo = ({\n  certificate,\n  onSelect,\n}: CertificateInfoProps) =>\n  certificate ? (\n    <div onClick={(e) => onSelect && onSelect(certificate.subjectKeyId)}>\n      <span>\n        <b>\n          =========================\n          <a\n            download={`${certificate.subject.commonName}.cer`}\n            href={`data:application/x-x509-ca-cert;base64,${certificate.certificateBase64Data}`}\n          >\n            {certificate.subject.commonName}\n          </a>\n          =========================\n        </b>\n        <br />\n        <b>subjectKeyId: </b>\n        <span\n          onClick={(e) =>\n            navigator.clipboard.writeText(certificate.subjectKeyId!)\n          }\n        >\n          {certificate.subjectKeyId}\n        </span>\n      </span>\n      {Object.keys(certificate)\n        .filter(\n          (key) =>\n            ![\n              'certificateBase64Data',\n              'certificateBin',\n              'subjectKeyId',\n            ].includes(key)\n        )\n        .map((key, index) => (\n          <span style={{ display: 'block' }} key={index}>\n            <b>{key}:</b>{' '}\n            {certificate[key] instanceof Object\n              ? JSON.stringify(certificate[key])\n              : certificate[key]?.toString() ?? 'null'}\n          </span>\n        ))}\n    </div>\n  ) : null;\n","import { ICryptoProvider } from '@astral/cryptopro-cades';\n\ntype CryptoProviderProps = {\n  cryptoProvider: ICryptoProvider;\n};\n\nexport const CryptoProviderInfo = ({ cryptoProvider }: CryptoProviderProps) => (\n  <>\n    <span style={{ display: 'block' }}>\n      <b>Имя:</b> {cryptoProvider.ProviderName}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Тип:</b> {cryptoProvider.ProviderType}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Версия:</b> {cryptoProvider.MajorVersion}.{cryptoProvider.MinorVersion}\n      .{cryptoProvider.BuildVersion}\n    </span>\n  </>\n);\n","import { Buffer } from 'buffer';\n\nimport { useEffect, useState } from 'react';\nimport {\n  Certificate,\n  STORE_TYPE,\n  decrypt,\n  encrypt,\n  findCertificateBySkid,\n  getCertificates,\n  getCryptoProviders,\n  getSystemInfo,\n  outputError,\n  pluginConfig,\n  sign,\n  signXml,\n  CADESCOM_XML_SIGNATURE_TYPE,\n  createObject,\n  CRYPTO_OBJECTS,\n  ICertificate,\n  ICryptoProvider,\n  ISystemInfo,\n} from '@astral/cryptopro-cades';\n\nimport { CertificateInfo } from './components/CertificateInfo';\nimport { CryptoProviderInfo } from './components/CryptoProviderInfo';\n\nconst CryptoApp = () => {\n  pluginConfig.CheckSystemSetup = true;\n  pluginConfig.Debug = true;\n\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\n  const [versionInfo, setVersionInfo] = useState<ISystemInfo>();\n  const [cryptoProviders, setCryptoProviders] = useState<ICryptoProvider[]>([]);\n  const [showCertificates, setShowCertificates] = useState<boolean>();\n  const [showCryptoProviders, setShowCryptoProviders] = useState<boolean>();\n  const [selectedCertificate, setSelectedCertificate] = useState<Certificate>();\n  const [selectedFile, setSelectedFile] = useState<File>();\n  const [selectedEncryptCert, setSelectedEncryptCert] =\n    useState<ICertificate>();\n  const [selectedEncryptCertBase64, setSelectedEncryptCertBase64] =\n    useState<string>();\n\n  useEffect(() => {\n    async function fetchSystemInfo() {\n      try {\n        const systemInfo = await getSystemInfo();\n        setVersionInfo(systemInfo);\n      } catch (error) {\n        window.alert(error);\n      }\n    }\n    async function fetchCertificates() {\n      const fetchedCertificates = await getCertificates(STORE_TYPE.ALL);\n\n      setCertificates(fetchedCertificates);\n\n      // автоматически берем первый валидный серт если еще выбран\n      if (!selectedCertificate) {\n        setSelectedCertificate(\n          fetchedCertificates.find((c) => c.isGost && c.hasPrivateKey)\n        );\n      }\n    }\n    async function fetchCryptoProviders() {\n      const cryptoProviders = await getCryptoProviders();\n      setCryptoProviders(cryptoProviders);\n    }\n\n    if (showCryptoProviders) {\n      fetchCryptoProviders();\n    }\n    if (showCertificates) {\n      fetchCertificates();\n    }\n    fetchSystemInfo();\n  }, [showCryptoProviders, showCertificates, selectedCertificate]);\n\n  /**\n   * Попытаться найти сертификат с указанным skid.\n   * @param skid Идентификатор ключа субъекта.\n   */\n  const trySelectCertificate = async (skid: string) => {\n    if (skid) {\n      const certificate = await findCertificateBySkid(skid);\n      if (certificate) {\n        setSelectedCertificate(certificate);\n      }\n    }\n  };\n\n  /**\n   * Скачать файл.\n   * @param blob Блоб\n   * @param name Наименование файла.\n   */\n  const dowloadFile = (blob: Blob, name: string): void => {\n    const url = window.URL.createObjectURL(blob);\n    const a = window.document.createElement('a');\n    a.style.display = 'hidden';\n    window.document.body.appendChild(a);\n    a.href = url;\n    a.download = name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    a.remove();\n  };\n\n  /**\n   * Подписать файл в формате CMS.\n   */\n  const signFile = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await sign(\n        selectedCertificate,\n        await selectedFile.arrayBuffer() // либо Base64 строку\n      );\n\n      dowloadFile(await convertBase64toBlob(sig), selectedFile.name + '.sig');\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Подписать файл в формате XmlDSig.\n   */\n  const signXmlFile = async (\n    xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE\n  ): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await signXml(\n        selectedCertificate,\n        await selectedFile.arrayBuffer(), // либо Base64 строку\n        xmlSignatureType\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(sig),\n        selectedFile.name.replace('.xml', '') + '.sig.xml'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Зашифровать файл в формате CMS.\n   */\n  const encryptFileCms = async (): Promise<void> => {\n    if (!selectedEncryptCert) {\n      window.alert('Сертификат получателя не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для шифрования не выбран');\n      return;\n    }\n\n    try {\n      const encryptedData = await encrypt(\n        await selectedFile.arrayBuffer(), // либо Base64 строку\n        [selectedEncryptCert]\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(encryptedData),\n        selectedFile.name + '.enc'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Зашифровать файл в формате CMS.\n   */\n  const decryptFileCms = async (): Promise<void> => {\n    if (!selectedFile) {\n      window.alert('Файл для расшифровки не выбран');\n      return;\n    }\n\n    try {\n      const decryptedData = await decrypt(\n        await selectedFile.arrayBuffer() // либо Base64 строку\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(decryptedData),\n        selectedFile.name + '.decrypted'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Проверить шифрование и расшифровку, зашифровав данные на свой серт.\n   */\n  const checkEncryptDecrypt = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    const originalData = 'Hello world!';\n\n    try {\n      const encryptedData = await encrypt(\n        Buffer.from(originalData).toString('base64'),\n        [selectedCertificate.certificateBin!]\n      );\n\n      const decryptedData = await decrypt(encryptedData);\n      const isOk =\n        Buffer.from(decryptedData, 'base64').toString('utf-8') === originalData;\n\n      window.alert(\n        isOk ? 'Шифрование-расшифровка прошла успешно' : 'Данные не совпали'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error.toString());\n    }\n  };\n\n  /**\n   *\n   * @param base64 строка в формате Base64.\n   * @param type Тип данных.\n   * @returns {Promise<Blob>} Блоб.\n   */\n  const convertBase64toBlob = (\n    base64: string,\n    type: string = 'application/octet-stream'\n  ): Promise<Blob> =>\n    window\n      .fetch(`data:${type};base64,${base64}`)\n      .then((res: Response) => res.blob());\n\n  /**\n   * Выполняет импорт сертификата.\n   * @param data\n   */\n  const importCertificate = async (\n    data: string | ArrayBuffer\n  ): Promise<void> => {\n    if (!data) {\n      setSelectedEncryptCertBase64(undefined);\n      setSelectedEncryptCert(undefined);\n      return;\n    }\n\n    const arrayBufferToString = (buffer) => {\n      return new TextDecoder().decode(buffer);\n    };\n\n    const parseFromArrayBuffer = async (buffer: ArrayBuffer) => {\n      const certificate: ICertificate = await createObject(\n        CRYPTO_OBJECTS.certificate\n      );\n      const base64 = Buffer.from(buffer).toString('base64');\n      await certificate.Import(base64);\n      setSelectedEncryptCertBase64(base64);\n      setSelectedEncryptCert(certificate);\n      return certificate;\n    };\n\n    const parseFromBase64String = async (base64: string) => {\n      const certificate: ICertificate = await createObject(\n        CRYPTO_OBJECTS.certificate\n      );\n      await certificate.Import(base64);\n      setSelectedEncryptCertBase64(base64);\n      setSelectedEncryptCert(certificate);\n      return certificate;\n    };\n    try {\n      if (data instanceof ArrayBuffer) {\n        try {\n          await parseFromArrayBuffer(data);\n        } catch (error) {\n          outputError(error);\n          await parseFromBase64String(arrayBufferToString(data));\n        }\n      } else {\n        try {\n          await parseFromArrayBuffer(Buffer.from(data));\n        } catch (error) {\n          outputError(error);\n          await parseFromBase64String(data);\n        }\n      }\n    } catch (error) {\n      outputError(error);\n      window.alert(error.message);\n    }\n  };\n\n  return (\n    <>\n      <p>Версия плагина {versionInfo?.cadesVersion}</p>\n      <p>Версия криптопровайдера {versionInfo?.cspVersion}</p>\n      <button onClick={() => setShowCryptoProviders(!showCryptoProviders)}>\n        {!showCryptoProviders\n          ? 'Показать криптопровайдеры'\n          : 'Скрыть криптопровайдеры'}\n      </button>\n      <button onClick={() => setShowCertificates(!showCertificates)}>\n        {!showCertificates ? 'Показать сертификаты' : 'Скрыть сертификаты'}\n      </button>\n      <div style={{ display: showCryptoProviders ? '' : 'none' }}>\n        Криптопровайдеры:\n        {cryptoProviders?.map((cryptoProvider, index) => {\n          return (\n            <p key={index}>\n              <CryptoProviderInfo cryptoProvider={cryptoProvider} />\n            </p>\n          );\n        })}\n      </div>\n      <div style={{ display: showCertificates ? '' : 'none' }}>\n        Сертификаты:\n        {certificates?.map((certInfo, index) => {\n          return (\n            <p key={index}>\n              <CertificateInfo\n                certificate={certInfo}\n                onSelect={(skid) => trySelectCertificate(skid)}\n              />\n            </p>\n          );\n        }) ?? 'Ничего нет :('}\n      </div>\n      <br />\n      <br />\n      <br />\n      <div>\n        <b>\n          ========================= Операции с сертификатами\n          =========================\n        </b>\n        <br />\n        <br />\n        skid:\n        <input\n          style={{ width: 350 }}\n          placeholder=\"Введите skid серта\"\n          onChange={(e) => trySelectCertificate(e.target.value)}\n          value={selectedCertificate?.subjectKeyId!}\n        />\n        {selectedCertificate ? (\n          <>\n            <p>Выбранный сертификат</p>\n            <CertificateInfo certificate={selectedCertificate} />\n          </>\n        ) : null}\n        {selectedCertificate ? (\n          <>\n            <br />\n            <br />\n            <button onClick={(_) => checkEncryptDecrypt()}>\n              Проверить шифрование/расшифровку\n            </button>\n            <br />\n          </>\n        ) : null}\n        <br />\n        <br />\n        Выберите файл для криптооперации:\n        <input\n          type=\"file\"\n          onChange={(e) => setSelectedFile(e.target.files![0])}\n        />\n        <br />\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button onClick={(_) => signFile()}>Подписать CMS</button>\n          </>\n        ) : null}\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button\n              onClick={(_) =>\n                signXmlFile(\n                  CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED\n                )\n              }\n            >\n              Подписать XmlDSig (enveloped)\n            </button>\n          </>\n        ) : null}\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button\n              onClick={(_) =>\n                signXmlFile(\n                  CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE\n                )\n              }\n            >\n              Подписать XmlDSig (template)\n            </button>\n          </>\n        ) : null}\n        <br />\n        {selectedFile ? (\n          <>\n            <button onClick={(_) => decryptFileCms()}>Расшифровать CMS</button>\n            <br />\n          </>\n        ) : null}\n        <br />\n        <br />\n        Укажите Base64 сертификата на которого зашифровать\n        <br /> или выберите серт из файла:\n        <input\n          type=\"file\"\n          onChange={async (e) =>\n            await importCertificate(await e.target.files![0].arrayBuffer())\n          }\n        />\n        <br />\n        <textarea\n          style={{ width: 500, height: 200 }}\n          value={selectedEncryptCertBase64}\n          onChange={async (e) => await importCertificate(e.target.value)}\n        />\n        {selectedEncryptCert && selectedFile ? (\n          <>\n            <br />\n            <button onClick={(_) => encryptFileCms()}>Зашифровать CMS</button>\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <CryptoApp />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","// 2.0.14530 от 16.02.2022\n// ГОСТ: 8FE58D912E985DBFA1BB573D102DA68192B442278C586D1BE183A7CEA49C6C19\n// MD5: d0282c948e2b5f6a02f3944a16ebc7e3\n// https://www.cryptopro.ru/sites/default/files/products/cades/current_release_2_0/cadesplugin_api.js.zip\n\n/**\n * @class window.cadesplugin\n */\n;(function () {\n    //already loaded\n    if(window.cadesplugin)\n        return;\n\n    var pluginObject;\n    var plugin_resolved = 0;\n    var plugin_reject;\n    var plugin_resolve;\n    var isOpera = 0;\n    var isFireFox = 0;\n    var isSafari = 0;\n    var isYandex = 0;\n    var canPromise = !!window.Promise;\n    var cadesplugin_loaded_event_recieved = false;\n    var isFireFoxExtensionLoaded = false;\n\n    /**\n    * @class window.cadesplugin\n    */\n    var cadesplugin;\n\n    if(canPromise)\n    {\n        cadesplugin = new Promise(function(resolve, reject)\n        {\n            plugin_resolve = resolve;\n            plugin_reject = reject;\n        });\n    } else\n    {\n        cadesplugin = {};\n    }\n\n    function check_browser() {\n        var ua= navigator.userAgent, tem, M= ua.match(/(opera|yabrowser|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem =  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return { name:'IE', version:(tem[1] || '')};\n        }\n        if(M[1] === 'Chrome'){\n            tem = ua.match(/\\b(OPR|Edg|YaBrowser)\\/(\\d+)/);\n            if (tem != null)\n                return { name: tem[1].replace('OPR', 'Opera'), version: tem[2] };\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\n            M.splice(1, 1, tem[1]);\n        return {name:M[0],version:M[1]};\n    }\n    var browserSpecs = check_browser();\n\n    function cpcsp_console_log(level, msg){\n        //IE9 не может писать в консоль если не открыта вкладка developer tools\n        if(typeof(console) === 'undefined')\n            return;\n        if (level <= cadesplugin.current_log_level ){\n            if (level === cadesplugin.LOG_LEVEL_DEBUG)\n                console.log(\"DEBUG: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_INFO)\n                console.info(\"INFO: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_ERROR)\n                console.error(\"ERROR: %s\", msg);\n            return;\n        }\n    }\n\n    function set_log_level(level){\n        if (!((level === cadesplugin.LOG_LEVEL_DEBUG) ||\n            (level === cadesplugin.LOG_LEVEL_INFO) ||\n            (level === cadesplugin.LOG_LEVEL_ERROR))){\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"cadesplugin_api.js: Incorrect log_level: \" + level);\n            return;\n        }\n        cadesplugin.current_log_level = level;\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = DEBUG\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = INFO\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = ERROR\");\n        if(isNativeMessageSupported())\n        {\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n                window.postMessage(\"set_log_level=debug\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n                window.postMessage(\"set_log_level=info\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n                window.postMessage(\"set_log_level=error\", \"*\");\n        }\n    }\n\n    function set_constantValues()\n    {\n        cadesplugin.CAPICOM_MEMORY_STORE = 0;\n        cadesplugin.CAPICOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CAPICOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CAPICOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_MEMORY_STORE = 0;\n        cadesplugin.CADESCOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CADESCOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CADESCOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_CONTAINER_STORE = 100;\n\n        cadesplugin.CAPICOM_MY_STORE = \"My\";\n\n        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;\n\n        cadesplugin.CADESCOM_XADES_DEFAULT = 0x00000010;\n        cadesplugin.CADESCOM_XADES_BES = 0x00000020;\n        cadesplugin.CADESCOM_XADES_T = 0x00000050;\n        cadesplugin.CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0;\n        cadesplugin.CADESCOM_XMLDSIG_TYPE = 0x00000000;\n\n        cadesplugin.XmlDsigGost3410UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr3411\";\n        cadesplugin.XmlDsigGost3410Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411\";\n        \n        cadesplugin.XmlDsigGost3411Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256\";\n        cadesplugin.XmlDsigGost3410Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256\";\n        cadesplugin.XmlDsigGost3411Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512\";\n        cadesplugin.XmlDsigGost3410Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512\";\n\n        cadesplugin.CADESCOM_CADES_DEFAULT = 0;\n        cadesplugin.CADESCOM_CADES_BES = 1;\n        cadesplugin.CADESCOM_CADES_T = 0x5;\n        cadesplugin.CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d;\n        cadesplugin.CADESCOM_PKCS7_TYPE = 0xffff;\n\n        cadesplugin.CADESCOM_ENCODE_BASE64 = 0;\n        cadesplugin.CADESCOM_ENCODE_BINARY = 1;\n        cadesplugin.CADESCOM_ENCODE_ANY = -1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2;\n\n        cadesplugin.CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0;\n        cadesplugin.CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENSION = 5;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12;\n\n        cadesplugin.CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128;\n\n        cadesplugin.CAPICOM_PROPID_ENHKEY_USAGE = 9;\n\n        cadesplugin.CAPICOM_OID_OTHER = 0;\n        cadesplugin.CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\n        cadesplugin.CAPICOM_EKU_CLIENT_AUTH = 2;\n        cadesplugin.CAPICOM_EKU_SMARTCARD_LOGON = 5;\n        cadesplugin.CAPICOM_EKU_OTHER = 0;\n\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\n        cadesplugin.CADESCOM_ATTRIBUTE_OTHER = -1;\n\n        cadesplugin.CADESCOM_STRING_TO_UCS2LE = 0;\n        cadesplugin.CADESCOM_BASE64_TO_BINARY = 1;\n\n        cadesplugin.CADESCOM_DISPLAY_DATA_NONE = 0;\n        cadesplugin.CADESCOM_DISPLAY_DATA_CONTENT = 1;\n        cadesplugin.CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;\n\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA1 = 0;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD2 = 1;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD4 = 2;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD5 = 3;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_256 = 4;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_384 = 5;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_512 = 6;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112;\n\n        cadesplugin.LOG_LEVEL_DEBUG = 4;\n        cadesplugin.LOG_LEVEL_INFO = 2;\n        cadesplugin.LOG_LEVEL_ERROR = 1;\n\n        cadesplugin.CADESCOM_AllowNone = 0;\n        cadesplugin.CADESCOM_AllowNoOutstandingRequest = 0x1;\n        cadesplugin.CADESCOM_AllowUntrustedCertificate = 0x2;\n        cadesplugin.CADESCOM_AllowUntrustedRoot = 0x4;\n        cadesplugin.CADESCOM_SkipInstallToStore = 0x10000000;\n        cadesplugin.CADESCOM_InstallCertChainToContainer = 0x20000000;\n        cadesplugin.CADESCOM_UseContainerStore = 0x40000000;\n\n        cadesplugin.ENABLE_CARRIER_TYPE_CSP = 0x01;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\n        cadesplugin.ENABLE_ANY_CARRIER_TYPE = 0x07;\n\n        cadesplugin.DISABLE_EVERY_CARRIER_OPERATION = 0x00;\n        cadesplugin.ENABLE_CARRIER_OPEN_ENUM = 0x01;\n        cadesplugin.ENABLE_CARRIER_CREATE = 0x02;\n        cadesplugin.ENABLE_ANY_OPERATION = 0x03;\n\n        cadesplugin.CADESCOM_PRODUCT_CSP = 0;\n        cadesplugin.CADESCOM_PRODUCT_OCSP = 1;\n        cadesplugin.CADESCOM_PRODUCT_TSP = 2;\n\n        cadesplugin.MEDIA_TYPE_REGISTRY = 0x00000001;\n        cadesplugin.MEDIA_TYPE_HDIMAGE = 0x00000002;\n        cadesplugin.MEDIA_TYPE_CLOUD = 0x00000004;\n        cadesplugin.MEDIA_TYPE_SCARD = 0x00000008;\n\n        cadesplugin.XCN_CRYPT_STRING_BASE64HEADER = 0;\n        cadesplugin.AT_KEYEXCHANGE = 1;\n        cadesplugin.AT_SIGNATURE = 2;\n\n        cadesplugin.CARRIER_FLAG_REMOVABLE = 1;\n        cadesplugin.CARRIER_FLAG_UNIQUE = 2;\n        cadesplugin.CARRIER_FLAG_PROTECTED = 4;\n        cadesplugin.CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\n        cadesplugin.CARRIER_FLAG_SECURE_MESSAGING = 16;\n        cadesplugin.CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\n        cadesplugin.CARRIER_FLAG_VIRTUAL = 128;\n    }\n\n    function async_spawn(generatorFunc) {\n        function continuer(verb, arg) {\n            var result;\n            try {\n                result = generator[verb](arg);\n            } catch (err) {\n                return Promise.reject(err);\n            }\n            if (result.done) {\n                return result.value;\n            } else {\n                return Promise.resolve(result.value).then(onFulfilled, onRejected);\n            }\n        }\n        var generator = generatorFunc(Array.prototype.slice.call(arguments, 1));\n        var onFulfilled = continuer.bind(continuer, \"next\");\n        var onRejected = continuer.bind(continuer, \"throw\");\n        return onFulfilled();\n    }\n\n    function isIE() {\n        // var retVal = ((\"Microsoft Internet Explorer\" == navigator.appName) || // IE < 11\n        //     navigator.userAgent.match(/Trident\\/./i)); // IE 11\n        return (browserSpecs.name === 'IE' || browserSpecs.name === 'MSIE');\n    }\n\n    function isIOS() {\n        return (navigator.userAgent.match(/ipod/i) ||\n            navigator.userAgent.match(/ipad/i) ||\n            navigator.userAgent.match(/iphone/i));\n    }\n\n    function isNativeMessageSupported()\n    {\n        // В IE работаем через NPAPI\n        if(isIE())\n            return false;\n        // В Edge работаем через NativeMessage\n        if (browserSpecs.name === 'Edg') {\n            return true;\n        }\n        if (browserSpecs.name === 'YaBrowser') {\n            isYandex = true;\n            return true;\n        }\n        // В Chrome, Firefox, Safari и Opera работаем через асинхронную версию в зависимости от версии\n        if(browserSpecs.name === 'Opera') {\n            isOpera = true;\n            if(browserSpecs.version >= 33){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Firefox') {\n            isFireFox = true;\n            if(browserSpecs.version >= 52){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Chrome') {\n            if(browserSpecs.version >= 42){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        //В Сафари начиная с 12 версии нет NPAPI\n        if(browserSpecs.name === 'Safari') {\n            isSafari = true;\n            if(browserSpecs.version >= 12) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    // Функция активации объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObject(name) {\n        if (isIOS()) {\n            // На iOS для создания объектов используется функция\n            // call_ru_cryptopro_npcades_10_native_bridge, определенная в IOS_npcades_supp.js\n            return call_ru_cryptopro_npcades_10_native_bridge(\"CreateObject\", [name]);\n        }\n        if (isIE()) {\n            // В Internet Explorer создаются COM-объекты\n            if (name.match(/X509Enrollment/i)) {\n                try {\n                    // Объекты CertEnroll пробуем создавать через нашу фабрику,\n                    // если не получилось то через CX509EnrollmentWebClassFactory\n                    var objCertEnrollClassFactory = document.getElementById(\"webClassFactory\");\n                    return objCertEnrollClassFactory.CreateObject(name);\n                }\n                catch (e) {\n                    try {\n                        var objWebClassFactory = document.getElementById(\"certEnrollClassFactory\");\n                        return objWebClassFactory.CreateObject(name);\n                    }\n                    catch (err) {\n                        throw (\"Для создания обьектов X509Enrollment следует настроить веб-узел на использование проверки подлинности по протоколу HTTPS\");\n                    }\n                }\n            }\n            // Объекты CAPICOM и CAdESCOM создаются через CAdESCOM.WebClassFactory\n            try {\n                var objWebClassFactory = document.getElementById(\"webClassFactory\");\n                return objWebClassFactory.CreateObject(name);\n            }\n            catch (e) {\n                // Для версий плагина ниже 2.0.12538\n        return new ActiveXObject(name); // eslint-disable-line\n            }\n        }\n        // создаются объекты NPAPI\n        return pluginObject.CreateObject(name);\n    }\n\n    function decimalToHexString(number) {\n        if (number < 0) {\n            number = 0xFFFFFFFF + number + 1;\n        }\n\n        return number.toString(16).toUpperCase();\n    }\n\n    function GetMessageFromException(e) {\n        var err = e.message;\n        if (!err) {\n            err = e;\n        } else if (e.number) {\n            err += \" (0x\" + decimalToHexString(e.number) + \")\";\n        }\n        return err;\n    }\n\n    function getLastError(exception) {\n        if(isNativeMessageSupported() || isIE() || isIOS() ) {\n            return GetMessageFromException(exception);\n        }\n\n        try {\n            return pluginObject.getLastError();\n        } catch(e) {\n            return GetMessageFromException(exception);\n        }\n    }\n\n    // Функция для удаления созданных объектов\n    function ReleasePluginObjects() {\n    return cpcsp_chrome_nmcades.ReleasePluginObjects(); // eslint-disable-line\n    }\n\n    // Функция активации асинхронных объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObjectAsync(name) {\n        return pluginObject.CreateObjectAsync(name);\n    }\n\n    //Функции для IOS\n    var ru_cryptopro_npcades_10_native_bridge = {\n        callbacksCount : 1,\n        callbacks : {},\n\n        // Automatically called by native layer when a result is available\n        resultForCallback : function resultForCallback(callbackId, resultArray) {\n            var callback = ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId];\n            if (!callback) return;\n            callback.apply(null,resultArray);\n        },\n\n        // Use this in javascript to request native objective-c code\n        // functionName : string (I think the name is explicit :p)\n        // args : array of arguments\n        // callback : function with n-arguments that is going to be called when the native code returned\n        call : function call(functionName, args, callback) {\n            var hasCallback = callback && typeof callback === \"function\";\n            var callbackId = hasCallback ? ru_cryptopro_npcades_10_native_bridge.callbacksCount++ : 0;\n\n            if (hasCallback)\n                ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId] = callback;\n\n            var iframe = document.createElement(\"IFRAME\");\n            var arrObjs = new Array(\"_CPNP_handle\");\n            try{\n                iframe.setAttribute(\"src\", \"cpnp-js-call:\" + functionName + \":\" + callbackId+ \":\" + encodeURIComponent(JSON.stringify(args, arrObjs)));\n            } catch(e){\n                alert(e);\n            }\n            document.documentElement.appendChild(iframe);\n            iframe.parentNode.removeChild(iframe);\n            iframe = null;\n        }\n    };\n\n    function call_ru_cryptopro_npcades_10_native_bridge(functionName, array){\n        var tmpobj;\n        var ex;\n        ru_cryptopro_npcades_10_native_bridge.call(functionName, array, function(e, response){\n            ex = e;\n            var str='tmpobj='+response;\n            eval(str);\n            if (typeof (tmpobj) === \"string\"){\n                tmpobj = tmpobj.replace(/\\\\\\n/gm, \"\\n\");\n                tmpobj = tmpobj.replace(/\\\\\\r/gm, \"\\r\");\n            }\n        });\n        if(ex)\n            throw ex;\n        return tmpobj;\n    }\n\n    function show_firefox_missing_extension_dialog()\n    {\n        if (!window.cadesplugin_skip_extension_install)\n        {\n            var ovr = document.createElement('div');\n            ovr.id = \"cadesplugin_ovr\";\n            ovr.style = \"visibility: hidden; position: fixed; left: 0px; top: 0px; width:100%; height:100%; background-color: rgba(0,0,0,0.7)\";\n            ovr.innerHTML = \"<div id='cadesplugin_ovr_item' style='position:relative; width:400px; margin:100px auto; background-color:#fff; border:2px solid #000; padding:10px; text-align:center; opacity: 1; z-index: 1500'>\" +\n                \"<button id='cadesplugin_close_install' style='float: right; font-size: 10px; background: transparent; border: 1; margin: -5px'>X</button>\" +\n                \"<p>Для работы КриптоПро ЭЦП Browser plugin на данном сайте необходимо расширение для браузера. Убедитесь, что оно у Вас включено или установите его.\" +\n                \"<p><a href='https://www.cryptopro.ru/sites/default/files/products/cades/extensions/firefox_cryptopro_extension_latest.xpi'>Скачать расширение</a></p>\" +\n                \"</div>\";\n            document.getElementsByTagName(\"Body\")[0].appendChild(ovr);\n            document.getElementById(\"cadesplugin_close_install\").addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n\n            ovr.addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n            ovr.style.visibility=\"visible\";\n        }\n    }\n    function firefox_or_safari_nmcades_onload() {\n        if (window.cadesplugin_extension_loaded_callback)\n            window.cadesplugin_extension_loaded_callback();\n        isFireFoxExtensionLoaded = true;\n        cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n    }\n\n    function nmcades_api_onload() {\n        if (!isIE() && !isFireFox && !isSafari) {\n            if (window.cadesplugin_extension_loaded_callback)\n                window.cadesplugin_extension_loaded_callback();\n        }\n        window.postMessage(\"cadesplugin_echo_request\", \"*\");\n        window.addEventListener(\"message\", function (event){\n            if (typeof(event.data) !== \"string\" || !event.data.match(\"cadesplugin_loaded\"))\n                return;\n            if (cadesplugin_loaded_event_recieved)\n                return;\n            if(isFireFox || isSafari)\n            {\n                // Для Firefox, Сафари вместе с сообщением cadesplugin_loaded прилетает url для загрузки nmcades_plugin_api.js\n                var url = event.data.substring(event.data.indexOf(\"url:\") + 4);\n                if (!url.match(\"^moz-extension://[a-zA-Z0-9-]+/nmcades_plugin_api.js$\")\n                    && !url.match(\"^safari-extension://[a-zA-Z0-9-]+/[a-zA-Z0-9]+/nmcades_plugin_api.js$\"))\n                {\n                    cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"Bad url \\\"\" + url + \"\\\" for load CryptoPro Extension for CAdES Browser plug-in\");\n                    plugin_loaded_error();\n                    return;\n                }\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", url);\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = firefox_or_safari_nmcades_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }else {\n                cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n            }\n            cadesplugin_loaded_event_recieved = true;\n        }, false);\n    }\n\n    //Загружаем расширения для Chrome, Opera, YaBrowser, FireFox, Edge, Safari\n    function load_extension()\n    {\n        if(isFireFox || isSafari){\n            // вызываем callback руками т.к. нам нужно узнать ID расширения. Он уникальный для браузера.\n            nmcades_api_onload();\n        } else {\n            // в асинхронном варианте для Yandex и Opera подключаем расширение из Opera store.\n            if (isOpera || isYandex) {\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://epebfcehmdedogndhlcacafjaacknbcm/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            } else {\n                // для Chrome, Chromium, Chromium Edge расширение из Chrome store\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://iifchhfnnmpdbibifmljnfjhpififfog/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }\n        }\n    }\n\n    //Загружаем плагин для NPAPI\n    function load_npapi_plugin()\n    {\n        var elem = document.createElement('object');\n        elem.setAttribute(\"id\", \"cadesplugin_object\");\n        elem.setAttribute(\"type\", \"application/x-cades\");\n        elem.setAttribute(\"style\", \"visibility: hidden\");\n        document.getElementsByTagName(\"body\")[0].appendChild(elem);\n        pluginObject = document.getElementById(\"cadesplugin_object\");\n        if(isIE())\n        {\n            var elem1 = document.createElement('object');\n            elem1.setAttribute(\"id\", \"certEnrollClassFactory\");\n            elem1.setAttribute(\"classid\", \"clsid:884e2049-217d-11da-b2a4-000e7bbb2b09\");\n            elem1.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem1);\n            var elem2 = document.createElement('object');\n            elem2.setAttribute(\"id\", \"webClassFactory\");\n            elem2.setAttribute(\"classid\", \"clsid:B04C8637-10BD-484E-B0DA-B8A039F60024\");\n            elem2.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem2);\n        }\n    }\n\n    //Отправляем событие что все ок.\n    function plugin_loaded()\n    {\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_resolve();\n        }else {\n            window.postMessage(\"cadesplugin_loaded\", \"*\");\n        }\n    }\n\n    //Отправляем событие что сломались.\n    function plugin_loaded_error(msg)\n    {\n        if(typeof(msg) === 'undefined' || typeof(msg) === 'object')\n            msg = \"Плагин недоступен\";\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(msg);\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n    }\n\n    //проверяем что у нас хоть какое то событие ушло, и если не уходило кидаем еще раз ошибку\n    function check_load_timeout()\n    {\n        if(plugin_resolved === 1)\n            return;\n        if(isFireFox)\n        {\n            if (!isFireFoxExtensionLoaded)\n                show_firefox_missing_extension_dialog();\n        }\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(\"Истекло время ожидания загрузки плагина\");\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n\n    }\n\n    //Вспомогательная функция для NPAPI\n    function createPromise(arg)\n    {\n        return new Promise(arg);\n    }\n\n    function check_npapi_plugin (){\n        try {\n            var oAbout = CreateObject(\"CAdESCOM.About\");\n            plugin_loaded();\n        }\n        catch (err) {\n            document.getElementById(\"cadesplugin_object\").style.display = 'none';\n            // Объект создать не удалось, проверим, установлен ли\n            // вообще плагин. Такая возможность есть не во всех браузерах\n            var mimetype = navigator.mimeTypes[\"application/x-cades\"];\n            if (mimetype) {\n                var plugin = mimetype.enabledPlugin;\n                if (plugin) {\n                    plugin_loaded_error(\"Плагин загружен, но не создаются обьекты\");\n                }else\n                {\n                    plugin_loaded_error(\"Ошибка при загрузке плагина\");\n                }\n            }else\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n            }\n        }\n    }\n\n    //Проверяем работает ли плагин\n    function check_plugin_working()\n    {\n        var div = document.createElement(\"div\");\n        div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n        var isIeLessThan9 = (div.getElementsByTagName(\"i\").length === 1);\n        if (isIeLessThan9) {\n            plugin_loaded_error(\"Internet Explorer версии 8 и ниже не поддерживается\");\n            return;\n        }\n\n        if(isNativeMessageSupported())\n        {\n            load_extension();\n        }else if(!canPromise) {\n            window.addEventListener(\"message\", function (event){\n                    if (event.data !== \"cadesplugin_echo_request\")\n                        return;\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                },\n                false);\n        }else\n        {\n            if(document.readyState === \"complete\"){\n                load_npapi_plugin();\n                check_npapi_plugin();\n            } else {\n                window.addEventListener(\"load\", function (event) {\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                }, false);\n            }\n        }\n    }\n\n    function set_pluginObject(obj)\n    {\n        pluginObject = obj;\n    }\n\n    function is_capilite_enabled()\n    {\n        if ((typeof (cadesplugin.EnableInternalCSP) !== 'undefined') && cadesplugin.EnableInternalCSP)\n            return true;\n        return false;\n    };\n\n    //Export\n    cadesplugin.JSModuleVersion = \"2.3.2\";\n    cadesplugin.async_spawn = async_spawn;\n    cadesplugin.set = set_pluginObject;\n    cadesplugin.set_log_level = set_log_level;\n    cadesplugin.getLastError = getLastError;\n    cadesplugin.is_capilite_enabled = is_capilite_enabled;\n\n    if(isNativeMessageSupported())\n    {\n        cadesplugin.CreateObjectAsync = CreateObjectAsync;\n        cadesplugin.ReleasePluginObjects = ReleasePluginObjects;\n    }\n\n    if(!isNativeMessageSupported())\n    {\n        cadesplugin.CreateObject = CreateObject;\n    }\n\n    if(window.cadesplugin_load_timeout)\n    {\n        setTimeout(check_load_timeout, window.cadesplugin_load_timeout);\n    }\n    else\n    {\n        setTimeout(check_load_timeout, 20000);\n    }\n\n    set_constantValues();\n\n    cadesplugin.current_log_level = cadesplugin.LOG_LEVEL_ERROR;\n    window.cadesplugin = cadesplugin;\n    check_plugin_working();\n}());\n\nexport default window.cadesplugin;\n"],"names":["CADESCOM_XML_SIGNATURE_TYPE","CADESCOM_XADES_TYPE","CADESCOM_CADES_TYPE","XML_SIGNATURE_GOST_ALGORITHM_TYPE","CAPICOM_CERTIFICATE_INCLUDE_OPTION","CADESCOM_ENCODING_TYPE","CAPICOM_ENCODING_TYPE","CAPICOM_STORE_OPEN_MODE","STORE_LOCATION","CAPICOM_CERT_INFO_TYPE","CAPICOM_CERTIFICATE_FIND_TYPE","CAPICOM_KEY_USAGE","CAPICOM_MY_STORE","CAPICOM_PROPID","CADESCOM_MEDIA_TYPE","CRYPTO_OBJECTS","STORE_TYPE","GOST_KEY_ALGORITHM_TYPES","CRYPTO_PROVIDERS","ProviderType","ProviderName","DEFAULT_CRYPTO_PROVIDER","Default","find","t","Fallback","VIP_NET_CRYPTO_PROVIDER_TYPES","Object","freeze","CRYPTO_PRO_CRYPTO_PROVIDER_TYPES","GOST_KEY_ALGORITHM_OIDS","values","attributeOids","commonName","surname","name","country","locality","street","organisation","department","post","ogrnip","ogrn","snils","inn","innLe","email","CRYPTO_PRO_ERRORS","code","message","PLUGIN_ERRORS","outputError","console","error","pluginConfig","PluginConfig","cb","this","errorListeners","push","forEach","addErrorListener","Debug","errors","err","CryptoError","InnerError","length","stack","Error","captureStackTrace","filter","Boolean","join","fullErrorData","window","cadesplugin","getLastError","msg","replace","title","cryptoError","_extractCode","extractedMsg","_extractMessage","type","res","errorCode","overrideMessage","match","_RULE_MATCHING_CODE","parseValue","target","attributeName","errorMessage","typesAndValues","value","valueBlock","normalizeInn","startsWith","substring","parseCertificate","certificate","certificateBase64Data","asn1","fromBER","Uint8Array","Buffer","buffer","parsedCert","x509Certificate","schema","result","publishKeyAlgorithm","subjectPublicKeyInfo","algorithm","algorithmId","isGost","includes","subjectKeyIdentifierExtension","extensions","e","extnID","subjectKeyId","int8Buffer","i","str","toString","toUpperCase","bufferToHex","parsedValue","valueHex","keys","issuer","key","subject","Certificate","cfg","organization","certificateBin","cert","SubjectName","Promise","subjectName","Thumbprint","thumbprint","ValidToDate","notAfter","ValidFromDate","notBefore","Export","CAPICOM_ENCODE_BASE64","HasPrivateKey","hasPrivateKey","PrivateKey","oPrivateKey","providerName","providerType","canAsync","CreateObjectAsync","cryptoProvidersCache","outputDebug","info","createObject","objectIdentifier","afterPluginLoaded","object","CreateObject","getCryptoProviders","resetCache","resolve","availableCryptoProviders","logData","about","cadesAbout","CSPVersion","cspVersion","BuildVersion","MajorVersion","MinorVersion","systemInfoCache","getSystemInfo","sysInfo","cadesVersion","cryptoProInstalled","vipNetInstalled","cryptoProviderName","cryptoProvider","PluginVersion","pluginVersion","Version","isSupportedCadesVersion","version","major","minor","patch","parseInt","isSupportedCSPVersion","systemInfo","cryptoProviders","haveValidCryptoProCSPVersion","haveValidVipNetCSPVersion","cryptoProCSP","cp","vipNetCSP","parseFloat","isValidSystemSetup","isValid","isPluginReady","isAlreadyLoaded","require","set_log_level","LOG_LEVEL_DEBUG","args","callbackResult","apply","setCryptoProperty","obj","fn","validateCertificate","customValidationFunc","now","Date","sign","data","detach","includeCertChain","doNotValidate","base64String","ArrayBuffer","signer","signedData","CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN","signResult","SignCades","CADESCOM_CADES_BES","sig","getXmlSignAlgorithmType","GOST_R3410_12_256","XmlDsigGost3410Url2012256","GOST_R3410_12_512","XmlDsigGost3410Url2012512","getXmlHashAlgorithmType","XmlDsigGost3411Url2012256","XmlDsigGost3411Url2012512","signXml","xmlSignatureType","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED","signedXml","Sign","encrypt","recipientCertificates","envelopedData","Recipients","recipients","recipientCertificate","Add","encryptResult","Encrypt","encryptedData","decrypt","decryptResult","Decrypt","Content","decryptedData","openStore","storeLocation","CAPICOM_CURRENT_USER_STORE","storeName","openMode","CAPICOM_STORE_OPEN_EXISTING_ONLY","store","Open","certificatesCache","getCertificatesFromStore","certificatesCount","Certificates","certificates","Count","Item","certBin","ReadCertificatesFromUsbToken","CADESCOM_CONTAINER_STORE","Close","ReadCertificatesFromRegistry","CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED","getCertificates","storeType","ALL","USB_TOKEN","REGISTRY","usbTokenCertificates","concat","index","findIndex","_cert","findCertificateBySkid","c","CertificateInfo","onSelect","onClick","download","href","navigator","clipboard","writeText","map","style","display","JSON","stringify","CryptoProviderInfo","CryptoApp","CheckSystemSetup","useState","setCertificates","versionInfo","setVersionInfo","setCryptoProviders","showCertificates","setShowCertificates","showCryptoProviders","setShowCryptoProviders","selectedCertificate","setSelectedCertificate","selectedFile","setSelectedFile","selectedEncryptCert","setSelectedEncryptCert","selectedEncryptCertBase64","setSelectedEncryptCertBase64","useEffect","alert","fetchedCertificates","fetchCryptoProviders","fetchCertificates","fetchSystemInfo","trySelectCertificate","skid","dowloadFile","blob","url","URL","createObjectURL","a","document","createElement","body","appendChild","click","revokeObjectURL","remove","signFile","arrayBuffer","convertBase64toBlob","signXmlFile","encryptFileCms","decryptFileCms","checkEncryptDecrypt","originalData","isOk","base64","fetch","then","importCertificate","undefined","arrayBufferToString","TextDecoder","decode","parseFromArrayBuffer","Import","parseFromBase64String","certInfo","width","placeholder","onChange","_","files","CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE","height","className","ReactDOM","getElementById","render","pluginObject","plugin_resolved","plugin_reject","plugin_resolve","isOpera","isFireFox","isSafari","isYandex","canPromise","cadesplugin_loaded_event_recieved","isFireFoxExtensionLoaded","reject","browserSpecs","check_browser","ru_cryptopro_npcades_10_native_bridge","callbacksCount","callbacks","resultForCallback","callbackId","resultArray","callback","call","functionName","hasCallback","iframe","arrObjs","Array","setAttribute","encodeURIComponent","documentElement","parentNode","removeChild","JSModuleVersion","async_spawn","set","set_pluginObject","is_capilite_enabled","isNativeMessageSupported","ReleasePluginObjects","cadesplugin_load_timeout","setTimeout","check_load_timeout","set_constantValues","current_log_level","LOG_LEVEL_ERROR","check_plugin_working","tem","ua","userAgent","M","test","exec","appName","appVersion","splice","cpcsp_console_log","level","LOG_LEVEL_INFO","postMessage","CAPICOM_MEMORY_STORE","CAPICOM_LOCAL_MACHINE_STORE","CAPICOM_SMART_CARD_USER_STORE","CADESCOM_MEMORY_STORE","CADESCOM_LOCAL_MACHINE_STORE","CADESCOM_CURRENT_USER_STORE","CADESCOM_SMART_CARD_USER_STORE","CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING","CADESCOM_XADES_DEFAULT","CADESCOM_XADES_BES","CADESCOM_XADES_T","CADESCOM_XADES_X_LONG_TYPE_1","CADESCOM_XMLDSIG_TYPE","XmlDsigGost3410UrlObsolete","XmlDsigGost3411UrlObsolete","XmlDsigGost3410Url","XmlDsigGost3411Url","CADESCOM_CADES_DEFAULT","CADESCOM_CADES_T","CADESCOM_CADES_X_LONG_TYPE_1","CADESCOM_PKCS7_TYPE","CADESCOM_ENCODE_BASE64","CADESCOM_ENCODE_BINARY","CADESCOM_ENCODE_ANY","CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT","CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY","CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME","CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME","CAPICOM_CERTIFICATE_FIND_SHA1_HASH","CAPICOM_CERTIFICATE_FIND_ISSUER_NAME","CAPICOM_CERTIFICATE_FIND_ROOT_NAME","CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME","CAPICOM_CERTIFICATE_FIND_EXTENSION","CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY","CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY","CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY","CAPICOM_CERTIFICATE_FIND_TIME_VALID","CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID","CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED","CAPICOM_CERTIFICATE_FIND_KEY_USAGE","CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE","CAPICOM_PROPID_ENHKEY_USAGE","CAPICOM_OID_OTHER","CAPICOM_OID_KEY_USAGE_EXTENSION","CAPICOM_EKU_CLIENT_AUTH","CAPICOM_EKU_SMARTCARD_LOGON","CAPICOM_EKU_OTHER","CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO","CADESCOM_ATTRIBUTE_OTHER","CADESCOM_STRING_TO_UCS2LE","CADESCOM_BASE64_TO_BINARY","CADESCOM_DISPLAY_DATA_NONE","CADESCOM_DISPLAY_DATA_CONTENT","CADESCOM_DISPLAY_DATA_ATTRIBUTE","CADESCOM_ENCRYPTION_ALGORITHM_RC2","CADESCOM_ENCRYPTION_ALGORITHM_RC4","CADESCOM_ENCRYPTION_ALGORITHM_DES","CADESCOM_ENCRYPTION_ALGORITHM_3DES","CADESCOM_ENCRYPTION_ALGORITHM_AES","CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89","CADESCOM_HASH_ALGORITHM_SHA1","CADESCOM_HASH_ALGORITHM_MD2","CADESCOM_HASH_ALGORITHM_MD4","CADESCOM_HASH_ALGORITHM_MD5","CADESCOM_HASH_ALGORITHM_SHA_256","CADESCOM_HASH_ALGORITHM_SHA_384","CADESCOM_HASH_ALGORITHM_SHA_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC","CADESCOM_AllowNone","CADESCOM_AllowNoOutstandingRequest","CADESCOM_AllowUntrustedCertificate","CADESCOM_AllowUntrustedRoot","CADESCOM_SkipInstallToStore","CADESCOM_InstallCertChainToContainer","CADESCOM_UseContainerStore","ENABLE_CARRIER_TYPE_CSP","ENABLE_CARRIER_TYPE_FKC_NO_SM","ENABLE_CARRIER_TYPE_FKC_SM","ENABLE_ANY_CARRIER_TYPE","DISABLE_EVERY_CARRIER_OPERATION","ENABLE_CARRIER_OPEN_ENUM","ENABLE_CARRIER_CREATE","ENABLE_ANY_OPERATION","CADESCOM_PRODUCT_CSP","CADESCOM_PRODUCT_OCSP","CADESCOM_PRODUCT_TSP","MEDIA_TYPE_REGISTRY","MEDIA_TYPE_HDIMAGE","MEDIA_TYPE_CLOUD","MEDIA_TYPE_SCARD","XCN_CRYPT_STRING_BASE64HEADER","AT_KEYEXCHANGE","AT_SIGNATURE","CARRIER_FLAG_REMOVABLE","CARRIER_FLAG_UNIQUE","CARRIER_FLAG_PROTECTED","CARRIER_FLAG_FUNCTIONAL_CARRIER","CARRIER_FLAG_SECURE_MESSAGING","CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE","CARRIER_FLAG_VIRTUAL","generatorFunc","continuer","verb","arg","generator","done","onFulfilled","onRejected","prototype","slice","arguments","bind","isIE","isIOS","call_ru_cryptopro_npcades_10_native_bridge","ActiveXObject","decimalToHexString","number","GetMessageFromException","exception","cpcsp_chrome_nmcades","array","tmpobj","ex","response","eval","show_firefox_missing_extension_dialog","cadesplugin_skip_extension_install","ovr","id","innerHTML","getElementsByTagName","addEventListener","plugin_loaded_error","visibility","firefox_or_safari_nmcades_onload","cadesplugin_extension_loaded_callback","check_chrome_plugin","plugin_loaded","nmcades_api_onload","event","indexOf","fileref","onerror","onload","load_extension","load_npapi_plugin","elem","elem1","elem2","createPromise","check_npapi_plugin","mimetype","mimeTypes","enabledPlugin","div","readyState","EnableInternalCSP"],"sourceRoot":""}