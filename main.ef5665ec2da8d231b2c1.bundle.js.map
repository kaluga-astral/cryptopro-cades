{"version":3,"file":"main.ef5665ec2da8d231b2c1.bundle.js","mappings":";oIAUYA,EAqBAC,EAoCMC,EAgCNC,EA+CAC,EAqBAC,EAqBAC,EAsBAC,EAgCAC,EAyCAC,EA+CAC,EAwEAC,uDA9YCC,EAAmB,MAuBhC,SAjBYZ,GAAAA,EAAAA,EAA2B,iFAA3BA,EAAAA,EAA2B,mFAA3BA,EAAAA,EAA2B,+EAiBvC,CAjBYA,IAAAA,EAA2B,KAqDvC,SAhCYC,GAAAA,EAAAA,EAAmB,oDAAnBA,EAAAA,EAAmB,yCAAnBA,EAAAA,EAAmB,4CAAnBA,EAAAA,EAAmB,wCAAnBA,EAAAA,EAAmB,kEAAnBA,EAAAA,EAAmB,iDAgC/B,CAhCYA,IAAAA,EAAmB,KA+D/B,SA3BkBC,GAAAA,EAAAA,EAAmB,mDAAnBA,EAAAA,EAAmB,2CAAnBA,EAAAA,EAAmB,uCAAnBA,EAAAA,EAAmB,gEAAnBA,EAAAA,EAAmB,iDA2BrC,CA3BkBA,IAAAA,EAAmB,KA0ErC,SA1CYC,GAAAA,EAAiC,wFAAjCA,EAAiC,4FAAjCA,EAAiC,0EAAjCA,EAAiC,8EAAjCA,EAAiC,yFAAjCA,EAAiC,uGAAjCA,EAAiC,yFAAjCA,EAAiC,uGA0C7C,CA1CYA,IAAAA,EAAiC,KAgE7C,SAjBYC,GAAAA,EAAAA,EAAkC,iGAAlCA,EAAAA,EAAkC,qFAAlCA,EAAAA,EAAkC,6FAiB9C,CAjBYA,IAAAA,EAAkC,KAsC9C,SAjBYC,GAAAA,EAAAA,EAAsB,8CAAtBA,EAAAA,EAAsB,mDAAtBA,EAAAA,EAAsB,mDAiBlC,CAjBYA,IAAAA,EAAsB,KAsClC,SAjBYC,GAAAA,EAAAA,EAAqB,oDAArBA,EAAAA,EAAqB,iDAArBA,EAAAA,EAAqB,iDAiBjC,CAjBYA,IAAAA,EAAqB,KAiDjC,SA3BYC,GAAAA,EAAAA,EAAuB,+DAAvBA,EAAAA,EAAuB,iEAAvBA,EAAAA,EAAuB,2EAAvBA,EAAAA,EAAuB,yEAAvBA,EAAAA,EAAuB,+EA2BnC,CA3BYA,IAAAA,EAAuB,KAoEnC,SApCYC,GAAAA,EAAAA,EAAc,+CAAdA,EAAAA,EAAc,iDAAdA,EAAAA,EAAc,6DAAdA,EAAAA,EAAc,+DAAdA,EAAAA,EAAc,2DAAdA,EAAAA,EAAc,6DAAdA,EAAAA,EAAc,6EAAdA,EAAAA,EAAc,iEAAdA,EAAAA,EAAc,yDAoC1B,CApCYA,IAAAA,EAAc,KAmF1B,SA1CYC,GAAAA,EAAAA,EAAsB,iFAAtBA,EAAAA,EAAsB,+EAAtBA,EAAAA,EAAsB,+EAAtBA,EAAAA,EAAsB,6EAAtBA,EAAAA,EAAsB,iEAAtBA,EAAAA,EAAsB,+DAAtBA,EAAAA,EAAsB,2EAAtBA,EAAAA,EAAsB,yEA0ClC,CA1CYA,IAAAA,EAAsB,KAkHlC,SAnEYC,GAAAA,EAAAA,EAA6B,2EAA7BA,EAAAA,EAA6B,iFAA7BA,EAAAA,EAA6B,+EAA7BA,EAAAA,EAA6B,2EAA7BA,EAAAA,EAA6B,mFAA7BA,EAAAA,EAA6B,2EAA7BA,EAAAA,EAA6B,2FAA7BA,EAAAA,EAA6B,6FAA7BA,EAAAA,EAA6B,6FAA7BA,EAAAA,EAA6B,6EAA7BA,EAAAA,EAA6B,8FAA7BA,EAAAA,EAA6B,kFAA7BA,EAAAA,EAA6B,4EAmEzC,CAnEYA,IAAAA,EAA6B,KAkFzC,SAVYC,GAAAA,EAAAA,EAAiB,+EAU7B,CAVYA,IAAAA,EAAiB,KAmBtB,IAOKE,GA6LX,SA7LWA,GAAAA,EAAAA,EAAc,mDAAdA,EAAAA,EAAc,mEAAdA,EAAAA,EAAc,+DAAdA,EAAAA,EAAc,uDAAdA,EAAAA,EAAc,uDAAdA,EAAAA,EAAc,qDAAdA,EAAAA,EAAc,2DAAdA,EAAAA,EAAc,qDAAdA,EAAAA,EAAc,6EAAdA,EAAAA,EAAc,uDAAdA,EAAAA,EAAc,6DAAdA,EAAAA,EAAc,8EAAdA,EAAAA,EAAc,gEAAdA,EAAAA,EAAc,sDAAdA,EAAAA,EAAc,4DAAdA,EAAAA,EAAc,8DAAdA,EAAAA,EAAc,kEAAdA,EAAAA,EAAc,oEAAdA,EAAAA,EAAc,4CAAdA,EAAAA,EAAc,gEAAdA,EAAAA,EAAc,sDAAdA,EAAAA,EAAc,kEAAdA,EAAAA,EAAc,4DAAdA,EAAAA,EAAc,oEAAdA,EAAAA,EAAc,kFAAdA,EAAAA,EAAc,0FAAdA,EAAAA,EAAc,4FAAdA,EAAAA,EAAc,0DAAdA,EAAAA,EAAc,0DAAdA,EAAAA,EAAc,gGAAdA,EAAAA,EAAc,gFAAdA,EAAAA,EAAc,4EAAdA,EAAAA,EAAc,oDAAdA,EAAAA,EAAc,wEAAdA,EAAAA,EAAc,kEAAdA,EAAAA,EAAc,mEAAdA,EAAAA,EAAc,6DAAdA,EAAAA,EAAc,2DA6LzB,CA7LWA,IAAAA,EAAc,KA+LnB,IAwCKC,EAgCAC,GAFX,SA9BWD,GAAAA,EAAAA,EAA6B,yEAA7BA,EAAAA,EAA6B,yEAA7BA,EAAAA,EAA6B,yEAA7BA,EAAAA,EAA6B,2EAA7BA,EAAAA,EAA6B,yEAA7BA,EAAAA,EAA6B,8FA8BxC,CA9BWA,IAAAA,EAA6B,KAiGxC,SAjEWC,GAAAA,EAAAA,EAAuB,+DAAvBA,EAAAA,EAAuB,6DAAvBA,EAAAA,EAAuB,6DAAvBA,EAAAA,EAAuB,6DAAvBA,EAAAA,EAAuB,qEAAvBA,EAAAA,EAAuB,qEAAvBA,EAAAA,EAAuB,qEAAvBA,EAAAA,EAAuB,iFAAvBA,EAAAA,EAAuB,mGAAvBA,EAAAA,EAAuB,mGAAvBA,EAAAA,EAAuB,2FAAvBA,EAAAA,EAAuB,6GAAvBA,EAAAA,EAAuB,6GAiElC,CAjEWA,IAAAA,EAAuB,KAmE5B,IAwCWC,GAoBjB,SApBiBA,GAAAA,EAAAA,EAAmB,6CAAnBA,EAAAA,EAAmB,2CAAnBA,EAAAA,EAAmB,uCAAnBA,EAAAA,EAAmB,uCAoBpC,CApBiBA,IAAAA,EAAmB,KAsB9B,IAoFWC,ECp4BNC,GD07BX,SAtDiBD,GAAAA,EAAc,uBAAdA,EAAc,2BAAdA,EAAc,+BAAdA,EAAc,uBAAdA,EAAc,sCAAdA,EAAc,iCAAdA,EAAc,yCAAdA,EAAc,mCAAdA,EAAc,kDAsD/B,CAtDiBA,IAAAA,EAAc,KCh4B/B,SAJWC,GAAAA,EAAU,UAAVA,EAAU,sBAAVA,EAAU,oBAIrB,CAJWA,IAAAA,EAAU,KCCf,ICDKC,EDCCC,EAAsC,CACjD,CACEC,aAAc,GACdC,aAAc,+DAEhB,CACED,aAAc,GACdC,aAAc,+DAEhB,CACED,aAAc,GACdC,aACE,sEAEJ,CACED,aAAc,EACdC,aAAc,2CAEhB,CACED,aAAc,GACdC,aAAc,yDAEhB,CACED,aAAc,GACdC,aAAc,2DAEhBC,KAAI,SAACC,GAAC,MAAM,CACZF,aAAcE,EAAEF,aAChBD,aAAcG,EAAEH,aACjB,IAKYI,EAA0B,CACrCC,QAASN,EAAiBO,MAAK,SAACC,GAAC,OAAwB,KAAnBA,EAAEP,YAAmB,IAC3DQ,SAAUT,EAAiBO,MAAK,SAACC,GAAC,OAAwB,IAAnBA,EAAEP,YAAkB,KAMhDS,EAAgCC,OAAOC,OAAO,CAAC,EAAG,GAAI,KAKtDC,EAAmCF,OAAOC,OAAO,CAAC,GAAI,GAAI,MCpCvE,SAZYb,GAAAA,EAAwB,sCAAxBA,EAAwB,sCAYpC,CAZYA,IAAAA,EAAwB,KAe7B,IAAMe,EAAoCH,OAAOI,OACtDhB,GAWWiB,EAAgB,CAC3BC,WAAY,UACZC,QAAS,UACTC,KAAM,WACNC,QAAS,UACTC,SAAU,UACVC,OAAQ,UACRC,OAAQ,UACRC,aAAc,WACdC,WAAY,WACZC,KAAM,WACNC,OAAQ,gBACRC,KAAM,gBACNC,MAAO,gBACPC,IAAK,oBACLC,MAAO,gBACPC,MAAO,+FCzCF,IAAMC,EAAoBtB,OAAOC,OAAO,CAC7C,CACEsB,KAAM,aACNC,QACE,4SAGJ,CACED,KAAM,aACNC,QACE,iIAEJ,CACED,KAAM,aACNC,QACE,sLAGJ,CACED,KAAM,aACNC,QACE,8IAIJ,CACED,KAAM,aACNC,QACE,+KAEJ,CACED,KAAM,aACNC,QACE,8KAEJ,CACED,KAAM,aACNC,QACE,6GAEJ,CACED,KAAM,aACNC,QACE,uEAEJ,CACED,KAAM,aACNC,QAAS,4DAEX,CACED,KAAM,aACNC,QACE,4HAEJ,CACED,KAAM,aACNC,QACE,8IAEJ,CACED,KAAM,aACNC,QACE,8IAEJ,CACED,KAAM,aACNC,QAAS,kCAEX,CACED,KAAM,aACNC,QACE,0FAEJ,CACED,KAAM,aACNC,QAAS,4BAEX,CACED,KAAM,aACNC,QAAS,4BAGX,CACED,KAAM,aACNC,QAAS,4BAGX,CACED,KAAM,aACNC,QACE,8HAGJ,CACED,KAAM,aACNC,QACE,4EAEJ,CACED,KAAM,aACNC,QAAS,uBAEX,CACED,KAAM,aACNC,QACE,2GAEJ,CACED,KAAM,aACNC,QAAS,oCAEX,CACED,KAAM,aACNC,QAAS,oCAEX,CACED,KAAM,aACNC,QAAS,iEAGX,CACED,KAAM,aACNC,QAAS,mEAGX,CACED,KAAM,aACNC,QAAS,mEAGX,CACED,KAAM,aACNC,QACE,mGAQOC,EAAgBzB,OAAOC,OAAO,CACzC,QAAS,iEACT,QAAS,6DACT,QACE,8EACF,QACE,8HACF,QACE,qGACF,QAAS,yBACT,QAAS,2DACT,QAAS,8BACT,QAAS,yCACT,QAAS,8BACT,SAAU,2CACV,SAAU,yDAMCyB,EAAsB1B,OAAOC,OAAO,CAC/C,+BAAgC,6BClJlC,SAAS0B,EAAWC,EAAaC,GAA+B,YAC9D,IAAKD,EAAQ,CACX,IAAME,EAAe,2CAAH,OAA8CD,GAEhE,MAAME,GAAAA,OAAmB,QAASD,EAAc,KAAMA,EACxD,CAEA,OAAOF,SAAsB,QAAhB,EAANA,EAAQI,sBAAc,OAG5B,QAH4B,EAAtB,EAAwBpC,MAC7B,YAAO,SAAJqC,MACO5B,EAAcwB,EAAc,WACvC,OAAO,QAAP,EAHM,EAGJK,aAAK,OAAY,QAAZ,EAHD,EAGGC,kBAAU,WAHP,EAAN,EAGeD,KACxB,CAUA,SAASE,EAAajB,GACpB,OAAOA,GAAqB,IAAdA,EAAIkB,QAAgBlB,EAAImB,WAAW,MAC7CnB,EAAIoB,UAAU,EAAG,IACjBpB,CACN,CAOO,SAASqB,EAAiBC,GAC/B,IAAKA,EAAYC,sBAAuB,CACtC,IAAMZ,EAAe,2CAErB,MAAMC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,EACxD,CAEA,IAAI,UACIa,GAAOC,EAAAA,EAAAA,IACX,IAAIC,WAAWC,EAAAA,GAAAA,KAAYL,EAAYC,sBAAuB,WAC3DK,QAGCC,EAAa,IAAIC,EAAAA,IAAgB,CAAEC,OAAQP,EAAKQ,SAEhDC,EACJJ,EAAWK,qBAAqBC,UAAUC,YAE5Cd,EAAYa,UAAYF,EACxBX,EAAYe,OAASrD,EAAwBsD,SAASL,GAEtD,IAAMM,EAAqD,QAAxB,EAAGV,EAAWW,kBAAU,aAArB,EAAuB/D,MAC3D,YAAS,MFnDyB,cEmDzB,EAANgE,MACkC,IAGvCnB,EAAYoB,aC5ET,SAAqBd,GAC1B,IAAKA,EACH,OAAO,KAMT,IAHA,IAAII,EAAS,GACPW,EAAa,IAAIjB,WAAWE,GAEzBgB,EAAI,EAAGA,EAAID,EAAWzB,OAAQ0B,IAAK,CAC1C,IAAMC,EAAMF,EAAWC,GAAGE,SAAS,IAAIC,cAEvCf,IAA0B,IAAfa,EAAI3B,OAAe,IAAM,IAAM2B,CAC5C,CAEA,OAAOb,EAAOgB,MAChB,CD6D+BC,CACzBV,SAA0C,QAAb,EAA7BA,EAA+BW,mBAAW,OAAY,QAAZ,EAA1C,EAA4ClC,kBAAU,WAAzB,EAA7B,EAAwDmC,UAG1DtE,OAAOuE,KAAK9B,EAAY+B,QAAQC,SAAQ,SAACC,GACvCjC,EAAY+B,OAAOE,GAAO/C,EAAWqB,EAAWwB,OAAQE,EAC1D,IAEA1E,OAAOuE,KAAK9B,EAAYkC,SAASF,SAAQ,SAACC,GACxCjC,EAAYkC,QAAQD,GAAO/C,EAAWqB,EAAW2B,QAASD,EAC5D,IAEAjC,EAAY+B,OAAOrD,IAAMiB,EAAaK,EAAY+B,OAAOrD,KACzDsB,EAAY+B,OAAOpD,MAAQgB,EAAaK,EAAY+B,OAAOpD,OAC3DqB,EAAYkC,QAAQvD,MAAQgB,EAAaK,EAAYkC,QAAQvD,OAC7DqB,EAAYkC,QAAQxD,IAAMiB,EAAaK,EAAYkC,QAAQxD,IAS7D,CANE,MAAOyD,GACP,MAAM7C,GAAAA,OACJ,SACA,4CACA6C,EAEJ,CACF,CElGA,IAAMC,EAAc,SAACC,GACnB,IAAMC,EAAU,sBAQhB,MANsB,iBAAXD,EAAK,GACdA,EAAK,GAAKC,EAAUD,EAAK,GAEzBA,EAAKE,QAAQD,GAGRD,CACT,EAOaG,EAAc,WACzB,GAAIC,GAAAA,MAAoB,4BADKJ,EAAI,yBAAJA,EAAI,gBAE/B,IAAMK,EAAON,EAAYC,GAEdK,EAAK,EAKlB,CACF,EAOaC,EAAc,WAAqC,2BAAjCN,EAAI,yBAAJA,EAAI,gBACjC,IAAMK,EAAON,EAAYC,GAEdK,EAAK,EAKlB,ECUME,GAAe,IApDH,sEAI2C,KAAE,kCAQlD,OAAI,qBAKE,IAAK,2CAKiB,IAAK,gCAKhB,IAAI,mCAKUhG,EAAgB,CAiBzD,OAjByD,wCAO1D,SAAwBiG,GACtBC,KAAKC,eAAeR,QAAQM,EAC9B,GAEA,yBAIA,SAAmBV,GACjBW,KAAKC,eAAef,SAAQ,SAACa,GAAE,OAAKA,EAAGV,EAAM,GAC/C,KAAC,EAjDe,IAgFlBS,GAAaI,kBAtBe,SAACb,GAC3B,GAAIS,GAAaK,OAASd,EAAO,CAK/B,IAJA,IAAMe,EAAS,GAEXC,EAAWhB,EAED,MAAPgB,GACLD,EAAOE,KAAKD,GAGVA,EADEA,aAAe7D,IAAe6D,aAAeE,MACzCF,EAAIG,MAEJ,KAINJ,SAAAA,EAAQtD,QACV+C,EAAY,YAAaO,EAE7B,CACF,IAMA,qcCtEO,IAAM5D,GAAW,qCAuCtB,WAAoB6D,GAA0B,MAIO,OAJP,eAC5C,cAAMA,aAAG,EAAHA,EAAKpE,UAAS,yBA7BP,KAAE,0BAOD,KAAE,4BAKA,KAAE,yBAKL,UAAO,yBAKP,IAQb,EAAKuE,MAAQH,EACb,EAAKpE,QAAUoE,aAAG,EAAHA,EAAKpE,QACpBxB,OAAOgG,gBAAe,UAAMjE,EAAYkE,WAAW,CACrD,CA+FC,OA7FD,gCAIA,WACE,MAAO,CAACV,KAAKhE,KAAMgE,KAAK/D,SAAS0E,OAAOC,SAASC,KAAK,KACxD,GAEA,6BA8FA,SAAwBR,GACtB,IClKFhB,EACmB,EDiKXyB,GClKRzB,EDkKqCgB,EChKZ,QAAzB,EAAOU,OAAOC,mBAAW,aAAlB,EAAoBC,aAAa5B,IDkKtC,QAAQyB,aAAa,EAAbA,EAAe7E,UAAWoE,EAAIpE,SAAW,IAC9CiF,QAAQ,IAAD,OAAKlB,KAAKhE,KAAI,KAAK,IAC1B4C,MACL,IAAC,+BA9FD,SACEyB,EACAc,GACa,kBACPC,EAAc,IAAI5E,EAAY6D,GAI9BgB,EAAUlF,EAAoBkE,EAAIpE,SAEpCoF,IACFhB,EAAIrE,KAAOqF,GAGbD,EAAYpF,KAAe,QAAX,EAAGqE,EAAIrE,YAAI,QAAIQ,EAAY8E,aAAajB,GAExB,iBAArBe,EAAYpF,MAAqBoF,EAAYpF,KAAKc,OAAS,KACpEsE,EAAYpF,KAAO,IAGrB,IAAIuF,EAAe,GAkBnB,OAhBIlB,EAAIpE,UACNsF,EAAeH,EAAYI,gBAAgBnB,IAG7Ce,EAAYD,MAA4B,QAAvB,EAAGA,QAAAA,EAASd,EAAIpE,eAAO,QAAIsF,EAC5CH,EAAY1E,KAAe,QAAX,EAAG2D,EAAI3D,YAAI,QAAI,QAC/B0E,EAAY1E,MAAQ,0BAEpB0E,EAAYnF,QAGE,QAHK,EAEc,QAFd,EACqD,QADrD,EAC4C,QAD5C,EACjBF,EAAkB1B,MAAK,SAACoH,GAAG,OAAKA,EAAIzF,MAAQoF,EAAYpF,IAAI,WAAC,aAA7D,EAA+DC,eAAO,QACtEC,EAAckF,EAAYpF,aAAK,QAC/BuF,SAAY,QACZlB,EAAIpE,QAEN0D,GAAAA,YAAyByB,GAElBA,CACT,GAEA,oBAQA,SACEM,EACAP,EACAd,EACAsB,GAEA,IAAMP,EAAc,IAAI5E,EAAY6D,GAQpC,OANAe,EAAY1E,KAAO,QACnB0E,EAAYpF,KAAO0F,EACnBN,EAAYD,MAAQA,EACpBC,EAAYnF,QAAU0F,QAAAA,EAAmBzF,EAAckF,EAAYpF,MACnE2D,GAAAA,YAAyByB,GAElBA,CACT,GAEA,0BAMA,SAA4Bf,GAAoC,QAM9D,SAJc,QAAX,EAAAA,EAAIpE,eAAO,aAAX,EAAa2F,MAAM,qBACP,QADwB,EACnCvB,EAAIpE,eAAO,aAAX,EAAa2F,MAAMpF,EAAYqF,uBAC/B,IAAI,IAAM,IAEAX,QAAQ,QAAS,IAAItC,MACrC,KAAC,EA3IqB,EA2IrB,OA3I8B2B,QElB1B,SAASuB,KAAoB,MAElC,QAA2B,QAAnB,EAACf,OAAOC,mBAAW,QAAlB,EAAoBe,kBAC/B,CCEO,SAASC,GAAUC,GACxB,OAAIH,MAAcG,aAA2BC,QACpCD,EAEAC,QAAQC,QAAQF,EAE3B,eCdA,umGAAAzD,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,uQJgLC,OA3JYhC,GAAW,sBAKpB,sCIhBG,ICCH4F,GDDSC,GAAW,WAiItB,WAAoBC,IAAmB,sCA3GnC,CACFvH,WAAY,KACZC,QAAS,KACTC,KAAM,KACNC,QAAS,KACTE,OAAQ,KACRD,SAAU,KACVE,OAAQ,KACRkH,aAAc,KACdhH,WAAY,KACZC,KAAM,KACNC,OAAQ,KACRC,KAAM,KACNC,MAAO,KACPE,MAAO,KACPD,IAAK,KACLE,MAAO,QACR,qBAUG,CACFf,WAAY,KACZa,IAAK,KACLC,MAAO,QACR,yBAM2B,OAAI,wBAMP,OAAI,uBAML,OAAI,0BAMC,OAAI,2BAMH,OAAI,oCAMK,OAAI,6BAML,OAAI,2BAMZ,OAAI,2BAMJ,OAAI,6BAMT,IAAK,sBAKZ,IAAK,wBAKI,MAOzBmE,KAAKwC,eAAiBF,CACxB,CAEA,MAgDC,OAhDD,6DAMA,WAA+BG,GAAkB,+EAC1CA,EAAM,CAAF,eACwD,MAAzDlG,EAAe,2CAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,YAGjEkG,aAAgBJ,GAAW,yCACtBI,GAAI,OAG4B,OAAnCvF,EAAc,IAAImF,EAAYI,GAAK,SAETT,GAAOS,EAAKC,aAAY,OAAjC,OAAvBxF,EAAYyF,YAAc,EAAH,eACQX,GAAOS,EAAKG,YAAW,QAAhC,OAAtB1F,EAAY2F,WAAa,EAAH,eACOb,GAAOS,EAAKK,aAAY,QAAjC,OAApB5F,EAAY6F,SAAW,EAAH,eACUf,GAAOS,EAAKO,eAAc,QAAnC,OAArB9F,EAAY+F,UAAY,EAAH,eAEqBjB,GACxCS,EAAKS,OAAOlK,EAAsBmK,wBACnC,QAFgC,OAAjCjG,EAAYC,sBAAwB,EAAH,yBAKG6E,GAAOS,EAAKW,iBAAgB,QAArC,OAAzBlG,EAAYmG,cAAgB,EAAH,eAECrB,GAAOS,EAAKa,YAAW,QAAhC,OAAXC,EAAc,EAAH,eAEgBvB,GAAOuB,EAAYvJ,cAAa,QAAzC,OAAxBkD,EAAYsG,aAAe,EAAH,eACSxB,GAAOuB,EAAYxJ,cAAa,QAAjEmD,EAAYuG,aAAe,EAAH,wDAGxBjH,GAAAA,iBAA6B,EAAD,uEAEmCU,EAAY2F,WAAU,MAGrF3F,EAAYmG,eAAgB,EAAM,QAGN,OAA9BpG,EAAiBC,GAAa,kBAEvBA,GAAW,2DACnB,kDArLqB,iBEVxB,+6MAaO,SAASwG,GAAaC,GAC3B,OAAOC,IAAiB,kBAAC,wFAClBD,EAAkB,CAAF,qBACbnH,GAAAA,OACJ,QACA,kCACA,MACD,OAMoD,OANpD,SAIKqH,EAAS/B,KACXf,OAAOC,YAAYe,kBAAkB4B,GACrC5C,OAAOC,YAAY8C,aAAaH,GAAiB,SAExC3B,GAAO6B,GAAO,8EAErBrH,GAAAA,iBAA6B,EAAD,yCAEDmH,IAChC,yDAnBEC,EAsBT,eDpCA,umGAAApF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,2tBAAAA,EAAA,gDAAAA,GAAA,oCAAAA,KAAA,ubAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAkBO,SAASuF,KAEc,IAD5BC,EAAsB,UAAH,8CAEnB,OAAI5B,KAAyB4B,EACpB9B,QAAQC,QAAQC,IAGlBwB,IAAiB,kBAAC,yGACnBxB,IAAyB4B,EAAU,yCAC9B9B,QAAQC,QAAQC,KAAqB,OAGxC6B,EAA8C,GAC9CC,EAAU,GAAE,cAMXpE,GAAAA,sBAAiC,yDADxB,OACwB,UAFpC/F,EAAY,EAAZA,aACAC,EAAY,EAAZA,aAAY,oBAGuB0J,GAAa/J,EAAewK,OAAM,QAA3C,OAAlBC,EAAqB,EAAH,eACWpC,GACjCoC,EAAWC,WAAWrK,EAAcD,IACrC,QAI2B,OANtBuK,EAAuB,EAAH,UAI1BL,EAAwB,KACRjK,EAAY,KACZD,EAAY,UACNiI,GAAOsC,EAAWC,cAAa,qCAC/BvC,GAAOsC,EAAWE,cAAa,qCAC/BxC,GAAOsC,EAAWG,cAAa,0BAJnDzK,aAAc,EAAF,GACZD,aAAc,EAAF,GACZwK,aAAc,EAAF,GACZC,aAAc,EAAF,GACZC,aAAc,EAAF,SALWnE,KAAI,mEAQ7B4D,EAAQ5D,KAAK,CACX/D,aAAc,kDAAF,OAAoDvC,EAAY,oBAAYD,EAAY,KACpGsF,MAAK,OACJ,wKAIC+C,GAAuB6B,GAAwB,QAE/B,MAF+B,0BAEvDC,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAIsB,OAJtB,UAGxB6E,EAAQ5D,KAAK,CAAE2D,yBAAAA,IACfvE,EAAY,wBAAyBwE,GAAS,kGAxC3CN,EA2CT,eEpEA,umGAAApF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,2tBAAAA,EAAA,gDAAAA,GAAA,oCAAAA,KAAA,ubAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAiBA,IAAIkG,GAAsC,KAO7BC,GAAgB,WAC3B,OAAID,GACKxC,QAAQC,QAAQuC,IAGlBd,IAAiB,kBAAC,qGACnBc,GAAiB,CAAF,wCACVxC,QAAQC,QAAQuC,KAAgB,OAUvB,OAPZE,EAAuB,CAC3BC,aAAc,GACdP,WAAY,KACZQ,oBAAoB,EACpBC,iBAAiB,EACjBC,mBAAoB,MAEhBd,EAAU,GAAE,kBAGiBR,GAAa/J,EAAewK,OAAM,OAA3C,OAAlBC,EAAqB,EAAH,uBAEWL,KAAoB,yCAAvD,IAAK,EAAL,qBAAWkB,EAAc,QAErBzK,EAA8B0D,SAAS+G,EAAelL,gBAEtD6K,EAAQG,iBAAkB,EAE1BH,EAAQI,mBACN7K,EAAwBI,SAASP,aAEnC4K,EAAQN,WACNW,EAAeT,aAAe,IAAMS,EAAeR,cAIrD9J,EAAiCuD,SAAS+G,EAAelL,gBAEzD6K,EAAQE,oBAAqB,EAE7BF,EAAQI,mBACN7K,EAAwBC,QAAQJ,aAElC4K,EAAQN,WACNW,EAAeT,aACf,IACAS,EAAeR,aACf,IACAQ,EAAeV,aAEpB,0DAG6BvC,GAAOoC,EAAWc,eAAc,QAAzC,KAAbC,EAAgB,EAAH,MAEA,CAAF,iCACcnD,GAAOmD,EAAczG,YAAW,QAA7DkG,EAAQC,aAAe,EAAH,gBAGjBD,EAAQC,aAAc,CAAF,iCACM7C,GAAOoC,EAAWgB,SAAQ,QAAvDR,EAAQC,aAAe,EAAH,sEAGhBrI,GAAAA,iBAA6B,EAAD,GAEhC,6CACD,iCAGKkI,GAAkBE,GAAO,QAET,MAFS,0BAEjCV,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAIiB,OAJjB,UAGxB6E,EAAQ5D,KAAK,CAAEsE,QAAAA,IACflF,EAAY,mBAAoBwE,GAAS,qFAtEtCN,EAyET,gBCtGA,u8OAQA,IAQayB,GAA0B,oCAAG,uHACfV,KAAe,OAAxB,OAAVW,EAAa,EAAH,cACcvB,KAAoB,OAGb,GAH/BwB,EAAkB,EAAH,KAEjBC,GAA+B,EAC/BC,GAA4B,GAE5B3F,GAAa4F,oBAAqB,CAAF,qBACLH,GAAe,IAA5C,IAA4C,iBAAjCN,EAAc,QACvB,GACEnF,GAAa6F,qBAAqBtL,MAChC,SAACuL,GAAE,OACDA,EAAG7L,eAAiBkL,EAAelL,cACnC6L,EAAG5L,eAAiBiL,EAAejL,YAAY,IAEnD,CACA,IAAMuC,EAAeuD,GAAa4F,oBAAoBT,GAEtD,GAAI1I,EACF,MAAMC,GAAAA,OACJ,QACA,+BACA,KACAD,EAGN,CAAC,EAlBE,EAAL,qBAA8C,GAmB7C,uDA2BA,GAzBG+I,EAAWR,oBAMXe,OALIA,EAAeN,EAAgBlL,MAAK,SAACuL,GAAE,OAC3CjL,EAAiCuD,SAAS0H,EAAG7L,aAAa,MAI1D8L,EAAcrB,eACdqB,aAAY,EAAZA,EAAcrB,eA5CqB,IA8CnCgB,GAA+B,GAI/BF,EAAWP,iBAKTe,OAJEA,EAAYP,EAAgBlL,MAAK,SAACuL,GAAE,OACxCpL,EAA8B0D,SAAS0H,EAAG7L,aAAa,MAGrD+L,EAAWtB,eACPuB,EAAUC,YACdF,aAAS,EAATA,EAAWtB,cAAe,KAAMsB,aAAS,EAATA,EAAWrB,eAG7CgB,EAA4BM,GA3DI,KA+D9BN,GAA6BD,EAA4B,uBACvDhJ,GAAAA,OAAmB,QAAS,+BAAgC,MAAK,4CAG5E,kBA5DsC,mCCZhC,SAASyJ,GAAwBF,GACtC,IAAMnE,EAAQmE,EAAQnE,MAAM,uBAE5B,IAAKA,EACH,OAAO,EAGT,cAA8BA,EAAK,GAA5BsE,EAAK,KAAEC,EAAK,KAAEC,EAAK,KAS1B,OANAF,EAAQG,SAASH,GAEjBC,EAAQE,SAASF,GAEjBC,EAAQC,SAASD,GAIfF,EAAQ,KACc,IAApBG,SAASH,IAAoC,IAApBG,SAASF,IAAgBE,SAASD,GAAS,MAE1E,eCzBA,umGAAA5H,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAWO,IAAM8H,GAAuB,oCAAG,uFAEnB,OADdhB,EAAiC,KAC/BpB,EAAU,GAAE,2BAIKS,KAAe,OAAlCW,EAAa,EAAH,2DAEJ9I,GAAAA,iBAA6B,EAAD,GAEhC,0CACD,WAGEyJ,GAAwBX,EAAWT,cAAe,CAAF,sBAC7CrI,GAAAA,OACJ,QACA,oCACA,MACD,WAGG8I,EAAWR,oBAAsBQ,EAAWP,gBAAe,uBACzDvI,GAAAA,OACJ,QACA,yCACA,MACD,yBAGG6I,KAA4B,gCAEV,MAFU,0BAElCnB,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAMtB,OANsB,UAGxBK,EACE,6BACmB,IAAnBwE,EAAQpH,OAAe,KAAOoH,GAC9B,mFAEL,kBAxCmC,0DCXpC,umGAAA1F,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAOO,SAAe+H,KAAW,gCA4BhC,2CA5BM,yGAEGC,EAAAA,GAAAA,KAAM,4DAENhK,GAAAA,OACJ,QACA,4CAA2C,MAE5C,UAGEuE,OAAOC,YAAa,CAAF,sBACfxE,GAAAA,OACJ,QACA,qDACA,MACD,mCAIKwF,GAAOjB,OAAOC,aAAY,iEAE1BxE,GAAAA,OACJ,QACA,2DAA0D,MAE3D,kEAEJ,oCCnCD,umGAAAgC,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAQA,IAAIiI,IAAyB,EAOtB,SAAS7C,GACd7D,GAGgC,IAFhC2G,EAAuB,UAAH,8CAGpB,yBAAO,0GACAD,GAAe,CAAF,+BACVF,KAAa,OACnBE,IAAgB,EAAK,OAOvB,GAJI9G,GAAAA,6BACFoB,OAAOC,YAAY2F,cAAc5F,OAAOC,YAAY4F,kBAIlDF,IAAe/G,GAAAA,kBAAkC8G,GAAa,gCAC1DH,KAAyB,sBAZlB/G,EAAI,yBAAJA,EAAI,yBAeUyC,GAAOjC,EAAG8G,MAAM,KAAMtH,IAAM,QAArC,OAAduH,EAAiB,EAAH,uBAEbA,GAAc,2CAEzB,eCvCA,+6MAmBO,SAAeC,GAAkB,EAAD,qCAuBtC,2CAvBM,WACLC,EACA7H,EAEAxC,GAAU,qFAGJmF,KAAY,CAAF,eAC4B,MAAlCL,EAAMuF,EAAI,WAAD,OAAY7H,IAAOxC,cAEfuF,SAAO,gCAClBT,EAAG,6BAIXuF,EAAI7H,GAAOxC,EAAM,+DAGbH,GAAAA,iBAA6B,EAAD,mDAES2C,IAC1C,2DAEJ,oCC1CD,umGAAAX,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAaO,SAAeyI,GAAoB,EAAD,mCA0CxC,2CA1CM,WACL/J,EACAgK,GAE2B,8EAEK,GAA5BtJ,EAAwB,OAE1BV,aAAuBmF,IAAW,qBAC9BnF,EAAW,sCAELmF,GAAAA,WAAuBnF,GAAY,0BAJxB,GAAjBuF,EAAiB,MAMnByE,EAAsB,CAAF,iCACPA,EAAqBzE,GAAK,QAAzC7E,EAAS,EAAH,6BAEAwC,EAAS,GAEVqC,EAAKY,eACRjD,EAAOE,KAAK,4BAGR6G,EAAM,IAAIC,KAEZ3E,EAAKM,UAAYoE,EAAM1E,EAAKM,UAC9B3C,EAAOE,KAAK,2BAGVmC,EAAKQ,WAAakE,EAAM1E,EAAKQ,WAC/B7C,EAAOE,KAAK,6BAGTmC,EAAKxE,QACRmC,EAAOE,KAAK,oCAGVF,EAAOtD,SACTc,EAAS,kCAAoCwC,EAAOS,KAAK,OAC1D,iCAGIjD,GAAM,6CACd,oCCvDD,+6MA4BO,SAASyJ,GACdnK,EACA0C,GAIiB,IAHjB0H,IAAkB,UAAH,+CACfC,IAA4B,UAAH,+CACzBC,EAAyB,UAAH,8CAEtB,OAAO5D,IAAiB,kBAAC,qGASpB,IARGM,EAAU,IAER5D,KAAK,CACXpD,YAAAA,EACA0C,KAAAA,EACA0H,OAAAA,EACAC,iBAAAA,EACAC,cAAAA,IACC,SAGI5H,EAAM,CAAF,eACiD,MAAlDrD,EAAe,oCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,UAGhEW,EAAa,CAAF,eAE8C,MADtDX,EACJ,2DAEIC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OAgBpE,GAbKkL,EACJ7H,aAAgB8H,YACZnK,EAAAA,GAAAA,KAAYqC,GAAMlB,SAAS,UAC3BkB,EAENsE,EAAQ5D,KAAK,CAAEmH,aAAAA,IAEXhF,EAA4B,KAG9BA,EADEvF,aAAuBmF,GAClBnF,aAAW,EAAXA,EAAasF,eAEbtF,EAGJsK,IAAmB/E,EAAI,kCACCwE,GAAoBxE,GAAK,QAAlC,KAAZlG,EAAe,EAAH,MAEA,CAAF,sBACRC,GAAAA,OACJ,QACA,6CACA,KACAD,GACD,yBAI0BmH,GAAa/J,EAAegO,QAAO,QAA5C,OAAhBA,EAAmB,EAAH,eACoBjE,GACxC/J,EAAeiO,YAChB,QAFgC,OAA3BA,EAA8B,EAAH,yBAMzBb,GAAkBY,EAAQ,cAAelF,GAAK,YAEhD8E,EAAkB,CAAF,iCACZR,GACJY,EACA,UACA7O,EAAmC+O,yCACpC,yBAGGd,GACJa,EACA,kBxB2hB+B,GwBzhBhC,yBAIKb,GAAkBa,EAAY,UAAWH,GAAa,iEAEtDjL,GAAAA,iBAA6B,EAAD,GAEhC,gDACD,mCAIwBwF,GACvB4F,EAAWE,UACTH,EACA/O,EAAoBmP,mBACpBT,IAEH,QAE4B,OARvBU,EAAa,EAAH,KAQhB9D,EAAQ5D,KAAK,CAAE0H,WAAAA,IAAc,kBAEtBA,GAAU,yCAEXxL,GAAAA,iBAA6B,EAAD,GAEhC,8CACD,gCAGqB,MAHrB,0BAGH0H,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAGQ,OAHR,UAGxBK,EAAY,UAAWwE,GAAS,6FA5G7BN,EA+GT,eClJA,+6MA8BA,SAASqE,GAAexF,GACtB,OAAQA,EAAK1E,WACX,KAAKlE,EAAyBqO,kBAC5B,OAAOzO,EAAwB0O,8CACjC,KAAKtO,EAAyBuO,kBAC5B,OAAO3O,EAAwB4O,8CAEjC,QACE,IAAM9L,EAAe,iDAErB,MAAMC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAE5D,CAaO,SAAS+L,GACdpL,EACA0C,GAGiB,IAFjB2H,IAA4B,UAAH,+CACzBC,EAAyB,UAAH,8CAEtB,OAAO5D,IAAiB,kBAAC,yGAQpB,IAPGM,EAAU,IAER5D,KAAK,CACXpD,YAAAA,EACA0C,KAAAA,EACA2H,iBAAAA,EACAC,cAAAA,IACC,SAGI5H,EAAM,CAAF,eAC8C,MAA/CrD,EAAe,iCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,UAGhEW,EAAa,CAAF,eAE8C,MADtDX,EACJ,2DAEIC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OASlC,GAN7BgM,EACJ3I,aAAgB8H,YAAcnK,EAAAA,GAAAA,KAAYqC,GAAMlB,SAAS,OAASkB,EAEpEsE,EAAQ5D,KAAK,CAAEiI,UAAAA,IAEXC,EAAiC,KACjC/F,EAA2B,OAE3BvF,aAAuBmF,IAAW,iBACpCmG,EAAYtL,aAAW,EAAXA,EAAasF,eACzBC,EAAOvF,EAAY,wBAEK,OAAxBsL,EAAYtL,EAAY,UACXmF,GAAAA,WAAuBmG,GAAU,QAA9C/F,EAAO,EAAH,gBAGD+E,IAAmBgB,EAAS,kCACJvB,GAAoBuB,GAAU,QAAvC,KAAZjM,EAAe,EAAH,MAEA,CAAF,sBACRC,GAAAA,OACJ,QACA,6CACA,KACAD,GACD,yBAIkCmH,GACrC/J,EAAe8O,YAChB,QAF6B,OAAxBA,EAA2B,EAAH,eAGC/E,GAAa/J,EAAegO,QAAO,QAA5C,OAAhBA,EAAmB,EAAH,eACoBjE,GACxC/J,EAAeiO,YAChB,QAFgC,OAA3BA,EAA8B,EAAH,yBAMzBb,GAAkBY,EAAQ,cAAea,GAAU,YAErDjB,EAAkB,CAAF,iCACZR,GACJY,EACA,UACA7O,EAAmC+O,yCACpC,yBAGGd,GAAkB0B,EAAY,YAAaR,GAAexF,IAAM,yBAChET,GAAOyG,EAAWC,aAAaH,IAAW,iEAE1C/L,GAAAA,iBAA6B,EAAD,GAEhC,gDACD,mCAIwBwF,GACvB4F,EAAWe,SACTF,EACAd,EACA/O,EAAoBmP,qBAEvB,QAE4B,OARvBC,EAAa,EAAH,KAQhB9D,EAAQ5D,KAAK,CAAE0H,WAAAA,IAAc,kBAEtBA,GAAU,yCAEXxL,GAAAA,iBAA6B,EAAD,GAEhC,8CACD,gCAGqB,MAHrB,0BAGH0H,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAGY,OAHZ,UAGxBK,EAAY,cAAewE,GAAS,6FAxGjCN,EA2GT,eCxKA,+6MAwBO,IAAMgF,GAA0B,SAAC1L,GACtC,OAAQA,EAAYa,WAClB,KAAKlE,EAAyBqO,kBAC5B,OAAOrP,EAAkCgQ,0BAE3C,KAAKhP,EAAyBuO,kBAC5B,OAAOvP,EAAkCiQ,0BAE3C,QACE,MAAMtM,GAAAA,OACJ,QAAO,gCACkBU,EAAYa,UAAS,gDAC9C,MAGR,EAQagL,GAA0B,SAAC7L,GACtC,OAAQA,EAAYa,WAClB,KAAKlE,EAAyBqO,kBAC5B,OAAOrP,EAAkCmQ,0BAE3C,KAAKnP,EAAyBuO,kBAC5B,OAAOvP,EAAkCoQ,0BAE3C,QACE,MAAMzM,GAAAA,OACJ,QAAO,gCACkBU,EAAYa,UAAS,gDAC9C,MAGR,EAWamL,GAAU,SACrBhM,EACA0C,GAGoB,IAFpBuJ,EAAgD,UAAH,6CAAGzQ,EAA4B0Q,sCAC5E5B,EAAyB,UAAH,8CAEtB,OAAO5D,IAAiB,kBAAC,qGAG8C,IAF/DM,EAAU,IAER5D,KAAK,CAAEpD,YAAAA,EAAa0C,KAAAA,EAAMuJ,iBAAAA,EAAkB3B,cAAAA,IAAiB,SAG9D5H,EAAM,CAAF,eACiD,MAAlDrD,EAAe,oCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,UAGhEW,EAAa,CAAF,eAE8C,MADtDX,EACJ,2DAEIC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OAQtC,GALzBkL,EACJ7H,aAAgB8H,YACZnK,EAAAA,GAAAA,KAAYqC,GAAMlB,SAAS,UAC3BkB,EAENsE,EAAQ5D,KAAK,CAAEmH,aAAAA,MAGbvK,aAAuBmF,IAAW,sBAC9BnF,EAAW,yCAELmF,GAAAA,WAAuBnF,GAAY,4BAJxB,GAAjBuF,EAAiB,KAMlB+E,IAAmB/E,EAAI,kCACCwE,GAAoBxE,GAAK,QAAlC,KAAZlG,EAAe,EAAH,MAEA,CAAF,sBACRC,GAAAA,OACJ,QACA,6CACA,KACAD,GACD,yBAI0BmH,GAAa/J,EAAegO,QAAO,QAA5C,OAAhBA,EAAmB,EAAH,eACejE,GACnC/J,EAAe0P,WAChB,QAF2B,OAAtBzB,EAAyB,EAAH,yBAMpBb,GAAkBY,EAAQ,cAAelF,EAAKD,gBAAe,yBAG7DuE,GAAkBa,EAAY,UAAWH,GAAa,yBAEtDV,GAAkBa,EAAY,gBAAiBuB,GAAiB,yBAGhEpC,GACJa,EACA,kBACAgB,GAAwBnG,IACzB,yBAGKsE,GACJa,EACA,eACAmB,GAAwBtG,IACzB,iEAEKjG,GAAAA,iBAA6B,EAAD,GAEhC,gDACD,mCAIwBwF,GAAO4F,EAAW0B,KAAK3B,IAAQ,QAE3B,OAFvBK,EAAa,EAAH,KAEhB9D,EAAQ5D,KAAK,CAAE0H,WAAAA,IAAc,kBAEtBA,GAAU,yCAEXxL,GAAAA,iBAA6B,EAAD,GAEhC,8CACD,gCAGqB,MAHrB,0BAGH0H,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAGW,OAHX,UAGxBK,EAAY,aAAcwE,GAAS,6FA/FhCN,EAkGT,gBCjLA,u8OAsBO,SAAS2F,GACd3J,EACA4J,GAEA,OAAO5F,IAAiB,kBAAC,uGAGuB,IAFxCM,EAAU,IAER5D,KAAK,CAAEV,KAAAA,EAAM4J,sBAAAA,IAAyB,SAGvC5J,EAAM,CAAF,eACiD,MAAlDrD,EAAe,oCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,UAGhEiN,GAA2D,KAAlCA,aAAqB,EAArBA,EAAuB1M,QAAY,gBAED,MADxDP,EACJ,6DAEIC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OAQtC,OALzBkL,EACJ7H,aAAgB8H,YACZnK,EAAAA,GAAAA,KAAYqC,GAAMlB,SAAS,UAC3BkB,EAENsE,EAAQ5D,KAAK,CAAEmH,aAAAA,IAAgB,UAEc/D,GAC3C/J,EAAe8P,eAChB,QAFmC,OAA9BA,EAAiC,EAAH,yBAO5B1C,GACJ0C,EACA,kB3BykB+B,G2BvkBhC,yBAEK1C,GAAkB0C,EAAe,UAAWhC,GAAa,iEAEzDjL,GAAAA,iBAA6B,EAAD,GAEhC,gDACD,mCAIqCwF,GAAOyH,EAAcC,YAAW,QAAhEC,EAA0B,EAAH,UAEMH,GAAqB,2DAAzB,OAApBI,EAAoB,kBACvB5H,GAAO2H,EAAWE,IAAID,IAAsB,0MAG9CpN,GAAAA,iBAA6B,EAAD,GAEhC,yEACD,mCAO2BwF,GAC1ByH,EAAcK,QAAQ9Q,EAAsBmK,wBAC7C,QAE+B,OAJ1B4G,EAAgB,EAAH,KAInB7F,EAAQ5D,KAAK,CAAEyJ,cAAAA,IAAiB,kBAEzBA,GAAa,yCAEdvN,GAAAA,iBAA6B,EAAD,GAEhC,iCACD,gCAGqB,MAHrB,0BAGH0H,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAGW,OAHX,UAGxBK,EAAY,aAAcwE,GAAS,mHAjFhCN,EAoFT,eC9GA,+6MAiBO,SAASoG,GAAQC,GACtB,OAAOrG,IAAiB,kBAAC,6FAGS,IAF1BM,EAAU,IAER5D,KAAK,CAAE2J,cAAAA,IAAiB,SAGzBA,EAAe,CAAF,eACyC,MAAnD1N,EAAe,qCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OAQtC,OALzBkL,EACJwC,aAAyBvC,YACrBnK,EAAAA,GAAAA,KAAY0M,GAAevL,SAAS,UACpCuL,EAEN/F,EAAQ5D,KAAK,CAAEmH,aAAAA,IAAgB,UAEc/D,GAC3C/J,EAAe8P,eAChB,QAFmC,OAA9BA,EAAiC,EAAH,yBAO5B1C,GACJ0C,EACA,kB5BwlB+B,G4BtlBhC,iEAEKjN,GAAAA,iBAA6B,EAAD,GAEhC,iDACD,mCAMKwF,GAAOyH,EAAcS,QAAQzC,IAAc,yBAErBzF,GAAOyH,EAAcU,SAAQ,QAEzB,OAF1BC,EAAgB,EAAH,KAEnBlG,EAAQ5D,KAAK,CAAE8J,cAAAA,IAAiB,kBAEzBA,GAAa,yCAEd5N,GAAAA,iBAA6B,EAAD,GAEhC,kCACD,gCAGqB,MAHrB,0BAGH0H,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAGW,OAHX,UAGxBK,EAAY,aAAcwE,GAAS,6FA1DhCN,EA6DT,eC/EA,umGAAApF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAqBO,SAAS6L,KAIG,IAHjBC,EAAgC,UAAH,6CAAGpR,EAAeqR,2BAC/CC,EAAoB,UAAH,6CAAGlR,EACpBmR,EAAoC,UAAH,6CAAGxR,EAAwByR,iCAE5D,OAAO9G,IAAiB,kBAAC,qGACGF,GAAa/J,EAAegR,OAAM,OAA3C,OAAbA,EAAgB,EAAH,uBAGT3I,GAAO2I,EAAMC,KAAKN,EAAeE,EAAWC,IAAU,gCAErDE,GAAK,iDAEN3I,GAAO2I,aAAK,EAALA,EAAOE,SAAQ,cACtBrO,GAAAA,iBAA6B,EAAD,GAEhC,2CACD,yDAZEoH,EAeT,eCzCA,+6MAiBA,IAAMkH,GAAoB,CAAC,EAE3B,SAMeC,GAAyB,GAAD,gCA0CvC,cAFC,OAED,sBA1CA,WAAwCJ,GAAa,qFAC9CA,EAAO,CAAF,eACgD,MAAlDpO,EAAe,oCAEfC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,OAK5C,OAFnBqB,EAAwB,GAE1BoN,EAAoB,EAAC,kBAGFhJ,GAAO2I,EAAMM,cAAa,OAAnC,OAAZC,EAAe,EAAH,eACclJ,GAAOkJ,EAAaC,OAAM,QAApDH,EAAoB,EAAH,6DAEXxO,GAAAA,iBAA6B,EAAD,GAEhC,yCACD,YAIIwO,EAAmB,CAAF,2CAEgBhJ,GAClCkJ,EAAaE,KAAKJ,MACnB,QAF0B,OAArBK,EAAwB,EAAH,eAGKhJ,GAAAA,WAAuBgJ,GAAQ,SAAzD5I,EAAoB,EAAH,MAGdxE,QACPL,EAAO0C,KAAKmC,GACb,mDAGDjG,GAAAA,iBAA6B,EAAD,GAAM,iCAAiC,yDAIhEoB,GAAM,mEACd,+BAOc0N,KAA4B,gCAY3C,cAFC,OAED,sBAZA,uFACiC,OAA3BX,EAAuB,KAAI,kBAGfN,GAAUnR,EAAeqS,0BAAyB,OAA3D,OAALZ,EAAQ,EAAH,cAEQI,GAAyBJ,GAAM,yEAEjC,QAFiC,EAEtCA,SAAK,aAAL,EAAOE,QAAO,yFAEvB,+BAOcW,KAA4B,gCAgB3C,cAFC,OAED,sBAhBA,uFACiC,OAA3Bb,EAAuB,KAAI,kBAGfN,GACZnR,EAAeqR,2BACfjR,EACAL,EAAwBwS,oCACzB,OAJI,OAALd,EAAQ,EAAH,cAMQI,GAAyBJ,GAAM,yEAEjC,QAFiC,EAEtCA,SAAK,aAAL,EAAOE,QAAO,yFAEvB,sBAUM,SAASa,KAGU,IAFxBC,EAAwB,UAAH,6CAAG/R,EAAWgS,IACnC5H,EAAsB,UAAH,8CAEnB,OAAI8G,GAAkBa,KAAe3H,EAC5B9B,QAAQC,QAAQ2I,GAAkBa,IAGpC/H,IAAiB,kBAAC,mGACnBkH,GAAkBa,IAAe3H,EAAU,yCACtC8G,GAAkBa,IAAU,OAG/BzH,EAAU,GACZtG,EAAwB,GAAE,cAGpB+N,EAAS,cACV/R,EAAWiS,UAAS,SAMpBjS,EAAWkS,SAAQ,UAMnBlS,EAAWgS,IAAG,oCAXFN,KAA8B,QACT,OADpC1N,EAAS,EAAH,KACNsG,EAAQ5D,KAAK,CAAEqL,UAAAA,EAAW/N,OAAAA,IAAU,8CAKrB4N,KAA8B,QACT,OADpC5N,EAAS,EAAH,KACNsG,EAAQ5D,KAAK,CAAEqL,UAAAA,EAAW/N,OAAAA,IAAU,8CAKD0N,KAA8B,QAER,OAFnDS,EAAuB,EAAH,KAE1B7H,EAAQ5D,KAAK,CAAEqL,UAAW,MAAOI,qBAAAA,IAAwB,UAElBP,KAA8B,QASnE,OATIQ,EAA2B,EAAH,KAE9B9H,EAAQ5D,KAAK,CAAEqL,UAAW,WAAYK,yBAAAA,IAGtCpO,GAFAA,EAASmO,EAAqBE,OAAOD,IAErBrL,QACd,SAAC8B,EAAMyJ,GAAK,OACVtO,EAAOuO,WAAU,SAACjS,GAAC,OAAKA,EAAE2I,aAAeJ,EAAKI,UAAU,MACxDqJ,CAAK,IACP,6BAK6B,OAA3BvB,EAAuB,KAAI,oBAGfN,KAAW,QAApB,OAALM,EAAQ,EAAH,eACUI,GAAyBJ,GAAM,QAA9C/M,EAAS,EAAH,KACNsG,EAAQ5D,KAAK,CAAEqL,UAAW,UAAW/N,OAAAA,IAAU,mCAEpC,QAFoC,EAEzC+M,SAAK,aAAL,EAAOE,QAAO,gGAMF,MANE,0BAM1B3G,EAAQ5D,KAAK,CAAEjB,MAAK,OAAI,aAIiC,OAJjC,UAGxB6E,EAAQ5D,KAAK,CAAE1C,OAAAA,IACf8B,EAAY,mBAAD,OAAoBiM,EAAS,QAAQzH,GAAS,8CAGnD4G,GAAkBa,GAAa/N,GAAM,4EA7DxCgG,EA+DT,eCxLA,umGAAApF,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,sQAUO,SAAe4N,GAAsB,GAAD,gCAiB1C,2CAjBM,WACL9N,GAAoB,2EAEfA,EAAc,CAAF,eAEiD,MAD1D/B,EACJ,+DAEIC,GAAAA,OAAmB,QAASD,EAAc,KAAMA,GAAa,gCAIrDmP,KAAiB,uCAAErR,MAC/B,SAACH,GAAC,OAAKA,EAAEoE,cAAgBA,CAAY,2CAGjC9B,GAAAA,iBAA6B,EAAD,GAAM,iCAAgC,0DAE3E,oCCrBY6P,GAAkB,SAAH,OAC1BnP,EAAW,EAAXA,YACAoP,EAAQ,EAARA,SAAQ,OAERpP,GACE,kBAAKqP,QAAS,SAACC,GAAC,OAAKF,GAAYA,EAASpP,EAAYoB,aAAa,EAAC,WAClE,8BACE,uDAEE,eACEmO,SAAQ,UAAKvP,EAAYkC,QAAQrE,WAAU,QAC3C2R,KAAI,iDAA4CxP,EAAYC,uBAAwB,SAEnFD,EAAYkC,QAAQrE,aACnB,gCAGN,oBACA,4CACA,kBACEwR,QAAS,SAACC,GAAC,OACTG,UAAUC,UAAUC,UAAU3P,EAAYoB,aAAc,EACzD,SAEApB,EAAYoB,kBAGhB7D,OAAOuE,KAAK9B,GACVyD,QACC,SAACxB,GAAG,OACD,CACC,wBACA,iBACA,gBACAjB,SAASiB,EAAI,IAElBlF,KAAI,SAACkF,EAAK+M,GAAK,eACd,mBAAMY,MAAO,CAAEC,QAAS,SAAU,WAChC,0BAAI5N,EAAG,OAAO,IACbjC,EAAYiC,aAAgB1E,OACzBuS,KAAKC,UAAU/P,EAAYiC,IACC,QADI,EAChB,QADgB,EAChCjC,EAAYiC,UAAI,aAAhB,EAAkBT,kBAAU,QAAI,SAJEwN,EAKjC,OAGX,IAAI,EC9CGgB,GAAqB,SAAH,OAAMjI,EAAc,EAAdA,eAAc,OACjD,mCACE,mBAAM6H,MAAO,CAAEC,QAAS,SAAU,WAChC,iCAAW,IAAE9H,EAAejL,iBAE9B,mBAAM8S,MAAO,CAAEC,QAAS,SAAU,WAChC,iCAAW,IAAE9H,EAAelL,iBAE9B,mBAAM+S,MAAO,CAAEC,QAAS,SAAU,WAChC,oCAAc,IAAE9H,EAAeT,aAAY,IAAGS,EAAeR,aAAY,IACvEQ,EAAeV,kBAElB,gBCjBL,+6MA6BA,IAAM4I,GAAY,WAAM,MACtBrN,GAAasN,kBAAmB,EAChCtN,GAAaK,OAAQ,EAErB,OAAwCkN,EAAAA,EAAAA,UAAwB,IAAG,eAA5DnC,EAAY,KAAEoC,EAAe,KACpC,GAAsCD,EAAAA,EAAAA,YAAuB,eAAtDE,EAAW,KAAEC,EAAc,KAClC,GAA8CH,EAAAA,EAAAA,UAA4B,IAAG,eAAtE9H,EAAe,KAAEkI,EAAkB,KAC1C,GAAgDJ,EAAAA,EAAAA,YAAmB,eAA5DK,EAAgB,KAAEC,EAAmB,KAC5C,GAAsDN,EAAAA,EAAAA,YAAmB,eAAlEO,EAAmB,KAAEC,EAAsB,KAClD,GAAsDR,EAAAA,EAAAA,YAAuB,eAAtES,EAAmB,KAAEC,EAAsB,KAClD,GAAwCV,EAAAA,EAAAA,YAAgB,eAAjDW,EAAY,KAAEC,EAAe,KACpC,GACEZ,EAAAA,EAAAA,YAAwB,eADnBa,EAAmB,KAAEC,EAAsB,KAElD,GACEd,EAAAA,EAAAA,YAAkB,eADbe,EAAyB,KAAEC,EAA4B,MAG9DC,EAAAA,EAAAA,YAAU,WACsB,aAQ7B,OAR6B,qBAA9B,8GAE6B3J,KAAe,OAAlCW,EAAa,EAAH,KAChBkI,EAAelI,GAAY,gDAE3BzF,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,sBAC+B,aAgB/B,OAhB+B,qBAAhC,8GAEsCgN,GAAgB9R,EAAWgS,KAAI,OAA3D4C,EAAsB,EAAH,KAEzBlB,EAAgBkB,GAGXV,GACHC,EACES,EAAoBnU,MAAK,SAACH,GAAC,OAAKA,EAAE+D,QAAU/D,EAAEmJ,aAAa,KAE9D,gDAEDxD,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,sBACkC,aAQlC,OARkC,qBAAnC,8GAEyCqF,KAAoB,OAAnD0K,EAAyB,EAAH,KAC5BhB,EAAmBgB,GAAwB,gDAE3C5O,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,sBAEGkP,GAXH,WACkC,wBAWjCc,GAEEhB,GA/BH,WAC+B,wBA+B9BiB,GAzCY,WACgB,wBA0C9BC,EACF,GAAG,CAAChB,EAAqBF,EAAkBI,IAM3C,IAAMe,EAAoB,oCAAG,WAAOC,GAAY,4EAC1CA,EAAM,CAAF,+BACoB1C,GAAsB0C,GAAK,QAA/C5R,EAAc,EAAH,OAEf6Q,EAAuB7Q,GACxB,2CAEJ,gBAPyB,sCAcpB6R,EAAc,SAACC,EAAY/T,GAC/B,IAAMgU,EAAMlO,OAAOmO,IAAIC,gBAAgBH,GACjCI,EAAIrO,OAAOsO,SAASC,cAAc,KACxCF,EAAEtC,MAAMC,QAAU,SAClBhM,OAAOsO,SAASE,KAAKC,YAAYJ,GACjCA,EAAE1C,KAAOuC,EACTG,EAAE3C,SAAWxR,EACbmU,EAAEK,QACF1O,OAAOmO,IAAIQ,gBAAgBT,GAC3BG,EAAEO,QACJ,EAQMC,EAAsB,SAC1BC,GAAc,IACdnT,EAAe,UAAH,6CAAG,2BAA0B,OAEzCqE,OACG+O,MAAM,QAAD,OAASpT,EAAI,mBAAWmT,IAC7BE,MAAK,SAACtO,GAAa,OAAKA,EAAIuN,MAAM,GAAC,EAKlCgB,EAAQ,oCAAG,wFACVlC,EAAqB,CAAF,eACe,OAArC/M,OAAOwN,MAAM,wBAAwB,6BAGlCP,EAAc,CAAF,eAC4B,OAA3CjN,OAAOwN,MAAM,8BAA8B,0BAMtB,OANsB,cAKzBlH,GAAI,KACpByG,EAAmB,UACbE,EAAaiC,cAAa,iEAGvB,OALLC,EAAM,EAAH,UAKTnB,EAAW,UAAOa,EAAoBM,GAAI,yBAAElC,EAAa/S,KAAO,QAAM,qEAEtE4E,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,kBArBa,mCA0BLyR,EAAY,oCAAG,wFACfrC,EAAqB,CAAF,eACe,OAArC/M,OAAOwN,MAAM,wBAAwB,6BAGlCP,EAAc,CAAF,eAC4B,OAA3CjN,OAAOwN,MAAM,8BAA8B,0BAMtB,OANsB,cAKzBjG,GAAQ,KACxBwF,EAAmB,UACbE,EAAaiC,cAAa,yDAChC,GACA,GAAI,QAGK,OAPLC,EAAM,EAAH,UAOTnB,EAAW,UAAOa,EAAoBM,GAAI,yBAAElC,EAAa/S,KAAO,QAAM,qEAEtE4E,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,kBAvBkB,mCA4Bf0R,EAAW,oCAAG,WAClBjH,GAA6C,2EAExC2E,EAAqB,CAAF,eACe,OAArC/M,OAAOwN,MAAM,wBAAwB,6BAGlCP,EAAc,CAAF,eAC4B,OAA3CjN,OAAOwN,MAAM,8BAA8B,0BAMtB,OANsB,cAKzBrF,GAAO,KACvB4E,EAAmB,UACbE,EAAaiC,cAAa,QAChB,OADgB,iBAChC9G,EAAgB,2CAGP,OANL+G,EAAM,EAAH,UAMTnB,EAAW,UACHa,EAAoBM,GAAI,yBAC9BlC,EAAa/S,KAAKiG,QAAQ,OAAQ,IAAM,YAAU,qEAGpDrB,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,gBA3BgB,sCAgCX2R,EAAc,oCAAG,wFAChBnC,EAAqB,CAAF,eAC0B,OAAhDnN,OAAOwN,MAAM,mCAAmC,6BAG7CP,EAAc,CAAF,eAC+B,OAA9CjN,OAAOwN,MAAM,iCAAiC,0BAKX,OALW,cAKlBhF,GAAO,UAC3ByE,EAAaiC,cAAa,QACX,OADW,iBAChC,CAAC/B,GAAoB,sCAGZ,OALLjE,EAAgB,EAAH,UAKnB8E,EAAW,UACHa,EAAoB3F,GAAc,yBACxC+D,EAAa/S,KAAO,QAAM,qEAG5B4E,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,kBAxBmB,mCA6Bd4R,EAAc,oCAAG,wFAChBtC,EAAc,CAAF,eACgC,OAA/CjN,OAAOwN,MAAM,kCAAkC,0BAKZ,OALY,cAKnBvE,GAAO,SAC3BgE,EAAaiC,cAAa,2DAGvB,OAJL7F,EAAgB,EAAH,UAInB2E,EAAW,UACHa,EAAoBxF,GAAc,yBACxC4D,EAAa/S,KAAO,cAAY,qEAGlC4E,EAAY,EAAD,IACXkB,OAAOwN,MAAK,OAAC,EAAD,yBAAC,KAAO7P,YAAY,0DAEnC,kBAnBmB,mCAwBd6R,EAAmB,oCAAG,8FACrBzC,EAAqB,CAAF,eACe,OAArC/M,OAAOwN,MAAM,wBAAwB,0BAGJ,OAA7BiC,EAAe,eAAc,kBAGLjH,GAC1BhM,EAAAA,GAAAA,KAAYiT,GAAc9R,SAAS,UACnC,CAACoP,EAAoBtL,iBACtB,OAHkB,OAAbyH,EAAgB,EAAH,eAKSD,GAAQC,GAAc,QAA5CG,EAAgB,EAAH,KACbqG,EACJlT,EAAAA,GAAAA,KAAY6M,EAAe,UAAU1L,SAAS,WAAa8R,EAE7DzP,OAAOwN,MACLkC,EAAO,wCAA0C,qBACjD,kDAEF5Q,EAAY,EAAD,IACXkB,OAAOwN,MAAM,KAAM7P,YAAY,0DAElC,kBAxBwB,mCA8BnBgS,GAAiB,oCAAG,WACxB9Q,GAA0B,+EAErBA,EAAM,CAAF,eAE2B,OADlCyO,OAA6BsC,GAC7BxC,OAAuBwC,GAAW,0BAmBT,GAfrBC,EAAsB,SAACpT,GAC3B,OAAO,IAAIqT,aAAcC,OAAOtT,EAClC,EAEMuT,EAAoB,oCAAG,WAAOvT,GAAmB,0FACbkG,GACtC/J,EAAeuD,aAChB,OACoD,OAH/CA,EAA4B,EAAH,KAGzB2S,EAAStS,EAAAA,GAAAA,KAAYC,GAAQkB,SAAS,UAAS,SAC/CxB,EAAY8T,OAAOnB,GAAO,OAEI,OADpCxB,EAA6BwB,GAC7B1B,EAAuBjR,GAAa,kBAC7BA,GAAW,2CACnB,gBATyB,sCAWpB+T,EAAqB,oCAAG,WAAOpB,GAAc,wFACTnM,GACtC/J,EAAeuD,aAChB,OAF8B,OAAzBA,EAA4B,EAAH,cAGzBA,EAAY8T,OAAOnB,GAAO,OAEI,OADpCxB,EAA6BwB,GAC7B1B,EAAuBjR,GAAa,kBAC7BA,GAAW,2CACnB,gBAR0B,iDAUrB0C,aAAgB8H,aAAW,2CAErBqJ,EAAqBnR,GAAK,gCAEb,OAFa,0BAEhCC,EAAY,EAAD,IAAQ,UACboR,EAAsBL,EAAoBhR,IAAM,2DAIhDmR,EAAqBxT,EAAAA,GAAAA,KAAYqC,IAAM,gCAE1B,OAF0B,2BAE7CC,EAAY,EAAD,IAAQ,UACboR,EAAsBrR,GAAK,0DAIrCC,EAAY,EAAD,IACXkB,OAAOwN,MAAM,KAAMtS,SAAS,yEAE/B,gBArDsB,sCAoEvB,cAFC,OAED,sBAVA,wGAEUqK,KAAyB,OAC/BvF,OAAOwN,MAAM,mBAAmB,gDAEhC1O,EAAY,EAAD,IACXkB,OAAOwN,MAAM,KAAM7P,YAAY,0DAElC,sBAK8B,cAO9B,OAP8B,sBAA/B,wGAEU6H,KAAa,sDAEnB1G,EAAY,EAAD,IACXkB,OAAOwN,MAAM,KAAM7P,YAAY,yDAElC,sBAED,OACE,mCACE,4CAAmB6O,aAAW,EAAXA,EAAa1I,iBAChC,qDAA4B0I,aAAW,EAAXA,EAAajJ,eACzC,oBAAQiI,QAAS,kBAlBpB,WAK8B,gCAaJ2E,EAAkB,EAAC,+BAC1C,oBAAQ3E,QAAS,kBA9BrB,WAG0B,gCA2BC7F,EAAa,EAAC,gCACrC,oBAAQ6F,QAAS,kBAAMsB,GAAwBD,EAAoB,EAAC,SAChEA,EAEE,0BADA,+BAGN,oBAAQrB,QAAS,kBAAMoB,GAAqBD,EAAiB,EAAC,SAC1DA,EAA4C,qBAAzB,0BAEvB,kBAAKZ,MAAO,CAAEC,QAASa,EAAsB,GAAK,QAAS,8BAExDrI,aAAe,EAAfA,EAAiBtL,KAAI,SAACgL,EAAgBiH,GACrC,OACE,yBACE,UAACgB,GAAkB,CAACjI,eAAgBA,KAD9BiH,EAIZ,QAEF,kBAAKY,MAAO,CAAEC,QAASW,EAAmB,GAAK,QAAS,yBAWpD,QAXoD,EAErDxC,aAAY,EAAZA,EAAcjR,KAAI,SAACkX,EAAUjF,GAC5B,OACE,2BACE,UAACG,GAAe,CACdnP,YAAaiU,EACb7E,SAAU,SAACwC,GAAI,OAAKD,EAAqBC,EAAK,KAHxC5C,EAOd,WAAE,QAAI,oBAER,oBACA,oBACA,oBACA,6BACE,0GAIA,oBACA,mBAAM,SAEN,mBACEY,MAAO,CAAEsE,MAAO,KAChBC,YAAY,qBACZC,SAAU,SAAC9E,GAAC,OAAKqC,EAAqBrC,EAAEnQ,OAAOM,MAAM,EACrDA,MAAOmR,aAAmB,EAAnBA,EAAqBxP,eAE7BwP,GACC,mCACE,kDACA,UAACzB,GAAe,CAACnP,YAAa4Q,OAE9B,KACHA,GACC,mCACE,oBACA,oBACA,oBAAQvB,QAAS,SAACgF,GAAC,OAAKhB,GAAqB,EAAC,+CAG9C,sBAEA,MACJ,oBACA,mBAAM,qCAEN,mBACE7T,KAAK,OACL4U,SAAU,SAAC9E,GAAC,OAAKyB,EAAgBzB,EAAEnQ,OAAOmV,MAAO,GAAG,KAEtD,mBACC1D,GAAuBE,GACtB,mCACE,oBACA,oBAAQzB,QAAS,SAACgF,GAAC,OAAKvB,GAAU,EAAC,8BAEnC,KACHlC,GAAuBE,GACtB,mCACE,oBACA,oBAAQzB,QAAS,SAACgF,GAAC,OAAKpB,GAAc,EAAC,oCAEvC,KACHrC,GAAuBE,GACtB,mCACE,oBACA,oBACEzB,QAAS,SAACgF,GAAC,OACTnB,EACE1X,EAA4B0Q,sCAC7B,EACF,8CAKH,KACH0E,GAAuBE,GACtB,mCACE,oBACA,oBACEzB,QAAS,SAACgF,GAAC,OACTnB,EACE1X,EAA4B+Y,qCAC7B,EACF,6CAKH,MACJ,mBACCzD,GACC,mCACE,oBAAQzB,QAAS,SAACgF,GAAC,OAAKjB,GAAgB,EAAC,+BACzC,sBAEA,MACJ,oBACA,mBAAM,sDAEN,mBAAM,gCACN,mBACE5T,KAAK,OACL4U,SAAQ,oCAAE,WAAO9E,GAAC,kEACO,OADP,KACVkE,GAAiB,SAAOlE,EAAEnQ,OAAOmV,MAAO,GAAGvB,cAAa,qIAAC,mDADzD,MAIV,oBACA,sBACEnD,MAAO,CAAEsE,MAAO,IAAKM,OAAQ,KAC7B/U,MAAOyR,EACPkD,SAAQ,oCAAE,WAAO9E,GAAC,kFAAWkE,GAAkBlE,EAAEnQ,OAAOM,OAAM,sIAAtD,KAETuR,GAAuBF,GACtB,mCACE,oBACA,oBAAQzB,QAAS,SAACgF,GAAC,OAAKlB,GAAgB,EAAC,gCAEzC,UAIZ,EAQA,SANY,WAAH,OACP,iBAAKsB,UAAU,MAAK,UAClB,UAACxE,GAAS,KACN,EC1hBKyE,EAAAA,WACXvC,SAASwC,eAAe,SAErBC,QACH,UAAC,aAAgB,WACf,UAAC,GAAG,+NCHO,SAAStL,OAEpB,GAAGzF,OAAOC,YACN,OAAOD,OAAOC,YAElB,IAAI+Q,cACAC,eACAC,aACAC,gBAAkB,EAClBC,QAAU,EACVC,UAAY,EACZC,SAAW,EACXC,SAAW,EACXC,aAAexR,OAAOmB,QACtBsQ,mCAAoC,EACpCC,0BAA2B,EAK3BzR,YAcJ,SAAS0R,gBACL,IAA6BC,EAAzBC,EAAIjG,UAAUkG,UAAgBC,EAAGF,EAAGhR,MAAM,2EAA6E,GAC3H,MAAG,WAAWmR,KAAKD,EAAE,IAEV,CAAE7X,KAAK,KAAM8K,SADpB4M,EAAO,kBAAkBK,KAAKJ,IAAO,IACJ,IAAM,IAE/B,WAATE,EAAE,IAEU,OADXH,EAAMC,EAAGhR,MAAM,iCAEJ,CAAE3G,KAAM0X,EAAI,GAAGzR,QAAQ,MAAO,SAAU6E,QAAS4M,EAAI,KAEpEG,EAAGA,EAAE,GAAI,CAACA,EAAE,GAAIA,EAAE,IAAK,CAACnG,UAAUsG,QAAStG,UAAUuG,WAAY,MACtB,OAAtCP,EAAMC,EAAGhR,MAAM,qBAChBkR,EAAEK,OAAO,EAAG,EAAGR,EAAI,IAChB,CAAC1X,KAAK6X,EAAE,GAAG/M,QAAQ+M,EAAE,IAChC,CAzBI9R,YAFDuR,WAEe,IAAIrQ,SAAQ,SAASC,EAASiR,GAExCpB,eAAiB7P,EACjB4P,cAAgBqB,CACpB,IAGc,CAAC,EAmBnB,IAAIC,aAAeX,gBAEnB,SAASY,kBAAkBC,EAAOC,GAE9B,GAAuB,oBAAbC,QAEV,OAAIF,GAASvS,YAAY0S,mBACP1S,YAAY4F,gBAEZ5F,YAAY2S,oBAEZ3S,YAAY4S,sBAL9B,CASJ,CAEA,SAASjN,cAAc4M,GACZA,IAAUvS,YAAY4F,iBACxB2M,IAAUvS,YAAY2S,gBACtBJ,IAAUvS,YAAY4S,iBAI3B5S,YAAY0S,kBAAoBH,EAC5BvS,YAAY0S,oBAAsB1S,YAAY4F,iBAC9C0M,kBAAkBtS,YAAY2S,eAAgB,yCAC9C3S,YAAY0S,oBAAsB1S,YAAY2S,gBAC9CL,kBAAkBtS,YAAY2S,eAAgB,wCAC9C3S,YAAY0S,oBAAsB1S,YAAY4S,iBAC9CN,kBAAkBtS,YAAY2S,eAAgB,yCAC/CE,6BAEK7S,YAAY0S,oBAAsB1S,YAAY4F,iBAC9C7F,OAAO+S,YAAY,sBAAuB,KAC1C9S,YAAY0S,oBAAsB1S,YAAY2S,gBAC9C5S,OAAO+S,YAAY,qBAAsB,KACzC9S,YAAY0S,oBAAsB1S,YAAY4S,iBAC9C7S,OAAO+S,YAAY,sBAAuB,OAjB9CR,kBAAkBtS,YAAY4S,gBAAiB,4CAA8CL,EAmBrG,CAEA,SAASQ,qBAEL/S,YAAYgT,qBAAuB,EACnChT,YAAYiT,4BAA8B,EAC1CjT,YAAYuJ,2BAA6B,EACzCvJ,YAAYkT,8BAAgC,EAC5ClT,YAAYmT,sBAAwB,EACpCnT,YAAYoT,6BAA+B,EAC3CpT,YAAYqT,4BAA8B,EAC1CrT,YAAYsT,+BAAiC,EAC7CtT,YAAYuK,yBAA2B,IAEvCvK,YAAY1H,iBAAmB,KAE/B0H,YAAYyK,mCAAqC,EAEjDzK,YAAYuT,sCAAwC,EAEpDvT,YAAYoI,sCAAwC,EACpDpI,YAAYwT,uCAAyC,EACrDxT,YAAYyQ,qCAAuC,EAEnDzQ,YAAYyT,uBAAyB,GACrCzT,YAAY0T,mBAAqB,GACjC1T,YAAY2T,iBAAmB,GAC/B3T,YAAY4T,6BAA+B,KAC3C5T,YAAY6T,sBAAwB,EAEpC7T,YAAY8T,2BAA6B,iEACzC9T,YAAY+T,2BAA6B,mDACzC/T,YAAYgU,mBAAqB,qEACjChU,YAAYiU,mBAAqB,uDAEjCjU,YAAYgI,0BAA4B,+DACxChI,YAAY6H,0BAA4B,6EACxC7H,YAAYiI,0BAA4B,+DACxCjI,YAAY8H,0BAA4B,6EAExC9H,YAAYkU,uBAAyB,EACrClU,YAAY+G,mBAAqB,EACjC/G,YAAYmU,iBAAmB,EAC/BnU,YAAYoU,6BAA+B,GAC3CpU,YAAYqU,oBAAsB,MAElCrU,YAAYsU,uBAAyB,EACrCtU,YAAYuU,uBAAyB,EACrCvU,YAAYwU,qBAAuB,EAEnCxU,YAAYyU,8CAAgD,EAC5DzU,YAAY6G,wCAA0C,EACtD7G,YAAY0U,4CAA8C,EAE1D1U,YAAY2U,sCAAwC,EACpD3U,YAAY4U,qCAAuC,EAEnD5U,YAAY6U,mCAAqC,EACjD7U,YAAYuT,sCAAwC,EACpDvT,YAAY8U,qCAAuC,EACnD9U,YAAY+U,mCAAqC,EACjD/U,YAAYgV,uCAAyC,EACrDhV,YAAYiV,mCAAqC,EACjDjV,YAAYkV,2CAA6C,EACzDlV,YAAYmV,4CAA8C,EAC1DnV,YAAYoV,4CAA8C,EAC1DpV,YAAYqV,oCAAsC,EAClDrV,YAAYsV,4CAA8C,GAC1DtV,YAAYuV,sCAAwC,GACpDvV,YAAYwV,mCAAqC,GAEjDxV,YAAYyV,oCAAsC,IAElDzV,YAAY0V,4BAA8B,EAE1C1V,YAAY2V,kBAAoB,EAChC3V,YAAY4V,gCAAkC,GAE9C5V,YAAY6V,wBAA0B,EACtC7V,YAAY8V,4BAA8B,EAC1C9V,YAAY+V,kBAAoB,EAEhC/V,YAAYgW,6CAA+C,EAC3DhW,YAAYiW,8CAAgD,EAC5DjW,YAAYkW,qDAAuD,EACnElW,YAAYmW,8CAAgD,EAC5DnW,YAAYoW,+CAAiD,EAC7DpW,YAAYqW,sDAAwD,EACpErW,YAAYsW,8CAAgD,IAC5DtW,YAAYuW,0BAA4B,EAExCvW,YAAYwW,0BAA4B,EACxCxW,YAAYyW,0BAA4B,EAExCzW,YAAY0W,2BAA6B,EACzC1W,YAAY2W,8BAAgC,EAC5C3W,YAAY4W,gCAAkC,EAE9C5W,YAAY6W,kCAAoC,EAChD7W,YAAY8W,kCAAoC,EAChD9W,YAAY+W,kCAAoC,EAChD/W,YAAYgX,mCAAqC,EACjDhX,YAAYiX,kCAAoC,EAChDjX,YAAYkX,4CAA8C,GAE1DlX,YAAYmX,6BAA+B,EAC3CnX,YAAYoX,4BAA8B,EAC1CpX,YAAYqX,4BAA8B,EAC1CrX,YAAYsX,4BAA8B,EAC1CtX,YAAYuX,gCAAkC,EAC9CvX,YAAYwX,gCAAkC,EAC9CxX,YAAYyX,gCAAkC,EAC9CzX,YAAY0X,qCAAuC,IACnD1X,YAAYmH,8CAAgD,IAC5DnH,YAAYqH,8CAAgD,IAC5DrH,YAAY2X,0CAA4C,IACxD3X,YAAY4X,mDAAqD,IACjE5X,YAAY6X,mDAAqD,IAEjE7X,YAAY4F,gBAAkB,EAC9B5F,YAAY2S,eAAiB,EAC7B3S,YAAY4S,gBAAkB,EAE9B5S,YAAY8X,mBAAqB,EACjC9X,YAAY+X,mCAAqC,EACjD/X,YAAYgY,mCAAqC,EACjDhY,YAAYiY,4BAA8B,EAC1CjY,YAAYkY,4BAA8B,UAC1ClY,YAAYmY,qCAAuC,UACnDnY,YAAYoY,2BAA6B,WAEzCpY,YAAYqY,wBAA0B,EACtCrY,YAAYsY,8BAAgC,EAC5CtY,YAAYuY,2BAA6B,EACzCvY,YAAYwY,wBAA0B,EAEtCxY,YAAYyY,gCAAkC,EAC9CzY,YAAY0Y,yBAA2B,EACvC1Y,YAAY2Y,sBAAwB,EACpC3Y,YAAY4Y,qBAAuB,EAEnC5Y,YAAY6Y,qBAAuB,EACnC7Y,YAAY8Y,sBAAwB,EACpC9Y,YAAY+Y,qBAAuB,EAEnC/Y,YAAYgZ,oBAAsB,EAClChZ,YAAYiZ,mBAAqB,EACjCjZ,YAAYkZ,iBAAmB,EAC/BlZ,YAAYmZ,iBAAmB,EAE/BnZ,YAAYoZ,8BAAgC,EAC5CpZ,YAAYqZ,eAAiB,EAC7BrZ,YAAYsZ,aAAe,EAE3BtZ,YAAYuZ,uBAAyB,EACrCvZ,YAAYwZ,oBAAsB,EAClCxZ,YAAYyZ,uBAAyB,EACrCzZ,YAAY0Z,gCAAkC,EAC9C1Z,YAAY2Z,8BAAgC,GAC5C3Z,YAAY4Z,sCAAwC,GACpD5Z,YAAY6Z,qBAAuB,GACvC,CAEA,SAASC,YAAYC,GACjB,SAASC,EAAUC,EAAMC,GACrB,IAAItd,EACJ,IACIA,EAASud,EAAUF,GAAMC,EAG7B,CAFE,MAAO7a,GACL,OAAO6B,QAAQkR,OAAO/S,EAC1B,CACA,OAAIzC,EAAOwd,KACAxd,EAAOjB,MAEPuF,QAAQC,QAAQvE,EAAOjB,OAAOoT,KAAKsL,EAAaC,EAE/D,CACA,IAAIH,EAAYJ,EAAcQ,MAAM7a,UAAU8a,MAAMC,KAAKC,UAAW,IAChEL,EAAcL,EAAUW,KAAKX,EAAW,QACxCM,EAAaN,EAAUW,KAAKX,EAAW,SAC3C,OAAOK,GACX,CAEA,SAASO,OAGL,MAA8B,OAAtBvI,aAAapY,MAAuC,SAAtBoY,aAAapY,IACvD,CAEA,SAAS4gB,QACL,OAAQlP,UAAUkG,UAAUjR,MAAM,UAC9B+K,UAAUkG,UAAUjR,MAAM,UAC1B+K,UAAUkG,UAAUjR,MAAM,UAClC,CAEA,SAASiS,2BAGL,OAAG+H,SAGuB,QAAtBvI,aAAapY,OAGS,cAAtBoY,aAAapY,MACbqX,UAAW,GACJ,GAGc,UAAtBe,aAAapY,MACZkX,SAAU,EACPkB,aAAatN,SAAW,IAON,YAAtBsN,aAAapY,MACZmX,WAAY,EACTiB,aAAatN,SAAW,IAON,WAAtBsN,aAAapY,KACToY,aAAatN,SAAW,GAQN,WAAtBsN,aAAapY,MACZoX,UAAW,EACRgB,aAAatN,SAAW,SAF/B,GAQJ,CAGA,SAASjC,aAAa7I,GAClB,GAAI4gB,QAGA,OAAOC,2CAA2C,eAAgB,CAAC7gB,IAEvE,GAAI2gB,OAAQ,CAER,GAAI3gB,EAAK2G,MAAM,mBACX,IAII,OADgCyN,SAASwC,eAAe,mBACvB/N,aAAa7I,EAUlD,CARA,MAAOuR,GACH,IAEI,OADyB6C,SAASwC,eAAe,0BACvB/N,aAAa7I,EAI3C,CAFA,MAAOoF,GACH,KAAO,0HACX,CACJ,CAGJ,IAEI,OADyBgP,SAASwC,eAAe,mBACvB/N,aAAa7I,EAK3C,CAHA,MAAOuR,GAEH,OAAO,IAAIuP,cAAc9gB,EAC7B,CACJ,CAEA,OAAOgX,aAAanO,aAAa7I,EACrC,CAEA,SAAS+gB,mBAAmBC,GAKxB,OAJIA,EAAS,IACTA,EAAS,WAAaA,EAAS,GAG5BA,EAAOvd,SAAS,IAAIC,aAC/B,CAEA,SAASud,wBAAwB1P,GAC7B,IAAInM,EAAMmM,EAAEvQ,QAMZ,OALKoE,EAEMmM,EAAEyP,SACT5b,GAAO,OAAS2b,mBAAmBxP,EAAEyP,QAAU,KAF/C5b,EAAMmM,EAIHnM,CACX,CAEA,SAASY,aAAakb,GAClB,GAAGtI,4BAA8B+H,QAAUC,QACvC,OAAOK,wBAAwBC,GAGnC,IACI,OAAOlK,aAAahR,cAGxB,CAFE,MAAMuL,GACJ,OAAO0P,wBAAwBC,EACnC,CACJ,CAGA,SAASC,uBACL,OAAOC,qBAAqBD,sBAChC,CAGA,SAASra,kBAAkB9G,GACvB,OAAOgX,aAAalQ,kBAAkB9G,EAC1C,CAGA,IAAIqhB,sCAAwC,CACxCC,eAAiB,EACjBC,UAAY,CAAC,EAGbC,kBAAoB,SAA2BC,EAAYC,GACvD,IAAIC,EAAWN,sCAAsCE,UAAUE,GAC1DE,GACLA,EAAS/V,MAAM,KAAK8V,EACxB,EAMAlB,KAAO,SAAcoB,EAActd,EAAMqd,GACrC,IAAIE,EAAcF,GAAgC,mBAAbA,EACjCF,EAAaI,EAAcR,sCAAsCC,iBAAmB,EAEpFO,IACAR,sCAAsCE,UAAUE,GAAcE,GAElE,IAAIG,EAAS1N,SAASC,cAAc,UAChC0N,EAAU,IAAIzB,MAAM,gBACxB,IACIwB,EAAOE,aAAa,MAAO,gBAAkBJ,EAAe,IAAMH,EAAY,IAAMQ,mBAAmBlQ,KAAKC,UAAU1N,EAAMyd,IAGhI,CAFE,MAAMxQ,GACJ+B,MAAM/B,EACV,CACA6C,SAAS8N,gBAAgB3N,YAAYuN,GACrCA,EAAOK,WAAWC,YAAYN,GAC9BA,EAAS,IACb,GAGJ,SAASjB,2CAA2Ce,aAAcS,OAC9D,IAAIC,OACAC,GAUJ,GATAlB,sCAAsCb,KAAKoB,aAAcS,OAAO,SAAS9Q,EAAGiR,UACxED,GAAKhR,EACL,IAAI/N,IAAI,UAAUgf,SAClBC,KAAKjf,KACmB,iBAAZ8e,SACRA,OAASA,OAAOrc,QAAQ,SAAU,MAClCqc,OAASA,OAAOrc,QAAQ,SAAU,MAE1C,IACGsc,GACC,MAAMA,GACV,OAAOD,MACX,CAEA,SAASI,wCAEL,IAAK5c,OAAO6c,mCACZ,CACI,IAAIC,EAAMxO,SAASC,cAAc,OACjCuO,EAAIC,GAAK,kBACTD,EAAI/Q,MAAQ,uHACZ+Q,EAAIE,UAAY,koBAKhB1O,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYqO,GACrDxO,SAASwC,eAAe,6BAA6BoM,iBAAiB,SAAQ,WAE1EC,oBAAoB,qBACpB7O,SAASwC,eAAe,mBAAmB/E,MAAMqR,WAAa,QAClE,IAEAN,EAAII,iBAAiB,SAAQ,WAEzBC,oBAAoB,qBACpB7O,SAASwC,eAAe,mBAAmB/E,MAAMqR,WAAa,QAClE,IACAN,EAAI/Q,MAAMqR,WAAW,SACzB,CACJ,CACA,SAASC,mCACDrd,OAAOsd,uCACPtd,OAAOsd,wCACX5L,0BAA2B,EAC3B4J,qBAAqBiC,oBAAoBC,cAAeL,oBAC5D,CAEA,SAASM,qBACA5C,QAAWxJ,WAAcC,UACtBtR,OAAOsd,uCACPtd,OAAOsd,wCAEftd,OAAO+S,YAAY,2BAA4B,KAC/C/S,OAAOkd,iBAAiB,WAAW,SAAUQ,GACzC,GAA2B,iBAAhBA,EAAM7e,MAAuB6e,EAAM7e,KAAKgC,MAAM,wBAErD4Q,kCAAJ,CAEA,GAAGJ,WAAaC,SAChB,CAEI,IAAIpD,EAAMwP,EAAM7e,KAAK5C,UAAUyhB,EAAM7e,KAAK8e,QAAQ,QAAU,GAC5D,IAAKzP,EAAIrN,MAAM,oEAIX,OAFA0R,kBAAkBtS,YAAY4S,gBAAiB,YAAe3E,EAAM,iEACpEiP,sBAGJ,IAAIS,EAAUtP,SAASC,cAAc,UACrCqP,EAAQ1B,aAAa,OAAQ,mBAC7B0B,EAAQ1B,aAAa,MAAOhO,GAC5B0P,EAAQC,QAAUV,oBAClBS,EAAQE,OAAST,iCACjB/O,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYmP,EACzD,MACItC,qBAAqBiC,oBAAoBC,cAAeL,qBAE5D1L,mCAAoC,CApB1B,CAqBd,IAAG,EACP,CAGA,SAASsM,iBAQG,IAQIH,EAdTvM,WAAaC,SAEZmM,qBAGIrM,SAAWG,WACPqM,EAAUtP,SAASC,cAAc,WAC7B2N,aAAa,OAAQ,mBAC7B0B,EAAQ1B,aAAa,MAAO,6EAC5B0B,EAAQC,QAAUV,oBAClBS,EAAQE,OAASL,mBACjBnP,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYmP,MAGjDA,EAAUtP,SAASC,cAAc,WAC7B2N,aAAa,OAAQ,mBAC7B0B,EAAQ1B,aAAa,MAAO,6EAC5B0B,EAAQC,QAAUV,oBAClBS,EAAQE,OAASL,mBACjBnP,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYmP,GAGjE,CAGA,SAASI,oBAEL,IAAIC,EAAO3P,SAASC,cAAc,UAMlC,GALA0P,EAAK/B,aAAa,KAAM,sBACxB+B,EAAK/B,aAAa,OAAQ,uBAC1B+B,EAAK/B,aAAa,QAAS,sBAC3B5N,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYwP,GACrD/M,aAAe5C,SAASwC,eAAe,sBACpC+J,OACH,CACI,IAAIqD,EAAQ5P,SAASC,cAAc,UACnC2P,EAAMhC,aAAa,KAAM,0BACzBgC,EAAMhC,aAAa,UAAW,8CAC9BgC,EAAMhC,aAAa,QAAS,sBAC5B5N,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAYyP,GACrD,IAAIC,EAAQ7P,SAASC,cAAc,UACnC4P,EAAMjC,aAAa,KAAM,mBACzBiC,EAAMjC,aAAa,UAAW,8CAC9BiC,EAAMjC,aAAa,QAAS,sBAC5B5N,SAAS2O,qBAAqB,QAAQ,GAAGxO,YAAY0P,EACzD,CACJ,CAGA,SAASX,gBAELrM,gBAAkB,EACfK,WAECP,iBAEAjR,OAAO+S,YAAY,qBAAsB,IAEjD,CAGA,SAASoK,oBAAoB1K,QAEN,IAATA,GAAwC,YAAhB,gEAAOA,KACrCA,EAAM,qBACVtB,gBAAkB,EACfK,WAECR,cAAcyB,GAEdzS,OAAO+S,YAAY,yBAA0B,IAErD,CAGA,SAASqL,qBAEkB,IAApBjN,kBAEAE,YAEMK,0BACDkL,yCAERzL,gBAAkB,EACfK,WAECR,cAAc,2CAEdhR,OAAO+S,YAAY,yBAA0B,KAGrD,CAGA,SAASsL,cAAclE,GAEnB,OAAO,IAAIhZ,QAAQgZ,EACvB,CAEA,SAASmE,qBACL,IACiBvb,aAAa,kBAC1Bya,eAmBJ,CAjBA,MAAOle,GACHgP,SAASwC,eAAe,sBAAsB/E,MAAMC,QAAU,OAG9D,IAAIuS,EAAW3S,UAAU4S,UAAU,uBACnC,GAAID,EAGIpB,oBAFSoB,EAASE,cAEE,2CAGA,oCAIxBtB,oBAAoB,oBAE5B,CACJ,CAGA,SAASuB,uBAEL,IAAIC,EAAMrQ,SAASC,cAAc,OACjCoQ,EAAI3B,UAAY,6CAC8C,IAAzC2B,EAAI1B,qBAAqB,KAAKlhB,OAE/CohB,oBAAoB,uDAIrBrK,2BAECiL,iBACMvM,WAUqB,aAAxBlD,SAASsQ,YACRZ,oBACAM,sBAEAte,OAAOkd,iBAAiB,QAAQ,SAAUQ,GACtCM,oBACAM,oBACJ,IAAG,GAhBPte,OAAOkd,iBAAiB,WAAW,SAAUQ,GAClB,6BAAfA,EAAM7e,OAEVmf,oBACAM,qBACJ,IACA,EAaZ,CAEA,SAASO,iBAAiB5Y,GAEtBiL,aAAejL,CACnB,CAEA,SAAS6Y,sBAEL,aAAgD,IAAnC7e,YAAY8e,oBAAuC9e,YAAY8e,kBAGhF,CAoCA,OAjCA9e,YAAY+e,gBAAkB,QAC9B/e,YAAY8Z,YAAcA,YAC1B9Z,YAAYgf,IAAMJ,iBAClB5e,YAAY2F,cAAgBA,cAC5B3F,YAAYC,aAAeA,aAC3BD,YAAY6e,oBAAsBA,oBAE/BhM,6BAEC7S,YAAYe,kBAAoBA,kBAChCf,YAAYob,qBAAuBA,sBAGnCvI,6BAEA7S,YAAY8C,aAAeA,cAG5B/C,OAAOkf,yBAENC,WAAWf,mBAAoBpe,OAAOkf,0BAItCC,WAAWf,mBAAoB,KAGnCpL,qBAEA/S,YAAY0S,kBAAoB1S,YAAY4S,gBAC5C7S,OAAOC,YAAcA,YACrBye,uBAEO1e,OAAOC,WAClB","sources":["webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cades.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/storeType.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/oids-dictionary.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/errorCodes.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/certificateParser.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/bufferToHex.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/output.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/PluginConfig.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/CryptoError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getLastError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/canAsync.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/unwrap.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/Certificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/createObject.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getSystemInfo.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/checkIsSupportedCSPVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/isSupportedCadesVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/checkIsValidSystemSetup.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/checkPlugin.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/afterPluginLoaded.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/setCryptoProperty.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/validateCertificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/sign.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/signHash.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/signXml.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/encrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/decrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/openStore.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCertificates.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/findCertificateBySkid.ts","webpack://cryptopro-cades-example/./src/components/CertificateInfo.tsx","webpack://cryptopro-cades-example/./src/components/CryptoProviderInfo.tsx","webpack://cryptopro-cades-example/./src/App.tsx","webpack://cryptopro-cades-example/./src/index.tsx","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/vendor/cadesplugin_api.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Хранилище персональных сертификатов пользователя.\n */\nexport const CAPICOM_MY_STORE = 'My';\n\n/**\n * Тип подписи XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xml_signature_type\n */\nexport enum CADESCOM_XML_SIGNATURE_TYPE {\n  /**\n   * Вложенная подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0,\n\n  /**\n   * Оборачивающая подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1,\n\n  /**\n   * Подпись по шаблону.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2,\n}\n\n/**\n * Тип подписи XAdES-XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xades_type\n */\nexport enum CADESCOM_XADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (XAdES-X Long Type 1).\n   */\n  CADESCOM_XADES_DEFAULT = 0x00000010,\n\n  /**\n   * Тип подписи XAdES-A.\n   */\n  CADESCOM_XADES_A = 0x000007d0,\n\n  /**\n   * Тип подписи XAdES BES.\n   */\n  CADESCOM_XADES_BES = 0x00000020,\n\n  /**\n   * Тип подписи XAdES T.\n   */\n  CADESCOM_XADES_T = 0x00000050,\n\n  /**\n   * Тип подписи XAdES-X Long Type 1.\n   */\n  CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0,\n\n  /**\n   * Тип подписи XMLDSIG.\n   */\n  CADESCOM_XMLDSIG_TYPE = 0x00000000,\n}\n\n/**\n * Тип усовершенствованной подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_cades_type\n */\nexport const enum CADESCOM_CADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (CAdES-X Long Type 1).\n   */\n  CADESCOM_CADES_DEFAULT = 0,\n\n  /**\n   * Тип подписи CAdES BES.\n   */\n  CADESCOM_CADES_BES = 1,\n\n  /**\n   * Тип подписи CAdES T.\n   */\n  CADESCOM_CADES_T = 0x5,\n\n  /**\n   * Тип подписи CAdES-X Long Type 1.\n   */\n  CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d,\n\n  /**\n   * Тип подписи PKCS7.\n   */\n  CADESCOM_PKCS7_TYPE = 0xffff,\n}\n\n/**\n * Типы криптографических алгоритмов для XmlDsig\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-methods?id=Константы\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-samples/plugin-samples-sign-xml\n */\nexport enum XML_SIGNATURE_GOST_ALGORITHM_TYPE {\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411',\n\n  /**\n   * URL Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411',\n\n  /**\n   * URL Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3411Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3410Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3411Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3410Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512',\n}\n\n/**\n * The CAPICOM_CERTIFICATE_INCLUDE_OPTION enumeration type defines which certificates in a chain are saved.\n * This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-include-option\n */\nexport enum CAPICOM_CERTIFICATE_INCLUDE_OPTION {\n  /**\n   * Saves all certificates in the chain with the exception of the root entity.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0,\n\n  /**\n   * Saves the complete certificate chain.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1,\n\n  /**\n   * Saves only the end entity certificate.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2,\n}\n\n/**\n * Способ кодирования данных для подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_content_encoding_type\n */\nexport enum CADESCOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CADESCOM_ENCODE_ANY = -1,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CADESCOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CADESCOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Enumeration type indicates the encoding type used.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-encoding-type\n */\nexport enum CAPICOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_ENCODE_ANY = 0xffffffff,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CAPICOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CAPICOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Используется как параметр при открытии Хранилища через @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/store-open\n * Позволяет задать уровень доступа к открываемому Хранилищу.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-open-mode\n */\nexport enum CAPICOM_STORE_OPEN_MODE {\n  /**\n   * Open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_READ_ONLY = 0,\n\n  /**\n   * Open the store in read/write mode.\n   */\n  CAPICOM_STORE_OPEN_READ_WRITE = 1,\n\n  /**\n   * Open the store in read/write mode if the user has read/write permissions. If the user does not have read/write permissions, open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2,\n\n  /**\n   * Open existing stores only; do not create a new store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_EXISTING_ONLY = 128,\n\n  /**\n   * Include archived certificates when using the store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED = 256,\n}\n\n/**\n * Типы для указания расположения хранилища сертификатов.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_store_location\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-location\n */\nexport enum STORE_LOCATION {\n  /**\n   * Хранилище сертификатов в памяти компьютера. Любые изменения недопустимы.\n   */\n  CAPICOM_MEMORY_STORE = 0,\n  CADESCOM_MEMORY_STORE = 0,\n\n  /**\n   * Хранилище сертификатов компьютера. Если открыто на чтение/запись, то у вас есть права на изменения.\n   */\n  CAPICOM_LOCAL_MACHINE_STORE = 1,\n  CADESCOM_LOCAL_MACHINE_STORE = 1,\n\n  /**\n   * Хранилище сертификатов текущего пользователя. Доступ для изменения доступен для текущего пользователя.\n   */\n  CAPICOM_CURRENT_USER_STORE = 2,\n  CADESCOM_CURRENT_USER_STORE = 2,\n\n  /**\n   * Хранилище сертификатов в Active Directory.. Доступно только для чтения. Нельзя добавить или удалить сертификаты из данного хранилища.\n   */\n  CAPICOM_ACTIVE_DIRECTORY_USER_STORE = 3,\n\n  /**\n   * Хранилище сертификатов на смарткартах (поддерживается только с КриптоПро CSP 5.0.11823 и выше). Объявлено и доступно с CAPICOM 2.0.\n   */\n  CAPICOM_SMART_CARD_USER_STORE = 4,\n\n  /**\n   * Хранилище сертификатов из контейнеров закрытых ключей. В данный Store попадают все сертификаты из контейнеров закрытых ключей, которые доступны в системе в момент открытия.\n   * Доступно с CAdESCOM Plugin 2.0.13292\n   */\n  CADESCOM_CONTAINER_STORE = 100,\n}\n\n/**\n * The CAPICOM_CERT_INFO_TYPE enumeration type defines what information is to be queried from a certificate.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-cert-info-type\n * @type {number}\n */\nexport enum CAPICOM_CERT_INFO_TYPE {\n  /**\n   * Returns the display name from the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0,\n\n  /**\n   * Returns the display name of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1,\n\n  /**\n   * Returns the email address of the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_EMAIL_NAME = 2,\n\n  /**\n   * Returns the email address of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_EMAIL_NAME = 3,\n\n  /**\n   * Returns the UPN of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_UPN = 4,\n\n  /**\n   * Returns the UPN of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_UPN = 5,\n\n  /**\n   * Returns the DNS name of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_DNS_NAME = 6,\n\n  /**\n   * Returns the DNS name of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_DNS_NAME = 7,\n}\n\n/**\n * The CAPICOM_CERTIFICATE_FIND_TYPE enumeration type defines the type of search criteria used to find specific certificates. This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-find-type\n * @type {number}\n */\nexport enum CAPICOM_CERTIFICATE_FIND_TYPE {\n  /**\n   * Returns certificates matching a specified SHA1 hash.\n   */\n  CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0,\n\n  /**\n   * Returns certificates whose subject name exactly or partially matches a specified subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1,\n\n  /**\n   * Returns certificates whose issuer name exactly or partially matches a specified issuer name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2,\n\n  /**\n   * Returns certificates whose root subject name exactly or partially matches a specified root subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3,\n\n  /**\n   * Returns certificates whose template name matches a specified template name.\n   */\n  CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4,\n\n  /**\n   * Returns certificates that have an extension that matches a specified extension.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENSION = 5,\n\n  /**\n   * Returns certificates that have an extended property whose property identifier matches a specified property identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6,\n\n  /**\n   * Returns certificates in the store that have either an enhanced key usage extension or property combined with a usage identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7,\n\n  /**\n   * Returns certificates containing a specified policy OID.\n   */\n  CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8,\n\n  /**\n   * Returns certificates whose time is valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9,\n\n  /**\n   * Returns certificates whose time is not yet valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10,\n\n  /**\n   * Returns certificates whose time has expired.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11,\n\n  /**\n   * Returns certificates containing a key that can be used in the specified manner.\n   */\n  CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12,\n}\n\n/**\n * The CAPICOM_KEY_USAGE enumeration defines the ways in which a key can be used. Introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-key-usage\n * @type {number}\n */\nexport enum CAPICOM_KEY_USAGE {\n  /**\n   * The key can be used to create a digital signature.\n   */\n  CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128,\n\n  // other enums omited.\n}\n\n//region (cert.Find(..)) https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n/**\n * Возвращает DWORD значение, указывающее на закрытый ключ из\n *  CERT_KEY_CONTEXT_PROP_ID, если он есть.\n *  Иначе, если CERT_KEY_PROV_INFO_PROP_ID есть,\n *  то он будет источником dwKeySpec.\n *  (Find(CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,CERT_KEY_SPEC_PROP_ID)\n *   - вернет сертификаты, у к-ых есть ссылка на закрытый ключ)\n * @type {number}\n */\nexport const CERT_KEY_SPEC_PROP_ID = 6;\n\n/**\n * Свойства хэш объекта.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n * @type {number}\n */\nexport enum CAPICOM_PROPID {\n  /**\n   * Неизвестный тип свойства.\n   */\n  CAPICOM_PROPID_UNKNOWN = 0,\n\n  /**\n   * Обработчик ключа контейнера с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_HANDLE = 1,\n  /**\n   * Вывод только сертификатов с информацией о контейнерах с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_INFO = 2,\n\n  /**\n   * The properties of a hash object.\n   */\n  CAPICOM_PROPID_HASH_PROP = 3,\n\n  /**\n   * A SHA1 hash object.\n   */\n  CAPICOM_PROPID_SHA1_HASH = 3,\n\n  /**\n   * An MD5 hash object.\n   */\n  CAPICOM_PROPID_MD5_HASH = 4,\n\n  /**\n   * The key context.\n   */\n  CAPICOM_PROPID_KEY_CONTEXT = 5,\n\n  /**\n   * The specifications for a key.\n   */\n  CAPICOM_PROPID_KEY_SPEC = 6,\n\n  /**\n   * Information about whether the hash of the public key is reserved.\n   */\n  CAPICOM_PROPID_PUBKEY_HASH_RESERVED = 8,\n\n  /**\n   * A certificate trust list (CTL) usage.\n   */\n  CAPICOM_PROPID_CTL_USAGE = 9,\n\n  /**\n   * An enhanced key usage (EKU).\n   */\n  CAPICOM_PROPID_ENHKEY_USAGE = 9,\n\n  /**\n   * The location of the next update to the certificate revocation list (CRL).\n   */\n  CAPICOM_PROPID_NEXT_UPDATE_LOCATION = 10,\n\n  /**\n   * A human-readable name.\n   */\n  CAPICOM_PROPID_FRIENDLY_NAME = 11,\n\n  /**\n   * A file that contains a private key.\n   */\n  CAPICOM_PROPID_PVK_FILE = 12,\n\n  /**\n   * A human-readable description.\n   */\n  CAPICOM_PROPID_DESCRIPTION = 13,\n\n  /**\n   * The state of the access.\n   */\n  CAPICOM_PROPID_ACCESS_STATE = 14,\n\n  /**\n   * A hash of the signature.\n   */\n  CAPICOM_PROPID_SIGNATURE_HASH = 15,\n\n  /**\n   * Smart card data.\n   */\n  CAPICOM_PROPID_SMART_CARD_DATA = 16,\n\n  /**\n   * An Encrypting File System (EFS).\n   */\n  CAPICOM_PROPID_EFS = 17,\n\n  /**\n   * Data created using the cryptographic protocols and algorithms owned by the National Institute of Standards and Technology (NIST).\n   */\n  CAPICOM_PROPID_FORTEZZA_DATA = 18,\n\n  /**\n   * Information about whether the object is archived.\n   */\n  CAPICOM_PROPID_ARCHIVED = 19,\n\n  /**\n   * A key identifier.\n   */\n  CAPICOM_PROPID_KEY_IDENTIFIER = 20,\n\n  /**\n   * Auto-enrollment information for a certificate.\n   */\n  CAPICOM_PROPID_AUTO_ENROLL = 21,\n\n  /**\n   * Parameters for a public key algorithm.\n   */\n  CAPICOM_PROPID_PUBKEY_ALG_PARA = 22,\n\n  /**\n   * Information used to update dynamic cross certificates.\n   */\n  CAPICOM_PROPID_CROSS_CERT_DIST_POINTS = 23,\n\n  /**\n   * Information about whether the object is reserved in Internet Explorer 3.0.\n   */\n  CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH = 24,\n\n  /**\n   * The MD5 hash of the subject's public key.\n   */\n  CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH = 25,\n\n  /**\n   * Information about the certificate's enrollment.\n   */\n  CAPICOM_PROPID_ENROLLMENT = 26,\n\n  /**\n   * A date stamp.\n   */\n  CAPICOM_PROPID_DATE_STAMP = 27,\n\n  /**\n   * The MD5 hash of the issuer's serial number.\n   */\n  CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH = 28,\n\n  /**\n   * The MD5 hash of the subject's name.\n   */\n  CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH = 29,\n\n  /**\n   * Extended information about an error.\n   */\n  CAPICOM_PROPID_EXTENDED_ERROR_INFO = 30,\n\n  /**\n   * Information about the renewal of a certification authority.\n   */\n  CAPICOM_PROPID_RENEWAL = 64,\n\n  /**\n   * An archived hash of a key.\n   */\n  CAPICOM_PROPID_ARCHIVED_KEY_HASH = 65,\n\n  /**\n   * Information about the first reservation.\n   */\n  CAPICOM_PROPID_FIRST_RESERVED = 66,\n\n  /**\n   * Information about the most recent reservation.\n   */\n  CAPICOM_PROPID_LAST_RESERVED = 0x00007fff,\n\n  /**\n   * Information about the first user.\n   */\n  CAPICOM_PROPID_FIRST_USER = 0x00008000,\n\n  /**\n   * Information about the most recent user.\n   */\n  CAPICOM_PROPID_LAST_USER = 0x0000ffff,\n}\n\nexport const CAPICOM_OID_OTHER = 0;\n\nexport const CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\nexport const CAPICOM_EKU_CLIENT_AUTH = 2;\n\nexport const CAPICOM_EKU_SMARTCARD_LOGON = 5;\n\nexport const CAPICOM_EKU_OTHER = 0;\n\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\n\nexport const CADESCOM_ATTRIBUTE_OTHER = -1;\n\nexport const CADESCOM_STRING_TO_UCS2LE = 0;\n\nexport const CADESCOM_BASE64_TO_BINARY = 1;\n\nexport const CADESCOM_DISPLAY_DATA_NONE = 0;\n\nexport const CADESCOM_DISPLAY_DATA_CONTENT = 1;\n\nexport const CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\n/**\n * Тип алгоритма шифрования.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_encryption_algorithm\n */\nexport enum CADESCOM_ENCRYPTION_ALGORITHM {\n  /**\n   * Алгоритм RSA RC2.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0,\n\n  /**\n   * Алгоритм RSA RC4.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1,\n\n  /**\n   * Алгоритм DES.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_DES = 2,\n\n  /**\n   * Алгоритм 3DES.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3,\n\n  /**\n   * Алгоритм AES.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_AES = 4,\n\n  /**\n   * Алгоритм ГОСТ 28147-89.\n   */\n  CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25,\n}\n\nexport enum CADESCOM_HASH_ALGORITHM {\n  /**\n   * Алгоритм SHA1.\n   */\n  CADESCOM_HASH_ALGORITHM_SHA1 = 0,\n\n  /**\n   * Алгоритм MD2.\n   */\n  CADESCOM_HASH_ALGORITHM_MD2 = 1,\n\n  /**\n   * Алгоритм MD4.\n   */\n  CADESCOM_HASH_ALGORITHM_MD4 = 2,\n\n  /**\n   * Алгоритм MD5.\n   */\n  CADESCOM_HASH_ALGORITHM_MD5 = 3,\n\n  /**\n   * Алгоритм SHA1 с длиной ключа 256 бит.\n   */\n  CADESCOM_HASH_ALGORITHM_SHA_256 = 4,\n\n  /**\n   * Алгоритм SHA1 с длиной ключа 384 бита.\n   */\n  CADESCOM_HASH_ALGORITHM_SHA_384 = 5,\n\n  /**\n   * Алгоритм SHA1 с длиной ключа 512 бит.\n   */\n  CADESCOM_HASH_ALGORITHM_SHA_512 = 6,\n\n  /**\n   * Алгоритм ГОСТ Р 34.11-94.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100,\n\n  /**\n   * Алгоритм ГОСТ Р 34.11-2012 с длиной ключа 256 бит.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101,\n\n  /**\n   * \tАлгоритм ГОСТ Р 34.11-2012 с длиной ключа 512 бит.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102,\n\n  /**\n   * Алгоритм ГОСТ Р 34.11-94 HMAC.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110,\n\n  /**\n   * Алгоритм ГОСТ Р 34.11-2012 HMAC.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111,\n\n  /**\n   * Алгоритм ГОСТ Р 34.11-2012 HMAC.\n   */\n  CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112,\n}\n\nexport const CADESCOM_AllowNone = 0;\n\nexport const CADESCOM_AllowNoOutstandingRequest = 0x1;\n\nexport const CADESCOM_AllowUntrustedCertificate = 0x2;\n\nexport const CADESCOM_AllowUntrustedRoot = 0x4;\n\nexport const CADESCOM_SkipInstallToStore = 0x10000000;\n\nexport const CADESCOM_InstallCertChainToContainer = 0x20000000;\n\nexport const CADESCOM_UseContainerStore = 0x40000000;\n\nexport const ENABLE_CARRIER_TYPE_CSP = 0x01;\n\nexport const ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\n\nexport const ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\n\nexport const ENABLE_ANY_CARRIER_TYPE = 0x07;\n\nexport const DISABLE_EVERY_CARRIER_OPERATION = 0x00;\n\nexport const ENABLE_CARRIER_OPEN_ENUM = 0x01;\n\nexport const ENABLE_CARRIER_CREATE = 0x02;\n\nexport const ENABLE_ANY_OPERATION = 0x03;\n\nexport const CADESCOM_PRODUCT_CSP = 0;\n\nexport const CADESCOM_PRODUCT_OCSP = 1;\n\nexport const CADESCOM_PRODUCT_TSP = 2;\n\n/**\n * Тип медиа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_media_type\n */\nexport const enum CADESCOM_MEDIA_TYPE {\n  /**\n   * Реестр.\n   */\n  MEDIA_TYPE_REGISTRY = 0x00000001,\n\n  /**\n   * Жесткий диск.\n   */\n  MEDIA_TYPE_HDIMAGE = 0x00000002,\n\n  /**\n   * Облачный носитель.\n   */\n  MEDIA_TYPE_CLOUD = 0x00000004,\n\n  /**\n   * Смарт-карта или любое другое устройство с интерфейсом смарт-карты.\n   */\n  MEDIA_TYPE_SCARD = 0x00000008,\n}\n\nexport const XCN_CRYPT_STRING_BASE64HEADER = 0;\n\nexport const AT_KEYEXCHANGE = 1;\n\nexport const AT_SIGNATURE = 2;\n\nexport const CARRIER_FLAG_REMOVABLE = 1;\n\nexport const CARRIER_FLAG_UNIQUE = 2;\n\nexport const CARRIER_FLAG_PROTECTED = 4;\n\nexport const CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\n\nexport const CARRIER_FLAG_SECURE_MESSAGING = 16;\n\nexport const CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\n\nexport const CARRIER_FLAG_VIRTUAL = 128;\n\n/**\n * OID (атрибут) сертификата.\n * The OID object represents an object identifier (OID) that is used by several CAPICOM properties.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/oid\n */\nexport interface CAPICOM_OID {\n  readonly CAPICOM_OID_OTHER: 0;\n  readonly CAPICOM_OID_KEY_USAGE_EXTENSION: 10;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER_EXTENSION: 1;\n  readonly CAPICOM_OID_KEY_ATTRIBUTES_EXTENSION: 2;\n  readonly CAPICOM_OID_CERT_POLICIES_95_EXTENSION: 3;\n  readonly CAPICOM_OID_KEY_USAGE_RESTRICTION_EXTENSION: 4;\n  readonly CAPICOM_OID_LEGACY_POLICY_MAPPINGS_EXTENSION: 5;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME_EXTENSION: 6;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME_EXTENSION: 7;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS_EXTENSION: 8;\n  readonly CAPICOM_OID_SUBJECT_KEY_IDENTIFIER_EXTENSION: 9;\n  readonly CAPICOM_OID_PRIVATEKEY_USAGE_PERIOD_EXTENSION: 11;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME2_EXTENSION: 12;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME2_EXTENSION: 13;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS2_EXTENSION: 14;\n  readonly CAPICOM_OID_NAME_CONSTRAINTS_EXTENSION: 15;\n  readonly CAPICOM_OID_CRL_DIST_POINTS_EXTENSION: 16;\n  readonly CAPICOM_OID_CERT_POLICIES_EXTENSION: 17;\n  readonly CAPICOM_OID_POLICY_MAPPINGS_EXTENSION: 18;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER2_EXTENSION: 19;\n  readonly CAPICOM_OID_POLICY_CONSTRAINTS_EXTENSION: 20;\n  readonly CAPICOM_OID_ENHANCED_KEY_USAGE_EXTENSION: 21;\n  readonly CAPICOM_OID_CERTIFICATE_TEMPLATE_EXTENSION: 22;\n  readonly CAPICOM_OID_APPLICATION_CERT_POLICIES_EXTENSION: 23;\n  readonly CAPICOM_OID_APPLICATION_POLICY_MAPPINGS_EXTENSION: 24;\n  readonly CAPICOM_OID_APPLICATION_POLICY_CONSTRAINTS_EXTENSION: 25;\n  readonly CAPICOM_OID_AUTHORITY_INFO_ACCESS_EXTENSION: 26;\n  readonly CAPICOM_OID_SERVER_AUTH_EKU: 100;\n  readonly CAPICOM_OID_CLIENT_AUTH_EKU: 101;\n  readonly CAPICOM_OID_CODE_SIGNING_EKU: 102;\n  readonly CAPICOM_OID_EMAIL_PROTECTION_EKU: 103;\n  readonly CAPICOM_OID_IPSEC_END_SYSTEM_EKU: 104;\n  readonly CAPICOM_OID_IPSEC_TUNNEL_EKU: 105;\n  readonly CAPICOM_OID_IPSEC_USER_EKU: 106;\n  readonly CAPICOM_OID_TIME_STAMPING_EKU: 107;\n  readonly CAPICOM_OID_CTL_USAGE_SIGNING_EKU: 108;\n  readonly CAPICOM_OID_TIME_STAMP_SIGNING_EKU: 109;\n  readonly CAPICOM_OID_SERVER_GATED_CRYPTO_EKU: 110;\n  readonly CAPICOM_OID_ENCRYPTING_FILE_SYSTEM_EKU: 111;\n  readonly CAPICOM_OID_EFS_RECOVERY_EKU: 112;\n  readonly CAPICOM_OID_WHQL_CRYPTO_EKU: 113;\n  readonly CAPICOM_OID_NT5_CRYPTO_EKU: 114;\n  readonly CAPICOM_OID_OEM_WHQL_CRYPTO_EKU: 115;\n  readonly CAPICOM_OID_EMBEDED_NT_CRYPTO_EKU: 116;\n  readonly CAPICOM_OID_ROOT_LIST_SIGNER_EKU: 117;\n  readonly CAPICOM_OID_QUALIFIED_SUBORDINATION_EKU: 118;\n  readonly CAPICOM_OID_KEY_RECOVERY_EKU: 119;\n  readonly CAPICOM_OID_DIGITAL_RIGHTS_EKU: 120;\n  readonly CAPICOM_OID_LICENSES_EKU: 121;\n  readonly CAPICOM_OID_LICENSE_SERVER_EKU: 122;\n  readonly CAPICOM_OID_SMART_CARD_LOGON_EKU: 123;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_CPS: 124;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_USERNOTICE: 125;\n}\n\n/**\n * Список крипто-объектов для передачи в createObject, (cadesplugin|capicom).CreateObject|CreateObjectAsync()\n */\nexport const enum CRYPTO_OBJECTS {\n  /**\n   * Объект позволяющий взаимодействовать с хранилищем сертификатов.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/store\n   */\n  store = 'CAdESCOM.Store',\n\n  /**\n   * Объект задающий параметры создания и содержащий информацию об усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpsigner\n   */\n  signer = 'CAdESCOM.CPSigner',\n\n  /**\n   * Объект задающий способ подписания Xml файла.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/signedxml\n   */\n  signedXml = 'CAdESCOM.SignedXML',\n\n  /**\n   * Объект предоставляет свойства и методы для работы с подписанным документом XML.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/about\n   */\n  about = 'CAdESCOM.About',\n\n  /**\n   * Объект предоставляет функционал по усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cadessigneddata\n   */\n  signedData = 'CAdESCOM.CadesSignedData',\n\n  /**\n   * Объект предоставляет функционал для вычисления хэша.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cphasheddata\n   */\n  hashedData = 'CAdESCOM.HashedData',\n\n  /**\n   * Объект предоставляет функционал по шифрованию/расшифровке сообщения.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpenvelopeddata\n   */\n  envelopedData = 'CAdESCOM.CPEnvelopedData',\n\n  /**\n   * Объект сертификат.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpcertificate\n   */\n  certificate = 'CAdESCOM.Certificate',\n\n  /**\n   * Объект позволяет получить информацию о доступных криптопровайдерах.\n   * @see https://docs.cryptopro.ru/cades/plugin/certenroll/ccspinformations?id=ccspinformations\n   */\n  cspInformations = 'X509Enrollment.CCspInformations',\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Источники сертификатов (Где искать сертификаты?).\n */\nexport enum STORE_TYPE {\n  ALL = 'ALL',\n  USB_TOKEN = 'USB_TOKEN',\n  REGISTRY = 'REGISTRY',\n}\n","import { ICryptoProvider } from '../types';\n\n/**\n * Справочник типок криптопровайдеров, с которыми работает плагин (для проверки поддержки).\n */\nexport const CRYPTO_PROVIDERS: ICryptoProvider[] = [\n  {\n    ProviderType: 75,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 80,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 81,\n    ProviderName:\n      'Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 2,\n    ProviderName: 'Infotecs Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 77,\n    ProviderName: 'Infotecs GOST 2012/512 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 78,\n    ProviderName: 'Infotecs GOST 2012/1024 Cryptographic Service Provider',\n  },\n].map((c) => ({\n  ProviderName: c.ProviderName,\n  ProviderType: c.ProviderType,\n}));\n\n/**\n * Криптопровайдер по-умолчанию.\n */\nexport const DEFAULT_CRYPTO_PROVIDER = {\n  Default: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 80)!,\n  Fallback: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 2)!,\n};\n\n/**\n * Криптопровайдеры VipNet.\n */\nexport const VIP_NET_CRYPTO_PROVIDER_TYPES = Object.freeze([2, 77, 78]);\n\n/**\n * Криптопровайдеры КриптоПРО.\n */\nexport const CRYPTO_PRO_CRYPTO_PROVIDER_TYPES = Object.freeze([75, 80, 81]);\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Типы ГОСТовских алгоритмов.\n */\nexport enum GOST_KEY_ALGORITHM_TYPES {\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 256 бит.\n   */\n  GOST_R3410_12_256 = '1.2.643.7.1.1.1.1',\n\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 512 бит\n   */\n  GOST_R3410_12_512 = '1.2.643.7.1.1.1.2',\n}\n\n/**\n * OID ГОСТовских алгоритмов.\n */\nexport const GOST_KEY_ALGORITHM_OIDS: string[] = Object.values(\n  GOST_KEY_ALGORITHM_TYPES,\n);\n\n/**\n * OID SubjectKeyId расширения в сертификате.\n */\nexport const subjectKeyIdExtensionOid = '2.5.29.14';\n\n/**\n * OID атрибутов сертификата.\n */\nexport const attributeOids = {\n  commonName: '2.5.4.3',\n  surname: '2.5.4.4',\n  name: '2.5.4.42',\n  country: '2.5.4.6',\n  locality: '2.5.4.7',\n  region: '2.5.4.8',\n  street: '2.5.4.9',\n  organisation: '2.5.4.10',\n  department: '2.5.4.11',\n  post: '2.5.4.12',\n  ogrnip: '1.2.643.100.5',\n  ogrn: '1.2.643.100.1',\n  snils: '1.2.643.100.3',\n  inn: '1.2.643.3.131.1.1',\n  innLe: '1.2.643.100.4',\n  email: '1.2.840.113549.1.9.1',\n};\n","/**\n * Список возможных ошибок при работе с API CryptoPro Browser Plugin.\n * Это ошибки могут быть как от криптопровайдера (CSP), так и от операционной системы пользователя.\n * Часть ошибок описана тут @see https://docs.cryptopro.ru/pki/introduction/dllerrors\n * @type {{code: string, message: string}[]}\n */\nexport const CRYPTO_PRO_ERRORS = Object.freeze([\n  {\n    code: '0x80090008',\n    message:\n      'Указан неверный алгоритм. Операционная система не смогла выполнить операцию, так как криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить сертификат и проверить привязку к закрытому ключу, если не поможет, то переустановить криптопровайдер.',\n    // original: 'Код ошибки: 0x80090008 (Указан неверный алгоритм)'\n  },\n  {\n    code: '0x80090017',\n    message:\n      'Криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить криптопровайдер.',\n  },\n  {\n    code: '0x8007064A',\n    message:\n      'Возможно криптопровайдер КриптоПро частично удален с рабочего места или установлена устаревшая версия. Для устранения ошибки рекомендуется установить версию КриптоПро 4.0 и выше.',\n    // original: 'Ошибка КриптоПро CSP Загрузка информации о лицензии Код ошибки: 0x8007064A (Данные настройки для этого продукта повреждены. Обратитесь в службу поддержки организации)'\n  },\n  {\n    code: '0x80090019',\n    message:\n      'Набор ключей не определен. Проверьте на корректность сертификат и убедитесь что на машине установлен необходимый для него криптопровайдер.',\n    // original: 'Код ошибки: 0x80090019 (Набор ключей не определен.)'\n    // возникает так же если не установлен на компе криптопро\n  },\n  {\n    code: '0x8007139F',\n    message:\n      'Внутренняя ошибка КриптоПро. Группа или ресурс не находятся в нужном состоянии для выполнения требуемой операции. Вероятно не работает TSP сервер (служба штампов времени).',\n  },\n  {\n    code: '0x80070002',\n    message:\n      'Внутренняя ошибка КриптоПро. Если вы подписываете с помощью усовершенствованной подписи, убедитесь что ваши версии TSP client и OCSP client имеют неограниченную лицензию.',\n  },\n  {\n    code: '0xc2110128',\n    message:\n      'Внутренняя ошибка КриптоПро. Не удалось получить статус отзыва ЭП. Попробуйте повторить операцию позднее.',\n  },\n  {\n    code: '0xC2100121',\n    message:\n      'Внутренняя ошибка КриптоПро. Не задан адрес службы штампов времени.',\n  },\n  {\n    code: '0xC2110121',\n    message: 'Внутренняя ошибка КриптоПро. Не задан адрес службы OCSP.',\n  },\n  {\n    code: '0x80090020',\n    message:\n      'Внутренняя ошибка КриптоПро. Убедитесь, что на машине установлен только один криптопровайдер во избежание конфликтов ПО.',\n  },\n  {\n    code: '0x800B010A',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x800B0109',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x8007065B',\n    message: 'Истекла лицензия КриптоПро CSP',\n  },\n  {\n    code: '0x80092004',\n    message:\n      'Не установлена связь с закрытым ключом, привяжите личный сертификат к закрытому ключу.',\n  },\n  {\n    code: '0x8009200B',\n    message: 'Закрытый ключ не найден.',\n  },\n  {\n    code: '0x8000FFFF', // обычно если USB токен не вставлен\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x8000FFFF (Не удалось создать подпись из-за ошибки: Internal error)'\n  },\n  {\n    code: '0x80090016',\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x80090016 (Набор ключей не существует)'\n  },\n  {\n    code: '0x8009000D',\n    message:\n      'Ключ не существует. Для устранения ошибки рекомендуемся переустановить сертификат с повторной привязкой к закрытому ключу.',\n    // original: 'Код ошибки: 0x8009000D (Ключ не существует.)'\n  },\n  {\n    code: '0x8009200C',\n    message:\n      'Не удалось найти закрытый ключ для расшифровки зашифрованного документа.',\n  },\n  {\n    code: '0xC2110126',\n    message: 'Сертификат отозван.',\n  },\n  {\n    code: '0x000004C7',\n    message:\n      'Операция отменена пользователем. Необходимо обновить страницу и предоставить доступ к криптопровайдеру.',\n  },\n  {\n    code: '0x800704C7',\n    message: 'Операция отменена пользователем.',\n  },\n  {\n    code: '0x8010006E',\n    message: 'Операция отменена пользователем.',\n  },\n  {\n    code: '0x800705B9',\n    message: 'Ошибка разбора XML файла. Документ имеет некорректный формат.',\n    // original: '0x800705B9: Windows was unable to parse the requested XML data. (0x800705B9)'\n  },\n  {\n    code: '0x80090010',\n    message: 'Срок действия требуемого сертификата истёк или ещё не наступил.',\n    // original: 'Отказано в доступе. (0x80090010)'\n  },\n  {\n    code: '0x800B0101',\n    message: 'Срок действия требуемого сертификата истёк или ещё не наступил.',\n    // original: 'Истек/не наступил срок действия требуемого сертификата при проверке по системным часам или по отметке времени в подписанном файле. (0x800B0101)'\n  },\n  {\n    code: '0x8010006C',\n    message:\n      'Доступ к сертификату заблокирован, так как исчерпано число попыток ввести правильный PIN-код.',\n    // original: 'The card cannot be accessed because the maximum number of PIN entry attempts has been reached. (0x8010006C)'\n  },\n]);\n\n/**\n * Список кастомных ошибок для различных ситуаций.\n */\nexport const PLUGIN_ERRORS = Object.freeze({\n  'CBP-0': 'Неизвестная ошибка при работе с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-1': 'Не удалось инициализировать КриптоПро ЭЦП Browser plug-in.',\n  'CBP-2':\n    'Ошибка инициализации библиотеки для работы с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-3':\n    'Используется устаревшая версия КриптоПро ЭЦП Browser Plug-in. Необходимо провести обновление до последней доступной версии.',\n  'CBP-4':\n    'Используется устаревшая версия КриптоПро CSP. Необходимо провести обновление до версии 4.0 и выше.',\n  'CBP-5': 'Ошибка формата данных.',\n  'CBP-6': 'Сертификат не прошёл проверку, использование невозможно.',\n  'CBP-7': 'Неверные входные параметры.',\n  'CBP-8': 'Не установлен ни один криптопровайдер.',\n  'CBP-9': 'Неизвестный алгоритм ключа.',\n  'CBP-10': 'Не удалось прочитать данные сертификата.',\n  'CBP-11': 'Потеряно соединение с КриптоПро ЭЦП Browser plug-in.',\n});\n\n/**\n * Список текстов ошибок у котороых нет кода ошибок.\n */\nexport const ERRORS_WITHOUT_CODE = Object.freeze({\n  'Lost connection to extension': 'CBP-11',\n});\n","import { Buffer } from 'buffer';\n\nimport { Certificate as x509Certificate } from 'pkijs';\nimport { fromBER } from 'asn1js';\n\nimport { Certificate } from '../Certificate';\nimport {\n  GOST_KEY_ALGORITHM_OIDS,\n  attributeOids,\n  subjectKeyIdExtensionOid,\n} from '../constants/oids-dictionary';\nimport { CryptoError } from '../errors';\n\nimport { bufferToHex } from './bufferToHex';\n\n/**\n * Получить данные из сертификата.\n * @param target Объект данных (issuer или subject).\n * @param attributeName Наименование извлекаемого атрибута.\n * @throws {CryptoError} в случае ошибки.\n * @returns Извлеченные данные.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseValue(target: any, attributeName: string): string {\n  if (!target) {\n    const errorMessage = `Не задан объект для извлечения атрибута ${attributeName}`;\n\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n\n  return target?.typesAndValues?.find(\n    ({ type }: { type: string }): boolean =>\n      type == attributeOids[attributeName],\n  )?.value?.valueBlock?.value;\n}\n\n/**\n * Нормализовать ИНН.\n * @param inn ИНН.\n * @returns нормализованный ИНН.\n * @example\n * in 004028031214, out 4028031214\n * in 402701356218, out 402701356218\n */\nfunction normalizeInn(inn: string | null): string | null {\n  return inn && inn.length == 12 && inn.startsWith('00')\n    ? inn.substring(2, 12)\n    : inn;\n}\n\n/**\n * Парсит данные сертификата.\n * @param certificate Сертификат.\n * @throws {CryptoError} в случае ошибки.\n */\nexport function parseCertificate(certificate: Certificate) {\n  if (!certificate.certificateBase64Data) {\n    const errorMessage = 'Не загружена открытая часть сертификата.';\n\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n\n  try {\n    const asn1 = fromBER(\n      new Uint8Array(Buffer.from(certificate.certificateBase64Data, 'base64'))\n        .buffer,\n    );\n\n    const parsedCert = new x509Certificate({ schema: asn1.result });\n\n    const publishKeyAlgorithm =\n      parsedCert.subjectPublicKeyInfo.algorithm.algorithmId;\n\n    certificate.algorithm = publishKeyAlgorithm;\n    certificate.isGost = GOST_KEY_ALGORITHM_OIDS.includes(publishKeyAlgorithm);\n\n    const subjectKeyIdentifierExtension = parsedCert.extensions?.find(\n      ({ extnID }: { extnID: string }): boolean =>\n        extnID === subjectKeyIdExtensionOid,\n    );\n\n    certificate.subjectKeyId = bufferToHex(\n      subjectKeyIdentifierExtension?.parsedValue?.valueBlock?.valueHex,\n    );\n\n    Object.keys(certificate.issuer).forEach((key) => {\n      certificate.issuer[key] = parseValue(parsedCert.issuer, key);\n    });\n\n    Object.keys(certificate.subject).forEach((key) => {\n      certificate.subject[key] = parseValue(parsedCert.subject, key);\n    });\n\n    certificate.issuer.inn = normalizeInn(certificate.issuer.inn);\n    certificate.issuer.innLe = normalizeInn(certificate.issuer.innLe);\n    certificate.subject.innLe = normalizeInn(certificate.subject.innLe);\n    certificate.subject.inn = normalizeInn(certificate.subject.inn);\n\n    // TODO: здесь можно допарсить данные из открытой части сертификата\n  } catch (error) {\n    throw CryptoError.create(\n      'CBP-10',\n      'Не удалось распарсить данные сертификата.',\n      error,\n    );\n  }\n}\n","/**\n * Конвертировать массив байт в строкове 16-ричное представление.\n * @param buffer массив байт.\n * @returns строка в 16-ричном представлении.\n */\nexport function bufferToHex(buffer: ArrayBuffer): string | null {\n  if (!buffer) {\n    return null;\n  }\n\n  let result = '';\n  const int8Buffer = new Uint8Array(buffer);\n\n  for (let i = 0; i < int8Buffer.length; i++) {\n    const str = int8Buffer[i].toString(16).toUpperCase();\n\n    result += (str.length === 1 ? '0' : '') + str;\n  }\n\n  return result.trim();\n}\n","import PluginConfig from '../PluginConfig';\n\n/**\n * Подготовить данные для логирования.\n * @param args данные.\n * @returns Объект готовый для логирования.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst prepareArgs = (args: (string | any)[]): any[] => {\n  const context = '[cryptopro-cades]: ';\n\n  if (typeof args[0] == 'string') {\n    args[0] = context + args[0];\n  } else {\n    args.unshift(context);\n  }\n\n  return args;\n};\n\n/**\n * Логировать информацию (если включен Debug)\n * @param args\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const outputDebug = (...args: (string | any)[]): void => {\n  if (PluginConfig.Debug) {\n    const data = prepareArgs(args);\n\n    if (typeof data[0] == 'string') {\n      console.log(data[0], data.slice(1, data.length));\n    } else {\n      console.log(data);\n    }\n  }\n};\n\n/**\n * Логировать ошибку.\n * @param args параметры.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const outputError = (...args: (string | any)[]): void => {\n  const data = prepareArgs(args);\n\n  if (typeof data[0] == 'string') {\n    console.error(data[0], data.slice(1, data.length));\n  } else {\n    console.error(data);\n  }\n};\n","import { CryptoError } from './errors';\nimport { outputError } from './utils';\nimport { CRYPTO_PROVIDERS } from './constants';\nimport { ICryptoProvider } from './types';\n\n/**\n * Настройки плагина.\n */\nclass PluginConfig {\n  /**\n   * Список подписчиков возникающих ошибок в системе.\n   */\n  private errorListeners: ((error: CryptoError) => void)[] = [];\n\n  /**\n   * Функция для проверки (переопределения проверки) версии криптопровайдера.\n   * Если вернуть null, считаем что версия прошла проверку.\n   */\n  checkCspVersionFunc:\n    | ((cryptoProvider: ICryptoProvider) => string | null)\n    | null = null;\n\n  /**\n   * Выводить дебаг-информацию.\n   */\n  Debug: boolean = false;\n\n  /**\n   * Выводить дебаг информацию по криптопро плагину.\n   */\n  DebugCryptoProBrowserPlugin: boolean = false;\n\n  /**\n   * Проверять систему при инициализации.\n   */\n  CheckSystemSetup: boolean = true;\n\n  /**\n   * Список криптопровайдеров для проверки и работы.\n   */\n  CheckCryptoProviders: ICryptoProvider[] = CRYPTO_PROVIDERS;\n\n  /**\n   * Зарегистрировать подписчика ошибок.\n   * @param cb Функция обратного вызова.\n   * @remarks Подписчики ошибок будут вызваны в обратном порядке.\n   */\n  public addErrorListener(cb: (error: CryptoError) => void) {\n    this.errorListeners.unshift(cb);\n  }\n\n  /**\n   * Уведомить подписчиков об ошибке.\n   * @param error Ошибка.\n   */\n  public notifyError(error: CryptoError) {\n    this.errorListeners.forEach((cb) => cb(error));\n  }\n}\n\nconst pluginConfig = new PluginConfig();\n\n/**\n * Функция логирования всех возникающих ошибок.\n * @param error Ошибка.\n */\nconst logErrorWhenInDebug = (error: CryptoError): void => {\n  if (pluginConfig.Debug && error) {\n    const errors = [];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let err: any = error;\n\n    while (err != null) {\n      errors.push(err);\n\n      if (err instanceof CryptoError || err instanceof Error) {\n        err = err.cause;\n      } else {\n        err = null;\n      }\n    }\n\n    if (errors?.length) {\n      outputError('Ошибка >>', errors);\n    }\n  }\n};\n\npluginConfig.addErrorListener(logErrorWhenInDebug);\n\nexport { pluginConfig };\n\nexport default pluginConfig;\n","import { getLastError } from '../api/getLastError';\nimport { IAnyError, ICryptoError, IErrorObject } from '../types';\n\nimport {\n  CRYPTO_PRO_ERRORS,\n  ERRORS_WITHOUT_CODE,\n  PLUGIN_ERRORS,\n} from './errorCodes';\nimport PluginConfig from './../PluginConfig';\n\n/**\n * Описывает ошибку криптографического модуля.\n *\n *  @example\n *  try{...}\n *  catch(err){\n *    throw CryptoError.createCadesError(err, \"Ошибка инициализации контейнера\")\n *  }\n *\n * @class feature/crypto/CryptoError\n * @extends Error\n */\nexport class CryptoError extends Error implements ICryptoError {\n  /**\n   * Правило для выяснения типа ошибки (источника ошибки).\n   */\n  private static _RULE_MATCHING_CODE: RegExp =\n    /^(.*?)(?:(?:\\.?\\s?\\(?0x)|(?:\\.?$))/;\n\n  /**\n   * Код ошибки. Максимальная длина 16 символов.\n   * Для идентификации также смотрите @see #title @see #type.\n   */\n  code: string = '';\n\n  /**\n   * Название ошибки (Основной/короткий текст ошибки).\n   * По нему можно идентифицировать ошибку для изменения #message согласно\n   *  требованиям системы.\n   */\n  title: string = '';\n\n  /**\n   * Текст сообщения об ошибке. Для пользователя.\n   */\n  message: string = '';\n\n  /**\n   * Тип ошибки (обычный - Error, от CAdESCOM plugin - CAdES,...)\n   */\n  type: string = 'Error';\n\n  /**\n   * Унаследовано от родительского класса Error.\n   */\n  name: string = '';\n\n  /**\n   * Приватный конструктор. Для создания экземпляра используйте статические методы @createCadesError и @create\n   * @param err Объект ошибки.\n   */\n  private constructor(err: IErrorObject | null) {\n    super(err?.message);\n    this.cause = err;\n    this.message = err?.message;\n    Object.setPrototypeOf(this, CryptoError.prototype);\n  }\n\n  /**\n   * Формирует текстовое представление ошибки в формате Код ошибки: Сообщение для пользователя\n   * @returns\n   */\n  toString() {\n    return [this.code, this.message].filter(Boolean).join(': ');\n  }\n\n  /**\n   * Создает ошибку на основе ошибки от CryptoPro Browser Plugin.\n   * @param err Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю)\n   * @returns {CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static createCadesError(\n    err: IErrorObject,\n    title: string,\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n\n    err = err as IAnyError;\n\n    const errCode = ERRORS_WITHOUT_CODE[err.message];\n\n    if (errCode) {\n      err.code = errCode;\n    }\n\n    cryptoError.code = err.code ?? CryptoError._extractCode(err);\n\n    if (typeof cryptoError.code === 'string' && cryptoError.code.length > 16) {\n      cryptoError.code = '';\n    }\n\n    let extractedMsg = '';\n\n    if (err.message) {\n      extractedMsg = cryptoError._extractMessage(err);\n    }\n\n    cryptoError.title = title ?? err.message ?? extractedMsg;\n    cryptoError.type = err.type ?? 'CAdES';\n    cryptoError.type += ' < @astral/cades-plugin';\n\n    cryptoError.message =\n      CRYPTO_PRO_ERRORS.find((res) => res.code == cryptoError.code)?.message ??\n      PLUGIN_ERRORS[cryptoError.code] ??\n      extractedMsg ??\n      err.message;\n\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Создает формализованную ошибку криптографического модуля с указанным кодом ошибки.\n   * @param errorCode Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю).\n   * @param err Объект ошибки.\n   * @param overrideMessage Текст ошибки который будет указан вместо стандартного из справочника.\n   * @returns {CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static create(\n    errorCode: keyof typeof PLUGIN_ERRORS,\n    title: string,\n    err: IErrorObject | null,\n    overrideMessage?: string,\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n\n    cryptoError.type = 'Error';\n    cryptoError.code = errorCode;\n    cryptoError.title = title; // не показываем пользователю\n    cryptoError.message = overrideMessage ?? PLUGIN_ERRORS[cryptoError.code];\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Извлекаем код ошибки плагина (если это ошибка крипты).\n   * @param {Error} err - объект ошибки.\n   * @returns {number|string} .\n   * @private\n   */\n  private static _extractCode(err: IErrorObject): number | string {\n    const result =\n      (err.message?.match(/\\(?0x.{2,8}\\)?/) ||\n        err.message?.match(CryptoError._RULE_MATCHING_CODE) ||\n        [])[0] || '';\n\n    return result.replace(/[()]/g, '').trim();\n  }\n\n  /**\n   * Выдираем из объекта Ошибки сообщение.\n   * @param {string|Error} err - объект ошибки, откуда вытащить собщение.\n   * @returns {*|string} .\n   * @private\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private _extractMessage(err: IErrorObject): string | any {\n    const fullErrorData = getLastError(err);\n\n    return (fullErrorData?.message || err.message || '')\n      .replace(`(${this.code})`, '')\n      .trim();\n  }\n}\n","import { IAnyError, ICryptoError } from '../types';\n\n/**\n * Возвращает строку с описанием ошибки из исключения, порождённого плагином.\n * Для Firefox данный метод является единственным способом получения кода ошибки и её текстового описания от плагина.\n * @param {Error} error - ошибка, по которой нужно получить информацию.\n * @returns {Error | undefined} объект ошибки, если имеется.\n */\nexport function getLastError(\n  error: ICryptoError | Error | IAnyError,\n): Error | undefined {\n  return window.cadesplugin?.getLastError(error);\n}\n","/**\n * Проверка доступности асинхронной функциональности.\n * @returns {boolean} true, если нужно выполнять асинхронно.\n */\nexport function canAsync(): boolean {\n  // !!window.Promise || !!Iterator\n  return !!window.cadesplugin?.CreateObjectAsync;\n}\n","import { WithOptionalPromise } from '../../types';\n\nimport { canAsync } from './canAsync';\n\n/**\n * Функция убирающая обёртку WithOptionalPromise<T> при необходимости.\n * @param optionalPromise Тип с опциональным промисом.\n * @returns {Promise<T>} Промис возвращающий реальное значение.\n */\nexport function unwrap<T>(optionalPromise: WithOptionalPromise<T>): Promise<T> {\n  if (canAsync() && optionalPromise instanceof Promise) {\n    return optionalPromise;\n  } else {\n    return Promise.resolve(optionalPromise);\n  }\n}\n","import { unwrap } from './api/internal/unwrap';\nimport { CAPICOM_ENCODING_TYPE } from './constants';\nimport { CryptoError } from './errors';\nimport { ICertificate } from './types';\nimport { parseCertificate } from './utils/certificateParser';\n\n/**\n * Класс объекта Сертификата для удобной работы.\n * !!! НЕ является имплементацией @see ICertificate (к-ый является интерфейсом Крипто системы ОС).\n * @class Certificate\n */\nexport class Certificate {\n  /**\n   * Данные о владельце сертификата.\n   * @remarks названия полей должны совпадать с @attributeOids в oids-dictionary.ts\n   */\n  subject: {\n    commonName: string | null;\n    surname: string | null;\n    name: string | null;\n    country: string | null;\n    region: string | null;\n    locality: string | null;\n    street: string | null;\n    organization: string | null;\n    department: string | null;\n    post: string | null;\n    ogrnip: string | null;\n    ogrn: string | null;\n    snils: string | null;\n    innLe: string | null;\n    inn: string | null;\n    email: string | null;\n  } = {\n    commonName: null,\n    surname: null,\n    name: null,\n    country: null,\n    region: null,\n    locality: null,\n    street: null,\n    organization: null,\n    department: null,\n    post: null,\n    ogrnip: null,\n    ogrn: null,\n    snils: null,\n    innLe: null,\n    inn: null,\n    email: null,\n  };\n\n  /**\n   * Данные об издателе сертификата.\n   * @remarks названия полей должны совпадать с @attributeOids в oids-dictionary.ts\n   */\n  issuer: {\n    commonName: string | null;\n    inn: string | null;\n    innLe: string | null;\n  } = {\n    commonName: null,\n    inn: null,\n    innLe: null,\n  };\n\n  /**\n   *  Отпечаток сертификата (хэш SHA-1).\n   * @property {string|null}\n   */\n  thumbprint: string | null = null;\n\n  /**\n   *  Дата-время с которого сертификат вступает в силу.\n   * @property {Date|null}\n   */\n  notBefore: Date | null = null;\n\n  /**\n   * Дата-время до которого сертификат действует.\n   * @property {Date|null}\n   */\n  notAfter: Date | null = null;\n\n  /**\n   * Имя владельца сертификата.\n   * @property {string|null}\n   */\n  subjectName: string | null = null;\n\n  /**\n   *  Идентификатор субъекта сертификата.\n   * @property {string|null}\n   */\n  subjectKeyId: string | null = null;\n\n  /**\n   * Base64 строка открытой части сертификата.\n   * @property {string|null}\n   */\n  certificateBase64Data: string | null = null;\n\n  /**\n   * Исходный сертификат из плагина.\n   * @property {ICertificate|null}\n   */\n  certificateBin: ICertificate | null = null;\n\n  /**\n   * Имя криптопровайдера.\n   * @property {string|null}\n   */\n  providerName: string | null = null;\n\n  /**\n   * Тип криптопровайдера.\n   * @property {number|null}\n   */\n  providerType: number | null = null;\n\n  /**\n   * Есть ли закрытый ключ.\n   * @property {boolean}\n   */\n  hasPrivateKey: boolean = false;\n\n  /**\n   * Гостовский ключ или нет.\n   */\n  isGost: boolean = false;\n\n  /**\n   * OID алгоритма ключа.\n   */\n  algorithm: string | null = null;\n\n  /**\n   * Приватный конструктор.\n   * @param cfg сертификат из @see IStore.\n   */\n  private constructor(cfg: ICertificate) {\n    this.certificateBin = cfg;\n  }\n\n  /**\n   * Распарсить сертификат из исходного объекта.\n   * @param {ICertificate} cert исходный сертификат.\n   * @throws {CryptoError} в случае ошибки.\n   * @returns {Promise<Certificate>} распрасенный сертификат.\n   */\n  public static async CreateFrom(cert: ICertificate): Promise<Certificate> {\n    if (!cert) {\n      const errorMessage = 'Не указаны данные исходного сертификата.';\n\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    if (cert instanceof Certificate) {\n      return cert;\n    }\n\n    const certificate = new Certificate(cert);\n\n    certificate.subjectName = await unwrap(cert.SubjectName);\n    certificate.thumbprint = await unwrap(cert.Thumbprint);\n    certificate.notAfter = await unwrap(cert.ValidToDate);\n    certificate.notBefore = await unwrap(cert.ValidFromDate);\n\n    certificate.certificateBase64Data = await unwrap(\n      cert.Export(CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64),\n    );\n\n    try {\n      certificate.hasPrivateKey = await unwrap(cert.HasPrivateKey());\n\n      const oPrivateKey = await unwrap(cert.PrivateKey);\n\n      certificate.providerName = await unwrap(oPrivateKey.ProviderName);\n      certificate.providerType = await unwrap(oPrivateKey.ProviderType);\n    } catch (error) {\n      // ошибка не критична, просто создаем ошибку (в дебаге оно залогируется само)\n      CryptoError.createCadesError(\n        error,\n        `Ошибка получения информации о приватном ключе сертификата ${certificate.thumbprint}.`,\n      );\n\n      certificate.hasPrivateKey = false;\n    }\n\n    parseCertificate(certificate);\n\n    return certificate;\n  }\n}\n","import { CRYPTO_OBJECTS } from '../constants';\nimport { IAbout, ICryptoProvider, IVersion } from '../types';\nimport { outputDebug } from '../utils';\nimport pluginConfig from '../PluginConfig';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nlet cryptoProvidersCache: ICryptoProvider[] | null;\n\n/**\n * Получить список криптопровайдеров.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<ICryptoProvider[]>} Bнформация о типе, наименовании и версии криптопровайдеров.\n */\nexport function getCryptoProviders(\n  resetCache: boolean = false,\n): Promise<ICryptoProvider[]> {\n  if (cryptoProvidersCache && !resetCache) {\n    return Promise.resolve(cryptoProvidersCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (cryptoProvidersCache && !resetCache) {\n      return Promise.resolve(cryptoProvidersCache);\n    }\n\n    const availableCryptoProviders: ICryptoProvider[] = [];\n    const logData = [];\n\n    try {\n      for (const {\n        ProviderType,\n        ProviderName,\n      } of pluginConfig.CheckCryptoProviders) {\n        try {\n          const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n          const cspVersion: IVersion = await unwrap(\n            cadesAbout.CSPVersion(ProviderName, ProviderType),\n          );\n\n          availableCryptoProviders.push({\n            ProviderName: ProviderName,\n            ProviderType: ProviderType,\n            BuildVersion: await unwrap(cspVersion.BuildVersion),\n            MajorVersion: await unwrap(cspVersion.MajorVersion),\n            MinorVersion: await unwrap(cspVersion.MinorVersion),\n          });\n        } catch (error) {\n          logData.push({\n            errorMessage: `Ошибка получения информации о криптопровайдере ${ProviderName} с типом ${ProviderType}.`,\n            error,\n          });\n        }\n      }\n\n      return (cryptoProvidersCache = availableCryptoProviders);\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ availableCryptoProviders });\n      outputDebug('getCryptoProviders >>', logData);\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { canAsync } from './internal/canAsync';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Создание криптографического объекта.\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-activation\n * @param {string} objectIdentifier. наименование создаваемого объекта. Объекты указываются в @see CRYPTO_OBJECTS.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<object|null|undefined>} Созданный объект.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function createObject(objectIdentifier: string): Promise<any | never> {\n  return afterPluginLoaded(async () => {\n    if (!objectIdentifier) {\n      throw CryptoError.create(\n        'CBP-7',\n        'Не указан идентификатор объекта',\n        null,\n      );\n    }\n\n    try {\n      const object = canAsync()\n        ? window.cadesplugin.CreateObjectAsync(objectIdentifier)\n        : window.cadesplugin.CreateObject(objectIdentifier);\n\n      return await unwrap(object);\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        `Ошибка при создании объекта ${objectIdentifier}`,\n      );\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport {\n  CRYPTO_OBJECTS,\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  DEFAULT_CRYPTO_PROVIDER,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../constants';\nimport { outputDebug } from '../utils';\nimport { IAbout, ISystemInfo } from '../types';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { getCryptoProviders } from './getCryptoProviders';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Кэш информации о системе.\n */\nlet systemInfoCache: ISystemInfo | null = null;\n\n/**\n * Предоставляет информацию о системе.\n *\n * @returns информацию о CSP и плагине.\n */\nexport const getSystemInfo = (): Promise<ISystemInfo> => {\n  if (systemInfoCache) {\n    return Promise.resolve(systemInfoCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (systemInfoCache) {\n      return Promise.resolve(systemInfoCache);\n    }\n\n    const sysInfo: ISystemInfo = {\n      cadesVersion: '',\n      cspVersion: null,\n      cryptoProInstalled: false,\n      vipNetInstalled: false,\n      cryptoProviderName: null,\n    };\n    const logData = [];\n\n    try {\n      const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n\n      for (const cryptoProvider of await getCryptoProviders()) {\n        if (\n          VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)\n        ) {\n          sysInfo.vipNetInstalled = true;\n\n          sysInfo.cryptoProviderName =\n            DEFAULT_CRYPTO_PROVIDER.Fallback.ProviderName;\n\n          sysInfo.cspVersion =\n            cryptoProvider.MajorVersion + '.' + cryptoProvider.MinorVersion;\n        }\n\n        if (\n          CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)\n        ) {\n          sysInfo.cryptoProInstalled = true;\n\n          sysInfo.cryptoProviderName =\n            DEFAULT_CRYPTO_PROVIDER.Default.ProviderName;\n\n          sysInfo.cspVersion =\n            cryptoProvider.MajorVersion +\n            '.' +\n            cryptoProvider.MinorVersion +\n            '.' +\n            cryptoProvider.BuildVersion;\n        }\n      }\n\n      try {\n        const pluginVersion = await unwrap(cadesAbout.PluginVersion);\n\n        if (pluginVersion) {\n          sysInfo.cadesVersion = await unwrap(pluginVersion.toString());\n        }\n\n        if (!sysInfo.cadesVersion) {\n          sysInfo.cadesVersion = await unwrap(cadesAbout.Version);\n        }\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при получении информации о системе',\n        );\n      }\n\n      return (systemInfoCache = sysInfo);\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ sysInfo });\n      outputDebug('getSystemInfo >>', logData);\n    }\n  })();\n};\n","import {\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../../constants';\nimport { getCryptoProviders } from '../getCryptoProviders';\nimport { pluginConfig } from '../../PluginConfig';\nimport { CryptoError } from '../../errors';\nimport { getSystemInfo } from '../getSystemInfo';\n\nconst oldestSupportedCryptoProCSPVersion = 4;\nconst oldestSupportedVipnetCSPVersion = 4.4;\n\n/**\n * В данный момент имеется версия не меньше указанной версия Крипто-Провайдера.\n * @throws {CryptoError} в случае ошибки.\n * @returns {boolean} true, если поддерживается.\n */\nexport const checkIsSupportedCSPVersion = async (): Promise<void> => {\n  const systemInfo = await getSystemInfo();\n  const cryptoProviders = await getCryptoProviders();\n\n  let haveValidCryptoProCSPVersion = false;\n  let haveValidVipNetCSPVersion = false;\n\n  if (pluginConfig.checkCspVersionFunc) {\n    for (const cryptoProvider of cryptoProviders) {\n      if (\n        pluginConfig.CheckCryptoProviders.find(\n          (cp) =>\n            cp.ProviderType === cryptoProvider.ProviderType &&\n            cp.ProviderName === cryptoProvider.ProviderName,\n        )\n      ) {\n        const errorMessage = pluginConfig.checkCspVersionFunc(cryptoProvider);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-4',\n            'Не поддерживаемая версия CSP',\n            null,\n            errorMessage,\n          );\n        }\n      }\n    }\n  } else {\n    if (systemInfo.cryptoProInstalled) {\n      const cryptoProCSP = cryptoProviders.find((cp) =>\n        CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType),\n      );\n\n      if (\n        cryptoProCSP?.MajorVersion &&\n        cryptoProCSP?.MajorVersion >= oldestSupportedCryptoProCSPVersion\n      ) {\n        haveValidCryptoProCSPVersion = true;\n      }\n    }\n\n    if (systemInfo.vipNetInstalled) {\n      const vipNetCSP = cryptoProviders.find((cp) =>\n        VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType),\n      );\n\n      if (vipNetCSP?.MajorVersion) {\n        const version = parseFloat(\n          vipNetCSP?.MajorVersion + '.' + vipNetCSP?.MinorVersion,\n        );\n\n        haveValidVipNetCSPVersion = version >= oldestSupportedVipnetCSPVersion;\n      }\n    }\n\n    if (!(haveValidVipNetCSPVersion || haveValidCryptoProCSPVersion)) {\n      throw CryptoError.create('CBP-4', 'Не поддерживаемая версия CSP', null);\n    }\n  }\n};\n","/**\n * В данный момент имеется версия не меньше указанной версия CAdESCOM Плагина.\n * @param {string} version полная версия Плагина для сверки.\n * @returns {boolean} .\n */\nexport function isSupportedCadesVersion(version: string): boolean {\n  const match = version.match(/(\\d+)\\.(\\d+)\\.(\\d+)/);\n\n  if (!match) {\n    return false;\n  }\n\n  let [, major, minor, patch] = match;\n\n  // @ts-ignore\n  major = parseInt(major);\n  // @ts-ignore\n  minor = parseInt(minor);\n  // @ts-ignore\n  patch = parseInt(patch);\n\n  return (\n    // @ts-ignore\n    major > 2 ||\n    !(parseInt(major) === 2 && parseInt(minor) === 0 && parseInt(patch) < 13292)\n  );\n}\n","import { CryptoError } from '../errors';\nimport { ISystemInfo } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { getSystemInfo } from './getSystemInfo';\nimport { checkIsSupportedCSPVersion } from './internal/checkIsSupportedCSPVersion';\nimport { isSupportedCadesVersion } from './internal/isSupportedCadesVersion';\n\n/**\n * Проверяет корректность настроек ЭП на машине.\n * @throws {CryptoError} в случае обнаружения ошибок, если не установлен криптопровайдер или версия не поддерживается.\n */\nexport const checkIsValidSystemSetup = async (): Promise<void> => {\n  let systemInfo: ISystemInfo | null = null;\n  const logData = [];\n\n  try {\n    try {\n      systemInfo = await getSystemInfo();\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Настройки ЭП на данной машине не верны',\n      );\n    }\n\n    if (!isSupportedCadesVersion(systemInfo.cadesVersion)) {\n      throw CryptoError.create(\n        'CBP-3',\n        'Не поддерживаемая версия плагина.',\n        null,\n      );\n    }\n\n    if (!(systemInfo.cryptoProInstalled || systemInfo.vipNetInstalled)) {\n      throw CryptoError.create(\n        'CBP-8',\n        'Не установлен ни один криптопровайдер.',\n        null,\n      );\n    }\n\n    await checkIsSupportedCSPVersion();\n  } catch (error) {\n    logData.push({ error });\n    throw error;\n  } finally {\n    outputDebug(\n      'checkIsValidSystemSetup >>',\n      logData.length === 0 ? 'ok' : logData,\n    );\n  }\n};\n","import { unwrap } from './internal/unwrap';\nimport { CryptoError } from './../errors';\nimport init from './../vendor/cadesplugin_api';\n\n/**\n * Выполнить инициализацию и проверку работопособности КриптоПРО Браузер плагин.\n * @returns функция ожидания.\n */\nexport async function checkPlugin(): Promise<void> {\n  try {\n    await init();\n  } catch (err) {\n    throw CryptoError.create(\n      'CBP-2',\n      'Ошибка загрузки библиотеки cadesplugin.js',\n      err,\n    );\n  }\n\n  if (!window.cadesplugin) {\n    throw CryptoError.create(\n      'CBP-1',\n      'Не инициализирован модуль для работы с cadesplugin',\n      null,\n    );\n  }\n\n  try {\n    await unwrap(window.cadesplugin);\n  } catch (err) {\n    throw CryptoError.create(\n      'CBP-1',\n      'Ошибка при инициализации модуля для работы с cadesplugin',\n      err,\n    );\n  }\n}\n","import { checkIsValidSystemSetup } from '../checkIsValidSystemSetup';\nimport { checkPlugin } from '../checkPlugin';\n\nimport { unwrap } from './unwrap';\nimport PluginConfig from './../../PluginConfig';\n\n/**\n * Сохранение статуса во избежание повторных инициализаций.\n */\nlet isPluginReady: boolean = false;\n\n/**\n * Обёртка для подготовки плагина перед вызовом функциональности.\n * @param {Function|Promise} cb - функция обратного вызова.\n * @returns {Promise} .функция ожидания.\n */\nexport function afterPluginLoaded(\n  cb: Function,\n  checkSystem: boolean = false,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): (...args: any) => Promise<any> {\n  return async (...args) => {\n    if (!isPluginReady) {\n      await checkPlugin();\n      isPluginReady = true;\n    }\n\n    if (PluginConfig.DebugCryptoProBrowserPlugin) {\n      window.cadesplugin.set_log_level(window.cadesplugin.LOG_LEVEL_DEBUG);\n    }\n\n    // для исключения зацикливания, проверку валидности системы делаем единожды.\n    if (checkSystem && PluginConfig.CheckSystemSetup && !isPluginReady) {\n      await checkIsValidSystemSetup();\n    }\n\n    const callbackResult = await unwrap(cb.apply(null, args));\n\n    return callbackResult;\n  };\n}\n","import { CryptoError } from '../../errors';\n\nimport { canAsync } from './canAsync';\n\n/**\n * описываем структуру параметр OBJ функции ниже.\n * интерфейс ради интерфейса >_<\n */\ninterface ICryptoObject {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  [key: string]: any;\n}\n\n/**\n * Устанавливаем значение в указанное свойство переданного объекта.\n * @param {object} obj - объект-цель.\n * @param {string} key - имя свойства.\n * @param {*} value - значение для свойства.\n * @returns {void} .\n */\nexport async function setCryptoProperty(\n  obj: ICryptoObject,\n  key: string,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  value: any,\n): Promise<void> {\n  try {\n    if (canAsync()) {\n      const res = obj[`propset_${key}`](value);\n\n      if (res instanceof Promise) {\n        await res;\n      }\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      obj[key] = value;\n    }\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      `Не удалось установить значение в поле ${key}`,\n    );\n  }\n}\n","import { Certificate } from '../Certificate';\nimport { ICertificate } from '../types';\n\n/**\n * Валидация сертификата.\n *\n *  @example\n *  validateCertificate(cert, async (cert) => await (await cert.IsValid()).Result)\n *\n * @param {ICertificate|Certificate} certificate - собственно сертификат.\n * @param {Function} customValidationFunc - иные условия валидации сертификата.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<string|null>} .null, если сертификат валиден.\n */\nexport async function validateCertificate(\n  certificate: Certificate | ICertificate,\n  customValidationFunc?: (\n    cert: Certificate | ICertificate,\n  ) => Promise<string | null>,\n): Promise<string | null> {\n  let result: string | null = null;\n  const cert: Certificate =\n    certificate instanceof Certificate\n      ? certificate\n      : // парсим если пришло сырое\n        await Certificate.CreateFrom(certificate);\n\n  if (customValidationFunc) {\n    result = await customValidationFunc(cert);\n  } else {\n    const errors = [];\n\n    if (!cert.hasPrivateKey) {\n      errors.push('закрытый ключ недоступен');\n    }\n\n    const now = new Date();\n\n    if (cert.notAfter && now < cert.notAfter) {\n      errors.push('истёк срок его действия');\n    }\n\n    if (cert.notBefore && now > cert.notBefore) {\n      errors.push('срок действия не наступил');\n    }\n\n    if (!cert.isGost) {\n      errors.push('алгоритмы ГОСТ не поддерживаются');\n    }\n\n    if (errors.length) {\n      result = 'Сертификат не прошел проверки: ' + errors.join(', ');\n    }\n  }\n\n  return result;\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_BASE64_TO_BINARY,\n  CADESCOM_CADES_TYPE,\n  CAPICOM_CERTIFICATE_INCLUDE_OPTION,\n  CRYPTO_OBJECTS,\n} from '../constants';\nimport { CPSigner, CadesSignedData, ICertificate } from '../types';\nimport { Certificate } from '../Certificate';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Подписать входные данные указанным сертификатом в формате CMS.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data - данные для подписания. Массив байт либо массив байт в формате Base64 строки.\n * @param {boolean} [detach=true] присоединять подпись к данным или отдельно?\n * @param {boolean} [includeCertChain=true] - включать в результат всю цепочку сертификатов.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификатов.\n * @throws {CryptoError} в случае ошибки.\n * @returns файл подписи в кодировке Base64.\n */\nexport function sign(\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  detach: boolean = true,\n  includeCertChain: boolean = true,\n  doNotValidate: boolean = false,\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n\n    logData.push({\n      certificate,\n      data,\n      detach,\n      includeCertChain,\n      doNotValidate,\n    });\n\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для подписания.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      if (!certificate) {\n        const errorMessage =\n          'Не указан сертификат для вычисления электронной подписи.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      let cert: ICertificate | null = null;\n\n      if (certificate instanceof Certificate) {\n        cert = certificate?.certificateBin;\n      } else {\n        cert = certificate;\n      }\n\n      if (!doNotValidate && !!cert) {\n        const errorMessage = await validateCertificate(cert);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-6',\n            'Сертификат не прошел проверку при подписи.',\n            null,\n            errorMessage,\n          );\n        }\n      }\n\n      const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n      const signedData: CadesSignedData = await createObject(\n        CRYPTO_OBJECTS.signedData,\n      );\n\n      // заполнение параметров для подписи\n      try {\n        await setCryptoProperty(signer, 'Certificate', cert);\n\n        if (includeCertChain) {\n          await setCryptoProperty(\n            signer,\n            'Options',\n            CAPICOM_CERTIFICATE_INCLUDE_OPTION.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN,\n          );\n        }\n\n        await setCryptoProperty(\n          signedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY,\n        );\n\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        await setCryptoProperty(signedData, 'Content', base64String);\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при заполнении параметров подписания.',\n        );\n      }\n\n      try {\n        const signResult = await unwrap(\n          signedData.SignCades(\n            signer,\n            CADESCOM_CADES_TYPE.CADESCOM_CADES_BES,\n            detach,\n          ),\n        );\n\n        logData.push({ signResult });\n\n        return signResult;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при вычислении электронной подписи.',\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('sign >>', logData);\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_CADES_TYPE,\n  CADESCOM_HASH_ALGORITHM,\n  CAPICOM_CERTIFICATE_INCLUDE_OPTION,\n  CRYPTO_OBJECTS,\n  GOST_KEY_ALGORITHM_TYPES,\n} from '../constants';\nimport {\n  CPHashedData,\n  CPSigner,\n  CadesSignedData,\n  ICertificate,\n} from '../types';\nimport { Certificate } from '../Certificate';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Выбрать алгоритм хэширования на основе алгоритма сертификата.\n * @param cert сертификат.\n * @throws {CryptoError} в случае неизвестного алгоритма сертификата.\n * @returns алгоритм хэширования.\n */\nfunction selectAlgoritm(cert: Certificate): CADESCOM_HASH_ALGORITHM {\n  switch (cert.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return CADESCOM_HASH_ALGORITHM.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256;\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return CADESCOM_HASH_ALGORITHM.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512;\n\n    default:\n      const errorMessage = 'Неизвестный алгоритм ключа электронной подписи';\n\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n}\n\n/**\n * Подписать хэш указанным сертификатом в формате CMS.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data - данные для подписания. Массив байт хэша либо сам хэш в формате hex строки (в любом регистре)\n * @example\n *  4A5F6E54CA44064A5544943DDC244DDC84DC3952AC5924A475838E7BB8320878\n * @param {boolean} [includeCertChain=true] - включать в результат всю цепочку сертификатов.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификатов.\n * @throws {CryptoError} в случае ошибки.\n * @returns файл подписи в кодировке Base64.\n */\nexport function signHash(\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  includeCertChain: boolean = true,\n  doNotValidate: boolean = false,\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n\n    logData.push({\n      certificate,\n      data,\n      includeCertChain,\n      doNotValidate,\n    });\n\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны хэш для подписания.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      if (!certificate) {\n        const errorMessage =\n          'Не указан сертификат для вычисления электронной подписи.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const hexString =\n        data instanceof ArrayBuffer ? Buffer.from(data).toString('hex') : data;\n\n      logData.push({ hexString });\n\n      let cadesCert: ICertificate | null = null;\n      let cert: Certificate | null = null;\n\n      if (certificate instanceof Certificate) {\n        cadesCert = certificate?.certificateBin;\n        cert = certificate;\n      } else {\n        cadesCert = certificate;\n        cert = await Certificate.CreateFrom(cadesCert);\n      }\n\n      if (!doNotValidate && !!cadesCert) {\n        const errorMessage = await validateCertificate(cadesCert);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-6',\n            'Сертификат не прошел проверку при подписи.',\n            null,\n            errorMessage,\n          );\n        }\n      }\n\n      const hashedData: CPHashedData = await createObject(\n        CRYPTO_OBJECTS.hashedData,\n      );\n      const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n      const signedData: CadesSignedData = await createObject(\n        CRYPTO_OBJECTS.signedData,\n      );\n\n      // заполнение параметров для подписи\n      try {\n        await setCryptoProperty(signer, 'Certificate', cadesCert);\n\n        if (includeCertChain) {\n          await setCryptoProperty(\n            signer,\n            'Options',\n            CAPICOM_CERTIFICATE_INCLUDE_OPTION.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN,\n          );\n        }\n\n        await setCryptoProperty(hashedData, 'Algorithm', selectAlgoritm(cert));\n        await unwrap(hashedData.SetHashValue(hexString));\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при заполнении параметров подписания.',\n        );\n      }\n\n      try {\n        const signResult = await unwrap(\n          signedData.SignHash(\n            hashedData,\n            signer,\n            CADESCOM_CADES_TYPE.CADESCOM_CADES_BES,\n          ),\n        );\n\n        logData.push({ signResult });\n\n        return signResult;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при вычислении электронной подписи.',\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('signHash >>', logData);\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_XML_SIGNATURE_TYPE,\n  CRYPTO_OBJECTS,\n  GOST_KEY_ALGORITHM_TYPES,\n  XML_SIGNATURE_GOST_ALGORITHM_TYPE,\n} from '../constants';\nimport { CPSigner, ICertificate, ISignedXml } from '../types';\nimport { Certificate } from '../Certificate';\nimport { outputDebug } from '../utils';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Получить алгоритм вычисления подписи для Xml.\n * @param {Certificate} certificate сертификат.\n * @throws {CryptoError} в случае ошибки.\n * @returns {string} алгоритм вычисления подписи.\n */\nexport const getXmlSignAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма подписи XmlDSig.`,\n        null,\n      );\n  }\n};\n\n/**\n * Получить алгоритм вычисления хэша.\n * @param {Certificate} certificate сертификат.\n * @throws {CryptoError} в случае ошибки.\n * @returns {string} алгоритм вычисления хэша.\n */\nexport const getXmlHashAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма хэширования xml.`,\n        null,\n      );\n  }\n};\n\n/**\n * Подписать входные данные указанным сертификатом в формате XmlDSig.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data - данные для подписания. Массив байт либо массив байт в формате Base64 строки.\n * @param {CADESCOM_XML_SIGNATURE_TYPE} xmlSignatureType - тип xml подписи.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификата.\n * @throws {CryptoError} в случае ошибки.\n * @returns файл подписи в кодировке Base64.\n */\nexport const signXml = (\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE = CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED,\n  doNotValidate: boolean = false,\n): Promise<string> => {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n\n    logData.push({ certificate, data, xmlSignatureType, doNotValidate });\n\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для подписания.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      if (!certificate) {\n        const errorMessage =\n          'Не указан сертификат для вычисления электронной подписи.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      const cert: Certificate =\n        certificate instanceof Certificate\n          ? certificate\n          : // парсим если пришло сырое\n            await Certificate.CreateFrom(certificate);\n\n      if (!doNotValidate && !!cert) {\n        const errorMessage = await validateCertificate(cert);\n\n        if (errorMessage) {\n          throw CryptoError.create(\n            'CBP-6',\n            'Сертификат не прошел проверку при подписи.',\n            null,\n            errorMessage,\n          );\n        }\n      }\n\n      const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n      const signedData: ISignedXml = await createObject(\n        CRYPTO_OBJECTS.signedXml,\n      );\n\n      // заполнение параметров для подписи\n      try {\n        await setCryptoProperty(signer, 'Certificate', cert.certificateBin);\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        await setCryptoProperty(signedData, 'Content', base64String);\n        // указываем тип подписи\n        await setCryptoProperty(signedData, 'SignatureType', xmlSignatureType);\n\n        // указываем алгоритм подписи\n        await setCryptoProperty(\n          signedData,\n          'SignatureMethod',\n          getXmlSignAlgorithmType(cert),\n        );\n\n        // указываем алгоритм хэширования\n        await setCryptoProperty(\n          signedData,\n          'DigestMethod',\n          getXmlHashAlgorithmType(cert),\n        );\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров подписания.',\n        );\n      }\n\n      try {\n        const signResult = await unwrap(signedData.Sign(signer));\n\n        logData.push({ signResult });\n\n        return signResult;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при вычислении электронной подписи.',\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('signXml >>', logData);\n    }\n  })();\n};\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_BASE64_TO_BINARY,\n  CAPICOM_ENCODING_TYPE,\n  CRYPTO_OBJECTS,\n} from '../constants';\nimport { CPEnvelopedData, ICertificate, IRecipients } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Зашировать данные на указанные сертификаты.\n * @param {string} data - данные для шифрования. Массив байт либо массив байт в формате Base64 строки.\n * @param {ICertificate[]} recipientCertificates -список сертификатов получателей шифрованного сообщения.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<string>} .Зашифрованная строка в кодировке Base64.\n */\nexport function encrypt(\n  data: ArrayBuffer | string,\n  recipientCertificates: ICertificate[],\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n\n    logData.push({ data, recipientCertificates });\n\n    try {\n      if (!data) {\n        const errorMessage = 'Не указаны данные для шифрования.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      if (!recipientCertificates || recipientCertificates?.length === 0) {\n        const errorMessage =\n          'Не указаны сертификаты получателей шифрованного сообщения.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        data instanceof ArrayBuffer\n          ? Buffer.from(data).toString('base64')\n          : data;\n\n      logData.push({ base64String });\n\n      const envelopedData: CPEnvelopedData = await createObject(\n        CRYPTO_OBJECTS.envelopedData,\n      );\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        await setCryptoProperty(\n          envelopedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY,\n        );\n\n        await setCryptoProperty(envelopedData, 'Content', base64String);\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров шифрования.',\n        );\n      }\n\n      try {\n        const recipients: IRecipients = await unwrap(envelopedData.Recipients);\n\n        for (const recipientCertificate of recipientCertificates) {\n          await unwrap(recipients.Add(recipientCertificate));\n        }\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при установке сертификатов получателей шифрованного сообщения.',\n        );\n      }\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому расшифровываем предварительно конвертированный в Base64\n\n        const encryptResult = await unwrap(\n          envelopedData.Encrypt(CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64),\n        );\n\n        logData.push({ encryptResult });\n\n        return encryptResult;\n      } catch (error) {\n        throw CryptoError.createCadesError(\n          error,\n          'Ошибка при шифровании данных.',\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('encrypt >>', logData);\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport { CADESCOM_BASE64_TO_BINARY, CRYPTO_OBJECTS } from '../constants';\nimport { CPEnvelopedData } from '../types';\nimport { outputDebug } from '../utils';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Расшифровать данные.\n * @param {string} encryptedData - данные для расшифрования. Массив байт либо массив байт в формате Base64 строки.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<string>} .Расшифрованная строка в кодировке Base64.\n */\nexport function decrypt(encryptedData: ArrayBuffer | string): Promise<string> {\n  return afterPluginLoaded(async () => {\n    const logData = [];\n\n    logData.push({ encryptedData });\n\n    try {\n      if (!encryptedData) {\n        const errorMessage = 'Не указаны данные для расшифровки.';\n\n        throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n      }\n\n      const base64String =\n        encryptedData instanceof ArrayBuffer\n          ? Buffer.from(encryptedData).toString('base64')\n          : encryptedData;\n\n      logData.push({ base64String });\n\n      const envelopedData: CPEnvelopedData = await createObject(\n        CRYPTO_OBJECTS.envelopedData,\n      );\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому подписываем предварительно конвертированный в Base64\n        await setCryptoProperty(\n          envelopedData,\n          'ContentEncoding',\n          CADESCOM_BASE64_TO_BINARY,\n        );\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при заполнении параметров расшифровки.',\n        );\n      }\n\n      try {\n        // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n        // поэтому расшифровываем предварительно конвертированный в Base64\n        await unwrap(envelopedData.Decrypt(base64String));\n\n        const decryptedData = await unwrap(envelopedData.Content);\n\n        logData.push({ decryptedData });\n\n        return decryptedData;\n      } catch (err) {\n        throw CryptoError.createCadesError(\n          err,\n          'Ошибка при расшифровке данных.',\n        );\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      outputDebug('decrypt >>', logData);\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport { IStore } from '../types';\nimport {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  CRYPTO_OBJECTS,\n  STORE_LOCATION,\n} from '../constants';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Открывает хранилище с сертификатами.\n * @returns {IStore} store хранилище с сертификатами.\n * @param {STORE_LOCATION} storeLocation - расположение хранилища.\n * @param {string} storeName - (!)будет проигнорирован если storeLocation = CAPICOM_SMART_CARD_USER_STORE.\n * @param {CAPICOM_STORE_OPEN_MODE} openMode - режим открытия хранилища.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<IStore>} .\n */\nexport function openStore(\n  storeLocation: STORE_LOCATION = STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n  storeName: string = CAPICOM_MY_STORE,\n  openMode: CAPICOM_STORE_OPEN_MODE = CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_EXISTING_ONLY,\n): Promise<IStore> {\n  return afterPluginLoaded(async () => {\n    let store: IStore = await createObject(CRYPTO_OBJECTS.store);\n\n    try {\n      await unwrap(store.Open(storeLocation, storeName, openMode));\n\n      return store;\n    } catch (err) {\n      await unwrap(store?.Close());\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка открытия хранилища сертификатов.',\n      );\n    }\n  })();\n}\n","import {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  STORE_LOCATION,\n  STORE_TYPE,\n} from '../constants';\nimport { Certificate } from '../Certificate';\nimport { ICertificate, ICertificates, IStore } from '../types';\nimport { outputDebug } from '../utils';\nimport { CryptoError } from '../errors';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { openStore } from './openStore';\nimport { unwrap } from './internal/unwrap';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nconst certificatesCache = {};\n\n/**\n * Возвращает список сертификатов из указанного хранилища.\n * @param {IStore} store Хранилище\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<Certificate[]>} .Список сертификатов.\n */\nasync function getCertificatesFromStore(store: IStore): Promise<Certificate[]> {\n  if (!store) {\n    const errorMessage = 'Не задано хранилище сертификатов.';\n\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n\n  const result: Certificate[] = [];\n  let certificates: ICertificates;\n  let certificatesCount = 0;\n\n  try {\n    certificates = await unwrap(store.Certificates);\n    certificatesCount = await unwrap(certificates.Count);\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      'Ошибка получения списка сертификатов.',\n    );\n  }\n\n  // проверяем пригодность и превращаем сертификаты в наш внутренний тип\n  while (certificatesCount) {\n    try {\n      const certBin: ICertificate = await unwrap(\n        certificates.Item(certificatesCount--),\n      );\n      const cert: Certificate = await Certificate.CreateFrom(certBin);\n\n      // работаем только с гостовскими сертами\n      if (cert.isGost) {\n        result.push(cert);\n      }\n    } catch (err) {\n      // не критичная ошибка, просто логируем\n      CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n    }\n  }\n\n  return result;\n}\n\n/**\n * Получить сертификаты из USB токенов.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<Certificate[]>} .Список сертификатов из USB токенов.\n */\nasync function ReadCertificatesFromUsbToken(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n\n  try {\n    store = await openStore(STORE_LOCATION.CADESCOM_CONTAINER_STORE);\n\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Получить сертификаты из реестра.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<Certificate[]>} .Список сертификатов из реестра.\n */\nasync function ReadCertificatesFromRegistry(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n\n  try {\n    store = await openStore(\n      STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n      CAPICOM_MY_STORE,\n      CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED,\n    );\n\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Возвращает список валидных доступных для работы сертификатов.\n *\n * @param {STORE_TYPE} storeType из какого хранилища требуется получить сертификаты (из токена, реестра, все...).\n * @param {resetCache} resetCache перезапросить данные, игнорируя закэшированные данные.\n * @throws {CryptoError} в случае ошибки.\n * @returns {Promise<Certificate[]>} .сертификаты.\n */\nexport function getCertificates(\n  storeType: STORE_TYPE = STORE_TYPE.ALL,\n  resetCache: boolean = false,\n): Promise<Certificate[]> {\n  if (certificatesCache[storeType] && !resetCache) {\n    return Promise.resolve(certificatesCache[storeType]);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (certificatesCache[storeType] && !resetCache) {\n      return certificatesCache[storeType];\n    }\n\n    const logData = [];\n    let result: Certificate[] = [];\n\n    try {\n      switch (storeType) {\n        case STORE_TYPE.USB_TOKEN:\n          result = await ReadCertificatesFromUsbToken();\n          logData.push({ storeType, result });\n\n          break;\n\n        case STORE_TYPE.REGISTRY:\n          result = await ReadCertificatesFromRegistry();\n          logData.push({ storeType, result });\n\n          break;\n\n        case STORE_TYPE.ALL:\n          const usbTokenCertificates = await ReadCertificatesFromUsbToken();\n\n          logData.push({ storeType: 'usb', usbTokenCertificates });\n\n          const certificatesFromRegistry = await ReadCertificatesFromRegistry();\n\n          logData.push({ storeType: 'registry', certificatesFromRegistry });\n          result = usbTokenCertificates.concat(certificatesFromRegistry);\n\n          result = result.filter(\n            (cert, index) =>\n              result.findIndex((c) => c.thumbprint === cert.thumbprint) ===\n              index,\n          );\n\n          break;\n\n        default:\n          let store: IStore | null = null;\n\n          try {\n            store = await openStore();\n            result = await getCertificatesFromStore(store);\n            logData.push({ storeType: 'default', result });\n          } finally {\n            await store?.Close();\n          }\n\n          break;\n      }\n    } catch (error) {\n      logData.push({ error });\n      throw error;\n    } finally {\n      logData.push({ result });\n      outputDebug(`getCertificates(${storeType}) >>`, logData);\n    }\n\n    return (certificatesCache[storeType] = result);\n  })();\n}\n","import { Certificate } from '../Certificate';\nimport { CryptoError } from '../errors';\n\nimport { getCertificates } from './../api';\n\n/**\n * Поиск в хранилищах сертификата.\n * @param {string} subjectKeyId -идентификатор ключа субъекта.\n * @throws {CryptoError} в случае ошибки.\n * @returns {@Promise<Certificate | undefined>} сертификат.\n */\nexport async function findCertificateBySkid(\n  subjectKeyId: string,\n): Promise<Certificate | undefined> {\n  if (!subjectKeyId) {\n    const errorMessage =\n      'Не указан идентификатор ключа субъекта искомого сертификата.';\n\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n\n  try {\n    return (await getCertificates()).find(\n      (c) => c.subjectKeyId == subjectKeyId,\n    );\n  } catch (err) {\n    throw CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n  }\n}\n","import { Certificate } from '@astral/cryptopro-cades';\n\ntype CertificateInfoProps = {\n  certificate: Certificate;\n  onSelect?: Function;\n};\n\nexport const CertificateInfo = ({\n  certificate,\n  onSelect,\n}: CertificateInfoProps) =>\n  certificate ? (\n    <div onClick={(e) => onSelect && onSelect(certificate.subjectKeyId)}>\n      <span>\n        <b>\n          =========================\n          <a\n            download={`${certificate.subject.commonName}.cer`}\n            href={`data:application/x-x509-ca-cert;base64,${certificate.certificateBase64Data}`}\n          >\n            {certificate.subject.commonName}\n          </a>\n          =========================\n        </b>\n        <br />\n        <b>subjectKeyId: </b>\n        <span\n          onClick={(e) =>\n            navigator.clipboard.writeText(certificate.subjectKeyId!)\n          }\n        >\n          {certificate.subjectKeyId}\n        </span>\n      </span>\n      {Object.keys(certificate)\n        .filter(\n          (key) =>\n            ![\n              'certificateBase64Data',\n              'certificateBin',\n              'subjectKeyId',\n            ].includes(key)\n        )\n        .map((key, index) => (\n          <span style={{ display: 'block' }} key={index}>\n            <b>{key}:</b>{' '}\n            {certificate[key] instanceof Object\n              ? JSON.stringify(certificate[key])\n              : certificate[key]?.toString() ?? 'null'}\n          </span>\n        ))}\n    </div>\n  ) : null;\n","import { ICryptoProvider } from '@astral/cryptopro-cades';\n\ntype CryptoProviderProps = {\n  cryptoProvider: ICryptoProvider;\n};\n\nexport const CryptoProviderInfo = ({ cryptoProvider }: CryptoProviderProps) => (\n  <>\n    <span style={{ display: 'block' }}>\n      <b>Имя:</b> {cryptoProvider.ProviderName}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Тип:</b> {cryptoProvider.ProviderType}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Версия:</b> {cryptoProvider.MajorVersion}.{cryptoProvider.MinorVersion}\n      .{cryptoProvider.BuildVersion}\n    </span>\n  </>\n);\n","import { Buffer } from 'buffer';\n\nimport { useEffect, useState } from 'react';\nimport {\n  CADESCOM_XML_SIGNATURE_TYPE,\n  CRYPTO_OBJECTS,\n  Certificate,\n  ICertificate,\n  ICryptoProvider,\n  ISystemInfo,\n  STORE_TYPE,\n  checkIsValidSystemSetup,\n  createObject,\n  decrypt,\n  encrypt,\n  findCertificateBySkid,\n  getCertificates,\n  getCryptoProviders,\n  getSystemInfo,\n  outputError,\n  pluginConfig,\n  sign,\n  signHash,\n  signXml,\n  checkPlugin,\n} from '@astral/cryptopro-cades';\n\nimport { CertificateInfo } from './components/CertificateInfo';\nimport { CryptoProviderInfo } from './components/CryptoProviderInfo';\n\nconst CryptoApp = () => {\n  pluginConfig.CheckSystemSetup = true;\n  pluginConfig.Debug = true;\n\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\n  const [versionInfo, setVersionInfo] = useState<ISystemInfo>();\n  const [cryptoProviders, setCryptoProviders] = useState<ICryptoProvider[]>([]);\n  const [showCertificates, setShowCertificates] = useState<boolean>();\n  const [showCryptoProviders, setShowCryptoProviders] = useState<boolean>();\n  const [selectedCertificate, setSelectedCertificate] = useState<Certificate>();\n  const [selectedFile, setSelectedFile] = useState<File>();\n  const [selectedEncryptCert, setSelectedEncryptCert] =\n    useState<ICertificate>();\n  const [selectedEncryptCertBase64, setSelectedEncryptCertBase64] =\n    useState<string>();\n\n  useEffect(() => {\n    async function fetchSystemInfo() {\n      try {\n        const systemInfo = await getSystemInfo();\n        setVersionInfo(systemInfo);\n      } catch (error) {\n        outputError(error);\n        window.alert(error?.toString());\n      }\n    }\n    async function fetchCertificates() {\n      try {\n        const fetchedCertificates = await getCertificates(STORE_TYPE.ALL);\n\n        setCertificates(fetchedCertificates);\n\n        // автоматически берем первый валидный серт если еще выбран\n        if (!selectedCertificate) {\n          setSelectedCertificate(\n            fetchedCertificates.find((c) => c.isGost && c.hasPrivateKey)\n          );\n        }\n      } catch (error) {\n        outputError(error);\n        window.alert(error?.toString());\n      }\n    }\n    async function fetchCryptoProviders() {\n      try {\n        const fetchedCryptoProviders = await getCryptoProviders();\n        setCryptoProviders(fetchedCryptoProviders);\n      } catch (error) {\n        outputError(error);\n        window.alert(error?.toString());\n      }\n    }\n\n    if (showCryptoProviders) {\n      fetchCryptoProviders();\n    }\n    if (showCertificates) {\n      fetchCertificates();\n    }\n    fetchSystemInfo();\n  }, [showCryptoProviders, showCertificates, selectedCertificate]);\n\n  /**\n   * Попытаться найти сертификат с указанным skid.\n   * @param skid Идентификатор ключа субъекта.\n   */\n  const trySelectCertificate = async (skid: string) => {\n    if (skid) {\n      const certificate = await findCertificateBySkid(skid);\n      if (certificate) {\n        setSelectedCertificate(certificate);\n      }\n    }\n  };\n\n  /**\n   * Скачать файл.\n   * @param blob Блоб\n   * @param name Наименование файла.\n   */\n  const dowloadFile = (blob: Blob, name: string): void => {\n    const url = window.URL.createObjectURL(blob);\n    const a = window.document.createElement('a');\n    a.style.display = 'hidden';\n    window.document.body.appendChild(a);\n    a.href = url;\n    a.download = name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    a.remove();\n  };\n\n  /**\n   *\n   * @param base64 строка в формате Base64.\n   * @param type Тип данных.\n   * @returns {Promise<Blob>} Блоб.\n   */\n  const convertBase64toBlob = (\n    base64: string,\n    type: string = 'application/octet-stream'\n  ): Promise<Blob> =>\n    window\n      .fetch(`data:${type};base64,${base64}`)\n      .then((res: Response) => res.blob());\n\n  /**\n   * Подписать файл в формате CMS.\n   */\n  const signFile = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await sign(\n        selectedCertificate,\n        await selectedFile.arrayBuffer() // массив байт либо массив байт в формате Base64 строки\n      );\n\n      dowloadFile(await convertBase64toBlob(sig), selectedFile.name + '.sig');\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n   /**\n   * Подписать файл с хэшом.\n   */\n     const signFileHash = async (): Promise<void> => {\n      if (!selectedCertificate) {\n        window.alert('Сертификат не выбран');\n        return;\n      }\n      if (!selectedFile) {\n        window.alert('Файл для подписи не выбран');\n        return;\n      }\n  \n      try {\n        const sig = await signHash(\n          selectedCertificate,\n          await selectedFile.arrayBuffer(), // массив байт хэша либо хэш в формате hex строки\n          true,\n          true\n        );\n  \n        dowloadFile(await convertBase64toBlob(sig), selectedFile.name + '.sig');\n      } catch (error) {\n        outputError(error);\n        window.alert(error?.toString());\n      }\n    };\n\n  /**\n   * Подписать файл в формате XmlDSig.\n   */\n  const signXmlFile = async (\n    xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE\n  ): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await signXml(\n        selectedCertificate,\n        await selectedFile.arrayBuffer(), // массив байт либо массив байт в формате Base64 строки\n        xmlSignatureType\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(sig),\n        selectedFile.name.replace('.xml', '') + '.sig.xml'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Зашифровать файл в формате CMS.\n   */\n  const encryptFileCms = async (): Promise<void> => {\n    if (!selectedEncryptCert) {\n      window.alert('Сертификат получателя не выбран');\n      return;\n    }\n    if (!selectedFile) {\n      window.alert('Файл для шифрования не выбран');\n      return;\n    }\n\n    try {\n      const encryptedData = await encrypt(\n        await selectedFile.arrayBuffer(), // массив байт либо массив байт в формате Base64 строки\n        [selectedEncryptCert]\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(encryptedData),\n        selectedFile.name + '.enc'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Зашифровать файл в формате CMS.\n   */\n  const decryptFileCms = async (): Promise<void> => {\n    if (!selectedFile) {\n      window.alert('Файл для расшифровки не выбран');\n      return;\n    }\n\n    try {\n      const decryptedData = await decrypt(\n        await selectedFile.arrayBuffer() // массив байт либо массив байт в формате Base64 строки\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(decryptedData),\n        selectedFile.name + '.decrypted'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Проверить шифрование и расшифровку, зашифровав данные на свой серт.\n   */\n  const checkEncryptDecrypt = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    const originalData = 'Hello world!';\n\n    try {\n      const encryptedData = await encrypt(\n        Buffer.from(originalData).toString('base64'),\n        [selectedCertificate.certificateBin!]\n      );\n\n      const decryptedData = await decrypt(encryptedData);\n      const isOk =\n        Buffer.from(decryptedData, 'base64').toString('utf-8') === originalData;\n\n      window.alert(\n        isOk ? 'Шифрование-расшифровка прошла успешно' : 'Данные не совпали'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error.toString());\n    }\n  };\n\n  /**\n   * Выполняет импорт сертификата.\n   * @param data\n   */\n  const importCertificate = async (\n    data: string | ArrayBuffer\n  ): Promise<void> => {\n    if (!data) {\n      setSelectedEncryptCertBase64(undefined);\n      setSelectedEncryptCert(undefined);\n      return;\n    }\n\n    const arrayBufferToString = (buffer) => {\n      return new TextDecoder().decode(buffer);\n    };\n\n    const parseFromArrayBuffer = async (buffer: ArrayBuffer) => {\n      const certificate: ICertificate = await createObject(\n        CRYPTO_OBJECTS.certificate\n      );\n      const base64 = Buffer.from(buffer).toString('base64');\n      await certificate.Import(base64);\n      setSelectedEncryptCertBase64(base64);\n      setSelectedEncryptCert(certificate);\n      return certificate;\n    };\n\n    const parseFromBase64String = async (base64: string) => {\n      const certificate: ICertificate = await createObject(\n        CRYPTO_OBJECTS.certificate\n      );\n      await certificate.Import(base64);\n      setSelectedEncryptCertBase64(base64);\n      setSelectedEncryptCert(certificate);\n      return certificate;\n    };\n    try {\n      if (data instanceof ArrayBuffer) {\n        try {\n          await parseFromArrayBuffer(data);\n        } catch (error) {\n          outputError(error);\n          await parseFromBase64String(arrayBufferToString(data));\n        }\n      } else {\n        try {\n          await parseFromArrayBuffer(Buffer.from(data));\n        } catch (error) {\n          outputError(error);\n          await parseFromBase64String(data);\n        }\n      }\n    } catch (error) {\n      outputError(error);\n      window.alert(error.message);\n    }\n  };\n\n  /**\n   * Проверить систему.\n   */\n  async function checkSystem() {\n    try {\n      await checkIsValidSystemSetup();\n      window.alert('checkSystem: ok');\n    } catch (error) {\n      outputError(error);\n      window.alert(error.toString());\n    }\n  }\n\n  /**\n   * Проверить криптопро браузер плагин.\n   */\n  async function checkPluginClick() {\n    try {\n      await checkPlugin();\n    } catch (error) {\n      outputError(error);\n      window.alert(error.toString());\n    }\n  }\n\n  return (\n    <>\n      <p>Версия плагина {versionInfo?.cadesVersion}</p>\n      <p>Версия криптопровайдера {versionInfo?.cspVersion}</p>\n      <button onClick={() => checkPluginClick()}>Проверить плагин</button>\n      <button onClick={() => checkSystem()}>Проверить систему</button>\n      <button onClick={() => setShowCryptoProviders(!showCryptoProviders)}>\n        {!showCryptoProviders\n          ? 'Показать криптопровайдеры'\n          : 'Скрыть криптопровайдеры'}\n      </button>\n      <button onClick={() => setShowCertificates(!showCertificates)}>\n        {!showCertificates ? 'Показать сертификаты' : 'Скрыть сертификаты'}\n      </button>\n      <div style={{ display: showCryptoProviders ? '' : 'none' }}>\n        Криптопровайдеры:\n        {cryptoProviders?.map((cryptoProvider, index) => {\n          return (\n            <p key={index}>\n              <CryptoProviderInfo cryptoProvider={cryptoProvider} />\n            </p>\n          );\n        })}\n      </div>\n      <div style={{ display: showCertificates ? '' : 'none' }}>\n        Сертификаты:\n        {certificates?.map((certInfo, index) => {\n          return (\n            <div key={index}>\n              <CertificateInfo\n                certificate={certInfo}\n                onSelect={(skid) => trySelectCertificate(skid)}\n              />\n            </div>\n          );\n        }) ?? 'Ничего нет :('}\n      </div>\n      <br />\n      <br />\n      <br />\n      <div>\n        <b>\n          ========================= Операции с сертификатами\n          =========================\n        </b>\n        <br />\n        <br />\n        skid:\n        <input\n          style={{ width: 350 }}\n          placeholder=\"Введите skid серта\"\n          onChange={(e) => trySelectCertificate(e.target.value)}\n          value={selectedCertificate?.subjectKeyId!}\n        />\n        {selectedCertificate ? (\n          <>\n            <p>Выбранный сертификат</p>\n            <CertificateInfo certificate={selectedCertificate} />\n          </>\n        ) : null}\n        {selectedCertificate ? (\n          <>\n            <br />\n            <br />\n            <button onClick={(_) => checkEncryptDecrypt()}>\n              Проверить шифрование/расшифровку\n            </button>\n            <br />\n          </>\n        ) : null}\n        <br />\n        <br />\n        Выберите файл для криптооперации:\n        <input\n          type=\"file\"\n          onChange={(e) => setSelectedFile(e.target.files![0])}\n        />\n        <br />\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button onClick={(_) => signFile()}>Подписать CMS</button>\n          </>\n        ) : null}\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button onClick={(_) => signFileHash()}>Подписать CMS (хэш)</button>\n          </>\n        ) : null}\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button\n              onClick={(_) =>\n                signXmlFile(\n                  CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED\n                )\n              }\n            >\n              Подписать XmlDSig (enveloped)\n            </button>\n          </>\n        ) : null}\n        {selectedCertificate && selectedFile ? (\n          <>\n            <br />\n            <button\n              onClick={(_) =>\n                signXmlFile(\n                  CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE\n                )\n              }\n            >\n              Подписать XmlDSig (template)\n            </button>\n          </>\n        ) : null}\n        <br />\n        {selectedFile ? (\n          <>\n            <button onClick={(_) => decryptFileCms()}>Расшифровать CMS</button>\n            <br />\n          </>\n        ) : null}\n        <br />\n        <br />\n        Укажите Base64 сертификата на которого зашифровать\n        <br /> или выберите серт из файла:\n        <input\n          type=\"file\"\n          onChange={async (e) =>\n            await importCertificate(await e.target.files![0].arrayBuffer())\n          }\n        />\n        <br />\n        <textarea\n          style={{ width: 500, height: 200 }}\n          value={selectedEncryptCertBase64}\n          onChange={async (e) => await importCertificate(e.target.value)}\n        />\n        {selectedEncryptCert && selectedFile ? (\n          <>\n            <br />\n            <button onClick={(_) => encryptFileCms()}>Зашифровать CMS</button>\n          </>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <CryptoApp />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","// КриптоПро ЭЦП Browser plug-in 2.0.14660 от 2.09.2022\n// ГОСТ: 20FA0454B0D40F9F19248F8617999EC51C1367911E14E75BAF12554F252DFC9A\n// MD5: 4e81144b91bc4ef9e4dff854ed316b31\n// https://www.cryptopro.ru/sites/default/files/products/cades/current_release_2_0/cadesplugin_api.js.zip\n// https://cryptopro.ru/products/cades/downloads\n// eslint-disable\n// @ts-nocheck\nexport default function init() {\n    //already loaded\n    if(window.cadesplugin)\n        return window.cadesplugin;\n\n    var plugin_reject;\n    var plugin_resolve;\n    var pluginObject;\n    var plugin_resolved = 0;\n    var isOpera = 0;\n    var isFireFox = 0;\n    var isSafari = 0;\n    var isYandex = 0;\n    var canPromise = !!window.Promise;\n    var cadesplugin_loaded_event_recieved = false;\n    var isFireFoxExtensionLoaded = false;\n\n    /**\n    * @class window.cadesplugin\n    */\n    var cadesplugin;\n\n    if(canPromise)\n    {\n        cadesplugin = new Promise(function(resolve, reject)\n        {\n            plugin_resolve = resolve;\n            plugin_reject = reject;\n        });\n    } else\n    {\n        cadesplugin = {};\n    }\n\n    function check_browser() {\n        var ua= navigator.userAgent, tem, M= ua.match(/(opera|yabrowser|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem =  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return { name:'IE', version:(tem[1] || '')};\n        }\n        if(M[1] === 'Chrome'){\n            tem = ua.match(/\\b(OPR|Edg|YaBrowser)\\/(\\d+)/);\n            if (tem != null)\n                return { name: tem[1].replace('OPR', 'Opera'), version: tem[2] };\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\n            M.splice(1, 1, tem[1]);\n        return {name:M[0],version:M[1]};\n    }\n    var browserSpecs = check_browser();\n\n    function cpcsp_console_log(level, msg){\n        //IE9 не может писать в консоль если не открыта вкладка developer tools\n        if(typeof(console) === 'undefined')\n            return;\n        if (level <= cadesplugin.current_log_level ){\n            if (level === cadesplugin.LOG_LEVEL_DEBUG)\n                console.log(\"DEBUG: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_INFO)\n                console.info(\"INFO: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_ERROR)\n                console.error(\"ERROR: %s\", msg);\n            return;\n        }\n    }\n\n    function set_log_level(level){\n        if (!((level === cadesplugin.LOG_LEVEL_DEBUG) ||\n            (level === cadesplugin.LOG_LEVEL_INFO) ||\n            (level === cadesplugin.LOG_LEVEL_ERROR))){\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"cadesplugin_api.js: Incorrect log_level: \" + level);\n            return;\n        }\n        cadesplugin.current_log_level = level;\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = DEBUG\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = INFO\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = ERROR\");\n        if(isNativeMessageSupported())\n        {\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n                window.postMessage(\"set_log_level=debug\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n                window.postMessage(\"set_log_level=info\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n                window.postMessage(\"set_log_level=error\", \"*\");\n        }\n    }\n\n    function set_constantValues()\n    {\n        cadesplugin.CAPICOM_MEMORY_STORE = 0;\n        cadesplugin.CAPICOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CAPICOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CAPICOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_MEMORY_STORE = 0;\n        cadesplugin.CADESCOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CADESCOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CADESCOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_CONTAINER_STORE = 100;\n\n        cadesplugin.CAPICOM_MY_STORE = \"My\";\n\n        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;\n\n        cadesplugin.CADESCOM_XADES_DEFAULT = 0x00000010;\n        cadesplugin.CADESCOM_XADES_BES = 0x00000020;\n        cadesplugin.CADESCOM_XADES_T = 0x00000050;\n        cadesplugin.CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0;\n        cadesplugin.CADESCOM_XMLDSIG_TYPE = 0x00000000;\n\n        cadesplugin.XmlDsigGost3410UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr3411\";\n        cadesplugin.XmlDsigGost3410Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411\";\n        \n        cadesplugin.XmlDsigGost3411Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256\";\n        cadesplugin.XmlDsigGost3410Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256\";\n        cadesplugin.XmlDsigGost3411Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512\";\n        cadesplugin.XmlDsigGost3410Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512\";\n\n        cadesplugin.CADESCOM_CADES_DEFAULT = 0;\n        cadesplugin.CADESCOM_CADES_BES = 1;\n        cadesplugin.CADESCOM_CADES_T = 0x5;\n        cadesplugin.CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d;\n        cadesplugin.CADESCOM_PKCS7_TYPE = 0xffff;\n\n        cadesplugin.CADESCOM_ENCODE_BASE64 = 0;\n        cadesplugin.CADESCOM_ENCODE_BINARY = 1;\n        cadesplugin.CADESCOM_ENCODE_ANY = -1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2;\n\n        cadesplugin.CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0;\n        cadesplugin.CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENSION = 5;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12;\n\n        cadesplugin.CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128;\n\n        cadesplugin.CAPICOM_PROPID_ENHKEY_USAGE = 9;\n\n        cadesplugin.CAPICOM_OID_OTHER = 0;\n        cadesplugin.CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\n        cadesplugin.CAPICOM_EKU_CLIENT_AUTH = 2;\n        cadesplugin.CAPICOM_EKU_SMARTCARD_LOGON = 5;\n        cadesplugin.CAPICOM_EKU_OTHER = 0;\n\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\n        cadesplugin.CADESCOM_ATTRIBUTE_OTHER = -1;\n\n        cadesplugin.CADESCOM_STRING_TO_UCS2LE = 0;\n        cadesplugin.CADESCOM_BASE64_TO_BINARY = 1;\n\n        cadesplugin.CADESCOM_DISPLAY_DATA_NONE = 0;\n        cadesplugin.CADESCOM_DISPLAY_DATA_CONTENT = 1;\n        cadesplugin.CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;\n\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA1 = 0;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD2 = 1;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD4 = 2;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD5 = 3;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_256 = 4;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_384 = 5;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_512 = 6;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112;\n\n        cadesplugin.LOG_LEVEL_DEBUG = 4;\n        cadesplugin.LOG_LEVEL_INFO = 2;\n        cadesplugin.LOG_LEVEL_ERROR = 1;\n\n        cadesplugin.CADESCOM_AllowNone = 0;\n        cadesplugin.CADESCOM_AllowNoOutstandingRequest = 0x1;\n        cadesplugin.CADESCOM_AllowUntrustedCertificate = 0x2;\n        cadesplugin.CADESCOM_AllowUntrustedRoot = 0x4;\n        cadesplugin.CADESCOM_SkipInstallToStore = 0x10000000;\n        cadesplugin.CADESCOM_InstallCertChainToContainer = 0x20000000;\n        cadesplugin.CADESCOM_UseContainerStore = 0x40000000;\n\n        cadesplugin.ENABLE_CARRIER_TYPE_CSP = 0x01;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\n        cadesplugin.ENABLE_ANY_CARRIER_TYPE = 0x07;\n\n        cadesplugin.DISABLE_EVERY_CARRIER_OPERATION = 0x00;\n        cadesplugin.ENABLE_CARRIER_OPEN_ENUM = 0x01;\n        cadesplugin.ENABLE_CARRIER_CREATE = 0x02;\n        cadesplugin.ENABLE_ANY_OPERATION = 0x03;\n\n        cadesplugin.CADESCOM_PRODUCT_CSP = 0;\n        cadesplugin.CADESCOM_PRODUCT_OCSP = 1;\n        cadesplugin.CADESCOM_PRODUCT_TSP = 2;\n\n        cadesplugin.MEDIA_TYPE_REGISTRY = 0x00000001;\n        cadesplugin.MEDIA_TYPE_HDIMAGE = 0x00000002;\n        cadesplugin.MEDIA_TYPE_CLOUD = 0x00000004;\n        cadesplugin.MEDIA_TYPE_SCARD = 0x00000008;\n\n        cadesplugin.XCN_CRYPT_STRING_BASE64HEADER = 0;\n        cadesplugin.AT_KEYEXCHANGE = 1;\n        cadesplugin.AT_SIGNATURE = 2;\n\n        cadesplugin.CARRIER_FLAG_REMOVABLE = 1;\n        cadesplugin.CARRIER_FLAG_UNIQUE = 2;\n        cadesplugin.CARRIER_FLAG_PROTECTED = 4;\n        cadesplugin.CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\n        cadesplugin.CARRIER_FLAG_SECURE_MESSAGING = 16;\n        cadesplugin.CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\n        cadesplugin.CARRIER_FLAG_VIRTUAL = 128;\n    }\n\n    function async_spawn(generatorFunc) {\n        function continuer(verb, arg) {\n            var result;\n            try {\n                result = generator[verb](arg);\n            } catch (err) {\n                return Promise.reject(err);\n            }\n            if (result.done) {\n                return result.value;\n            } else {\n                return Promise.resolve(result.value).then(onFulfilled, onRejected);\n            }\n        }\n        var generator = generatorFunc(Array.prototype.slice.call(arguments, 1));\n        var onFulfilled = continuer.bind(continuer, \"next\");\n        var onRejected = continuer.bind(continuer, \"throw\");\n        return onFulfilled();\n    }\n\n    function isIE() {\n        // var retVal = ((\"Microsoft Internet Explorer\" == navigator.appName) || // IE < 11\n        //     navigator.userAgent.match(/Trident\\/./i)); // IE 11\n        return (browserSpecs.name === 'IE' || browserSpecs.name === 'MSIE');\n    }\n\n    function isIOS() {\n        return (navigator.userAgent.match(/ipod/i) ||\n            navigator.userAgent.match(/ipad/i) ||\n            navigator.userAgent.match(/iphone/i));\n    }\n\n    function isNativeMessageSupported()\n    {\n        // В IE работаем через NPAPI\n        if(isIE())\n            return false;\n        // В Edge работаем через NativeMessage\n        if (browserSpecs.name === 'Edg') {\n            return true;\n        }\n        if (browserSpecs.name === 'YaBrowser') {\n            isYandex = true;\n            return true;\n        }\n        // В Chrome, Firefox, Safari и Opera работаем через асинхронную версию в зависимости от версии\n        if(browserSpecs.name === 'Opera') {\n            isOpera = true;\n            if(browserSpecs.version >= 33){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Firefox') {\n            isFireFox = true;\n            if(browserSpecs.version >= 52){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Chrome') {\n            if(browserSpecs.version >= 42){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        //В Сафари начиная с 12 версии нет NPAPI\n        if(browserSpecs.name === 'Safari') {\n            isSafari = true;\n            if(browserSpecs.version >= 12) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    // Функция активации объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObject(name) {\n        if (isIOS()) {\n            // На iOS для создания объектов используется функция\n            // call_ru_cryptopro_npcades_10_native_bridge, определенная в IOS_npcades_supp.js\n            return call_ru_cryptopro_npcades_10_native_bridge(\"CreateObject\", [name]);\n        }\n        if (isIE()) {\n            // В Internet Explorer создаются COM-объекты\n            if (name.match(/X509Enrollment/i)) {\n                try {\n                    // Объекты CertEnroll пробуем создавать через нашу фабрику,\n                    // если не получилось то через CX509EnrollmentWebClassFactory\n                    var objCertEnrollClassFactory = document.getElementById(\"webClassFactory\");\n                    return objCertEnrollClassFactory.CreateObject(name);\n                }\n                catch (e) {\n                    try {\n                        var objWebClassFactory = document.getElementById(\"certEnrollClassFactory\");\n                        return objWebClassFactory.CreateObject(name);\n                    }\n                    catch (err) {\n                        throw (\"Для создания обьектов X509Enrollment следует настроить веб-узел на использование проверки подлинности по протоколу HTTPS\");\n                    }\n                }\n            }\n            // Объекты CAPICOM и CAdESCOM создаются через CAdESCOM.WebClassFactory\n            try {\n                var objWebClassFactory = document.getElementById(\"webClassFactory\");\n                return objWebClassFactory.CreateObject(name);\n            }\n            catch (e) {\n                // Для версий плагина ниже 2.0.12538\n                return new ActiveXObject(name); // eslint-disable-line\n            }\n        }\n        // создаются объекты NPAPI\n        return pluginObject.CreateObject(name);\n    }\n\n    function decimalToHexString(number) {\n        if (number < 0) {\n            number = 0xFFFFFFFF + number + 1;\n        }\n\n        return number.toString(16).toUpperCase();\n    }\n\n    function GetMessageFromException(e) {\n        var err = e.message;\n        if (!err) {\n            err = e;\n        } else if (e.number) {\n            err += \" (0x\" + decimalToHexString(e.number) + \")\";\n        }\n        return err;\n    }\n\n    function getLastError(exception) {\n        if(isNativeMessageSupported() || isIE() || isIOS() ) {\n            return GetMessageFromException(exception);\n        }\n\n        try {\n            return pluginObject.getLastError();\n        } catch(e) {\n            return GetMessageFromException(exception);\n        }\n    }\n\n    // Функция для удаления созданных объектов\n    function ReleasePluginObjects() {\n        return cpcsp_chrome_nmcades.ReleasePluginObjects(); // eslint-disable-line\n    }\n\n    // Функция активации асинхронных объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObjectAsync(name) {\n        return pluginObject.CreateObjectAsync(name);\n    }\n\n    //Функции для IOS\n    var ru_cryptopro_npcades_10_native_bridge = {\n        callbacksCount : 1,\n        callbacks : {},\n\n        // Automatically called by native layer when a result is available\n        resultForCallback : function resultForCallback(callbackId, resultArray) {\n            var callback = ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId];\n            if (!callback) return;\n            callback.apply(null,resultArray);\n        },\n\n        // Use this in javascript to request native objective-c code\n        // functionName : string (I think the name is explicit :p)\n        // args : array of arguments\n        // callback : function with n-arguments that is going to be called when the native code returned\n        call : function call(functionName, args, callback) {\n            var hasCallback = callback && typeof callback === \"function\";\n            var callbackId = hasCallback ? ru_cryptopro_npcades_10_native_bridge.callbacksCount++ : 0;\n\n            if (hasCallback)\n                ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId] = callback;\n\n            var iframe = document.createElement(\"IFRAME\");\n            var arrObjs = new Array(\"_CPNP_handle\");\n            try{\n                iframe.setAttribute(\"src\", \"cpnp-js-call:\" + functionName + \":\" + callbackId+ \":\" + encodeURIComponent(JSON.stringify(args, arrObjs)));\n            } catch(e){\n                alert(e);\n            }\n            document.documentElement.appendChild(iframe);\n            iframe.parentNode.removeChild(iframe);\n            iframe = null;\n        }\n    };\n\n    function call_ru_cryptopro_npcades_10_native_bridge(functionName, array){\n        var tmpobj;\n        var ex;\n        ru_cryptopro_npcades_10_native_bridge.call(functionName, array, function(e, response){\n            ex = e;\n            var str='tmpobj='+response;\n            eval(str);\n            if (typeof (tmpobj) === \"string\"){\n                tmpobj = tmpobj.replace(/\\\\\\n/gm, \"\\n\");\n                tmpobj = tmpobj.replace(/\\\\\\r/gm, \"\\r\");\n            }\n        });\n        if(ex)\n            throw ex;\n        return tmpobj;\n    }\n\n    function show_firefox_missing_extension_dialog()\n    {\n        if (!window.cadesplugin_skip_extension_install)\n        {\n            var ovr = document.createElement('div');\n            ovr.id = \"cadesplugin_ovr\";\n            ovr.style = \"visibility: hidden; position: fixed; left: 0px; top: 0px; width:100%; height:100%; background-color: rgba(0,0,0,0.7)\";\n            ovr.innerHTML = \"<div id='cadesplugin_ovr_item' style='position:relative; max-width:400px; margin:100px auto; background-color:#fff; border:2px solid #000; padding:10px; text-align:center; opacity: 1; z-index: 1500'>\" +\n                \"<button id='cadesplugin_close_install' style='float: right; font-size: 10px; background: transparent; border: 1; margin: -5px'>X</button>\" +\n                \"<p>Для работы КриптоПро ЭЦП Browser plugin на данном сайте необходимо расширение для браузера. Убедитесь, что оно у Вас включено или установите его.\" +\n                \"<p><a href='https://www.cryptopro.ru/sites/default/files/products/cades/extensions/firefox_cryptopro_extension_latest.xpi'>Скачать расширение</a></p>\" +\n                \"</div>\";\n            document.getElementsByTagName(\"Body\")[0].appendChild(ovr);\n            document.getElementById(\"cadesplugin_close_install\").addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n\n            ovr.addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n            ovr.style.visibility=\"visible\";\n        }\n    }\n    function firefox_or_safari_nmcades_onload() {\n        if (window.cadesplugin_extension_loaded_callback)\n            window.cadesplugin_extension_loaded_callback();\n        isFireFoxExtensionLoaded = true;\n        cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n    }\n\n    function nmcades_api_onload() {\n        if (!isIE() && !isFireFox && !isSafari) {\n            if (window.cadesplugin_extension_loaded_callback)\n                window.cadesplugin_extension_loaded_callback();\n        }\n        window.postMessage(\"cadesplugin_echo_request\", \"*\");\n        window.addEventListener(\"message\", function (event){\n            if (typeof(event.data) !== \"string\" || !event.data.match(\"cadesplugin_loaded\"))\n                return;\n            if (cadesplugin_loaded_event_recieved)\n                return;\n            if(isFireFox || isSafari)\n            {\n                // Для Firefox, Сафари вместе с сообщением cadesplugin_loaded прилетает url для загрузки nmcades_plugin_api.js\n                var url = event.data.substring(event.data.indexOf(\"url:\") + 4);\n                if (!url.match(\"^(moz|safari)-extension://[a-zA-Z0-9/_-]+/nmcades_plugin_api.js$\"))\n                {\n                    cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"Bad url \\\"\" + url + \"\\\" for load CryptoPro Extension for CAdES Browser plug-in\");\n                    plugin_loaded_error();\n                    return;\n                }\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", url);\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = firefox_or_safari_nmcades_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }else {\n                cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n            }\n            cadesplugin_loaded_event_recieved = true;\n        }, false);\n    }\n\n    //Загружаем расширения для Chrome, Opera, YaBrowser, FireFox, Edge, Safari\n    function load_extension()\n    {\n        if(isFireFox || isSafari){\n            // вызываем callback руками т.к. нам нужно узнать ID расширения. Он уникальный для браузера.\n            nmcades_api_onload();\n        } else {\n            // в асинхронном варианте для Yandex и Opera подключаем расширение из Opera store.\n            if (isOpera || isYandex) {\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://epebfcehmdedogndhlcacafjaacknbcm/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            } else {\n                // для Chrome, Chromium, Chromium Edge расширение из Chrome store\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://iifchhfnnmpdbibifmljnfjhpififfog/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }\n        }\n    }\n\n    //Загружаем плагин для NPAPI\n    function load_npapi_plugin()\n    {\n        var elem = document.createElement('object');\n        elem.setAttribute(\"id\", \"cadesplugin_object\");\n        elem.setAttribute(\"type\", \"application/x-cades\");\n        elem.setAttribute(\"style\", \"visibility: hidden\");\n        document.getElementsByTagName(\"body\")[0].appendChild(elem);\n        pluginObject = document.getElementById(\"cadesplugin_object\");\n        if(isIE())\n        {\n            var elem1 = document.createElement('object');\n            elem1.setAttribute(\"id\", \"certEnrollClassFactory\");\n            elem1.setAttribute(\"classid\", \"clsid:884e2049-217d-11da-b2a4-000e7bbb2b09\");\n            elem1.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem1);\n            var elem2 = document.createElement('object');\n            elem2.setAttribute(\"id\", \"webClassFactory\");\n            elem2.setAttribute(\"classid\", \"clsid:B04C8637-10BD-484E-B0DA-B8A039F60024\");\n            elem2.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem2);\n        }\n    }\n\n    //Отправляем событие что все ок.\n    function plugin_loaded()\n    {\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_resolve();\n        }else {\n            window.postMessage(\"cadesplugin_loaded\", \"*\");\n        }\n    }\n\n    //Отправляем событие что сломались.\n    function plugin_loaded_error(msg)\n    {\n        if(typeof(msg) === 'undefined' || typeof(msg) === 'object')\n            msg = \"Плагин недоступен\";\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(msg);\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n    }\n\n    //проверяем что у нас хоть какое то событие ушло, и если не уходило кидаем еще раз ошибку\n    function check_load_timeout()\n    {\n        if(plugin_resolved === 1)\n            return;\n        if(isFireFox)\n        {\n            if (!isFireFoxExtensionLoaded)\n                show_firefox_missing_extension_dialog();\n        }\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(\"Истекло время ожидания загрузки плагина\");\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n\n    }\n\n    //Вспомогательная функция для NPAPI\n    function createPromise(arg)\n    {\n        return new Promise(arg);\n    }\n\n    function check_npapi_plugin (){\n        try {\n            var oAbout = CreateObject(\"CAdESCOM.About\");\n            plugin_loaded();\n        }\n        catch (err) {\n            document.getElementById(\"cadesplugin_object\").style.display = 'none';\n            // Объект создать не удалось, проверим, установлен ли\n            // вообще плагин. Такая возможность есть не во всех браузерах\n            var mimetype = navigator.mimeTypes[\"application/x-cades\"];\n            if (mimetype) {\n                var plugin = mimetype.enabledPlugin;\n                if (plugin) {\n                    plugin_loaded_error(\"Плагин загружен, но не создаются обьекты\");\n                }else\n                {\n                    plugin_loaded_error(\"Ошибка при загрузке плагина\");\n                }\n            }else\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n            }\n        }\n    }\n\n    //Проверяем работает ли плагин\n    function check_plugin_working()\n    {\n        var div = document.createElement(\"div\");\n        div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n        var isIeLessThan9 = (div.getElementsByTagName(\"i\").length === 1);\n        if (isIeLessThan9) {\n            plugin_loaded_error(\"Internet Explorer версии 8 и ниже не поддерживается\");\n            return;\n        }\n\n        if(isNativeMessageSupported())\n        {\n            load_extension();\n        }else if(!canPromise) {\n            window.addEventListener(\"message\", function (event){\n                    if (event.data !== \"cadesplugin_echo_request\")\n                        return;\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                },\n                false);\n        }else\n        {\n            if(document.readyState === \"complete\"){\n                load_npapi_plugin();\n                check_npapi_plugin();\n            } else {\n                window.addEventListener(\"load\", function (event) {\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                }, false);\n            }\n        }\n    }\n\n    function set_pluginObject(obj)\n    {\n        pluginObject = obj;\n    }\n\n    function is_capilite_enabled()\n    {\n        if ((typeof (cadesplugin.EnableInternalCSP) !== 'undefined') && cadesplugin.EnableInternalCSP)\n            return true;\n        return false;\n    };\n\n    //Export\n    cadesplugin.JSModuleVersion = \"2.3.3\";\n    cadesplugin.async_spawn = async_spawn;\n    cadesplugin.set = set_pluginObject;\n    cadesplugin.set_log_level = set_log_level;\n    cadesplugin.getLastError = getLastError;\n    cadesplugin.is_capilite_enabled = is_capilite_enabled;\n\n    if(isNativeMessageSupported())\n    {\n        cadesplugin.CreateObjectAsync = CreateObjectAsync;\n        cadesplugin.ReleasePluginObjects = ReleasePluginObjects;\n    }\n\n    if(!isNativeMessageSupported())\n    {\n        cadesplugin.CreateObject = CreateObject;\n    }\n\n    if(window.cadesplugin_load_timeout)\n    {\n        setTimeout(check_load_timeout, window.cadesplugin_load_timeout);\n    }\n    else\n    {\n        setTimeout(check_load_timeout, 20000);\n    }\n\n    set_constantValues();\n\n    cadesplugin.current_log_level = cadesplugin.LOG_LEVEL_ERROR;\n    window.cadesplugin = cadesplugin;\n    check_plugin_working();\n\n    return window.cadesplugin;\n}\n"],"names":["CADESCOM_XML_SIGNATURE_TYPE","CADESCOM_XADES_TYPE","CADESCOM_CADES_TYPE","XML_SIGNATURE_GOST_ALGORITHM_TYPE","CAPICOM_CERTIFICATE_INCLUDE_OPTION","CADESCOM_ENCODING_TYPE","CAPICOM_ENCODING_TYPE","CAPICOM_STORE_OPEN_MODE","STORE_LOCATION","CAPICOM_CERT_INFO_TYPE","CAPICOM_CERTIFICATE_FIND_TYPE","CAPICOM_KEY_USAGE","CAPICOM_MY_STORE","CAPICOM_PROPID","CADESCOM_ENCRYPTION_ALGORITHM","CADESCOM_HASH_ALGORITHM","CADESCOM_MEDIA_TYPE","CRYPTO_OBJECTS","STORE_TYPE","GOST_KEY_ALGORITHM_TYPES","CRYPTO_PROVIDERS","ProviderType","ProviderName","map","c","DEFAULT_CRYPTO_PROVIDER","Default","find","t","Fallback","VIP_NET_CRYPTO_PROVIDER_TYPES","Object","freeze","CRYPTO_PRO_CRYPTO_PROVIDER_TYPES","GOST_KEY_ALGORITHM_OIDS","values","attributeOids","commonName","surname","name","country","locality","region","street","organisation","department","post","ogrnip","ogrn","snils","inn","innLe","email","CRYPTO_PRO_ERRORS","code","message","PLUGIN_ERRORS","ERRORS_WITHOUT_CODE","parseValue","target","attributeName","errorMessage","CryptoError","typesAndValues","type","value","valueBlock","normalizeInn","length","startsWith","substring","parseCertificate","certificate","certificateBase64Data","asn1","fromBER","Uint8Array","Buffer","buffer","parsedCert","x509Certificate","schema","result","publishKeyAlgorithm","subjectPublicKeyInfo","algorithm","algorithmId","isGost","includes","subjectKeyIdentifierExtension","extensions","extnID","subjectKeyId","int8Buffer","i","str","toString","toUpperCase","trim","bufferToHex","parsedValue","valueHex","keys","issuer","forEach","key","subject","error","prepareArgs","args","context","unshift","outputDebug","PluginConfig","data","outputError","pluginConfig","cb","this","errorListeners","addErrorListener","Debug","errors","err","push","Error","cause","setPrototypeOf","prototype","filter","Boolean","join","fullErrorData","window","cadesplugin","getLastError","replace","title","cryptoError","errCode","_extractCode","extractedMsg","_extractMessage","res","errorCode","overrideMessage","match","_RULE_MATCHING_CODE","canAsync","CreateObjectAsync","unwrap","optionalPromise","Promise","resolve","cryptoProvidersCache","Certificate","cfg","organization","certificateBin","cert","SubjectName","subjectName","Thumbprint","thumbprint","ValidToDate","notAfter","ValidFromDate","notBefore","Export","CAPICOM_ENCODE_BASE64","HasPrivateKey","hasPrivateKey","PrivateKey","oPrivateKey","providerName","providerType","createObject","objectIdentifier","afterPluginLoaded","object","CreateObject","getCryptoProviders","resetCache","availableCryptoProviders","logData","about","cadesAbout","CSPVersion","cspVersion","BuildVersion","MajorVersion","MinorVersion","systemInfoCache","getSystemInfo","sysInfo","cadesVersion","cryptoProInstalled","vipNetInstalled","cryptoProviderName","cryptoProvider","PluginVersion","pluginVersion","Version","checkIsSupportedCSPVersion","systemInfo","cryptoProviders","haveValidCryptoProCSPVersion","haveValidVipNetCSPVersion","checkCspVersionFunc","CheckCryptoProviders","cp","cryptoProCSP","vipNetCSP","version","parseFloat","isSupportedCadesVersion","major","minor","patch","parseInt","checkIsValidSystemSetup","checkPlugin","init","isPluginReady","checkSystem","set_log_level","LOG_LEVEL_DEBUG","apply","callbackResult","setCryptoProperty","obj","validateCertificate","customValidationFunc","now","Date","sign","detach","includeCertChain","doNotValidate","base64String","ArrayBuffer","signer","signedData","CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN","SignCades","CADESCOM_CADES_BES","signResult","selectAlgoritm","GOST_R3410_12_256","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256","GOST_R3410_12_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512","signHash","hexString","cadesCert","hashedData","SetHashValue","SignHash","getXmlSignAlgorithmType","XmlDsigGost3410Url2012256","XmlDsigGost3410Url2012512","getXmlHashAlgorithmType","XmlDsigGost3411Url2012256","XmlDsigGost3411Url2012512","signXml","xmlSignatureType","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED","signedXml","Sign","encrypt","recipientCertificates","envelopedData","Recipients","recipients","recipientCertificate","Add","Encrypt","encryptResult","decrypt","encryptedData","Decrypt","Content","decryptedData","openStore","storeLocation","CAPICOM_CURRENT_USER_STORE","storeName","openMode","CAPICOM_STORE_OPEN_EXISTING_ONLY","store","Open","Close","certificatesCache","getCertificatesFromStore","certificatesCount","Certificates","certificates","Count","Item","certBin","ReadCertificatesFromUsbToken","CADESCOM_CONTAINER_STORE","ReadCertificatesFromRegistry","CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED","getCertificates","storeType","ALL","USB_TOKEN","REGISTRY","usbTokenCertificates","certificatesFromRegistry","concat","index","findIndex","findCertificateBySkid","CertificateInfo","onSelect","onClick","e","download","href","navigator","clipboard","writeText","style","display","JSON","stringify","CryptoProviderInfo","CryptoApp","CheckSystemSetup","useState","setCertificates","versionInfo","setVersionInfo","setCryptoProviders","showCertificates","setShowCertificates","showCryptoProviders","setShowCryptoProviders","selectedCertificate","setSelectedCertificate","selectedFile","setSelectedFile","selectedEncryptCert","setSelectedEncryptCert","selectedEncryptCertBase64","setSelectedEncryptCertBase64","useEffect","alert","fetchedCertificates","fetchedCryptoProviders","fetchCryptoProviders","fetchCertificates","fetchSystemInfo","trySelectCertificate","skid","dowloadFile","blob","url","URL","createObjectURL","a","document","createElement","body","appendChild","click","revokeObjectURL","remove","convertBase64toBlob","base64","fetch","then","signFile","arrayBuffer","sig","signFileHash","signXmlFile","encryptFileCms","decryptFileCms","checkEncryptDecrypt","originalData","isOk","importCertificate","undefined","arrayBufferToString","TextDecoder","decode","parseFromArrayBuffer","Import","parseFromBase64String","checkPluginClick","certInfo","width","placeholder","onChange","_","files","CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE","height","className","ReactDOM","getElementById","render","plugin_reject","plugin_resolve","pluginObject","plugin_resolved","isOpera","isFireFox","isSafari","isYandex","canPromise","cadesplugin_loaded_event_recieved","isFireFoxExtensionLoaded","check_browser","tem","ua","userAgent","M","test","exec","appName","appVersion","splice","reject","browserSpecs","cpcsp_console_log","level","msg","console","current_log_level","LOG_LEVEL_INFO","LOG_LEVEL_ERROR","isNativeMessageSupported","postMessage","set_constantValues","CAPICOM_MEMORY_STORE","CAPICOM_LOCAL_MACHINE_STORE","CAPICOM_SMART_CARD_USER_STORE","CADESCOM_MEMORY_STORE","CADESCOM_LOCAL_MACHINE_STORE","CADESCOM_CURRENT_USER_STORE","CADESCOM_SMART_CARD_USER_STORE","CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING","CADESCOM_XADES_DEFAULT","CADESCOM_XADES_BES","CADESCOM_XADES_T","CADESCOM_XADES_X_LONG_TYPE_1","CADESCOM_XMLDSIG_TYPE","XmlDsigGost3410UrlObsolete","XmlDsigGost3411UrlObsolete","XmlDsigGost3410Url","XmlDsigGost3411Url","CADESCOM_CADES_DEFAULT","CADESCOM_CADES_T","CADESCOM_CADES_X_LONG_TYPE_1","CADESCOM_PKCS7_TYPE","CADESCOM_ENCODE_BASE64","CADESCOM_ENCODE_BINARY","CADESCOM_ENCODE_ANY","CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT","CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY","CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME","CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME","CAPICOM_CERTIFICATE_FIND_SHA1_HASH","CAPICOM_CERTIFICATE_FIND_ISSUER_NAME","CAPICOM_CERTIFICATE_FIND_ROOT_NAME","CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME","CAPICOM_CERTIFICATE_FIND_EXTENSION","CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY","CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY","CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY","CAPICOM_CERTIFICATE_FIND_TIME_VALID","CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID","CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED","CAPICOM_CERTIFICATE_FIND_KEY_USAGE","CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE","CAPICOM_PROPID_ENHKEY_USAGE","CAPICOM_OID_OTHER","CAPICOM_OID_KEY_USAGE_EXTENSION","CAPICOM_EKU_CLIENT_AUTH","CAPICOM_EKU_SMARTCARD_LOGON","CAPICOM_EKU_OTHER","CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO","CADESCOM_ATTRIBUTE_OTHER","CADESCOM_STRING_TO_UCS2LE","CADESCOM_BASE64_TO_BINARY","CADESCOM_DISPLAY_DATA_NONE","CADESCOM_DISPLAY_DATA_CONTENT","CADESCOM_DISPLAY_DATA_ATTRIBUTE","CADESCOM_ENCRYPTION_ALGORITHM_RC2","CADESCOM_ENCRYPTION_ALGORITHM_RC4","CADESCOM_ENCRYPTION_ALGORITHM_DES","CADESCOM_ENCRYPTION_ALGORITHM_3DES","CADESCOM_ENCRYPTION_ALGORITHM_AES","CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89","CADESCOM_HASH_ALGORITHM_SHA1","CADESCOM_HASH_ALGORITHM_MD2","CADESCOM_HASH_ALGORITHM_MD4","CADESCOM_HASH_ALGORITHM_MD5","CADESCOM_HASH_ALGORITHM_SHA_256","CADESCOM_HASH_ALGORITHM_SHA_384","CADESCOM_HASH_ALGORITHM_SHA_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC","CADESCOM_AllowNone","CADESCOM_AllowNoOutstandingRequest","CADESCOM_AllowUntrustedCertificate","CADESCOM_AllowUntrustedRoot","CADESCOM_SkipInstallToStore","CADESCOM_InstallCertChainToContainer","CADESCOM_UseContainerStore","ENABLE_CARRIER_TYPE_CSP","ENABLE_CARRIER_TYPE_FKC_NO_SM","ENABLE_CARRIER_TYPE_FKC_SM","ENABLE_ANY_CARRIER_TYPE","DISABLE_EVERY_CARRIER_OPERATION","ENABLE_CARRIER_OPEN_ENUM","ENABLE_CARRIER_CREATE","ENABLE_ANY_OPERATION","CADESCOM_PRODUCT_CSP","CADESCOM_PRODUCT_OCSP","CADESCOM_PRODUCT_TSP","MEDIA_TYPE_REGISTRY","MEDIA_TYPE_HDIMAGE","MEDIA_TYPE_CLOUD","MEDIA_TYPE_SCARD","XCN_CRYPT_STRING_BASE64HEADER","AT_KEYEXCHANGE","AT_SIGNATURE","CARRIER_FLAG_REMOVABLE","CARRIER_FLAG_UNIQUE","CARRIER_FLAG_PROTECTED","CARRIER_FLAG_FUNCTIONAL_CARRIER","CARRIER_FLAG_SECURE_MESSAGING","CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE","CARRIER_FLAG_VIRTUAL","async_spawn","generatorFunc","continuer","verb","arg","generator","done","onFulfilled","onRejected","Array","slice","call","arguments","bind","isIE","isIOS","call_ru_cryptopro_npcades_10_native_bridge","ActiveXObject","decimalToHexString","number","GetMessageFromException","exception","ReleasePluginObjects","cpcsp_chrome_nmcades","ru_cryptopro_npcades_10_native_bridge","callbacksCount","callbacks","resultForCallback","callbackId","resultArray","callback","functionName","hasCallback","iframe","arrObjs","setAttribute","encodeURIComponent","documentElement","parentNode","removeChild","array","tmpobj","ex","response","eval","show_firefox_missing_extension_dialog","cadesplugin_skip_extension_install","ovr","id","innerHTML","getElementsByTagName","addEventListener","plugin_loaded_error","visibility","firefox_or_safari_nmcades_onload","cadesplugin_extension_loaded_callback","check_chrome_plugin","plugin_loaded","nmcades_api_onload","event","indexOf","fileref","onerror","onload","load_extension","load_npapi_plugin","elem","elem1","elem2","check_load_timeout","createPromise","check_npapi_plugin","mimetype","mimeTypes","enabledPlugin","check_plugin_working","div","readyState","set_pluginObject","is_capilite_enabled","EnableInternalCSP","JSModuleVersion","set","cadesplugin_load_timeout","setTimeout"],"sourceRoot":""}