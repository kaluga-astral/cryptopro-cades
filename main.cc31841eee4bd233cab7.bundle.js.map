{"version":3,"file":"main.cc31841eee4bd233cab7.bundle.js","mappings":"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","sources":["webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cades.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/storeType.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/cryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/constants/oids-dictionary.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/errorCodes.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/outputError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/PluginConfig.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/errors/CryptoError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getLastError.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/certificateParser.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/bufferToHex.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/Certificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCryptoProviders.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/outputDebug.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/canAsync.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/createObject.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getSystemInfo.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/isSupportedCadesVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/isSupportedCSPVersion.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/isValidSystemSetup.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/afterPluginLoaded.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/utils/deasync.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/internal/setCryptoProperty.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/validateCertificate.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/sign.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/signXml.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/encrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/decrypt.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/openStore.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/getCertificates.ts","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/api/findCertificateBySkid.ts","webpack://cryptopro-cades-example/./src/components/CertificateInfo.tsx","webpack://cryptopro-cades-example/./src/components/CryptoProviderInfo.tsx","webpack://cryptopro-cades-example/./src/App.tsx","webpack://cryptopro-cades-example/./src/index.tsx","webpack://cryptopro-cades-example/../../packages/cryptopro-cades/src/vendor/cadesplugin_api.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Хранилище персональных сертификатов пользователя.\n */\nexport const CAPICOM_MY_STORE = 'My';\n\n/**\n * Тип подписи XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xml_signature_type\n */\nexport enum CADESCOM_XML_SIGNATURE_TYPE {\n  /**\n   * Вложенная подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0,\n\n  /**\n   * Оборачивающая подпись.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1,\n\n  /**\n   * Подпись по шаблону.\n   */\n  CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2,\n}\n\n/**\n * Тип подписи XAdES-XML-документа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_xades_type\n */\nexport enum CADESCOM_XADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (XAdES-X Long Type 1).\n   */\n  CADESCOM_XADES_DEFAULT = 0x00000010,\n\n  /**\n   * Тип подписи XAdES-A.\n   */\n  CADESCOM_XADES_A = 0x000007d0,\n\n  /**\n   * Тип подписи XAdES BES.\n   */\n  CADESCOM_XADES_BES = 0x00000020,\n\n  /**\n   * Тип подписи XAdES T.\n   */\n  CADESCOM_XADES_T = 0x00000050,\n\n  /**\n   * Тип подписи XAdES-X Long Type 1.\n   */\n  CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0,\n\n  /**\n   * Тип подписи XMLDSIG.\n   */\n  CADESCOM_XMLDSIG_TYPE = 0x00000000,\n}\n\n/**\n * Тип усовершенствованной подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_cades_type\n */\nexport const enum CADESCOM_CADES_TYPE {\n  /**\n   * Тип подписи по умолчанию (CAdES-X Long Type 1).\n   */\n  CADESCOM_CADES_DEFAULT = 0,\n\n  /**\n   * Тип подписи CAdES BES.\n   */\n  CADESCOM_CADES_BES = 1,\n\n  /**\n   * Тип подписи CAdES T.\n   */\n  CADESCOM_CADES_T = 0x5,\n\n  /**\n   * Тип подписи CAdES-X Long Type 1.\n   */\n  CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d,\n\n  /**\n   * Тип подписи PKCS7.\n   */\n  CADESCOM_PKCS7_TYPE = 0xffff,\n}\n\n/**\n * Типы криптографических алгоритмов для XmlDsig\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-methods?id=Константы\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-samples/plugin-samples-sign-xml\n */\nexport enum XML_SIGNATURE_GOST_ALGORITHM_TYPE {\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411',\n\n  /**\n   * URL Алгоритм подписи для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3410UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411Url = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411',\n\n  /**\n   * URL Алгоритм хеширования для XmlDsig, ГОСТ 2001.\n   */\n  XmlDsigGost3411UrlObsolete = 'http://www.w3.org/2001/04/xmldsig-more#gostr3411',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3411Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (256).\n   */\n  XmlDsigGost3410Url2012256 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256',\n\n  /**\n   * Алгоритм хеширования для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3411Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512',\n\n  /**\n   * Алгоритм подписи для XmlDsig, ГОСТ 2012 (512).\n   */\n  XmlDsigGost3410Url2012512 = 'urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512',\n}\n\n/**\n * The CAPICOM_CERTIFICATE_INCLUDE_OPTION enumeration type defines which certificates in a chain are saved.\n * This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-include-option\n */\nexport enum CAPICOM_CERTIFICATE_INCLUDE_OPTION {\n  /**\n   * Saves all certificates in the chain with the exception of the root entity.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0,\n\n  /**\n   * Saves the complete certificate chain.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1,\n\n  /**\n   * Saves only the end entity certificate.\n   */\n  CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2,\n}\n\n/**\n * Способ кодирования данных для подписи.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_content_encoding_type\n */\nexport enum CADESCOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CADESCOM_ENCODE_ANY = -1,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CADESCOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CADESCOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Enumeration type indicates the encoding type used.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-encoding-type\n */\nexport enum CAPICOM_ENCODING_TYPE {\n  /**\n   * Data is saved as a base64-encoded string or a pure binary sequence. This encoding type is used only for input data that has an unknown encoding type. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_ENCODE_ANY = 0xffffffff,\n\n  /**\n   * Data is saved as a base64-encoded string.\n   */\n  CAPICOM_ENCODE_BASE64 = 0,\n\n  /**\n   * Data is saved as a pure binary sequence.\n   */\n  CAPICOM_ENCODE_BINARY = 1,\n}\n\n/**\n * Используется как параметр при открытии Хранилища через @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/store-open\n * Позволяет задать уровень доступа к открываемому Хранилищу.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-open-mode\n */\nexport enum CAPICOM_STORE_OPEN_MODE {\n  /**\n   * Open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_READ_ONLY = 0,\n\n  /**\n   * Open the store in read/write mode.\n   */\n  CAPICOM_STORE_OPEN_READ_WRITE = 1,\n\n  /**\n   * Open the store in read/write mode if the user has read/write permissions. If the user does not have read/write permissions, open the store in read-only mode.\n   */\n  CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2,\n\n  /**\n   * Open existing stores only; do not create a new store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_EXISTING_ONLY = 128,\n\n  /**\n   * Include archived certificates when using the store. Introduced by CAPICOM 2.0.\n   */\n  CAPICOM_STORE_OPEN_INCLUDE_ARCHIVED = 256,\n}\n\n/**\n * Типы для указания расположения хранилища сертификатов.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_store_location\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-store-location\n */\nexport enum STORE_LOCATION {\n  /**\n   * Хранилище сертификатов в памяти компьютера. Любые изменения недопустимы.\n   */\n  CAPICOM_MEMORY_STORE = 0,\n  CADESCOM_MEMORY_STORE = 0,\n\n  /**\n   * Хранилище сертификатов компьютера. Если открыто на чтение/запись, то у вас есть права на изменения.\n   */\n  CAPICOM_LOCAL_MACHINE_STORE = 1,\n  CADESCOM_LOCAL_MACHINE_STORE = 1,\n\n  /**\n   * Хранилище сертификатов текущего пользователя. Доступ для изменения доступен для текущего пользователя.\n   */\n  CAPICOM_CURRENT_USER_STORE = 2,\n  CADESCOM_CURRENT_USER_STORE = 2,\n\n  /**\n   * Хранилище сертификатов в Active Directory.. Доступно только для чтения. Нельзя добавить или удалить сертификаты из данного хранилища.\n   */\n  CAPICOM_ACTIVE_DIRECTORY_USER_STORE = 3,\n\n  /**\n   * Хранилище сертификатов на смарткартах (поддерживается только с КриптоПро CSP 5.0.11823 и выше). Объявлено и доступно с CAPICOM 2.0.\n   */\n  CAPICOM_SMART_CARD_USER_STORE = 4,\n\n  /**\n   * Хранилище сертификатов из контейнеров закрытых ключей. В данный Store попадают все сертификаты из контейнеров закрытых ключей, которые доступны в системе в момент открытия.\n   * Доступно с CAdESCOM Plugin 2.0.13292\n   */\n  CADESCOM_CONTAINER_STORE = 100,\n}\n\n/**\n * The CAPICOM_CERT_INFO_TYPE enumeration type defines what information is to be queried from a certificate.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-cert-info-type\n * @type {number}\n */\nexport enum CAPICOM_CERT_INFO_TYPE {\n  /**\n   * Returns the display name from the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0,\n\n  /**\n   * Returns the display name of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1,\n\n  /**\n   * Returns the email address of the certificate subject.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_EMAIL_NAME = 2,\n\n  /**\n   * Returns the email address of the issuer of the certificate.\n   */\n  CAPICOM_CERT_INFO_ISSUER_EMAIL_NAME = 3,\n\n  /**\n   * Returns the UPN of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_UPN = 4,\n\n  /**\n   * Returns the UPN of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_UPN = 5,\n\n  /**\n   * Returns the DNS name of the certificate subject. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_SUBJECT_DNS_NAME = 6,\n\n  /**\n   * Returns the DNS name of the issuer of the certificate. Introduced in CAPICOM 2.0.\n   */\n  CAPICOM_CERT_INFO_ISSUER_DNS_NAME = 7,\n}\n\n/**\n * The CAPICOM_CERTIFICATE_FIND_TYPE enumeration type defines the type of search criteria used to find specific certificates. This enumeration type was introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-certificate-find-type\n * @type {number}\n */\nexport enum CAPICOM_CERTIFICATE_FIND_TYPE {\n  /**\n   * Returns certificates matching a specified SHA1 hash.\n   */\n  CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0,\n\n  /**\n   * Returns certificates whose subject name exactly or partially matches a specified subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1,\n\n  /**\n   * Returns certificates whose issuer name exactly or partially matches a specified issuer name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2,\n\n  /**\n   * Returns certificates whose root subject name exactly or partially matches a specified root subject name.\n   */\n  CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3,\n\n  /**\n   * Returns certificates whose template name matches a specified template name.\n   */\n  CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4,\n\n  /**\n   * Returns certificates that have an extension that matches a specified extension.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENSION = 5,\n\n  /**\n   * Returns certificates that have an extended property whose property identifier matches a specified property identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6,\n\n  /**\n   * Returns certificates in the store that have either an enhanced key usage extension or property combined with a usage identifier.\n   */\n  CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7,\n\n  /**\n   * Returns certificates containing a specified policy OID.\n   */\n  CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8,\n\n  /**\n   * Returns certificates whose time is valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9,\n\n  /**\n   * Returns certificates whose time is not yet valid.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10,\n\n  /**\n   * Returns certificates whose time has expired.\n   */\n  CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11,\n\n  /**\n   * Returns certificates containing a key that can be used in the specified manner.\n   */\n  CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12,\n}\n\n/**\n * The CAPICOM_KEY_USAGE enumeration defines the ways in which a key can be used. Introduced in CAPICOM 2.0.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-key-usage\n * @type {number}\n */\nexport enum CAPICOM_KEY_USAGE {\n  /**\n   * The key can be used to create a digital signature.\n   */\n  CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128,\n\n  // other enums omited.\n}\n\n//region (cert.Find(..)) https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n/**\n * Возвращает DWORD значение, указывающее на закрытый ключ из\n *  CERT_KEY_CONTEXT_PROP_ID, если он есть.\n *  Иначе, если CERT_KEY_PROV_INFO_PROP_ID есть,\n *  то он будет источником dwKeySpec.\n *  (Find(CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY,CERT_KEY_SPEC_PROP_ID)\n *   - вернет сертификаты, у к-ых есть ссылка на закрытый ключ)\n * @type {number}\n */\nexport const CERT_KEY_SPEC_PROP_ID = 6;\n\n/**\n * Свойства хэш объекта.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/capicom-propid\n * @type {number}\n */\nexport enum CAPICOM_PROPID {\n  /**\n   * Неизвестный тип свойства.\n   */\n  CAPICOM_PROPID_UNKNOWN = 0,\n\n  /**\n   * Обработчик ключа контейнера с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_HANDLE = 1,\n  /**\n   * Вывод только сертификатов с информацией о контейнерах с Криптопровайдером.\n   */\n  CAPICOM_PROPID_KEY_PROV_INFO = 2,\n\n  /**\n   * The properties of a hash object.\n   */\n  CAPICOM_PROPID_HASH_PROP = 3,\n\n  /**\n   * A SHA1 hash object.\n   */\n  CAPICOM_PROPID_SHA1_HASH = 3,\n\n  /**\n   * An MD5 hash object.\n   */\n  CAPICOM_PROPID_MD5_HASH = 4,\n\n  /**\n   * The key context.\n   */\n  CAPICOM_PROPID_KEY_CONTEXT = 5,\n\n  /**\n   * The specifications for a key.\n   */\n  CAPICOM_PROPID_KEY_SPEC = 6,\n\n  /**\n   * Information about whether the hash of the public key is reserved.\n   */\n  CAPICOM_PROPID_PUBKEY_HASH_RESERVED = 8,\n\n  /**\n   * A certificate trust list (CTL) usage.\n   */\n  CAPICOM_PROPID_CTL_USAGE = 9,\n\n  /**\n   * An enhanced key usage (EKU).\n   */\n  CAPICOM_PROPID_ENHKEY_USAGE = 9,\n\n  /**\n   * The location of the next update to the certificate revocation list (CRL).\n   */\n  CAPICOM_PROPID_NEXT_UPDATE_LOCATION = 10,\n\n  /**\n   * A human-readable name.\n   */\n  CAPICOM_PROPID_FRIENDLY_NAME = 11,\n\n  /**\n   * A file that contains a private key.\n   */\n  CAPICOM_PROPID_PVK_FILE = 12,\n\n  /**\n   * A human-readable description.\n   */\n  CAPICOM_PROPID_DESCRIPTION = 13,\n\n  /**\n   * The state of the access.\n   */\n  CAPICOM_PROPID_ACCESS_STATE = 14,\n\n  /**\n   * A hash of the signature.\n   */\n  CAPICOM_PROPID_SIGNATURE_HASH = 15,\n\n  /**\n   * Smart card data.\n   */\n  CAPICOM_PROPID_SMART_CARD_DATA = 16,\n\n  /**\n   * An Encrypting File System (EFS).\n   */\n  CAPICOM_PROPID_EFS = 17,\n\n  /**\n   * Data created using the cryptographic protocols and algorithms owned by the National Institute of Standards and Technology (NIST).\n   */\n  CAPICOM_PROPID_FORTEZZA_DATA = 18,\n\n  /**\n   * Information about whether the object is archived.\n   */\n  CAPICOM_PROPID_ARCHIVED = 19,\n\n  /**\n   * A key identifier.\n   */\n  CAPICOM_PROPID_KEY_IDENTIFIER = 20,\n\n  /**\n   * Auto-enrollment information for a certificate.\n   */\n  CAPICOM_PROPID_AUTO_ENROLL = 21,\n\n  /**\n   * Parameters for a public key algorithm.\n   */\n  CAPICOM_PROPID_PUBKEY_ALG_PARA = 22,\n\n  /**\n   * Information used to update dynamic cross certificates.\n   */\n  CAPICOM_PROPID_CROSS_CERT_DIST_POINTS = 23,\n\n  /**\n   * Information about whether the object is reserved in Internet Explorer 3.0.\n   */\n  CAPICOM_PROPID_ISSUER_PUBLIC_KEY_MD5_HASH = 24,\n\n  /**\n   * The MD5 hash of the subject's public key.\n   */\n  CAPICOM_PROPID_SUBJECT_PUBLIC_KEY_MD5_HASH = 25,\n\n  /**\n   * Information about the certificate's enrollment.\n   */\n  CAPICOM_PROPID_ENROLLMENT = 26,\n\n  /**\n   * A date stamp.\n   */\n  CAPICOM_PROPID_DATE_STAMP = 27,\n\n  /**\n   * The MD5 hash of the issuer's serial number.\n   */\n  CAPICOM_PROPID_ISSUER_SERIAL_NUMBER_MD5_HASH = 28,\n\n  /**\n   * The MD5 hash of the subject's name.\n   */\n  CAPICOM_PROPID_SUBJECT_NAME_MD5_HASH = 29,\n\n  /**\n   * Extended information about an error.\n   */\n  CAPICOM_PROPID_EXTENDED_ERROR_INFO = 30,\n\n  /**\n   * Information about the renewal of a certification authority.\n   */\n  CAPICOM_PROPID_RENEWAL = 64,\n\n  /**\n   * An archived hash of a key.\n   */\n  CAPICOM_PROPID_ARCHIVED_KEY_HASH = 65,\n\n  /**\n   * Information about the first reservation.\n   */\n  CAPICOM_PROPID_FIRST_RESERVED = 66,\n\n  /**\n   * Information about the most recent reservation.\n   */\n  CAPICOM_PROPID_LAST_RESERVED = 0x00007fff,\n\n  /**\n   * Information about the first user.\n   */\n  CAPICOM_PROPID_FIRST_USER = 0x00008000,\n\n  /**\n   * Information about the most recent user.\n   */\n  CAPICOM_PROPID_LAST_USER = 0x0000ffff,\n}\n\nexport const CAPICOM_OID_OTHER = 0;\nexport const CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\nexport const CAPICOM_EKU_CLIENT_AUTH = 2;\nexport const CAPICOM_EKU_SMARTCARD_LOGON = 5;\nexport const CAPICOM_EKU_OTHER = 0;\n\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\nexport const CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\nexport const CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\nexport const CADESCOM_ATTRIBUTE_OTHER = -1;\n\nexport const CADESCOM_STRING_TO_UCS2LE = 0;\nexport const CADESCOM_BASE64_TO_BINARY = 1;\n\nexport const CADESCOM_DISPLAY_DATA_NONE = 0;\nexport const CADESCOM_DISPLAY_DATA_CONTENT = 1;\nexport const CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\nexport const CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;\nexport const CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;\n\nexport const CADESCOM_HASH_ALGORITHM_SHA1 = 0;\nexport const CADESCOM_HASH_ALGORITHM_MD2 = 1;\nexport const CADESCOM_HASH_ALGORITHM_MD4 = 2;\nexport const CADESCOM_HASH_ALGORITHM_MD5 = 3;\nexport const CADESCOM_HASH_ALGORITHM_SHA_256 = 4;\nexport const CADESCOM_HASH_ALGORITHM_SHA_384 = 5;\nexport const CADESCOM_HASH_ALGORITHM_SHA_512 = 6;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111;\nexport const CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112;\n\nexport const CADESCOM_AllowNone = 0;\nexport const CADESCOM_AllowNoOutstandingRequest = 0x1;\nexport const CADESCOM_AllowUntrustedCertificate = 0x2;\nexport const CADESCOM_AllowUntrustedRoot = 0x4;\nexport const CADESCOM_SkipInstallToStore = 0x10000000;\nexport const CADESCOM_InstallCertChainToContainer = 0x20000000;\nexport const CADESCOM_UseContainerStore = 0x40000000;\n\nexport const ENABLE_CARRIER_TYPE_CSP = 0x01;\nexport const ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\nexport const ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\nexport const ENABLE_ANY_CARRIER_TYPE = 0x07;\n\nexport const DISABLE_EVERY_CARRIER_OPERATION = 0x00;\nexport const ENABLE_CARRIER_OPEN_ENUM = 0x01;\nexport const ENABLE_CARRIER_CREATE = 0x02;\nexport const ENABLE_ANY_OPERATION = 0x03;\n\nexport const CADESCOM_PRODUCT_CSP = 0;\nexport const CADESCOM_PRODUCT_OCSP = 1;\nexport const CADESCOM_PRODUCT_TSP = 2;\n\n/**\n * Тип медиа.\n * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_enum/cadescom_media_type\n */\nexport const enum CADESCOM_MEDIA_TYPE {\n  /**\n   * Реестр.\n   */\n  MEDIA_TYPE_REGISTRY = 0x00000001,\n\n  /**\n   * Жесткий диск.\n   */\n  MEDIA_TYPE_HDIMAGE = 0x00000002,\n\n  /**\n   * Облачный носитель.\n   */\n  MEDIA_TYPE_CLOUD = 0x00000004,\n\n  /**\n   * Смарт-карта или любое другое устройство с интерфейсом смарт-карты.\n   */\n  MEDIA_TYPE_SCARD = 0x00000008,\n}\n\nexport const XCN_CRYPT_STRING_BASE64HEADER = 0;\nexport const AT_KEYEXCHANGE = 1;\nexport const AT_SIGNATURE = 2;\n\nexport const CARRIER_FLAG_REMOVABLE = 1;\nexport const CARRIER_FLAG_UNIQUE = 2;\nexport const CARRIER_FLAG_PROTECTED = 4;\nexport const CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\nexport const CARRIER_FLAG_SECURE_MESSAGING = 16;\nexport const CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\nexport const CARRIER_FLAG_VIRTUAL = 128;\n\n/**\n * OID (атрибут) сертификата.\n * The OID object represents an object identifier (OID) that is used by several CAPICOM properties.\n * @see https://docs.microsoft.com/en-us/windows/win32/seccrypto/oid\n */\nexport interface CAPICOM_OID {\n  readonly CAPICOM_OID_OTHER: 0;\n  readonly CAPICOM_OID_KEY_USAGE_EXTENSION: 10;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER_EXTENSION: 1;\n  readonly CAPICOM_OID_KEY_ATTRIBUTES_EXTENSION: 2;\n  readonly CAPICOM_OID_CERT_POLICIES_95_EXTENSION: 3;\n  readonly CAPICOM_OID_KEY_USAGE_RESTRICTION_EXTENSION: 4;\n  readonly CAPICOM_OID_LEGACY_POLICY_MAPPINGS_EXTENSION: 5;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME_EXTENSION: 6;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME_EXTENSION: 7;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS_EXTENSION: 8;\n  readonly CAPICOM_OID_SUBJECT_KEY_IDENTIFIER_EXTENSION: 9;\n  readonly CAPICOM_OID_PRIVATEKEY_USAGE_PERIOD_EXTENSION: 11;\n  readonly CAPICOM_OID_SUBJECT_ALT_NAME2_EXTENSION: 12;\n  readonly CAPICOM_OID_ISSUER_ALT_NAME2_EXTENSION: 13;\n  readonly CAPICOM_OID_BASIC_CONSTRAINTS2_EXTENSION: 14;\n  readonly CAPICOM_OID_NAME_CONSTRAINTS_EXTENSION: 15;\n  readonly CAPICOM_OID_CRL_DIST_POINTS_EXTENSION: 16;\n  readonly CAPICOM_OID_CERT_POLICIES_EXTENSION: 17;\n  readonly CAPICOM_OID_POLICY_MAPPINGS_EXTENSION: 18;\n  readonly CAPICOM_OID_AUTHORITY_KEY_IDENTIFIER2_EXTENSION: 19;\n  readonly CAPICOM_OID_POLICY_CONSTRAINTS_EXTENSION: 20;\n  readonly CAPICOM_OID_ENHANCED_KEY_USAGE_EXTENSION: 21;\n  readonly CAPICOM_OID_CERTIFICATE_TEMPLATE_EXTENSION: 22;\n  readonly CAPICOM_OID_APPLICATION_CERT_POLICIES_EXTENSION: 23;\n  readonly CAPICOM_OID_APPLICATION_POLICY_MAPPINGS_EXTENSION: 24;\n  readonly CAPICOM_OID_APPLICATION_POLICY_CONSTRAINTS_EXTENSION: 25;\n  readonly CAPICOM_OID_AUTHORITY_INFO_ACCESS_EXTENSION: 26;\n  readonly CAPICOM_OID_SERVER_AUTH_EKU: 100;\n  readonly CAPICOM_OID_CLIENT_AUTH_EKU: 101;\n  readonly CAPICOM_OID_CODE_SIGNING_EKU: 102;\n  readonly CAPICOM_OID_EMAIL_PROTECTION_EKU: 103;\n  readonly CAPICOM_OID_IPSEC_END_SYSTEM_EKU: 104;\n  readonly CAPICOM_OID_IPSEC_TUNNEL_EKU: 105;\n  readonly CAPICOM_OID_IPSEC_USER_EKU: 106;\n  readonly CAPICOM_OID_TIME_STAMPING_EKU: 107;\n  readonly CAPICOM_OID_CTL_USAGE_SIGNING_EKU: 108;\n  readonly CAPICOM_OID_TIME_STAMP_SIGNING_EKU: 109;\n  readonly CAPICOM_OID_SERVER_GATED_CRYPTO_EKU: 110;\n  readonly CAPICOM_OID_ENCRYPTING_FILE_SYSTEM_EKU: 111;\n  readonly CAPICOM_OID_EFS_RECOVERY_EKU: 112;\n  readonly CAPICOM_OID_WHQL_CRYPTO_EKU: 113;\n  readonly CAPICOM_OID_NT5_CRYPTO_EKU: 114;\n  readonly CAPICOM_OID_OEM_WHQL_CRYPTO_EKU: 115;\n  readonly CAPICOM_OID_EMBEDED_NT_CRYPTO_EKU: 116;\n  readonly CAPICOM_OID_ROOT_LIST_SIGNER_EKU: 117;\n  readonly CAPICOM_OID_QUALIFIED_SUBORDINATION_EKU: 118;\n  readonly CAPICOM_OID_KEY_RECOVERY_EKU: 119;\n  readonly CAPICOM_OID_DIGITAL_RIGHTS_EKU: 120;\n  readonly CAPICOM_OID_LICENSES_EKU: 121;\n  readonly CAPICOM_OID_LICENSE_SERVER_EKU: 122;\n  readonly CAPICOM_OID_SMART_CARD_LOGON_EKU: 123;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_CPS: 124;\n  readonly CAPICOM_OID_PKIX_POLICY_QUALIFIER_USERNOTICE: 125;\n}\n\n/**\n * Список крипто-объектов для передачи в createObject, (cadesplugin|capicom).CreateObject|CreateObjectAsync()\n */\nexport const enum CRYPTO_OBJECTS {\n  /**\n   * Объект позволяющий взаимодействовать с хранилищем сертификатов.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/store\n   */\n  store = 'CAdESCOM.Store',\n\n  /**\n   * Объект задающий параметры создания и содержащий информацию об усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpsigner\n   */\n  signer = 'CAdESCOM.CPSigner',\n\n  /**\n   * Объект задающий способ подписания Xml файла.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/signedxml\n   */\n  signedXml = 'CAdESCOM.SignedXML',\n\n  /**\n   * Объект предоставляет свойства и методы для работы с подписанным документом XML.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/about\n   */\n  about = 'CAdESCOM.About',\n\n  /**\n   * Объект предоставляет функционал по усовершенствованной подписи.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cadessigneddata\n   */\n  signedData = 'CAdESCOM.CadesSignedData',\n\n  /**\n   * Объект предоставляет функционал по шифрованию/расшифровке сообщения.\n   * @see https://docs.cryptopro.ru/cades/reference/cadescom/cadescom_class/cpenvelopeddata\n   */\n  envelopedData = 'CAdESCOM.CPEnvelopedData',\n}\n","/* eslint-disable @typescript-eslint/naming-convention */\n/**\n * Источники сертификатов (Где искать сертификаты?).\n */\nexport enum STORE_TYPE {\n  ALL = 'ALL',\n  USB_TOKEN = 'USB_TOKEN',\n  REGISTRY = 'REGISTRY',\n}\n","/**\n * Справочник типок криптопровайдеров, с которыми работает плагин (для проверки поддержки).\n */\nexport const CRYPTO_PROVIDERS = [\n  {\n    ProviderType: 75,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2001 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 80,\n    ProviderName: 'Crypto-Pro GOST R 34.10-2012 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 81,\n    ProviderName:\n      'Crypto-Pro GOST R 34.10-2012 Strong Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 2,\n    ProviderName: 'Infotecs Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 77,\n    ProviderName: 'Infotecs GOST 2012/512 Cryptographic Service Provider',\n  },\n  {\n    ProviderType: 78,\n    ProviderName: 'Infotecs GOST 2012/1024 Cryptographic Service Provider',\n  },\n];\n\n/**\n * Криптопровайдер по-умолчанию.\n */\nexport const DEFAULT_CRYPTO_PROVIDER = {\n  Default: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 80)!,\n  Fallback: CRYPTO_PROVIDERS.find((t) => t.ProviderType === 2)!,\n};\n\n/**\n * Криптопровайдеры VipNet.\n */\nexport const VIP_NET_CRYPTO_PROVIDER_TYPES = Object.freeze([2, 77, 78]);\n\n/**\n * Криптопровайдеры КриптоПРО.\n */\nexport const CRYPTO_PRO_CRYPTO_PROVIDER_TYPES = Object.freeze([75, 80, 81]);\n","/* eslint-disable @typescript-eslint/naming-convention */\nexport const OIDS_DICTIONARY = {\n  '1.2.643.2.2.34.6': 'Пользователь Центра Регистрации',\n  '1.2.643.2.39.1.1':\n    'Использование в программных продуктах системы \"1С:Предприятие 8\"',\n  '1.2.643.3.131.1.1': 'ИНН',\n  '1.2.643.3.141.1.1': 'РНС ФСС',\n  '1.2.643.3.141.1.2': 'КП ФСС',\n  '1.2.643.3.2.100.65.13.11':\n    'Использование в системе АИС \"Госзакупки\" Сахалинской области.',\n  '1.2.643.3.8.100.1': 'Сертификат типа \"ekey-ГОСТ\"',\n  '1.2.643.3.8.100.1.1':\n    'Общее использование в системах ИОК без права заверения финансовых документов',\n  '1.2.643.3.8.100.1.10':\n    'Для участия в электронных торгах и подписания государственного контракта в  информационных системах Тендерного комитета города Москвы уполномоченными  лицами участников размещения государственного заказа города Москвы',\n  '1.2.643.3.8.100.1.11':\n    'Подписание электронных документов в автоматизированной информационной  системе размещения государственного и муниципального заказа Саратовской области',\n  '1.2.643.3.8.100.1.12':\n    'Использование в системе государственного заказа Иркутской области',\n  '1.2.643.3.8.100.1.13':\n    'Использование в электронной торговой площадке агентства государственного  заказа Красноярского края',\n  '1.2.643.3.8.100.1.14':\n    'Использование в электронной торговой площадке \"Тендер\"',\n  '1.2.643.3.8.100.1.2': 'Передача отчетности по ТКС',\n  '1.2.643.3.8.100.1.3':\n    'Оформление взаимных обязательств, соглашений, договоров, актов и т.п.',\n  '1.2.643.3.8.100.1.4': 'Внутрикорпоративный документооборот',\n  '1.2.643.3.8.100.1.5': 'Использование в системах электронной торговли',\n  '1.2.643.3.8.100.1.6': 'Использование в торгово-закупочной системе \"ЭЛЕКТРА\"',\n  '1.2.643.3.8.100.1.7':\n    'Использование в системе Портал государственных закупок Ставропольского края.',\n  '1.2.643.3.8.100.1.8':\n    'Использование в Единой системе электронной торговли B2B-Center и B2G.',\n  '1.2.643.3.8.100.1.9':\n    'Для участия в электронных торгах и подписания государственного контракта в  электронной площадке ОАО «ЕЭТП» уполномоченными лицами участников размещения  государственного или муниципального заказа',\n  '1.2.643.5.1.24.2.1.3':\n    'Формирование документов для получения государственных  услуг в сфере ведения государственного кадастра недвижимости со стороны заявителя',\n  '1.2.643.5.1.24.2.1.3.1':\n    'Формирование кадастровым инженером документов  для получения государственных услуг в сфере ведения государственного кадастра недвижимости со стороны  заявителя',\n  '1.2.643.5.1.24.2.2.2':\n    'Формирование документов как результата оказания  услуги со стороны органов регистрации прав',\n  '1.2.643.5.1.24.2.2.3':\n    'Формирование документов для получения государственных  услуг в сфере государственной регистрации прав на недвижимое имущество и сделок с ним со стороны заявителя',\n  '1.2.643.6.2.1.7.1':\n    'Использование единоличным исполнительным органом юридического лица или уполномоченными представителями юридического лица в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских и иных прав и обязанностей в сфере негосударственного пенсионного обеспечения, негосударственного пенсионного страхования, в сфере деятельности паевых инвестиционных фондов, акционерных инвестиционных фондов, профессиональных участников рынка ценных бумаг, а также связанной с обслуживанием указанной деятельности услуг кредитных и иных организаций',\n  '1.2.643.6.2.1.7.2':\n    'Использование физическим лицом в отношениях, связанных с возникновением, исполнением (осуществлением) и прекращением гражданских прав и обязанностей в отношении инвестиционных паев паевых инвестиционных фондов, в том числе отношения, связанные с учетом и/или фиксацией прав на инвестиционные паи паевых инвестиционных фондов',\n  '1.2.643.6.3':\n    'Использование в электронных торговых системах и в программном обеспечении, связанным с обменом электронных сообщений',\n  '1.2.643.6.3.1.1':\n    'Использование на электронных площадок отобранных для проведения аукционах в электронной форме',\n  '1.2.643.6.3.1.2.1': 'Тип участника - Юридическое лицо',\n  '1.2.643.6.3.1.2.2': 'Тип участника - Физическое лицо',\n  '1.2.643.6.3.1.2.3': 'Тип участника - Индивидуальный предприниматель',\n  '1.2.643.6.3.1.3.1': 'Участник размещения заказа',\n  '1.2.643.6.3.1.4.1': 'Администратор организации',\n  '1.2.643.6.3.1.4.2': 'Уполномоченный специалист',\n  '1.2.643.6.3.1.4.3': 'Специалист с правом подписи контракта',\n  '1.2.840.113549.1.9.2': 'Неструктурированное имя',\n  '1.3.6.1.4.1.24138.1.1.8.1':\n    'Обеспечение юридической значимости в Системе \"Электронная Торговая Площадка\"',\n  '1.3.6.1.4.1.29919.21':\n    'Использование в системе Портал государственных закупок  Ростовской области \"Рефери\".',\n  '1.3.6.1.5.5.7.3.2': 'Проверка подлинности клиента',\n  '1.3.6.1.5.5.7.3.4': 'Защищенная электронная почта',\n  '1.3.643.3.8.100.15': 'Использование в ЭТП \"uTender\"',\n};\n\n/**\n * Типы ГОСТовских алгоритмов.\n */\nexport enum GOST_KEY_ALGORITHM_TYPES {\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 256 бит.\n   */\n  GOST_R3410_12_256 = '1.2.643.7.1.1.1.1',\n\n  /**\n   * Алгоритм ГОСТ Р 34.10-2012 для ключей длины 512 бит\n   */\n  GOST_R3410_12_512 = '1.2.643.7.1.1.1.2',\n}\n\n/**\n * OID ГОСТовских алгоритмов.\n */\nexport const GOST_KEY_ALGORITHM_OIDS = Object.values(GOST_KEY_ALGORITHM_TYPES);\n\n/**\n * OID SubjectKeyId расширения в сертификате.\n */\nexport const subjectKeyIdExtensionOid = '2.5.29.14';\n","/**\n * Список возможных ошибок при работе с API CryptoPro Browser Plugin.\n * Это ошибки могут быть как от криптопровайдера (CSP), так и от операционной системы пользователя.\n * Часть ошибок описана тут @see https://docs.cryptopro.ru/pki/introduction/dllerrors\n * @type {{code: string, message: string}[]}\n */\nexport const CRYPTO_PRO_ERRORS = Object.freeze([\n  {\n    code: '0x80090008',\n    message:\n      'Указан неверный алгоритм. Операционная система не смогла выполнить операцию, так как криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить сертификат и проверить привязку к закрытому ключу, если не поможет, то переустановить криптопровайдер.',\n    // original: 'Код ошибки: 0x80090008 (Указан неверный алгоритм)'\n  },\n  {\n    code: '0x80090017',\n    message:\n      'Криптопровайдер не установлен или установлен некорректно. Для устранения ошибки рекомендуется переустановить криптопровайдер.',\n  },\n  {\n    code: '0x8007064A',\n    message:\n      'Возможно криптопровайдер КриптоПро частично удален с рабочего места или установлена устаревшая версия. Для устранения ошибки рекомендуется установить версию КриптоПро 4.0 и выше.',\n    // original: 'Ошибка КриптоПро CSP Загрузка информации о лицензии Код ошибки: 0x8007064A (Данные настройки для этого продукта повреждены. Обратитесь в службу поддержки организации)'\n  },\n  {\n    code: '0x80090019',\n    message:\n      'Набор ключей не определен. Проверьте на корректность сертификат и убедитесь что на машине установлен необходимый для него криптопровайдер.',\n    // original: 'Код ошибки: 0x80090019 (Набор ключей не определен.)'\n    // возникает так же если не установлен на компе криптопро\n  },\n  {\n    code: '0x8007139F',\n    message:\n      'Внутренняя ошибка КриптоПро. Группа или ресурс не находятся в нужном состоянии для выполнения требуемой операции. Вероятно не работает TSP сервер (служба штампов времени).',\n  },\n  {\n    code: '0x80070002',\n    message:\n      'Внутренняя ошибка КриптоПро. Если вы подписываете с помощью усовершенствованной подписи, убедитесь что ваши версии TSP client и OCSP client имеют неограниченную лицензию.',\n  },\n  {\n    code: '0xc2110128',\n    message:\n      'Внутренняя ошибка КриптоПро. Не удалось получить статус отзыва ЭП. Попробуйте повторить операцию позднее.',\n  },\n  {\n    code: '0xC2100121',\n    message:\n      'Внутренняя ошибка КриптоПро. Не задан адрес службы штампов времени.',\n  },\n  {\n    code: '0xC2110121',\n    message: 'Внутренняя ошибка КриптоПро. Не задан адрес службы OCSP.',\n  },\n  {\n    code: '0x80090020',\n    message:\n      'Внутренняя ошибка КриптоПро. Убедитесь, что на машине установлен только один криптопровайдер во избежание конфликтов ПО.',\n  },\n  {\n    code: '0x800B010A',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x800B0109',\n    message:\n      'Не установлен корневой сертификат. Произведите установку корневого сертификата Удостоверяющего Центра, выдавшего вашу электронную подпись.',\n  },\n  {\n    code: '0x8007065B',\n    message: 'Истекла лицензия КриптоПро CSP',\n  },\n  {\n    code: '0x80092004',\n    message:\n      'Не установлена связь с закрытым ключом, привяжите личный сертификат к закрытому ключу.',\n  },\n  {\n    code: '0x8009200B',\n    message: 'Закрытый ключ не найден.',\n  },\n  {\n    code: '0x8000FFFF', // обычно если USB токен не вставлен\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x8000FFFF (Не удалось создать подпись из-за ошибки: Internal error)'\n  },\n  {\n    code: '0x80090016',\n    message: 'Закрытый ключ не найден.',\n    // original: 'Код ошибки: 0x80090016 (Набор ключей не существует)'\n  },\n  {\n    code: '0x8009000D',\n    message:\n      'Ключ не существует. Для устранения ошибки рекомендуемся переустановить сертификат с повторной привязкой к закрытому ключу.',\n    // original: 'Код ошибки: 0x8009000D (Ключ не существует.)'\n  },\n  {\n    code: '0x8009200C',\n    message:\n      'Не удалось найти закрытый ключ для расшифровки зашифрованного документа.',\n  },\n  {\n    code: '0xC2110126',\n    message: 'Сертификат отозван.',\n  },\n  {\n    code: '0x000004C7',\n    message:\n      'Операция отменена пользователем. Необходимо обновить страницу и предоставить доступ к криптопровайдеру.',\n  },\n  {\n    code: '0x800704C7',\n    message: 'Операция отменена пользователем.',\n  },\n  {\n    code: '0x8010006E',\n    message: 'Операция отменена пользователем.',\n  },\n]);\n\n/**\n * Список кастомных ошибок для различных ситуаций.\n */\nexport const PLUGIN_ERRORS = Object.freeze({\n  'CBP-0': 'Неизвестная ошибка при работе с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-1': 'Не удалось инициализировать КриптоПро ЭЦП Browser plug-in.',\n  'CBP-2':\n    'Ошибка инициализации библиотеки для работы с КриптоПро ЭЦП Browser plug-in.',\n  'CBP-3':\n    'Используется устаревшая версия КриптоПро ЭЦП Browser Plug-in. Необходимо провести обновление до последней доступной версии.',\n  'CBP-4':\n    'Используется устаревшая версия КриптоПро CSP. Необходимо провести обновление до версии 4.0 и выше.',\n  'CBP-5': 'Ошибка формата данных.',\n  'CBP-6': 'Сертификат не прошёл проверку, использование невозможно.',\n  'CBP-7': 'Не верные входные параметры.',\n  'CBP-8': 'Не установлен ни один криптопровайдер.',\n  'CBP-9': 'Неизвестный алгоритм ключа.',\n});\n","/**\n * Логировать ошибку.\n * @param args параметры.\n */\nexport const outputError = (...args: (string | any)[]): void => {\n  console.error(...args);\n};\n","import { CryptoError } from './errors';\nimport { outputError } from './utils/outputError';\n\n/**\n * Настройки плагина.\n */\nclass PluginConfig {\n  /**\n   * Список подписчиков возникающих ошибок в системе.\n   */\n  private errorListeners: ((error: CryptoError) => void)[] = [];\n\n  /**\n   * Выводить дебаг-информацию.\n   */\n  Debug: boolean = false;\n\n  /**\n   * Выводить дебаг информацию по криптопро плагину.\n   */\n  DebugCryptoProBrowserPlugin: boolean = false;\n\n  /**\n   * Проверять систему при инициализации.\n   */\n  CheckSystemSetup: boolean = true;\n\n  /**\n   * Зарегистрировать подписчика ошибок.\n   * @param cb Функция обратного вызова.\n   */\n  public addErrorListener(cb: (error: CryptoError) => void) {\n    this.errorListeners.push(cb);\n  }\n\n  /**\n   * Уведомить подписчиков об ошибке.\n   * @param error Ошибка.\n   */\n  public notifyError(error: CryptoError) {\n    this.errorListeners.forEach((cb) => cb(error));\n  }\n}\n\nconst pluginConfig = new PluginConfig();\n\n/**\n * Функция логирования всех возникающих ошибок.\n * @param error Ошибка.\n */\nconst logErrorWhenInDebug = (error: CryptoError): void => {\n  if (pluginConfig.Debug && error) {\n    const errors = [];\n    let err: any = null;\n    while (err != null) {\n      errors.push(err);\n      if (err instanceof CryptoError) {\n        err = err.InnerError;\n      } else {\n        err = null;\n      }\n    }\n\n    outputError(errors);\n  }\n};\n\npluginConfig.addErrorListener(logErrorWhenInDebug);\n\nexport { pluginConfig };\nexport default pluginConfig;\n","import { getLastError } from '../api/getLastError';\nimport { IAnyError, ICryptoError, IErrorObject } from '../types/ICryptoError';\n\nimport { CRYPTO_PRO_ERRORS, PLUGIN_ERRORS } from './errorCodes';\nimport PluginConfig from './../PluginConfig';\n\n/**\n * Описывает ошибку криптографического модуля.\n *\n *  @example\n *  try{...}\n *  catch(err){\n *    throw CryptoError.createCadesError(err, \"Ошибка инициализации контейнера\")\n *  }\n *\n * @class feature/crypto/CryptoError\n * @extends Error\n */\nexport class CryptoError extends Error implements ICryptoError {\n  /**\n   * Исходный объект ошибки.\n   */\n  public InnerError: IErrorObject | null;\n\n  /**\n   * Правило для выяснения типа ошибки (источника ошибки).\n   */\n  private static _RULE_MATCHING_CODE: RegExp =\n    /^(.*?)(?:(?:\\.?\\s?\\(?0x)|(?:\\.?$))/;\n\n  /**\n   * Код ошибки. Максимальная длина 16 символов.\n   * Для идентификации также смотрите @see #title @see #type.\n   */\n  code: string = '';\n\n  /**\n   * Название ошибки (Основной/короткий текст ошибки).\n   * По нему можно идентифицировать ошибку для изменения #message согласно\n   *  требованиям системы.\n   */\n  title: string = '';\n\n  /**\n   * Текст сообщения об ошибке. Для пользователя.\n   */\n  message: string = '';\n\n  /**\n   * Тип ошибки (обычный - Error, от CAdESCOM plugin - CAdES,...)\n   */\n  type: string = 'Error';\n\n  /**\n   * Унаследовано от родительского класса Error.\n   */\n  name: string = '';\n\n  /**\n   * Приватный конструктор. Для создания экземпляра используйте статические методы @createCadesError и @create\n   * @param err Объект ошибки.\n   */\n  private constructor(err: IErrorObject | null) {\n    super();\n    this.InnerError = err;\n    this.message = err?.message;\n    this.stack = err?.stack;\n  }\n\n  /**\n   * Формирует текстовое представление ошибки в формате Код ошибки: Сообщение для пользователя\n   * @returns\n   */\n  toString() {\n    return [this.code, this.message].filter(Boolean).join(': ');\n  }\n\n  /**\n   * Создает ошибку на основе ошибки от CryptoPro Browser Plugin.\n   * @param err Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю)\n   * @returns {@CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static createCadesError(\n    err: IErrorObject,\n    title: string\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n\n    err = err as IAnyError;\n    cryptoError.code = err.code || CryptoError._extractCode(err);\n    if (typeof cryptoError.code === 'string' && cryptoError.code.length > 16) {\n      cryptoError.code = '';\n    }\n    let extractedMsg = '';\n    if (!err.message) {\n      extractedMsg = cryptoError._extractMessage(err);\n    }\n    cryptoError.title = title ?? err.message ?? extractedMsg;\n    cryptoError.type = err.type ?? 'CAdES';\n    cryptoError.type += ' < @astral/cades-plugin';\n    cryptoError.message =\n      CRYPTO_PRO_ERRORS.find((res) => res.code == cryptoError.code)?.message ??\n      err.message ??\n      extractedMsg;\n\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Создает формализованную ошибку криптографического модуля с указанным кодом ошибки.\n   * @param errorCode Объект ошибки.\n   * @param title Описание ошибки (не показывается пользователю).\n   * @param err Объект ошибки.\n   * @param overrideMessage Текст ошибки который будет указан вместо стандартного из справочника.\n   * @returns {@CryptoError} Объект ошибки криптографического модуля.\n   */\n  public static create(\n    errorCode: keyof typeof PLUGIN_ERRORS,\n    title: string,\n    err: IErrorObject | null,\n    overrideMessage?: string\n  ): CryptoError {\n    const cryptoError = new CryptoError(err);\n    cryptoError.InnerError = err;\n    cryptoError.type = 'Error';\n    cryptoError.code = errorCode;\n    cryptoError.title = title; // не показываем пользователю\n    cryptoError.message = overrideMessage ?? PLUGIN_ERRORS[cryptoError.code];\n\n    PluginConfig.notifyError(cryptoError);\n\n    return cryptoError;\n  }\n\n  /**\n   * Извлекаем код ошибки плагина (если это ошибка крипты).\n   * @param {Error} err - объект ошибки.\n   * @returns {number|string} .\n   * @private\n   */\n  private static _extractCode(err: IErrorObject): number | string {\n    const result =\n      (err.message?.match(/\\(?0x.{2,8}\\)?/) ||\n        err.message?.match(CryptoError._RULE_MATCHING_CODE) ||\n        [])[0] || '';\n    return result.replace(/[()]/g, '');\n  }\n\n  /**\n   * Выдираем из объекта Ошибки сообщение.\n   * @param {string|Error} err - объект ошибки, откуда вытащить собщение.\n   * @returns {*|string} .\n   * @private\n   */\n  private _extractMessage(err: IErrorObject): string | any {\n    const fullErrorData = getLastError(err);\n    const msg = typeof err === 'string' ? err : err.message;\n\n    return (fullErrorData?.message || msg || '').replace(` (${this.code})`, '');\n  }\n}\n","import { IAnyError, ICryptoError } from '../types/ICryptoError';\n\n/**\n * Возвращает строку с описанием ошибки из исключения, порождённого плагином.\n * Для Firefox данный метод является единственным способом получения кода ошибки и её текстового описания от плагина.\n * @param {Error} error - ошибка, по которой нужно получить информацию.\n * @returns {Function} .\n */\nexport function getLastError(\n  error: ICryptoError | Error | IAnyError\n): Error | undefined {\n  return window.cadesplugin?.getLastError(error);\n}\n","import { Buffer } from 'buffer';\n\n// @ts-ignore // TOOD: разобраться почему не находит модуль.\nimport { Certificate as x509Certificate } from 'pkijs';\nimport { fromBER } from 'asn1js';\n\nimport { Certificate } from '../Certificate';\nimport {\n  GOST_KEY_ALGORITHM_OIDS,\n  subjectKeyIdExtensionOid,\n} from '../constants/oids-dictionary';\nimport { CryptoError } from '../errors';\n\nimport { bufferToHex } from './bufferToHex';\n\n/**\n * Парсит данные сертификата.\n * @param certificate Сертификат.\n */\nexport function parseCertificate(certificate: Certificate) {\n  if (!certificate.certificateBase64Data) {\n    const errorMessage = 'Не загружена открытая часть сертификата.';\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n  const asn1 = fromBER(\n    new Uint8Array(Buffer.from(certificate.certificateBase64Data, 'base64'))\n      .buffer\n  );\n  const parsedCert = new x509Certificate({ schema: asn1.result });\n\n  const publishKeyAlgorithm =\n    parsedCert.subjectPublicKeyInfo.algorithm.algorithmId;\n  certificate.algorithm = publishKeyAlgorithm;\n  certificate.isGost = GOST_KEY_ALGORITHM_OIDS.includes(publishKeyAlgorithm);\n\n  const subjectKeyIdentifierExtension = parsedCert.extensions.find(\n    ({ extnID }: { extnID: string }): boolean =>\n      extnID === subjectKeyIdExtensionOid\n  );\n  certificate.subjectKeyId = bufferToHex(\n    subjectKeyIdentifierExtension?.parsedValue?.valueBlock?.valueHex\n  );\n\n  // TODO: здесь можно допарсить данные из открытой части сертификата\n}\n","/**\n * Конвертировать массив байт в строкове 16-ричное представление.\n * @param buffer массив байт.\n * @returns строка в 16-ричном представлении.\n */\nexport function bufferToHex(buffer: ArrayBuffer): string | null {\n  if (!buffer) {\n    return null;\n  }\n\n  let result = '';\n  const int8Buffer = new Uint8Array(buffer);\n\n  for (let i = 0; i < int8Buffer.length; i++) {\n    const str = int8Buffer[i].toString(16).toUpperCase();\n    result += (str.length === 1 ? '0' : '') + str;\n  }\n  return result;\n}\n","import { CAPICOM_CERT_INFO_TYPE, CAPICOM_ENCODING_TYPE } from './constants';\nimport { CryptoError } from './errors';\nimport { ICertificate } from './types/cadesplugin/ICertificate';\nimport { parseCertificate } from './utils/certificateParser';\n\n/**\n * Класс объекта Сертификата для удобной работы.\n * !!! НЕ является имплементацией @see ICertificate (к-ый является интерфейсом Крипто системы ОС).\n * @class Certificate\n */\nexport class Certificate {\n  /**\n   *\n   * @property {string|null}\n   */\n  name: string | null = null;\n\n  /**\n   * Наименование издателя сертификата.\n   * @property {string|null}\n   */\n  issuerName: string | null = null;\n\n  /**\n   *  Отпечаток сертификата (хэш SHA-1).\n   * @property {string|null}\n   */\n  thumbprint: string | null = null;\n\n  /**\n   *  Дата-время с которого сертификат вступает в силу.\n   * @property {Date|null}\n   */\n  notBefore: Date | null = null;\n\n  /**\n   * Дата-время до которого сертификат действует.\n   * @property {Date|null}\n   */\n  notAfter: Date | null = null;\n\n  /**\n   * Имя владельца сертификата.\n   * @property {string|null}\n   */\n  subjectName: string | null = null;\n\n  /**\n   *  Идентификатор субъекта сертификата.\n   * @property {string|null}\n   */\n  subjectKeyId: string | null = null;\n\n  /**\n   * Данные о владельце сертификата.\n   */\n  subject = {\n    SN: null, // SN=МИРОНЧУК\n    G: null, // G=ВИКТОР АРКАДИЕВИЧ\n    T: null, // T=ДИРЕКТОР\n    CN: null, // CN=\"ЧУ ДПО УЧЕБНЫЙ ЦЕНТР \"\"ФОРМУЛА\"\"\"\n    O: null, // O=\"ЧУ ДПО УЧЕБНЫЙ ЦЕНТР \"\"ФОРМУЛА\"\"\"\n    STREET: null, // STREET=\"УЛИЦА ЛЕНИНА, 77, -, -\"\n    L: null, // L=КАЛУГА\n    S: null, // S=40 Калужская область\n    C: null, // C=RU\n    SNILS: null, // SNILS=00638140318\n    OGRN: null, // OGRN=1044004603070\n    OGRNIP: null,\n    INN: null, // INN=402701356218\n    INNLE: null, // INNLE=4028031214\n    OU: null,\n    E: null,\n  };\n\n  /**\n   * Base64 строка открытой части сертификата.\n   * @property {string|null}\n   */\n  certificateBase64Data: string | null = null;\n\n  /**\n   * Исходный сертификат из плагина.\n   * @property {ICertificate|null}\n   */\n  certificateBin: ICertificate | null = null;\n\n  /**\n   * Путь к контейнеру закрытого ключа.\n   * @property {string|null}\n   */\n  containerName: string | null = null;\n\n  /**\n   * Имя криптопровайдера.\n   * @property {string|null}\n   */\n  providerName: string | null = null;\n\n  /**\n   * Тип криптопровайдера.\n   * @property {number|null}\n   */\n  providerType: number | null = null;\n\n  /**\n   * Есть ли закрытый ключ.\n   * @property {boolean}\n   */\n  hasPrivateKey: boolean = false;\n\n  /**\n   * Гостовский ключ или нет.\n   */\n  isGost: boolean = false;\n\n  /**\n   * OID алгоритма ключа.\n   */\n  algorithm: string | null = null;\n\n  /**\n   * Приватный конструктор.\n   * @param cfg сертификат из @see IStore.\n   */\n  private constructor(cfg: ICertificate) {\n    this.certificateBin = cfg;\n  }\n\n  /**\n   * Распарсить сертификат из исходного объекта.\n   * @param {ICertificate} cert исходный сертификат.\n   * @returns {Promise<Certificate>} распрасенный сертификат.\n   */\n  public static async CreateFrom(cert: ICertificate): Promise<Certificate> {\n    if (!cert) {\n      const errorMessage = 'Не указаны данные исходного сертификата.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n    if (cert instanceof Certificate) {\n      return cert;\n    }\n    const certificate = new Certificate(cert);\n\n    if (cert.SubjectName instanceof Promise) {\n      certificate.name = await cert.GetInfo(\n        CAPICOM_CERT_INFO_TYPE.CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME\n      );\n      certificate.issuerName = await cert.GetInfo(\n        CAPICOM_CERT_INFO_TYPE.CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME\n      );\n      certificate.subjectName = await cert.SubjectName;\n      certificate.thumbprint = await cert.Thumbprint;\n      certificate.notAfter = await cert.ValidToDate;\n      certificate.notBefore = await cert.ValidFromDate;\n      certificate.certificateBase64Data = await cert.Export(\n        CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64\n      );\n      try {\n        certificate.hasPrivateKey = await cert.HasPrivateKey();\n        const oPrivateKey = await cert.PrivateKey;\n        certificate.containerName = await oPrivateKey.UniqueContainerName;\n        certificate.providerName = await oPrivateKey.ProviderName;\n        certificate.providerType = await oPrivateKey.ProviderType;\n      } catch (error) {\n        console.warn(\n          CryptoError.createCadesError(\n            error,\n            `Ошибка получения информации о приватном ключе сертификата ${certificate.thumbprint}.`\n          )\n        );\n        certificate.hasPrivateKey = false;\n      }\n    } else {\n      certificate.name = cert.GetInfo(\n        CAPICOM_CERT_INFO_TYPE.CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME\n      );\n      certificate.issuerName = cert.GetInfo(\n        CAPICOM_CERT_INFO_TYPE.CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME\n      );\n      certificate.subjectName = cert.SubjectName;\n      certificate.thumbprint = cert.Thumbprint as string;\n      certificate.notAfter = cert.ValidToDate as Date;\n      certificate.notBefore = cert.ValidFromDate as Date;\n      certificate.certificateBase64Data = cert.Export(\n        CAPICOM_ENCODING_TYPE.CAPICOM_ENCODE_BASE64\n      );\n\n      try {\n        certificate.hasPrivateKey = cert.HasPrivateKey();\n        const oPrivateKey = cert.PrivateKey;\n        certificate.containerName = oPrivateKey.UniqueContainerName;\n        certificate.providerName = oPrivateKey.ProviderName;\n        certificate.providerType = oPrivateKey.ProviderType;\n      } catch (error) {\n        console.warn(\n          CryptoError.createCadesError(\n            error,\n            `Ошибка получения информации о приватном ключе сертификата ${certificate.thumbprint}.`\n          )\n        );\n        certificate.hasPrivateKey = false;\n      }\n    }\n\n    Object.keys(certificate.subject).forEach((key) => {\n      certificate.subject[key] = certificate.extractFromTitle(\n        certificate.subjectName!,\n        [key]\n      );\n    });\n    parseCertificate(certificate);\n\n    return certificate;\n  }\n\n  /**\n   * Получение строки для тайтла сертификата и сабтайтла\n   *\n   * @example\n   *\n   * const subjectName = \"CN=_тест_ВипНет_в_КриптоПро1, O=_тест_ВипНет_в_КриптоПро1, L=г Калуга\" --> \"\n   * extractFromTitle(subjectName, [ \"CN\" ]) // \"_тест_ВипНет_в_КриптоПро1\"\n   *\n   * @param {string} name имя владеьльца или УЦ (@see #subjectName|@see #issuerName).\n   * @param {string[]} partsOfName ключи для извлечения из названия.\n   * @returns {string} .данные указанного свойства.\n   */\n  extractFromTitle(name: string, partsOfName: string[]): string {\n    const certificateTitles: string[] = [];\n\n    partsOfName.forEach((item) => {\n      const regExp = new RegExp(`${item}=(.*?),`);\n      certificateTitles.push(name.match(regExp)?.[1] ?? '');\n    });\n\n    return certificateTitles.join(' ');\n  }\n}\n","import { CryptoError } from '../errors';\nimport { CRYPTO_OBJECTS, CRYPTO_PROVIDERS } from '../constants';\nimport { IAbout } from '../types';\nimport { ICryptoProvider } from '../types/ICryptoProvider';\nimport { IVersion } from '../types/cadesplugin/IVersion';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nlet cryptoProvidersCache: ICryptoProvider[] | null;\n\n/**\n * Получить список криптопровайдеров.\n * @returns {Promise<ICryptoProvider[]>} информация о типе, наименовании и версии криптопровайдеров\n */\nexport function getCryptoProviders(\n  resetCache: boolean = false\n): Promise<ICryptoProvider[]> {\n  if (cryptoProvidersCache && !resetCache) {\n    return Promise.resolve(cryptoProvidersCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (cryptoProvidersCache && !resetCache) {\n      return Promise.resolve(cryptoProvidersCache);\n    }\n    const availableCryptoProviders: ICryptoProvider[] = [];\n\n    for (const { ProviderType, ProviderName } of CRYPTO_PROVIDERS) {\n      try {\n        const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n        const cspVersion: IVersion = await cadesAbout.CSPVersion(\n          ProviderName,\n          ProviderType\n        );\n        availableCryptoProviders.push({\n          ProviderName: ProviderName,\n          ProviderType: ProviderType,\n          BuildVersion: await cspVersion.BuildVersion,\n          MajorVersion: await cspVersion.MajorVersion,\n          MinorVersion: await cspVersion.MinorVersion,\n        });\n      } catch (error) {\n        // ошибка не критичная, достаточно просто создать (и залогировать)\n        CryptoError.createCadesError(\n          error,\n          `Ошибка получения информации о криптопровайдере с типом ${ProviderType}`\n        );\n      }\n    }\n\n    return (cryptoProvidersCache = availableCryptoProviders);\n  })();\n}\n","import PluginConfig from '../PluginConfig';\n\n/**\n * Логировать информацию (если включен Debug)\n * @param args\n */\nexport const outputDebug = (...args: (string | any)[]): void => {\n  if (PluginConfig.Debug) {\n    console.info(...args);\n  }\n};\n","/**\n * Проверка доступности асинхронной функциональности.\n * @returns {boolean} .\n */\nexport function canAsync(): boolean {\n  // !!window.Promise || !!Iterator\n  return !!window.cadesplugin?.CreateObjectAsync;\n}\n","import { CryptoError } from '../errors';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { canAsync } from './internal/canAsync';\n\n/**\n * Создание криптографического объекта.\n * @see https://docs.cryptopro.ru/cades/plugin/plugin-activation\n * @param {string} objectIdentifier. наименование создаваемого объекта. Объекты указываются в @see CRYPTO_OBJECTS.\n * @returns {Promise<object|null|undefined>} Созданный объект.\n */\nexport async function createObject(objectIdentifier: string): Promise<any> {\n  return afterPluginLoaded(async () => {\n    if (!objectIdentifier) {\n      throw CryptoError.create(\n        'CBP-7',\n        'Не указан идентификатор объекта',\n        null\n      );\n    }\n    try {\n      const object = canAsync()\n        ? window.cadesplugin.CreateObjectAsync(objectIdentifier)\n        : window.cadesplugin.CreateObject(objectIdentifier);\n\n      return object instanceof Promise ? await object : object;\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        `Ошибка при создании объекта ${objectIdentifier}`\n      );\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport {\n  CRYPTO_OBJECTS,\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  DEFAULT_CRYPTO_PROVIDER,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../constants';\nimport { outputDebug } from '../utils/outputDebug';\nimport { IAbout } from '../types';\nimport { SystemInfo } from '../types/SystemInfo';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { getCryptoProviders } from './getCryptoProviders';\n\n/**\n * Кэш информации о системе.\n */\nlet systemInfoCache: SystemInfo | null = null;\n\n/**\n * Предоставляет информацию о системе.\n *\n * @returns информацию о CSP и плагине.\n */\nexport const getSystemInfo = (): Promise<SystemInfo> => {\n  if (systemInfoCache) {\n    return Promise.resolve(systemInfoCache);\n  }\n\n  return afterPluginLoaded(async () => {\n    if (systemInfoCache) {\n      return Promise.resolve(systemInfoCache);\n    }\n    const sysInfo: SystemInfo = {\n      cadesVersion: '',\n      cspVersion: null,\n      cryptoProInstalled: false,\n      vipNetInstalled: false,\n      cryptoProviderName: null,\n    };\n\n    const cadesAbout: IAbout = await createObject(CRYPTO_OBJECTS.about);\n\n    for (const cryptoProvider of await getCryptoProviders()) {\n      if (VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)) {\n        sysInfo.vipNetInstalled = true;\n        sysInfo.cryptoProviderName =\n          DEFAULT_CRYPTO_PROVIDER.Fallback.ProviderName;\n        sysInfo.cspVersion =\n          cryptoProvider.MajorVersion + '.' + cryptoProvider.MinorVersion;\n      }\n      if (\n        CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cryptoProvider.ProviderType)\n      ) {\n        sysInfo.cryptoProInstalled = true;\n        sysInfo.cryptoProviderName =\n          DEFAULT_CRYPTO_PROVIDER.Default.ProviderName;\n        sysInfo.cspVersion =\n          cryptoProvider.MajorVersion +\n          '.' +\n          cryptoProvider.MinorVersion +\n          '.' +\n          cryptoProvider.BuildVersion;\n      }\n    }\n\n    try {\n      const pluginVersion = await cadesAbout.PluginVersion;\n\n      if (pluginVersion) {\n        sysInfo.cadesVersion = await pluginVersion.toString();\n      }\n      if (!sysInfo.cadesVersion) {\n        sysInfo.cadesVersion = await cadesAbout.Version;\n      }\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Ошибка при получении информации о системе'\n      );\n    }\n\n    outputDebug(sysInfo.toString());\n\n    return (systemInfoCache = sysInfo);\n  })();\n};\n","/**\n * В данный момент имеется версия не меньше указанной версия CAdESCOM Плагина.\n * @param {string} version полная версия Плагина для сверки.\n * @returns {boolean} .\n */\nexport function isSupportedCadesVersion(version: string): boolean {\n  const match = version.match(/(\\d+)\\.(\\d+)\\.(\\d+)/);\n\n  if (!match) {\n    return false;\n  }\n\n  let [, major, minor, patch] = match;\n  // @ts-ignore\n  major = parseInt(major);\n  // @ts-ignore\n  minor = parseInt(minor);\n  // @ts-ignore\n  patch = parseInt(patch);\n\n  return (\n    // @ts-ignore\n    major > 2 ||\n    !(parseInt(major) === 2 && parseInt(minor) === 0 && parseInt(patch) < 13292)\n  );\n}\n","import {\n  CRYPTO_PRO_CRYPTO_PROVIDER_TYPES,\n  VIP_NET_CRYPTO_PROVIDER_TYPES,\n} from '../../constants';\nimport { SystemInfo } from '../../types/SystemInfo';\nimport { getCryptoProviders } from '../getCryptoProviders';\n\nconst oldestSupportedCryptoProCSPVersion = 4.0;\nconst oldestSupportedVipnetCSPVersion = 4.4;\n\n/**\n * В данный момент имеется версия не меньше указанной версия Крипто-Провайдера.\n * @param {string} systemInfo информация о системе.\n * @returns {boolean} true, если поддерживается.\n */\nexport const isSupportedCSPVersion = async (\n  systemInfo: SystemInfo\n): Promise<boolean> => {\n  if (!systemInfo.cspVersion) {\n    return false;\n  }\n  const cryptoProviders = await getCryptoProviders();\n\n  let haveValidCryptoProCSPVersion = false;\n  let haveValidVipNetCSPVersion = false;\n\n  if (systemInfo.cryptoProInstalled) {\n    const cryptoProCSP = cryptoProviders.find((cp) =>\n      CRYPTO_PRO_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType)\n    );\n\n    if (\n      cryptoProCSP?.MajorVersion &&\n      cryptoProCSP?.MajorVersion >= oldestSupportedCryptoProCSPVersion\n    ) {\n      haveValidCryptoProCSPVersion = true;\n    }\n  }\n\n  if (systemInfo.vipNetInstalled) {\n    const vipNetCSP = cryptoProviders.find((cp) =>\n      VIP_NET_CRYPTO_PROVIDER_TYPES.includes(cp.ProviderType)\n    );\n\n    if (vipNetCSP?.MajorVersion) {\n      const version = parseFloat(\n        vipNetCSP?.MajorVersion + '.' + vipNetCSP?.MinorVersion\n      );\n\n      haveValidVipNetCSPVersion = version >= oldestSupportedVipnetCSPVersion;\n    }\n  }\n\n  return haveValidCryptoProCSPVersion || haveValidVipNetCSPVersion;\n};\n","import { CryptoError } from '../errors';\nimport { SystemInfo } from '../types/SystemInfo';\n\nimport { getSystemInfo } from './getSystemInfo';\nimport { isSupportedCadesVersion } from './internal/isSupportedCadesVersion';\nimport { isSupportedCSPVersion } from './internal/isSupportedCSPVersion';\n\n/**\n * Проверяет корректность настроек ЭП на машине.\n *\n * @returns {boolean} флаг корректности настроек.\n */\nexport const isValidSystemSetup = async (): Promise<boolean> => {\n  let systemInfo: SystemInfo | null = null;\n\n  try {\n    systemInfo = await getSystemInfo();\n  } catch (error) {\n    throw CryptoError.createCadesError(\n      error,\n      'Настройки ЭП на данной машине не верны'\n    );\n  }\n\n  if (!isSupportedCadesVersion(systemInfo.cadesVersion)) {\n    throw CryptoError.create(\n      'CBP-3',\n      'Не поддерживаемая версия плагина.',\n      null\n    );\n  }\n\n  if (!(systemInfo.cryptoProInstalled || systemInfo.vipNetInstalled)) {\n    throw CryptoError.create(\n      'CBP-8',\n      'Не установлен ни один криптопровайдер.',\n      null\n    );\n  }\n\n  if (systemInfo.cspVersion && !isSupportedCSPVersion(systemInfo)) {\n    throw CryptoError.create('CBP-4', 'Не поддерживаемая версия CSP', null);\n  }\n\n  return true;\n};\n","import { isValidSystemSetup } from '../isValidSystemSetup';\n\nimport { CryptoError } from './../../errors';\nimport PluginConfig from './../../PluginConfig';\n\n/**\n * Сохранение статуса во избежание повторных инициализаций.\n */\nlet isPluginReady: boolean = false;\n\n/**\n * Обёртка для подготовки плагина перед вызовом функциональности.\n * @param {Function|Promise} cb - функция обратного вызова.\n * @returns {Promise} .функция ожидания.\n */\nexport function afterPluginLoaded(\n  cb: Function\n): (...args: any) => Promise<any> {\n  return async (...args) => {\n    const isAlreadyLoaded = isPluginReady;\n    if (!isPluginReady) {\n      try {\n        // eslint-disable-next-line import/extensions\n        require('./../../vendor/cadesplugin_api.js');\n      } catch (err) {\n        throw CryptoError.create(\n          'CBP-2',\n          'Ошибка загрузки библиотеки cadesplugin.js',\n          err\n        );\n      }\n\n      isPluginReady = true;\n    }\n\n    if (!window.cadesplugin) {\n      throw CryptoError.create(\n        'CBP-1',\n        'Не инициализирован модуль для работы с cadesplugin',\n        null\n      );\n    }\n\n    try {\n      if (window.cadesplugin instanceof Promise) {\n        await window.cadesplugin;\n      }\n    } catch (err) {\n      throw CryptoError.create(\n        'CBP-1',\n        'Ошибка при инициализации модуля для работы с cadesplugin',\n        err\n      );\n    }\n\n    if (PluginConfig.DebugCryptoProBrowserPlugin) {\n      window.cadesplugin.set_log_level(window.cadesplugin.LOG_LEVEL_DEBUG);\n    }\n\n    // для исключения зацикливания, проверку валидности системы делаем единожды.\n    if (PluginConfig.CheckSystemSetup && !isAlreadyLoaded) {\n      await isValidSystemSetup();\n    }\n\n    const callbackResult = cb.apply(null, args);\n\n    if (callbackResult instanceof Promise) {\n      await callbackResult;\n    }\n\n    return callbackResult;\n  };\n}\n","import { canAsync } from '../api/internal/canAsync';\nimport { CryptoError } from '../errors';\n\n/**\n * Обёртка для вызова асинхронной функции в синхронном контексте.\n * @param {Promise<*>} fn - функция или иное свойство от Promise.\n * @returns {*|Promise<*>} .\n */\nexport function deasync(fn: Promise<any>): any {\n  let result = fn;\n  if (canAsync()) {\n    (async () => {\n      try {\n        result = await fn;\n      } catch (err) {\n        throw CryptoError.create('CBP-0', 'deasync', err);\n      }\n    })();\n  }\n  return result;\n}\n","import { CryptoError } from '../../errors';\nimport { deasync } from '../../utils/deasync';\n\nimport { canAsync } from './canAsync';\n\n/**\n * описываем структуру параметр OBJ функции ниже.\n * интерфейс ради интерфейса >_<\n */\ninterface ICryptoObject {\n  [key: string]: any;\n}\n\n/**\n * Устанавливаем значение в указанное свойство переданного объекта.\n * @param {object} obj - объект-цель.\n * @param {string} key - имя свойства.\n * @param {*} value - значение для свойства.\n * @returns {void} .\n */\nexport function setCryptoProperty(\n  obj: ICryptoObject,\n  key: string,\n  value: any\n): void {\n  try {\n    if (canAsync()) {\n      deasync(obj[`propset_${key}`](value));\n    } else {\n      // eslint-disable-next-line no-param-reassign\n      obj[key] = value;\n    }\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      `Не удалось установить значение в поле ${key}`\n    );\n  }\n}\n","import { Certificate } from '../Certificate';\nimport { ICertificate } from '../types';\n\n/**\n * Валидация сертификата.\n *\n *  @example\n *  validateCertificate(cert, async (cert) => await (await cert.IsValid()).Result)\n *\n * @param {ICertificate|Certificate} certificate - собственно сертификат.\n * @param {Function} customValidationFunc - иные условия валидации сертификата.\n * @returns {Promise<string|null>} .null, если сертификат валиден.\n */\nexport async function validateCertificate(\n  certificate: Certificate | ICertificate,\n  customValidationFunc?: (\n    cert: Certificate | ICertificate\n  ) => Promise<string | null>\n): Promise<string | null> {\n  let result: string | null = null;\n  const cert: Certificate =\n    certificate instanceof Certificate\n      ? certificate\n      : // парсим если пришло сырое\n        await Certificate.CreateFrom(certificate);\n\n  if (customValidationFunc) {\n    result = await customValidationFunc(cert);\n  } else {\n    const errors = [];\n    if (!cert.hasPrivateKey) {\n      errors.push('закрытый ключ недоступен');\n    }\n    const now = new Date();\n    if (cert.notAfter && now < cert.notAfter) {\n      errors.push('истёк срок его действия');\n    }\n    if (cert.notBefore && now > cert.notBefore) {\n      errors.push('срок действия не наступил');\n    }\n    if (!cert.isGost) {\n      errors.push('алгоритмы ГОСТ не поддерживаются');\n    }\n\n    if (errors.length) {\n      result = 'Сертификат не прошел проверки: ' + errors.join(', ');\n    }\n  }\n\n  return result;\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_BASE64_TO_BINARY,\n  CADESCOM_CADES_TYPE,\n  CAPICOM_CERTIFICATE_INCLUDE_OPTION,\n  CRYPTO_OBJECTS,\n} from '../constants';\nimport { ICertificate } from '../types/cadesplugin/ICertificate';\nimport { CPSigner, CadesSignedData } from '../types';\nimport { Certificate } from '../Certificate';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\n\n/**\n * Подписать входные данные указанным сертификатом в формате CMS.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data -входные данные для подписи в формате Base64 или ArrayBuffer.\n * @param {boolean} [detach=true] присоединять подпись к данным или отдельно?\n * @param {boolean} [includeCertChain=true] - включать в результат всю цепочку сертификатов.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификатов.\n * @returns {Promise<string>} файл подписи в кодировке Base64.\n */\nexport function sign(\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  detach: boolean = true,\n  includeCertChain: boolean = true,\n  doNotValidate: boolean = false\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    if (!data) {\n      const errorMessage = 'Не указаны данные для подписания.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n    if (!certificate) {\n      const errorMessage =\n        'Не указан сертификат для вычисления электронной подписи.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    const base64String =\n      data instanceof ArrayBuffer ? Buffer.from(data).toString('base64') : data;\n\n    let cert: ICertificate | null = null;\n    if (certificate instanceof Certificate) {\n      cert = certificate?.certificateBin;\n    } else {\n      cert = certificate;\n    }\n\n    if (!doNotValidate && !!cert) {\n      const errorMessage = await validateCertificate(cert);\n\n      if (errorMessage) {\n        throw CryptoError.create(\n          'CBP-6',\n          'Сертификат не прошел проверку при подписи.',\n          null,\n          errorMessage\n        );\n      }\n    }\n\n    const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n    const signedData: CadesSignedData = await createObject(\n      CRYPTO_OBJECTS.signedData\n    );\n\n    // заполнение параметров для подписи\n    try {\n      setCryptoProperty(signer, 'Certificate', cert);\n      if (includeCertChain) {\n        setCryptoProperty(\n          signer,\n          'Options',\n          CAPICOM_CERTIFICATE_INCLUDE_OPTION.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN\n        );\n      }\n\n      setCryptoProperty(\n        signedData,\n        'ContentEncoding',\n        CADESCOM_BASE64_TO_BINARY\n      );\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому подписываем предварительно конвертированный в Base64\n      setCryptoProperty(signedData, 'Content', base64String);\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка при заполнении параметров подписания.'\n      );\n    }\n\n    try {\n      const signResult = signedData.SignCades(\n        signer,\n        CADESCOM_CADES_TYPE.CADESCOM_CADES_BES,\n        detach\n      );\n\n      return signResult instanceof Promise ? await signResult : signResult;\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Ошибка при вычислении электронной подписи.'\n      );\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport {\n  CADESCOM_XML_SIGNATURE_TYPE,\n  CRYPTO_OBJECTS,\n  GOST_KEY_ALGORITHM_TYPES,\n  XML_SIGNATURE_GOST_ALGORITHM_TYPE,\n} from '../constants';\nimport { CPSigner, ICertificate } from '../types';\nimport { Certificate } from '../Certificate';\nimport { ISignedXml } from '../types/cadesplugin/ISignedXml';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { createObject } from './createObject';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\nimport { validateCertificate } from './validateCertificate';\n\n/**\n * Получить алгоритм вычисления подписи для Xml.\n * @param {Certificate} certificate сертификат.\n * @returns {string} алгоритм вычисления подписи.\n */\nexport const getXmlSignAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3410Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма подписи XmlDSig.`,\n        null\n      );\n  }\n};\n\n/**\n * Получить алгоритм вычисления хэша.\n * @param {Certificate} certificate сертификат.\n * @returns {string} алгоритм вычисления хэша.\n */\nexport const getXmlHashAlgorithmType = (certificate: Certificate): string => {\n  switch (certificate.algorithm) {\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_256:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012256;\n\n    case GOST_KEY_ALGORITHM_TYPES.GOST_R3410_12_512:\n      return XML_SIGNATURE_GOST_ALGORITHM_TYPE.XmlDsigGost3411Url2012512;\n\n    default:\n      throw CryptoError.create(\n        'CBP-9',\n        `Неизвестный алгоритм (${certificate.algorithm}) при выборе типа алгоритма хэширования xml.`,\n        null\n      );\n  }\n};\n\n/**\n * Подписать входные данные указанным сертификатом в формате XmlDSig.\n * @param {ICertificate | Certificate} certificate -сертификат пользователя.\n * @param {ArrayBuffer | string} data -входные данные для подписи в формате Base64 или ArrayBuffer.\n * @param {CADESCOM_XML_SIGNATURE_TYPE} xmlSignatureType - тип xml подписи.\n * @param {boolean} [doNotValidate=false] - не проводить валидацию сертификата.\n * @returns {Promise<string>} файл подписи в кодировке Base64.\n */\nexport const signXml = (\n  certificate: ICertificate | Certificate,\n  data: ArrayBuffer | string,\n  xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE = CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED,\n  doNotValidate: boolean = false\n): Promise<string> => {\n  return afterPluginLoaded(async () => {\n    if (!data) {\n      const errorMessage = 'Не указаны данные для подписания.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n    if (!certificate) {\n      const errorMessage =\n        'Не указан сертификат для вычисления электронной подписи.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    const base64String =\n      data instanceof ArrayBuffer ? Buffer.from(data).toString('base64') : data;\n\n    const cert: Certificate =\n      certificate instanceof Certificate\n        ? certificate\n        : // парсим если пришло сырое\n          await Certificate.CreateFrom(certificate);\n\n    if (!doNotValidate && !!cert) {\n      const errorMessage = await validateCertificate(cert);\n\n      if (errorMessage) {\n        throw CryptoError.create(\n          'CBP-6',\n          'Сертификат не прошел проверку при подписи.',\n          null,\n          errorMessage\n        );\n      }\n    }\n\n    const signer: CPSigner = await createObject(CRYPTO_OBJECTS.signer);\n    const signedData: ISignedXml = await createObject(CRYPTO_OBJECTS.signedXml);\n\n    // заполнение параметров для подписи\n    try {\n      setCryptoProperty(signer, 'Certificate', cert.certificateBin);\n\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому подписываем предварительно конвертированный в Base64\n      setCryptoProperty(signedData, 'Content', base64String);\n\n      // указываем тип подписи\n      setCryptoProperty(signedData, 'SignatureType', xmlSignatureType);\n\n      // указываем алгоритм подписи\n      setCryptoProperty(\n        signedData,\n        'SignatureMethod',\n        getXmlSignAlgorithmType(cert)\n      );\n\n      // указываем алгоритм хэширования\n      setCryptoProperty(\n        signedData,\n        'DigestMethod',\n        getXmlHashAlgorithmType(cert)\n      );\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка при заполнении параметров подписания.'\n      );\n    }\n\n    try {\n      const signResult = signedData.Sign(signer);\n\n      return signResult instanceof Promise ? await signResult : signResult;\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Ошибка при вычислении электронной подписи.'\n      );\n    }\n  })();\n};\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport { CADESCOM_BASE64_TO_BINARY, CRYPTO_OBJECTS } from '../constants';\nimport { CPEnvelopedData } from '../types/cadesplugin/CPEnvelopedData';\nimport { ICertificate, IRecipients } from '../types';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\n\n/**\n * Зашировать данные на указанные сертификаты.\n * @param {string} data -входные данные для расшифровки в формате Base64 или ArrayBuffer.\n * @param {ICertificate[]} recipientCertificates -список сертификатов получателей шифрованного сообщения.\n * @returns {Promise<string>} .Зашифрованная строка в кодировке Base64.\n */\nexport function encrypt(\n  data: ArrayBuffer | string,\n  recipientCertificates: ICertificate[]\n): Promise<string> {\n  return afterPluginLoaded(async () => {\n    if (!data) {\n      const errorMessage = 'Не указаны данные для шифрования.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    if (!recipientCertificates || recipientCertificates?.length === 0) {\n      const errorMessage =\n        'Не указаны сертификаты получателей шифрованного сообщения.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    const base64String =\n      data instanceof ArrayBuffer ? Buffer.from(data).toString('base64') : data;\n\n    const envelopedData: CPEnvelopedData = await createObject(\n      CRYPTO_OBJECTS.envelopedData\n    );\n\n    try {\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому подписываем предварительно конвертированный в Base64\n      setCryptoProperty(\n        envelopedData,\n        'ContentEncoding',\n        CADESCOM_BASE64_TO_BINARY\n      );\n      setCryptoProperty(envelopedData, 'Content', base64String);\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка при заполнении параметров шифрования.'\n      );\n    }\n\n    try {\n      const recipients: IRecipients = await envelopedData.Recipients;\n\n      for (const recipientCertificate of recipientCertificates) {\n        await recipients.Add(recipientCertificate);\n      }\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Ошибка при установке сертификатов получателей шифрованного сообщения.'\n      );\n    }\n\n    try {\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому расшифровываем предварительно конвертированный в Base64\n\n      const encryptResult = envelopedData.Encrypt();\n\n      return encryptResult instanceof Promise\n        ? await encryptResult\n        : encryptResult;\n    } catch (error) {\n      throw CryptoError.createCadesError(\n        error,\n        'Ошибка при шифровании данных.'\n      );\n    }\n  })();\n}\n","import { Buffer } from 'buffer';\n\nimport { CryptoError } from '../errors';\nimport { CADESCOM_BASE64_TO_BINARY, CRYPTO_OBJECTS } from '../constants';\nimport { CPEnvelopedData } from '../types/cadesplugin/CPEnvelopedData';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { setCryptoProperty } from './internal/setCryptoProperty';\n\n/**\n * Расшифровать данные.\n * @param {string} encryptedData -входные данные для расшифровки в формате Base64 или ArrayBuffer.\n * @returns {Promise<string>} .Расшифрованная строка в кодировке Base64.\n */\nexport function decrypt(encryptedData: ArrayBuffer | string): Promise<string> {\n  return afterPluginLoaded(async () => {\n    if (!encryptedData) {\n      const errorMessage = 'Не указаны данные для расшифровки.';\n      throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n    }\n\n    const base64String =\n      encryptedData instanceof ArrayBuffer\n        ? Buffer.from(encryptedData).toString('base64')\n        : encryptedData;\n\n    const envelopedData: CPEnvelopedData = await createObject(\n      CRYPTO_OBJECTS.envelopedData\n    );\n    try {\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому подписываем предварительно конвертированный в Base64\n      setCryptoProperty(\n        envelopedData,\n        'ContentEncoding',\n        CADESCOM_BASE64_TO_BINARY\n      );\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка при заполнении параметров расшифровки.'\n      );\n    }\n\n    try {\n      // в криптопро браузер плагине не поддерживается подпись/расшифровка бинарных данных,\n      // поэтому расшифровываем предварительно конвертированный в Base64\n      const decryptResult = envelopedData.Decrypt(base64String);\n      if (decryptResult instanceof Promise) {\n        await decryptResult;\n      }\n\n      return envelopedData.Content instanceof Promise\n        ? await envelopedData.Content\n        : envelopedData.Content;\n    } catch (err) {\n      throw CryptoError.createCadesError(err, 'Ошибка при расшифровке данных.');\n    }\n  })();\n}\n","import { CryptoError } from '../errors';\nimport { IStore } from '../types/cadesplugin/IStore';\nimport {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  CRYPTO_OBJECTS,\n  STORE_LOCATION,\n} from '../constants';\n\nimport { createObject } from './createObject';\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\n\n/**\n * Открывает хранилище с сертификатами.\n * @returns {IStore} store хранилище с сертификатами.\n * @param {STORE_LOCATION} storeLocation - расположение хранилища.\n * @param {string} storeName - (!)будет проигнорирован если storeLocation = CAPICOM_SMART_CARD_USER_STORE.\n * @param {CAPICOM_STORE_OPEN_MODE} openMode - режим открытия хранилища.\n * @returns {Promise<IStore>} .\n */\nexport function openStore(\n  storeLocation: STORE_LOCATION = STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n  storeName: string = CAPICOM_MY_STORE,\n  openMode: CAPICOM_STORE_OPEN_MODE = CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_EXISTING_ONLY\n): Promise<IStore> {\n  return afterPluginLoaded(async () => {\n    const store: IStore = await createObject(CRYPTO_OBJECTS.store);\n\n    try {\n      const res = store.Open(storeLocation, storeName, openMode);\n\n      await res;\n    } catch (err) {\n      throw CryptoError.createCadesError(\n        err,\n        'Ошибка открытия хранилища сертификатов.'\n      );\n    }\n\n    return store;\n  })();\n}\n","import {\n  CAPICOM_MY_STORE,\n  CAPICOM_STORE_OPEN_MODE,\n  STORE_LOCATION,\n  STORE_TYPE,\n} from '../constants';\nimport { Certificate } from '../Certificate';\nimport { IStore } from '../types/cadesplugin/IStore';\nimport { outputDebug } from '../utils/outputDebug';\nimport { CryptoError } from '../errors';\nimport { ICertificates } from '../types/cadesplugin/ICertificates';\nimport { ICertificate } from '../types/cadesplugin/ICertificate';\n\nimport { afterPluginLoaded } from './internal/afterPluginLoaded';\nimport { openStore } from './openStore';\n\n/**\n * Кэш из запрошенных сертификатов.\n */\nconst certificatesCache = {};\n\n/**\n * Возвращает список сертификатов из указанного хранилища.\n * @param {IStore} store Хранилище\n * @returns {Promise<Certificate[]>} .Список сертификатов.\n */\nasync function getCertificatesFromStore(store: IStore): Promise<Certificate[]> {\n  const result: Certificate[] = [];\n  let certificates: ICertificates;\n  let certificatesCount = 0;\n  try {\n    certificates = await store.Certificates;\n    certificatesCount = await certificates.Count;\n  } catch (err) {\n    throw CryptoError.createCadesError(\n      err,\n      'Ошибка получения списка сертификатов.'\n    );\n  }\n\n  // проверяем пригодность и превращаем сертификаты в наш внутренний тип\n  while (certificatesCount) {\n    try {\n      const certBin: ICertificate = await certificates.Item(\n        certificatesCount--\n      );\n      const cert: Certificate = await Certificate.CreateFrom(certBin);\n\n      // работаем только с гостовскими сертами\n      if (cert.isGost) {\n        result.push(cert);\n      }\n    } catch (err) {\n      // не критичная ошибка, просто логируем\n      CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n    }\n  }\n\n  outputDebug('getCertificatesFromStore >>', result);\n  return result;\n}\n\n/**\n * Получить сертификаты из USB токенов.\n * @returns {Promise<Certificate[]>} .Список сертификатов из USB токенов.\n */\nasync function ReadCertificatesFromUsbToken(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n  try {\n    store = await openStore(STORE_LOCATION.CADESCOM_CONTAINER_STORE);\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Получить сертификаты из реестра.\n * @returns {Promise<Certificate[]>} .Список сертификатов из реестра.\n */\nasync function ReadCertificatesFromRegistry(): Promise<Certificate[]> {\n  let store: IStore | null = null;\n  try {\n    store = await openStore(\n      STORE_LOCATION.CAPICOM_CURRENT_USER_STORE,\n      CAPICOM_MY_STORE,\n      CAPICOM_STORE_OPEN_MODE.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED\n    );\n    return await getCertificatesFromStore(store);\n  } finally {\n    await store?.Close();\n  }\n}\n\n/**\n * Возвращает список валидных доступных для работы сертификатов.\n *\n * @param {STORE_TYPE} storeType из какого хранилища требуется получить сертификаты (из токена, реестра, все...).\n * @param {resetCache} resetCache перезапросить данные, игнорируя закэшированные данные.\n * @returns {Promise<Certificate[]>} .сертификаты.\n */\nexport function getCertificates(\n  storeType: STORE_TYPE = STORE_TYPE.ALL,\n  resetCache: boolean = false\n): Promise<Certificate[]> {\n  if (certificatesCache[storeType] && !resetCache) {\n    return Promise.resolve(certificatesCache[storeType]);\n  }\n  return afterPluginLoaded(async () => {\n    if (certificatesCache[storeType] && !resetCache) {\n      return certificatesCache[storeType];\n    }\n    let result: Certificate[] = [];\n    switch (storeType) {\n      case STORE_TYPE.USB_TOKEN:\n        result = await ReadCertificatesFromUsbToken();\n        break;\n\n      case STORE_TYPE.REGISTRY:\n        result = await ReadCertificatesFromRegistry();\n        break;\n\n      case STORE_TYPE.ALL:\n        result = await ReadCertificatesFromRegistry();\n        const usbTokenCertificates = await ReadCertificatesFromUsbToken();\n        result = result.concat(usbTokenCertificates);\n        result = result.filter(\n          (cert, index) =>\n            result.findIndex(\n              (_cert) => _cert.thumbprint === cert.thumbprint\n            ) === index\n        );\n        break;\n\n      default:\n        let store: IStore | null = null;\n        try {\n          store = await openStore();\n\n          result = await getCertificatesFromStore(store);\n        } finally {\n          await store?.Close();\n        }\n        break;\n    }\n\n    outputDebug(`GET_CERTIFICATES(${storeType}) >>`, result);\n\n    return (certificatesCache[storeType] = result);\n  })();\n}\n","import { Certificate } from '../Certificate';\nimport { CryptoError } from '../errors';\n\nimport { getCertificates } from './../api';\n\n/**\n * Поиск в хранилищах сертификата.\n * @param {string} subjectKeyId -идентификатор ключа субъекта.\n * @returns {@Promise<Certificate | undefined>} сертификат.\n */\nexport async function findCertificateBySkid(\n  subjectKeyId: string\n): Promise<Certificate | undefined> {\n  if (!subjectKeyId) {\n    const errorMessage =\n      'Не указан идентификатор ключа субъекта искомого сертификата.';\n    throw CryptoError.create('CBP-7', errorMessage, null, errorMessage);\n  }\n  try {\n    return (await getCertificates()).find(\n      (c) => c.subjectKeyId == subjectKeyId\n    );\n  } catch (err) {\n    throw CryptoError.createCadesError(err, 'Ошибка получения сертификата.');\n  }\n}\n","import { Certificate } from '@astral/cryptopro-cades';\n\ntype CertificateInfoProps = {\n  certificate: Certificate;\n};\n\nexport const CertificateInfo = ({ certificate }: CertificateInfoProps) =>\n  certificate ? (\n    <>\n      <span>\n        <b>\n          ========================={certificate.name}=========================\n        </b>\n      </span>\n      {Object.keys(certificate)\n        .filter(\n          (key) => !['certificateBase64Data', 'certificateBin'].includes(key)\n        )\n        .map((key, index) => (\n          <span style={{ display: 'block' }} key={index}>\n            <b>{key}:</b>{' '}\n            {certificate[key] instanceof Object\n              ? JSON.stringify(certificate[key])\n              : certificate[key]?.toString() ?? 'null'}\n          </span>\n        ))}\n    </>\n  ) : null;\n","import { ICryptoProvider } from '@astral/cryptopro-cades/src/types';\n\ntype CryptoProviderProps = {\n  cryptoProvider: ICryptoProvider;\n};\n\nexport const CryptoProviderInfo = ({ cryptoProvider }: CryptoProviderProps) => (\n  <>\n    <span style={{ display: 'block' }}>\n      <b>Имя:</b> {cryptoProvider.ProviderName}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Тип:</b> {cryptoProvider.ProviderType}\n    </span>\n    <span style={{ display: 'block' }}>\n      <b>Версия:</b> {cryptoProvider.MajorVersion}.{cryptoProvider.MinorVersion}\n      .{cryptoProvider.BuildVersion}\n    </span>\n  </>\n);\n","import { Buffer } from 'buffer';\n\nimport { useEffect, useState } from 'react';\nimport {\n  Certificate,\n  STORE_TYPE,\n  decrypt,\n  encrypt,\n  findCertificateBySkid,\n  getCertificates,\n  getCryptoProviders,\n  getSystemInfo,\n  outputError,\n  pluginConfig,\n  sign,\n  signXml,\n  CADESCOM_XML_SIGNATURE_TYPE,\n} from '@astral/cryptopro-cades';\n\nimport { ICryptoProvider, SystemInfo } from '@astral/cryptopro-cades/src/types';\n\nimport { CertificateInfo } from './components/CertificateInfo';\nimport { CryptoProviderInfo } from './components/CryptoProviderInfo';\n\nconst CryptoApp = () => {\n  pluginConfig.CheckSystemSetup = true;\n  pluginConfig.Debug = true;\n\n  const [certificates, setCertificates] = useState<Certificate[]>([]);\n  const [versionInfo, setVersionInfo] = useState<SystemInfo>();\n  const [cryptoProviders, setCryptoProviders] = useState<ICryptoProvider[]>([]);\n  const [showCertificates, setShowCertificates] = useState<boolean>();\n  const [showCryptoProviders, setShowCryptoProviders] = useState<boolean>();\n  const [selectedCertificate, setSelectedCertificate] = useState<Certificate>();\n  const [selectedFileForSign, setSelectedFileForSign] = useState<File>();\n\n  useEffect(() => {\n    async function fetchSystemInfo() {\n      try {\n        const systemInfo = await getSystemInfo();\n        setVersionInfo(systemInfo);\n      } catch (error) {\n        window.alert(error);\n      }\n    }\n    async function fetchCertificates() {\n      const fetchedCertificates = await getCertificates(STORE_TYPE.ALL);\n\n      setCertificates(fetchedCertificates);\n\n      // автоматически берем первый валидный серт если еще выбран\n      if (!selectedCertificate) {\n        setSelectedCertificate(\n          fetchedCertificates.find((c) => c.isGost && c.hasPrivateKey)\n        );\n      }\n    }\n    async function fetchCryptoProviders() {\n      const cryptoProviders = await getCryptoProviders();\n      setCryptoProviders(cryptoProviders);\n    }\n\n    if (showCryptoProviders) {\n      fetchCryptoProviders();\n    }\n    if (showCertificates) {\n      fetchCertificates();\n    }\n    fetchSystemInfo();\n  }, [showCryptoProviders, showCertificates, selectedCertificate]);\n\n  /**\n   * Попытаться найти сертификат с указанным skid.\n   * @param skid Идентификатор ключа субъекта.\n   */\n  const trySelectCertificate = async (skid: string) => {\n    if (skid) {\n      const certificate = await findCertificateBySkid(skid);\n      if (certificate) {\n        setSelectedCertificate(certificate);\n      }\n    }\n  };\n\n  /**\n   * Скачать файл.\n   * @param blob Блоб\n   * @param name Наименование файла.\n   */\n  const dowloadFile = (blob: Blob, name: string): void => {\n    const url = window.URL.createObjectURL(blob);\n    const a = window.document.createElement('a');\n    a.style.display = 'hidden';\n    window.document.body.appendChild(a);\n    a.href = url;\n    a.download = name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    a.remove();\n  };\n\n  /**\n   * Подписать файл в формате CMS.\n   */\n  const signFile = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFileForSign) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await sign(\n        selectedCertificate,\n        await selectedFileForSign.arrayBuffer() // либо Base64 строку\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(sig),\n        selectedFileForSign.name + '.sig'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Подписать файл в формате XmlDSig.\n   */\n  const signXmlFile = async (\n    xmlSignatureType: CADESCOM_XML_SIGNATURE_TYPE\n  ): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    if (!selectedFileForSign) {\n      window.alert('Файл для подписи не выбран');\n      return;\n    }\n\n    try {\n      const sig = await signXml(\n        selectedCertificate,\n        await selectedFileForSign.arrayBuffer(), // либо Base64 строку\n        xmlSignatureType\n      );\n\n      dowloadFile(\n        await convertBase64toBlob(sig),\n        selectedFileForSign.name.replace('.xml', '') + '.sig.xml'\n      );\n    } catch (error) {\n      outputError(error);\n      window.alert(error?.toString());\n    }\n  };\n\n  /**\n   * Проверить шифрование и расшифровку, зашифровав данные на свой серт.\n   */\n  const checkEncryptDecrypt = async (): Promise<void> => {\n    if (!selectedCertificate) {\n      window.alert('Сертификат не выбран');\n      return;\n    }\n    const originalData = 'Hello world!';\n\n    try {\n      const encryptedData = await encrypt(\n        Buffer.from(originalData).toString('base64'),\n        [selectedCertificate.certificateBin!]\n      );\n\n      const decryptedData = await decrypt(encryptedData);\n      const isOk =\n        Buffer.from(decryptedData, 'base64').toString('utf-8') === originalData;\n\n      window.alert(\n        isOk ? 'Шифрование-расшифровка прошла успешно' : 'Данные не совпали'\n      );\n    } catch (error) {\n      window.alert(error.toString());\n    }\n  };\n\n  /**\n   *\n   * @param base64 строка в формате Base64.\n   * @param type Тип данных.\n   * @returns {Promise<Blob>} Блоб.\n   */\n  const convertBase64toBlob = (\n    base64: string,\n    type: string = 'application/octet-stream'\n  ): Promise<Blob> =>\n    window\n      .fetch(`data:${type};base64,${base64}`)\n      .then((res: Response) => res.blob());\n\n  return (\n    <>\n      <p>Версия плагина {versionInfo?.cadesVersion}</p>\n      <p>Версия криптопровайдера {versionInfo?.cspVersion}</p>\n      <button onClick={() => setShowCryptoProviders(!showCryptoProviders)}>\n        {!showCryptoProviders\n          ? 'Показать криптопровайдеры'\n          : 'Скрыть криптопровайдеры'}\n      </button>\n      <button onClick={() => setShowCertificates(!showCertificates)}>\n        {!showCertificates ? 'Показать сертификаты' : 'Скрыть сертификаты'}\n      </button>\n      <div style={{ display: showCryptoProviders ? '' : 'none' }}>\n        Криптопровайдеры:\n        {cryptoProviders?.map((cryptoProvider, index) => {\n          return (\n            <p key={index}>\n              <CryptoProviderInfo cryptoProvider={cryptoProvider} />\n            </p>\n          );\n        })}\n      </div>\n      <div style={{ display: showCertificates ? '' : 'none' }}>\n        Сертификаты:\n        {certificates?.map((certInfo, index) => {\n          return (\n            <p key={index}>\n              <CertificateInfo certificate={certInfo} />\n            </p>\n          );\n        }) ?? 'Ничего нет :('}\n      </div>\n      <br />\n      <br />\n      <br />\n      <div>\n        <b>\n          ======================================= Операции с сертификатами\n          =======================================\n        </b>\n        <br />\n        <br />\n        <input\n          placeholder=\"Введите skid серта\"\n          onChange={(e) => trySelectCertificate(e.target.value)}\n          value={selectedCertificate?.subjectKeyId!}\n        />\n        {selectedCertificate ? (\n          <>\n            <p>Выбранный сертификат</p>\n            <CertificateInfo certificate={selectedCertificate} />\n          </>\n        ) : null}\n        <br />\n        <br />\n        Подпись\n        <input\n          type=\"file\"\n          onChange={(e) => setSelectedFileForSign(e.target.files![0])}\n        />\n        <br />\n        <br />\n        {selectedCertificate && selectedFileForSign ? (\n          <button onClick={(_) => signFile()}>Подписать CMS</button>\n        ) : null}\n        <br />\n        {selectedCertificate && selectedFileForSign ? (\n          <button\n            onClick={(_) =>\n              signXmlFile(\n                CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED\n              )\n            }\n          >\n            Подписать XmlDSig (enveloped)\n          </button>\n        ) : null}\n        <br />\n        {selectedCertificate && selectedFileForSign ? (\n          <button\n            onClick={(_) =>\n              signXmlFile(\n                CADESCOM_XML_SIGNATURE_TYPE.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE\n              )\n            }\n          >\n            Подписать XmlDSig (template)\n          </button>\n        ) : null}\n        <br />\n        <br />\n        {selectedCertificate ? (\n          <button onClick={(_) => checkEncryptDecrypt()}>\n            Проверить шифрование/расшифровку\n          </button>\n        ) : null}\n      </div>\n    </>\n  );\n};\n\nconst App = () => (\n  <div className=\"App\">\n    <CryptoApp />\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n","// 2.0.14530 от 16.02.2022\n// ГОСТ: 8FE58D912E985DBFA1BB573D102DA68192B442278C586D1BE183A7CEA49C6C19\n// MD5: d0282c948e2b5f6a02f3944a16ebc7e3\n// https://www.cryptopro.ru/sites/default/files/products/cades/current_release_2_0/cadesplugin_api.js.zip\n\n/**\n * @class window.cadesplugin\n */\n;(function () {\n    //already loaded\n    if(window.cadesplugin)\n        return;\n\n    var pluginObject;\n    var plugin_resolved = 0;\n    var plugin_reject;\n    var plugin_resolve;\n    var isOpera = 0;\n    var isFireFox = 0;\n    var isSafari = 0;\n    var isYandex = 0;\n    var canPromise = !!window.Promise;\n    var cadesplugin_loaded_event_recieved = false;\n    var isFireFoxExtensionLoaded = false;\n\n    /**\n    * @class window.cadesplugin\n    */\n    var cadesplugin;\n\n    if(canPromise)\n    {\n        cadesplugin = new Promise(function(resolve, reject)\n        {\n            plugin_resolve = resolve;\n            plugin_reject = reject;\n        });\n    } else\n    {\n        cadesplugin = {};\n    }\n\n    function check_browser() {\n        var ua= navigator.userAgent, tem, M= ua.match(/(opera|yabrowser|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n        if(/trident/i.test(M[1])){\n            tem =  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n            return { name:'IE', version:(tem[1] || '')};\n        }\n        if(M[1] === 'Chrome'){\n            tem = ua.match(/\\b(OPR|Edg|YaBrowser)\\/(\\d+)/);\n            if (tem != null)\n                return { name: tem[1].replace('OPR', 'Opera'), version: tem[2] };\n        }\n        M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n        if ((tem = ua.match(/version\\/(\\d+)/i)) != null)\n            M.splice(1, 1, tem[1]);\n        return {name:M[0],version:M[1]};\n    }\n    var browserSpecs = check_browser();\n\n    function cpcsp_console_log(level, msg){\n        //IE9 не может писать в консоль если не открыта вкладка developer tools\n        if(typeof(console) === 'undefined')\n            return;\n        if (level <= cadesplugin.current_log_level ){\n            if (level === cadesplugin.LOG_LEVEL_DEBUG)\n                console.log(\"DEBUG: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_INFO)\n                console.info(\"INFO: %s\", msg);\n            if (level === cadesplugin.LOG_LEVEL_ERROR)\n                console.error(\"ERROR: %s\", msg);\n            return;\n        }\n    }\n\n    function set_log_level(level){\n        if (!((level === cadesplugin.LOG_LEVEL_DEBUG) ||\n            (level === cadesplugin.LOG_LEVEL_INFO) ||\n            (level === cadesplugin.LOG_LEVEL_ERROR))){\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"cadesplugin_api.js: Incorrect log_level: \" + level);\n            return;\n        }\n        cadesplugin.current_log_level = level;\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = DEBUG\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = INFO\");\n        if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n            cpcsp_console_log(cadesplugin.LOG_LEVEL_INFO, \"cadesplugin_api.js: log_level = ERROR\");\n        if(isNativeMessageSupported())\n        {\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_DEBUG)\n                window.postMessage(\"set_log_level=debug\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_INFO)\n                window.postMessage(\"set_log_level=info\", \"*\");\n            if (cadesplugin.current_log_level === cadesplugin.LOG_LEVEL_ERROR)\n                window.postMessage(\"set_log_level=error\", \"*\");\n        }\n    }\n\n    function set_constantValues()\n    {\n        cadesplugin.CAPICOM_MEMORY_STORE = 0;\n        cadesplugin.CAPICOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CAPICOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CAPICOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_MEMORY_STORE = 0;\n        cadesplugin.CADESCOM_LOCAL_MACHINE_STORE = 1;\n        cadesplugin.CADESCOM_CURRENT_USER_STORE = 2;\n        cadesplugin.CADESCOM_SMART_CARD_USER_STORE = 4;\n        cadesplugin.CADESCOM_CONTAINER_STORE = 100;\n\n        cadesplugin.CAPICOM_MY_STORE = \"My\";\n\n        cadesplugin.CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED = 2;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED = 0;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING = 1;\n        cadesplugin.CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE = 2;\n\n        cadesplugin.CADESCOM_XADES_DEFAULT = 0x00000010;\n        cadesplugin.CADESCOM_XADES_BES = 0x00000020;\n        cadesplugin.CADESCOM_XADES_T = 0x00000050;\n        cadesplugin.CADESCOM_XADES_X_LONG_TYPE_1 = 0x000005d0;\n        cadesplugin.CADESCOM_XMLDSIG_TYPE = 0x00000000;\n\n        cadesplugin.XmlDsigGost3410UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411UrlObsolete = \"http://www.w3.org/2001/04/xmldsig-more#gostr3411\";\n        cadesplugin.XmlDsigGost3410Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102001-gostr3411\";\n        cadesplugin.XmlDsigGost3411Url = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr3411\";\n        \n        cadesplugin.XmlDsigGost3411Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-256\";\n        cadesplugin.XmlDsigGost3410Url2012256 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-256\";\n        cadesplugin.XmlDsigGost3411Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34112012-512\";\n        cadesplugin.XmlDsigGost3410Url2012512 = \"urn:ietf:params:xml:ns:cpxmlsec:algorithms:gostr34102012-gostr34112012-512\";\n\n        cadesplugin.CADESCOM_CADES_DEFAULT = 0;\n        cadesplugin.CADESCOM_CADES_BES = 1;\n        cadesplugin.CADESCOM_CADES_T = 0x5;\n        cadesplugin.CADESCOM_CADES_X_LONG_TYPE_1 = 0x5d;\n        cadesplugin.CADESCOM_PKCS7_TYPE = 0xffff;\n\n        cadesplugin.CADESCOM_ENCODE_BASE64 = 0;\n        cadesplugin.CADESCOM_ENCODE_BINARY = 1;\n        cadesplugin.CADESCOM_ENCODE_ANY = -1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY = 2;\n\n        cadesplugin.CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME = 0;\n        cadesplugin.CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME = 1;\n\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SHA1_HASH = 0;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME = 1;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ISSUER_NAME = 2;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_ROOT_NAME = 3;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME = 4;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENSION = 5;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY = 6;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY = 7;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY = 8;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_VALID = 9;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID = 10;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED = 11;\n        cadesplugin.CAPICOM_CERTIFICATE_FIND_KEY_USAGE = 12;\n\n        cadesplugin.CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE = 128;\n\n        cadesplugin.CAPICOM_PROPID_ENHKEY_USAGE = 9;\n\n        cadesplugin.CAPICOM_OID_OTHER = 0;\n        cadesplugin.CAPICOM_OID_KEY_USAGE_EXTENSION = 10;\n\n        cadesplugin.CAPICOM_EKU_CLIENT_AUTH = 2;\n        cadesplugin.CAPICOM_EKU_SMARTCARD_LOGON = 5;\n        cadesplugin.CAPICOM_EKU_OTHER = 0;\n\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME = 0;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME = 1;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION = 2;\n        cadesplugin.CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO = 0x100;\n        cadesplugin.CADESCOM_ATTRIBUTE_OTHER = -1;\n\n        cadesplugin.CADESCOM_STRING_TO_UCS2LE = 0;\n        cadesplugin.CADESCOM_BASE64_TO_BINARY = 1;\n\n        cadesplugin.CADESCOM_DISPLAY_DATA_NONE = 0;\n        cadesplugin.CADESCOM_DISPLAY_DATA_CONTENT = 1;\n        cadesplugin.CADESCOM_DISPLAY_DATA_ATTRIBUTE = 2;\n\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC2 = 0;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_RC4 = 1;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_DES = 2;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_3DES = 3;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_AES = 4;\n        cadesplugin.CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89 = 25;\n\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA1 = 0;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD2 = 1;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD4 = 2;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_MD5 = 3;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_256 = 4;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_384 = 5;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_SHA_512 = 6;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411 = 100;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256 = 101;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512 = 102;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC = 110;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC = 111;\n        cadesplugin.CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC = 112;\n\n        cadesplugin.LOG_LEVEL_DEBUG = 4;\n        cadesplugin.LOG_LEVEL_INFO = 2;\n        cadesplugin.LOG_LEVEL_ERROR = 1;\n\n        cadesplugin.CADESCOM_AllowNone = 0;\n        cadesplugin.CADESCOM_AllowNoOutstandingRequest = 0x1;\n        cadesplugin.CADESCOM_AllowUntrustedCertificate = 0x2;\n        cadesplugin.CADESCOM_AllowUntrustedRoot = 0x4;\n        cadesplugin.CADESCOM_SkipInstallToStore = 0x10000000;\n        cadesplugin.CADESCOM_InstallCertChainToContainer = 0x20000000;\n        cadesplugin.CADESCOM_UseContainerStore = 0x40000000;\n\n        cadesplugin.ENABLE_CARRIER_TYPE_CSP = 0x01;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_NO_SM = 0x02;\n        cadesplugin.ENABLE_CARRIER_TYPE_FKC_SM = 0x04;\n        cadesplugin.ENABLE_ANY_CARRIER_TYPE = 0x07;\n\n        cadesplugin.DISABLE_EVERY_CARRIER_OPERATION = 0x00;\n        cadesplugin.ENABLE_CARRIER_OPEN_ENUM = 0x01;\n        cadesplugin.ENABLE_CARRIER_CREATE = 0x02;\n        cadesplugin.ENABLE_ANY_OPERATION = 0x03;\n\n        cadesplugin.CADESCOM_PRODUCT_CSP = 0;\n        cadesplugin.CADESCOM_PRODUCT_OCSP = 1;\n        cadesplugin.CADESCOM_PRODUCT_TSP = 2;\n\n        cadesplugin.MEDIA_TYPE_REGISTRY = 0x00000001;\n        cadesplugin.MEDIA_TYPE_HDIMAGE = 0x00000002;\n        cadesplugin.MEDIA_TYPE_CLOUD = 0x00000004;\n        cadesplugin.MEDIA_TYPE_SCARD = 0x00000008;\n\n        cadesplugin.XCN_CRYPT_STRING_BASE64HEADER = 0;\n        cadesplugin.AT_KEYEXCHANGE = 1;\n        cadesplugin.AT_SIGNATURE = 2;\n\n        cadesplugin.CARRIER_FLAG_REMOVABLE = 1;\n        cadesplugin.CARRIER_FLAG_UNIQUE = 2;\n        cadesplugin.CARRIER_FLAG_PROTECTED = 4;\n        cadesplugin.CARRIER_FLAG_FUNCTIONAL_CARRIER = 8;\n        cadesplugin.CARRIER_FLAG_SECURE_MESSAGING = 16;\n        cadesplugin.CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE = 64;\n        cadesplugin.CARRIER_FLAG_VIRTUAL = 128;\n    }\n\n    function async_spawn(generatorFunc) {\n        function continuer(verb, arg) {\n            var result;\n            try {\n                result = generator[verb](arg);\n            } catch (err) {\n                return Promise.reject(err);\n            }\n            if (result.done) {\n                return result.value;\n            } else {\n                return Promise.resolve(result.value).then(onFulfilled, onRejected);\n            }\n        }\n        var generator = generatorFunc(Array.prototype.slice.call(arguments, 1));\n        var onFulfilled = continuer.bind(continuer, \"next\");\n        var onRejected = continuer.bind(continuer, \"throw\");\n        return onFulfilled();\n    }\n\n    function isIE() {\n        // var retVal = ((\"Microsoft Internet Explorer\" == navigator.appName) || // IE < 11\n        //     navigator.userAgent.match(/Trident\\/./i)); // IE 11\n        return (browserSpecs.name === 'IE' || browserSpecs.name === 'MSIE');\n    }\n\n    function isIOS() {\n        return (navigator.userAgent.match(/ipod/i) ||\n            navigator.userAgent.match(/ipad/i) ||\n            navigator.userAgent.match(/iphone/i));\n    }\n\n    function isNativeMessageSupported()\n    {\n        // В IE работаем через NPAPI\n        if(isIE())\n            return false;\n        // В Edge работаем через NativeMessage\n        if (browserSpecs.name === 'Edg') {\n            return true;\n        }\n        if (browserSpecs.name === 'YaBrowser') {\n            isYandex = true;\n            return true;\n        }\n        // В Chrome, Firefox, Safari и Opera работаем через асинхронную версию в зависимости от версии\n        if(browserSpecs.name === 'Opera') {\n            isOpera = true;\n            if(browserSpecs.version >= 33){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Firefox') {\n            isFireFox = true;\n            if(browserSpecs.version >= 52){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        if(browserSpecs.name === 'Chrome') {\n            if(browserSpecs.version >= 42){\n                return true;\n            }\n            else{\n                return false;\n            }\n        }\n        //В Сафари начиная с 12 версии нет NPAPI\n        if(browserSpecs.name === 'Safari') {\n            isSafari = true;\n            if(browserSpecs.version >= 12) {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    // Функция активации объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObject(name) {\n        if (isIOS()) {\n            // На iOS для создания объектов используется функция\n            // call_ru_cryptopro_npcades_10_native_bridge, определенная в IOS_npcades_supp.js\n            return call_ru_cryptopro_npcades_10_native_bridge(\"CreateObject\", [name]);\n        }\n        if (isIE()) {\n            // В Internet Explorer создаются COM-объекты\n            if (name.match(/X509Enrollment/i)) {\n                try {\n                    // Объекты CertEnroll пробуем создавать через нашу фабрику,\n                    // если не получилось то через CX509EnrollmentWebClassFactory\n                    var objCertEnrollClassFactory = document.getElementById(\"webClassFactory\");\n                    return objCertEnrollClassFactory.CreateObject(name);\n                }\n                catch (e) {\n                    try {\n                        var objWebClassFactory = document.getElementById(\"certEnrollClassFactory\");\n                        return objWebClassFactory.CreateObject(name);\n                    }\n                    catch (err) {\n                        throw (\"Для создания обьектов X509Enrollment следует настроить веб-узел на использование проверки подлинности по протоколу HTTPS\");\n                    }\n                }\n            }\n            // Объекты CAPICOM и CAdESCOM создаются через CAdESCOM.WebClassFactory\n            try {\n                var objWebClassFactory = document.getElementById(\"webClassFactory\");\n                return objWebClassFactory.CreateObject(name);\n            }\n            catch (e) {\n                // Для версий плагина ниже 2.0.12538\n        return new ActiveXObject(name); // eslint-disable-line\n            }\n        }\n        // создаются объекты NPAPI\n        return pluginObject.CreateObject(name);\n    }\n\n    function decimalToHexString(number) {\n        if (number < 0) {\n            number = 0xFFFFFFFF + number + 1;\n        }\n\n        return number.toString(16).toUpperCase();\n    }\n\n    function GetMessageFromException(e) {\n        var err = e.message;\n        if (!err) {\n            err = e;\n        } else if (e.number) {\n            err += \" (0x\" + decimalToHexString(e.number) + \")\";\n        }\n        return err;\n    }\n\n    function getLastError(exception) {\n        if(isNativeMessageSupported() || isIE() || isIOS() ) {\n            return GetMessageFromException(exception);\n        }\n\n        try {\n            return pluginObject.getLastError();\n        } catch(e) {\n            return GetMessageFromException(exception);\n        }\n    }\n\n    // Функция для удаления созданных объектов\n    function ReleasePluginObjects() {\n    return cpcsp_chrome_nmcades.ReleasePluginObjects(); // eslint-disable-line\n    }\n\n    // Функция активации асинхронных объектов КриптоПро ЭЦП Browser plug-in\n    function CreateObjectAsync(name) {\n        return pluginObject.CreateObjectAsync(name);\n    }\n\n    //Функции для IOS\n    var ru_cryptopro_npcades_10_native_bridge = {\n        callbacksCount : 1,\n        callbacks : {},\n\n        // Automatically called by native layer when a result is available\n        resultForCallback : function resultForCallback(callbackId, resultArray) {\n            var callback = ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId];\n            if (!callback) return;\n            callback.apply(null,resultArray);\n        },\n\n        // Use this in javascript to request native objective-c code\n        // functionName : string (I think the name is explicit :p)\n        // args : array of arguments\n        // callback : function with n-arguments that is going to be called when the native code returned\n        call : function call(functionName, args, callback) {\n            var hasCallback = callback && typeof callback === \"function\";\n            var callbackId = hasCallback ? ru_cryptopro_npcades_10_native_bridge.callbacksCount++ : 0;\n\n            if (hasCallback)\n                ru_cryptopro_npcades_10_native_bridge.callbacks[callbackId] = callback;\n\n            var iframe = document.createElement(\"IFRAME\");\n            var arrObjs = new Array(\"_CPNP_handle\");\n            try{\n                iframe.setAttribute(\"src\", \"cpnp-js-call:\" + functionName + \":\" + callbackId+ \":\" + encodeURIComponent(JSON.stringify(args, arrObjs)));\n            } catch(e){\n                alert(e);\n            }\n            document.documentElement.appendChild(iframe);\n            iframe.parentNode.removeChild(iframe);\n            iframe = null;\n        }\n    };\n\n    function call_ru_cryptopro_npcades_10_native_bridge(functionName, array){\n        var tmpobj;\n        var ex;\n        ru_cryptopro_npcades_10_native_bridge.call(functionName, array, function(e, response){\n            ex = e;\n            var str='tmpobj='+response;\n            eval(str);\n            if (typeof (tmpobj) === \"string\"){\n                tmpobj = tmpobj.replace(/\\\\\\n/gm, \"\\n\");\n                tmpobj = tmpobj.replace(/\\\\\\r/gm, \"\\r\");\n            }\n        });\n        if(ex)\n            throw ex;\n        return tmpobj;\n    }\n\n    function show_firefox_missing_extension_dialog()\n    {\n        if (!window.cadesplugin_skip_extension_install)\n        {\n            var ovr = document.createElement('div');\n            ovr.id = \"cadesplugin_ovr\";\n            ovr.style = \"visibility: hidden; position: fixed; left: 0px; top: 0px; width:100%; height:100%; background-color: rgba(0,0,0,0.7)\";\n            ovr.innerHTML = \"<div id='cadesplugin_ovr_item' style='position:relative; width:400px; margin:100px auto; background-color:#fff; border:2px solid #000; padding:10px; text-align:center; opacity: 1; z-index: 1500'>\" +\n                \"<button id='cadesplugin_close_install' style='float: right; font-size: 10px; background: transparent; border: 1; margin: -5px'>X</button>\" +\n                \"<p>Для работы КриптоПро ЭЦП Browser plugin на данном сайте необходимо расширение для браузера. Убедитесь, что оно у Вас включено или установите его.\" +\n                \"<p><a href='https://www.cryptopro.ru/sites/default/files/products/cades/extensions/firefox_cryptopro_extension_latest.xpi'>Скачать расширение</a></p>\" +\n                \"</div>\";\n            document.getElementsByTagName(\"Body\")[0].appendChild(ovr);\n            document.getElementById(\"cadesplugin_close_install\").addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n\n            ovr.addEventListener('click',function()\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n                document.getElementById(\"cadesplugin_ovr\").style.visibility = 'hidden';\n            });\n            ovr.style.visibility=\"visible\";\n        }\n    }\n    function firefox_or_safari_nmcades_onload() {\n        if (window.cadesplugin_extension_loaded_callback)\n            window.cadesplugin_extension_loaded_callback();\n        isFireFoxExtensionLoaded = true;\n        cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n    }\n\n    function nmcades_api_onload() {\n        if (!isIE() && !isFireFox && !isSafari) {\n            if (window.cadesplugin_extension_loaded_callback)\n                window.cadesplugin_extension_loaded_callback();\n        }\n        window.postMessage(\"cadesplugin_echo_request\", \"*\");\n        window.addEventListener(\"message\", function (event){\n            if (typeof(event.data) !== \"string\" || !event.data.match(\"cadesplugin_loaded\"))\n                return;\n            if (cadesplugin_loaded_event_recieved)\n                return;\n            if(isFireFox || isSafari)\n            {\n                // Для Firefox, Сафари вместе с сообщением cadesplugin_loaded прилетает url для загрузки nmcades_plugin_api.js\n                var url = event.data.substring(event.data.indexOf(\"url:\") + 4);\n                if (!url.match(\"^moz-extension://[a-zA-Z0-9-]+/nmcades_plugin_api.js$\")\n                    && !url.match(\"^safari-extension://[a-zA-Z0-9-]+/[a-zA-Z0-9]+/nmcades_plugin_api.js$\"))\n                {\n                    cpcsp_console_log(cadesplugin.LOG_LEVEL_ERROR, \"Bad url \\\"\" + url + \"\\\" for load CryptoPro Extension for CAdES Browser plug-in\");\n                    plugin_loaded_error();\n                    return;\n                }\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", url);\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = firefox_or_safari_nmcades_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }else {\n                cpcsp_chrome_nmcades.check_chrome_plugin(plugin_loaded, plugin_loaded_error); // eslint-disable-line\n            }\n            cadesplugin_loaded_event_recieved = true;\n        }, false);\n    }\n\n    //Загружаем расширения для Chrome, Opera, YaBrowser, FireFox, Edge, Safari\n    function load_extension()\n    {\n        if(isFireFox || isSafari){\n            // вызываем callback руками т.к. нам нужно узнать ID расширения. Он уникальный для браузера.\n            nmcades_api_onload();\n        } else {\n            // в асинхронном варианте для Yandex и Opera подключаем расширение из Opera store.\n            if (isOpera || isYandex) {\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://epebfcehmdedogndhlcacafjaacknbcm/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            } else {\n                // для Chrome, Chromium, Chromium Edge расширение из Chrome store\n                var fileref = document.createElement('script');\n                fileref.setAttribute(\"type\", \"text/javascript\");\n                fileref.setAttribute(\"src\", \"chrome-extension://iifchhfnnmpdbibifmljnfjhpififfog/nmcades_plugin_api.js\");\n                fileref.onerror = plugin_loaded_error;\n                fileref.onload = nmcades_api_onload;\n                document.getElementsByTagName(\"head\")[0].appendChild(fileref);\n            }\n        }\n    }\n\n    //Загружаем плагин для NPAPI\n    function load_npapi_plugin()\n    {\n        var elem = document.createElement('object');\n        elem.setAttribute(\"id\", \"cadesplugin_object\");\n        elem.setAttribute(\"type\", \"application/x-cades\");\n        elem.setAttribute(\"style\", \"visibility: hidden\");\n        document.getElementsByTagName(\"body\")[0].appendChild(elem);\n        pluginObject = document.getElementById(\"cadesplugin_object\");\n        if(isIE())\n        {\n            var elem1 = document.createElement('object');\n            elem1.setAttribute(\"id\", \"certEnrollClassFactory\");\n            elem1.setAttribute(\"classid\", \"clsid:884e2049-217d-11da-b2a4-000e7bbb2b09\");\n            elem1.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem1);\n            var elem2 = document.createElement('object');\n            elem2.setAttribute(\"id\", \"webClassFactory\");\n            elem2.setAttribute(\"classid\", \"clsid:B04C8637-10BD-484E-B0DA-B8A039F60024\");\n            elem2.setAttribute(\"style\", \"visibility: hidden\");\n            document.getElementsByTagName(\"body\")[0].appendChild(elem2);\n        }\n    }\n\n    //Отправляем событие что все ок.\n    function plugin_loaded()\n    {\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_resolve();\n        }else {\n            window.postMessage(\"cadesplugin_loaded\", \"*\");\n        }\n    }\n\n    //Отправляем событие что сломались.\n    function plugin_loaded_error(msg)\n    {\n        if(typeof(msg) === 'undefined' || typeof(msg) === 'object')\n            msg = \"Плагин недоступен\";\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(msg);\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n    }\n\n    //проверяем что у нас хоть какое то событие ушло, и если не уходило кидаем еще раз ошибку\n    function check_load_timeout()\n    {\n        if(plugin_resolved === 1)\n            return;\n        if(isFireFox)\n        {\n            if (!isFireFoxExtensionLoaded)\n                show_firefox_missing_extension_dialog();\n        }\n        plugin_resolved = 1;\n        if(canPromise)\n        {\n            plugin_reject(\"Истекло время ожидания загрузки плагина\");\n        } else {\n            window.postMessage(\"cadesplugin_load_error\", \"*\");\n        }\n\n    }\n\n    //Вспомогательная функция для NPAPI\n    function createPromise(arg)\n    {\n        return new Promise(arg);\n    }\n\n    function check_npapi_plugin (){\n        try {\n            var oAbout = CreateObject(\"CAdESCOM.About\");\n            plugin_loaded();\n        }\n        catch (err) {\n            document.getElementById(\"cadesplugin_object\").style.display = 'none';\n            // Объект создать не удалось, проверим, установлен ли\n            // вообще плагин. Такая возможность есть не во всех браузерах\n            var mimetype = navigator.mimeTypes[\"application/x-cades\"];\n            if (mimetype) {\n                var plugin = mimetype.enabledPlugin;\n                if (plugin) {\n                    plugin_loaded_error(\"Плагин загружен, но не создаются обьекты\");\n                }else\n                {\n                    plugin_loaded_error(\"Ошибка при загрузке плагина\");\n                }\n            }else\n            {\n                plugin_loaded_error(\"Плагин недоступен\");\n            }\n        }\n    }\n\n    //Проверяем работает ли плагин\n    function check_plugin_working()\n    {\n        var div = document.createElement(\"div\");\n        div.innerHTML = \"<!--[if lt IE 9]><i></i><![endif]-->\";\n        var isIeLessThan9 = (div.getElementsByTagName(\"i\").length === 1);\n        if (isIeLessThan9) {\n            plugin_loaded_error(\"Internet Explorer версии 8 и ниже не поддерживается\");\n            return;\n        }\n\n        if(isNativeMessageSupported())\n        {\n            load_extension();\n        }else if(!canPromise) {\n            window.addEventListener(\"message\", function (event){\n                    if (event.data !== \"cadesplugin_echo_request\")\n                        return;\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                },\n                false);\n        }else\n        {\n            if(document.readyState === \"complete\"){\n                load_npapi_plugin();\n                check_npapi_plugin();\n            } else {\n                window.addEventListener(\"load\", function (event) {\n                    load_npapi_plugin();\n                    check_npapi_plugin();\n                }, false);\n            }\n        }\n    }\n\n    function set_pluginObject(obj)\n    {\n        pluginObject = obj;\n    }\n\n    function is_capilite_enabled()\n    {\n        if ((typeof (cadesplugin.EnableInternalCSP) !== 'undefined') && cadesplugin.EnableInternalCSP)\n            return true;\n        return false;\n    };\n\n    //Export\n    cadesplugin.JSModuleVersion = \"2.3.2\";\n    cadesplugin.async_spawn = async_spawn;\n    cadesplugin.set = set_pluginObject;\n    cadesplugin.set_log_level = set_log_level;\n    cadesplugin.getLastError = getLastError;\n    cadesplugin.is_capilite_enabled = is_capilite_enabled;\n\n    if(isNativeMessageSupported())\n    {\n        cadesplugin.CreateObjectAsync = CreateObjectAsync;\n        cadesplugin.ReleasePluginObjects = ReleasePluginObjects;\n    }\n\n    if(!isNativeMessageSupported())\n    {\n        cadesplugin.CreateObject = CreateObject;\n    }\n\n    if(window.cadesplugin_load_timeout)\n    {\n        setTimeout(check_load_timeout, window.cadesplugin_load_timeout);\n    }\n    else\n    {\n        setTimeout(check_load_timeout, 20000);\n    }\n\n    set_constantValues();\n\n    cadesplugin.current_log_level = cadesplugin.LOG_LEVEL_ERROR;\n    window.cadesplugin = cadesplugin;\n    check_plugin_working();\n}());\n\nexport default window.cadesplugin;\n"],"names":["CADESCOM_XML_SIGNATURE_TYPE","CADESCOM_XADES_TYPE","CADESCOM_CADES_TYPE","XML_SIGNATURE_GOST_ALGORITHM_TYPE","CAPICOM_CERTIFICATE_INCLUDE_OPTION","CADESCOM_ENCODING_TYPE","CAPICOM_ENCODING_TYPE","CAPICOM_STORE_OPEN_MODE","STORE_LOCATION","CAPICOM_CERT_INFO_TYPE","CAPICOM_CERTIFICATE_FIND_TYPE","CAPICOM_KEY_USAGE","CAPICOM_MY_STORE","CAPICOM_PROPID","CADESCOM_MEDIA_TYPE","CRYPTO_OBJECTS","STORE_TYPE","GOST_KEY_ALGORITHM_TYPES","CRYPTO_PROVIDERS","ProviderType","ProviderName","DEFAULT_CRYPTO_PROVIDER","Default","find","t","Fallback","VIP_NET_CRYPTO_PROVIDER_TYPES","Object","freeze","CRYPTO_PRO_CRYPTO_PROVIDER_TYPES","GOST_KEY_ALGORITHM_OIDS","values","CRYPTO_PRO_ERRORS","code","message","PLUGIN_ERRORS","outputError","console","error","pluginConfig","PluginConfig","cb","this","errorListeners","push","forEach","addErrorListener","Debug","errors","err","CryptoError","InnerError","stack","filter","Boolean","join","fullErrorData","window","cadesplugin","getLastError","msg","replace","title","cryptoError","_extractCode","length","extractedMsg","_extractMessage","type","res","errorCode","overrideMessage","match","_RULE_MATCHING_CODE","Error","parseCertificate","certificate","certificateBase64Data","errorMessage","asn1","fromBER","Uint8Array","Buffer","buffer","parsedCert","x509Certificate","schema","result","publishKeyAlgorithm","subjectPublicKeyInfo","algorithm","algorithmId","isGost","includes","subjectKeyIdentifierExtension","extensions","extnID","subjectKeyId","int8Buffer","i","str","toString","toUpperCase","bufferToHex","parsedValue","valueBlock","valueHex","cryptoProvidersCache","Certificate","cfg","SN","G","T","CN","O","STREET","L","S","C","SNILS","OGRN","OGRNIP","INN","INNLE","OU","E","certificateBin","name","partsOfName","certificateTitles","item","regExp","RegExp","cert","SubjectName","Promise","GetInfo","CAPICOM_CERT_INFO_SUBJECT_SIMPLE_NAME","CAPICOM_CERT_INFO_ISSUER_SIMPLE_NAME","issuerName","subjectName","Thumbprint","thumbprint","ValidToDate","notAfter","ValidFromDate","notBefore","Export","CAPICOM_ENCODE_BASE64","HasPrivateKey","hasPrivateKey","PrivateKey","oPrivateKey","UniqueContainerName","containerName","providerName","providerType","keys","subject","key","extractFromTitle","outputDebug","info","canAsync","CreateObjectAsync","createObject","objectIdentifier","afterPluginLoaded","object","CreateObject","getCryptoProviders","resetCache","resolve","availableCryptoProviders","about","cadesAbout","CSPVersion","cspVersion","BuildVersion","MajorVersion","MinorVersion","systemInfoCache","getSystemInfo","sysInfo","cadesVersion","cryptoProInstalled","vipNetInstalled","cryptoProviderName","cryptoProvider","PluginVersion","pluginVersion","Version","isSupportedCadesVersion","version","major","minor","patch","parseInt","isSupportedCSPVersion","systemInfo","cryptoProviders","haveValidCryptoProCSPVersion","haveValidVipNetCSPVersion","cryptoProCSP","cp","vipNetCSP","parseFloat","isValidSystemSetup","isPluginReady","isAlreadyLoaded","require","set_log_level","LOG_LEVEL_DEBUG","args","callbackResult","apply","setCryptoProperty","obj","value","fn","validateCertificate","customValidationFunc","now","Date","sign","data","detach","includeCertChain","doNotValidate","base64String","ArrayBuffer","signer","signedData","CAPICOM_CERTIFICATE_INCLUDE_WHOLE_CHAIN","signResult","SignCades","CADESCOM_CADES_BES","getXmlSignAlgorithmType","GOST_R3410_12_256","XmlDsigGost3410Url2012256","GOST_R3410_12_512","XmlDsigGost3410Url2012512","getXmlHashAlgorithmType","XmlDsigGost3411Url2012256","XmlDsigGost3411Url2012512","signXml","xmlSignatureType","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPED","signedXml","Sign","encrypt","recipientCertificates","envelopedData","Recipients","recipients","recipientCertificate","Add","encryptResult","Encrypt","decrypt","encryptedData","decryptResult","Decrypt","Content","openStore","storeLocation","CAPICOM_CURRENT_USER_STORE","storeName","openMode","CAPICOM_STORE_OPEN_EXISTING_ONLY","store","Open","certificatesCache","getCertificatesFromStore","certificatesCount","Certificates","certificates","Count","Item","certBin","ReadCertificatesFromUsbToken","CADESCOM_CONTAINER_STORE","Close","ReadCertificatesFromRegistry","CAPICOM_STORE_OPEN_MAXIMUM_ALLOWED","getCertificates","storeType","ALL","USB_TOKEN","REGISTRY","usbTokenCertificates","concat","index","findIndex","_cert","findCertificateBySkid","c","CertificateInfo","map","style","display","JSON","stringify","CryptoProviderInfo","CryptoApp","CheckSystemSetup","useState","setCertificates","versionInfo","setVersionInfo","setCryptoProviders","showCertificates","setShowCertificates","showCryptoProviders","setShowCryptoProviders","selectedCertificate","setSelectedCertificate","selectedFileForSign","setSelectedFileForSign","useEffect","alert","fetchedCertificates","fetchCryptoProviders","fetchCertificates","fetchSystemInfo","trySelectCertificate","skid","dowloadFile","blob","url","URL","createObjectURL","a","document","createElement","body","appendChild","href","download","click","revokeObjectURL","remove","signFile","arrayBuffer","sig","convertBase64toBlob","signXmlFile","checkEncryptDecrypt","originalData","decryptedData","isOk","base64","fetch","then","onClick","certInfo","placeholder","onChange","e","target","files","_","CADESCOM_XML_SIGNATURE_TYPE_TEMPLATE","className","ReactDOM","getElementById","render","pluginObject","plugin_resolved","plugin_reject","plugin_resolve","isOpera","isFireFox","isSafari","isYandex","canPromise","cadesplugin_loaded_event_recieved","isFireFoxExtensionLoaded","reject","browserSpecs","check_browser","ru_cryptopro_npcades_10_native_bridge","callbacksCount","callbacks","resultForCallback","callbackId","resultArray","callback","call","functionName","hasCallback","iframe","arrObjs","Array","setAttribute","encodeURIComponent","documentElement","parentNode","removeChild","JSModuleVersion","async_spawn","set","set_pluginObject","is_capilite_enabled","isNativeMessageSupported","ReleasePluginObjects","cadesplugin_load_timeout","setTimeout","check_load_timeout","set_constantValues","current_log_level","LOG_LEVEL_ERROR","check_plugin_working","tem","ua","navigator","userAgent","M","test","exec","appName","appVersion","splice","cpcsp_console_log","level","LOG_LEVEL_INFO","postMessage","CAPICOM_MEMORY_STORE","CAPICOM_LOCAL_MACHINE_STORE","CAPICOM_SMART_CARD_USER_STORE","CADESCOM_MEMORY_STORE","CADESCOM_LOCAL_MACHINE_STORE","CADESCOM_CURRENT_USER_STORE","CADESCOM_SMART_CARD_USER_STORE","CAPICOM_CERTIFICATE_FIND_SUBJECT_NAME","CADESCOM_XML_SIGNATURE_TYPE_ENVELOPING","CADESCOM_XADES_DEFAULT","CADESCOM_XADES_BES","CADESCOM_XADES_T","CADESCOM_XADES_X_LONG_TYPE_1","CADESCOM_XMLDSIG_TYPE","XmlDsigGost3410UrlObsolete","XmlDsigGost3411UrlObsolete","XmlDsigGost3410Url","XmlDsigGost3411Url","CADESCOM_CADES_DEFAULT","CADESCOM_CADES_T","CADESCOM_CADES_X_LONG_TYPE_1","CADESCOM_PKCS7_TYPE","CADESCOM_ENCODE_BASE64","CADESCOM_ENCODE_BINARY","CADESCOM_ENCODE_ANY","CAPICOM_CERTIFICATE_INCLUDE_CHAIN_EXCEPT_ROOT","CAPICOM_CERTIFICATE_INCLUDE_END_ENTITY_ONLY","CAPICOM_CERTIFICATE_FIND_SHA1_HASH","CAPICOM_CERTIFICATE_FIND_ISSUER_NAME","CAPICOM_CERTIFICATE_FIND_ROOT_NAME","CAPICOM_CERTIFICATE_FIND_TEMPLATE_NAME","CAPICOM_CERTIFICATE_FIND_EXTENSION","CAPICOM_CERTIFICATE_FIND_EXTENDED_PROPERTY","CAPICOM_CERTIFICATE_FIND_APPLICATION_POLICY","CAPICOM_CERTIFICATE_FIND_CERTIFICATE_POLICY","CAPICOM_CERTIFICATE_FIND_TIME_VALID","CAPICOM_CERTIFICATE_FIND_TIME_NOT_YET_VALID","CAPICOM_CERTIFICATE_FIND_TIME_EXPIRED","CAPICOM_CERTIFICATE_FIND_KEY_USAGE","CAPICOM_DIGITAL_SIGNATURE_KEY_USAGE","CAPICOM_PROPID_ENHKEY_USAGE","CAPICOM_OID_OTHER","CAPICOM_OID_KEY_USAGE_EXTENSION","CAPICOM_EKU_CLIENT_AUTH","CAPICOM_EKU_SMARTCARD_LOGON","CAPICOM_EKU_OTHER","CAPICOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CAPICOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_SIGNING_TIME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_NAME","CADESCOM_AUTHENTICATED_ATTRIBUTE_DOCUMENT_DESCRIPTION","CADESCOM_AUTHENTICATED_ATTRIBUTE_MACHINE_INFO","CADESCOM_ATTRIBUTE_OTHER","CADESCOM_STRING_TO_UCS2LE","CADESCOM_BASE64_TO_BINARY","CADESCOM_DISPLAY_DATA_NONE","CADESCOM_DISPLAY_DATA_CONTENT","CADESCOM_DISPLAY_DATA_ATTRIBUTE","CADESCOM_ENCRYPTION_ALGORITHM_RC2","CADESCOM_ENCRYPTION_ALGORITHM_RC4","CADESCOM_ENCRYPTION_ALGORITHM_DES","CADESCOM_ENCRYPTION_ALGORITHM_3DES","CADESCOM_ENCRYPTION_ALGORITHM_AES","CADESCOM_ENCRYPTION_ALGORITHM_GOST_28147_89","CADESCOM_HASH_ALGORITHM_SHA1","CADESCOM_HASH_ALGORITHM_MD2","CADESCOM_HASH_ALGORITHM_MD4","CADESCOM_HASH_ALGORITHM_MD5","CADESCOM_HASH_ALGORITHM_SHA_256","CADESCOM_HASH_ALGORITHM_SHA_384","CADESCOM_HASH_ALGORITHM_SHA_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_256_HMAC","CADESCOM_HASH_ALGORITHM_CP_GOST_3411_2012_512_HMAC","CADESCOM_AllowNone","CADESCOM_AllowNoOutstandingRequest","CADESCOM_AllowUntrustedCertificate","CADESCOM_AllowUntrustedRoot","CADESCOM_SkipInstallToStore","CADESCOM_InstallCertChainToContainer","CADESCOM_UseContainerStore","ENABLE_CARRIER_TYPE_CSP","ENABLE_CARRIER_TYPE_FKC_NO_SM","ENABLE_CARRIER_TYPE_FKC_SM","ENABLE_ANY_CARRIER_TYPE","DISABLE_EVERY_CARRIER_OPERATION","ENABLE_CARRIER_OPEN_ENUM","ENABLE_CARRIER_CREATE","ENABLE_ANY_OPERATION","CADESCOM_PRODUCT_CSP","CADESCOM_PRODUCT_OCSP","CADESCOM_PRODUCT_TSP","MEDIA_TYPE_REGISTRY","MEDIA_TYPE_HDIMAGE","MEDIA_TYPE_CLOUD","MEDIA_TYPE_SCARD","XCN_CRYPT_STRING_BASE64HEADER","AT_KEYEXCHANGE","AT_SIGNATURE","CARRIER_FLAG_REMOVABLE","CARRIER_FLAG_UNIQUE","CARRIER_FLAG_PROTECTED","CARRIER_FLAG_FUNCTIONAL_CARRIER","CARRIER_FLAG_SECURE_MESSAGING","CARRIER_FLAG_ABLE_VISUALISE_SIGNATURE","CARRIER_FLAG_VIRTUAL","generatorFunc","continuer","verb","arg","generator","done","onFulfilled","onRejected","prototype","slice","arguments","bind","isIE","isIOS","call_ru_cryptopro_npcades_10_native_bridge","ActiveXObject","decimalToHexString","number","GetMessageFromException","exception","cpcsp_chrome_nmcades","array","tmpobj","ex","response","eval","show_firefox_missing_extension_dialog","cadesplugin_skip_extension_install","ovr","id","innerHTML","getElementsByTagName","addEventListener","plugin_loaded_error","visibility","firefox_or_safari_nmcades_onload","cadesplugin_extension_loaded_callback","check_chrome_plugin","plugin_loaded","nmcades_api_onload","event","substring","indexOf","fileref","onerror","onload","load_extension","load_npapi_plugin","elem","elem1","elem2","createPromise","check_npapi_plugin","mimetype","mimeTypes","enabledPlugin","div","readyState","EnableInternalCSP"],"sourceRoot":""}