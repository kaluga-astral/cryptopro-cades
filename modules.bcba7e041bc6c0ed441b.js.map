{"version":3,"file":"modules.bcba7e041bc6c0ed441b.js","mappings":"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","sources":["webpack://cryptopro-cades-example/../../node_modules/asn1js/build/index.es.js","webpack://cryptopro-cades-example/../../node_modules/base64-js/index.js","webpack://cryptopro-cades-example/../../node_modules/buffer/index.js","webpack://cryptopro-cades-example/../../node_modules/ieee754/index.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/AlgorithmIdentifier.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/ECNamedCurves.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/ECPublicKey.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/RSAPublicKey.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PublicKeyInfo.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/Attribute.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/ECPrivateKey.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/OtherPrimeInfo.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/RSAPrivateKey.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PrivateKeyInfo.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/EncryptedContentInfo.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/RSASSAPSSParams.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PBKDF2Params.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PBES2Params.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/CryptoEngine.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/common.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/AttributeTypeAndValue.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/RelativeDistinguishedNames.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/Time.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/SubjectDirectoryAttributes.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PrivateKeyUsagePeriod.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/GeneralName.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/AltName.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/BasicConstraints.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/IssuingDistributionPoint.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/GeneralNames.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/GeneralSubtree.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/NameConstraints.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/DistributionPoint.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/CRLDistributionPoints.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PolicyQualifierInfo.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PolicyInformation.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/CertificatePolicies.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PolicyMapping.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PolicyMappings.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/AuthorityKeyIdentifier.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/PolicyConstraints.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/ExtKeyUsage.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/AccessDescription.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/InfoAccess.js","webpack://cryptopro-cades-example/../../node_modules/bytestreamjs/src/bytestream.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/SignedCertificateTimestampList.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/CertificateTemplate.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/CAVersion.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/QCStatements.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/Extension.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/Extensions.js","webpack://cryptopro-cades-example/../../node_modules/pkijs/src/Certificate.js","webpack://cryptopro-cades-example/../../node_modules/pvtsutils/build/index.js","webpack://cryptopro-cades-example/../../node_modules/pvutils/build/utils.es.js","webpack://cryptopro-cades-example/../../node_modules/scheduler/cjs/scheduler.production.min.js","webpack://cryptopro-cades-example/../../node_modules/scheduler/index.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/inherits.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/construct.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","webpack://cryptopro-cades-example/../../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js"],"sourcesContent":["/*!\n * Copyright (c) 2014, GMO GlobalSign\n * Copyright (c) 2015-2022, Peculiar Ventures\n * All rights reserved.\n * \n * Author 2014-2019, Yury Strozhevsky\n * \n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n * \n * * Redistributions of source code must retain the above copyright notice, this\n *   list of conditions and the following disclaimer.\n * \n * * Redistributions in binary form must reproduce the above copyright notice, this\n *   list of conditions and the following disclaimer in the documentation and/or\n *   other materials provided with the distribution.\n * \n * * Neither the name of the copyright holder nor the names of its\n *   contributors may be used to endorse or promote products derived from\n *   this software without specific prior written permission.\n * \n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n * \n */\n\nimport * as pvtsutils from 'pvtsutils';\nimport * as pvutils from 'pvutils';\n\nfunction assertBigInt() {\r\n    if (typeof BigInt === \"undefined\") {\r\n        throw new Error(\"BigInt is not defined. Your environment doesn't implement BigInt.\");\r\n    }\r\n}\r\nfunction concat(buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retView = new Uint8Array(outputLength);\r\n    for (let i = 0; i < buffers.length; i++) {\r\n        const buffer = buffers[i];\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retView.buffer;\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof Uint8Array)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be 'Uint8Array'\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\n\nclass ViewWriter {\r\n    constructor() {\r\n        this.items = [];\r\n    }\r\n    write(buf) {\r\n        this.items.push(buf);\r\n    }\r\n    final() {\r\n        return concat(this.items);\r\n    }\r\n}\n\nconst powers2 = [new Uint8Array([1])];\r\nconst digitsString = \"0123456789\";\r\nconst NAME = \"name\";\r\nconst VALUE_HEX_VIEW = \"valueHexView\";\r\nconst IS_HEX_ONLY = \"isHexOnly\";\r\nconst ID_BLOCK = \"idBlock\";\r\nconst TAG_CLASS = \"tagClass\";\r\nconst TAG_NUMBER = \"tagNumber\";\r\nconst IS_CONSTRUCTED = \"isConstructed\";\r\nconst FROM_BER = \"fromBER\";\r\nconst TO_BER = \"toBER\";\r\nconst LOCAL = \"local\";\r\nconst EMPTY_STRING = \"\";\r\nconst EMPTY_BUFFER = new ArrayBuffer(0);\r\nconst EMPTY_VIEW = new Uint8Array(0);\r\nconst END_OF_CONTENT_NAME = \"EndOfContent\";\r\nconst OCTET_STRING_NAME = \"OCTET STRING\";\r\nconst BIT_STRING_NAME = \"BIT STRING\";\n\nfunction HexBlock(BaseClass) {\r\n    var _a;\r\n    return _a = class Some extends BaseClass {\r\n            constructor(...args) {\r\n                var _a;\r\n                super(...args);\r\n                const params = args[0] || {};\r\n                this.isHexOnly = (_a = params.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n                this.valueHexView = params.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(params.valueHex) : EMPTY_VIEW;\r\n            }\r\n            get valueHex() {\r\n                return this.valueHexView.slice().buffer;\r\n            }\r\n            set valueHex(value) {\r\n                this.valueHexView = new Uint8Array(value);\r\n            }\r\n            fromBER(inputBuffer, inputOffset, inputLength) {\r\n                const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n                if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n                    return -1;\r\n                }\r\n                const endLength = inputOffset + inputLength;\r\n                this.valueHexView = view.subarray(inputOffset, endLength);\r\n                if (!this.valueHexView.length) {\r\n                    this.warnings.push(\"Zero buffer length\");\r\n                    return inputOffset;\r\n                }\r\n                this.blockLength = inputLength;\r\n                return endLength;\r\n            }\r\n            toBER(sizeOnly = false) {\r\n                if (!this.isHexOnly) {\r\n                    this.error = \"Flag 'isHexOnly' is not set, abort\";\r\n                    return EMPTY_BUFFER;\r\n                }\r\n                if (sizeOnly) {\r\n                    return new ArrayBuffer(this.valueHexView.byteLength);\r\n                }\r\n                return (this.valueHexView.byteLength === this.valueHexView.buffer.byteLength)\r\n                    ? this.valueHexView.buffer\r\n                    : this.valueHexView.slice().buffer;\r\n            }\r\n            toJSON() {\r\n                return {\r\n                    ...super.toJSON(),\r\n                    isHexOnly: this.isHexOnly,\r\n                    valueHex: pvtsutils.Convert.ToHex(this.valueHexView),\r\n                };\r\n            }\r\n        },\r\n        _a.NAME = \"hexBlock\",\r\n        _a;\r\n}\n\nclass LocalBaseBlock {\r\n    constructor({ blockLength = 0, error = EMPTY_STRING, warnings = [], valueBeforeDecode = EMPTY_VIEW, } = {}) {\r\n        this.blockLength = blockLength;\r\n        this.error = error;\r\n        this.warnings = warnings;\r\n        this.valueBeforeDecodeView = pvtsutils.BufferSourceConverter.toUint8Array(valueBeforeDecode);\r\n    }\r\n    static blockName() {\r\n        return this.NAME;\r\n    }\r\n    get valueBeforeDecode() {\r\n        return this.valueBeforeDecodeView.slice().buffer;\r\n    }\r\n    set valueBeforeDecode(value) {\r\n        this.valueBeforeDecodeView = new Uint8Array(value);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            blockName: this.constructor.NAME,\r\n            blockLength: this.blockLength,\r\n            error: this.error,\r\n            warnings: this.warnings,\r\n            valueBeforeDecode: pvtsutils.Convert.ToHex(this.valueBeforeDecodeView),\r\n        };\r\n    }\r\n}\r\nLocalBaseBlock.NAME = \"baseBlock\";\n\nclass ValueBlock extends LocalBaseBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        throw TypeError(\"User need to make a specific function in a class which extends 'ValueBlock'\");\r\n    }\r\n}\r\nValueBlock.NAME = \"valueBlock\";\n\nclass LocalIdentificationBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ idBlock = {}, } = {}) {\r\n        var _a, _b, _c, _d;\r\n        super();\r\n        if (idBlock) {\r\n            this.isHexOnly = (_a = idBlock.isHexOnly) !== null && _a !== void 0 ? _a : false;\r\n            this.valueHexView = idBlock.valueHex ? pvtsutils.BufferSourceConverter.toUint8Array(idBlock.valueHex) : EMPTY_VIEW;\r\n            this.tagClass = (_b = idBlock.tagClass) !== null && _b !== void 0 ? _b : -1;\r\n            this.tagNumber = (_c = idBlock.tagNumber) !== null && _c !== void 0 ? _c : -1;\r\n            this.isConstructed = (_d = idBlock.isConstructed) !== null && _d !== void 0 ? _d : false;\r\n        }\r\n        else {\r\n            this.tagClass = -1;\r\n            this.tagNumber = -1;\r\n            this.isConstructed = false;\r\n        }\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let firstOctet = 0;\r\n        switch (this.tagClass) {\r\n            case 1:\r\n                firstOctet |= 0x00;\r\n                break;\r\n            case 2:\r\n                firstOctet |= 0x40;\r\n                break;\r\n            case 3:\r\n                firstOctet |= 0x80;\r\n                break;\r\n            case 4:\r\n                firstOctet |= 0xC0;\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return EMPTY_BUFFER;\r\n        }\r\n        if (this.isConstructed)\r\n            firstOctet |= 0x20;\r\n        if (this.tagNumber < 31 && !this.isHexOnly) {\r\n            const retView = new Uint8Array(1);\r\n            if (!sizeOnly) {\r\n                let number = this.tagNumber;\r\n                number &= 0x1F;\r\n                firstOctet |= number;\r\n                retView[0] = firstOctet;\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        if (!this.isHexOnly) {\r\n            const encodedBuf = pvutils.utilToBase(this.tagNumber, 7);\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const size = encodedBuf.byteLength;\r\n            const retView = new Uint8Array(size + 1);\r\n            retView[0] = (firstOctet | 0x1F);\r\n            if (!sizeOnly) {\r\n                for (let i = 0; i < (size - 1); i++)\r\n                    retView[i + 1] = encodedView[i] | 0x80;\r\n                retView[size] = encodedView[size - 1];\r\n            }\r\n            return retView.buffer;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.byteLength + 1);\r\n        retView[0] = (firstOctet | 0x1F);\r\n        if (!sizeOnly) {\r\n            const curView = this.valueHexView;\r\n            for (let i = 0; i < (curView.length - 1); i++)\r\n                retView[i + 1] = curView[i] | 0x80;\r\n            retView[this.valueHexView.byteLength] = curView[curView.length - 1];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        const tagClassMask = intBuffer[0] & 0xC0;\r\n        switch (tagClassMask) {\r\n            case 0x00:\r\n                this.tagClass = (1);\r\n                break;\r\n            case 0x40:\r\n                this.tagClass = (2);\r\n                break;\r\n            case 0x80:\r\n                this.tagClass = (3);\r\n                break;\r\n            case 0xC0:\r\n                this.tagClass = (4);\r\n                break;\r\n            default:\r\n                this.error = \"Unknown tag class\";\r\n                return -1;\r\n        }\r\n        this.isConstructed = (intBuffer[0] & 0x20) === 0x20;\r\n        this.isHexOnly = false;\r\n        const tagNumberMask = intBuffer[0] & 0x1F;\r\n        if (tagNumberMask !== 0x1F) {\r\n            this.tagNumber = (tagNumberMask);\r\n            this.blockLength = 1;\r\n        }\r\n        else {\r\n            let count = 1;\r\n            let intTagNumberBuffer = this.valueHexView = new Uint8Array(255);\r\n            let tagNumberBufferMaxLength = 255;\r\n            while (intBuffer[count] & 0x80) {\r\n                intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n                count++;\r\n                if (count >= intBuffer.length) {\r\n                    this.error = \"End of input reached before message was fully decoded\";\r\n                    return -1;\r\n                }\r\n                if (count === tagNumberBufferMaxLength) {\r\n                    tagNumberBufferMaxLength += 255;\r\n                    const tempBufferView = new Uint8Array(tagNumberBufferMaxLength);\r\n                    for (let i = 0; i < intTagNumberBuffer.length; i++)\r\n                        tempBufferView[i] = intTagNumberBuffer[i];\r\n                    intTagNumberBuffer = this.valueHexView = new Uint8Array(tagNumberBufferMaxLength);\r\n                }\r\n            }\r\n            this.blockLength = (count + 1);\r\n            intTagNumberBuffer[count - 1] = intBuffer[count] & 0x7F;\r\n            const tempBufferView = new Uint8Array(count);\r\n            for (let i = 0; i < count; i++)\r\n                tempBufferView[i] = intTagNumberBuffer[i];\r\n            intTagNumberBuffer = this.valueHexView = new Uint8Array(count);\r\n            intTagNumberBuffer.set(tempBufferView);\r\n            if (this.blockLength <= 9)\r\n                this.tagNumber = pvutils.utilFromBase(intTagNumberBuffer, 7);\r\n            else {\r\n                this.isHexOnly = true;\r\n                this.warnings.push(\"Tag too long, represented as hex-coded\");\r\n            }\r\n        }\r\n        if (((this.tagClass === 1)) &&\r\n            (this.isConstructed)) {\r\n            switch (this.tagNumber) {\r\n                case 1:\r\n                case 2:\r\n                case 5:\r\n                case 6:\r\n                case 9:\r\n                case 13:\r\n                case 14:\r\n                case 23:\r\n                case 24:\r\n                case 31:\r\n                case 32:\r\n                case 33:\r\n                case 34:\r\n                    this.error = \"Constructed encoding used for primitive type\";\r\n                    return -1;\r\n            }\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            tagClass: this.tagClass,\r\n            tagNumber: this.tagNumber,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalIdentificationBlock.NAME = \"identificationBlock\";\n\nclass LocalLengthBlock extends LocalBaseBlock {\r\n    constructor({ lenBlock = {}, } = {}) {\r\n        var _a, _b, _c;\r\n        super();\r\n        this.isIndefiniteForm = (_a = lenBlock.isIndefiniteForm) !== null && _a !== void 0 ? _a : false;\r\n        this.longFormUsed = (_b = lenBlock.longFormUsed) !== null && _b !== void 0 ? _b : false;\r\n        this.length = (_c = lenBlock.length) !== null && _c !== void 0 ? _c : 0;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (intBuffer.length === 0) {\r\n            this.error = \"Zero buffer length\";\r\n            return -1;\r\n        }\r\n        if (intBuffer[0] === 0xFF) {\r\n            this.error = \"Length block 0xFF is reserved by standard\";\r\n            return -1;\r\n        }\r\n        this.isIndefiniteForm = intBuffer[0] === 0x80;\r\n        if (this.isIndefiniteForm) {\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        this.longFormUsed = !!(intBuffer[0] & 0x80);\r\n        if (this.longFormUsed === false) {\r\n            this.length = (intBuffer[0]);\r\n            this.blockLength = 1;\r\n            return (inputOffset + this.blockLength);\r\n        }\r\n        const count = intBuffer[0] & 0x7F;\r\n        if (count > 8) {\r\n            this.error = \"Too big integer\";\r\n            return -1;\r\n        }\r\n        if ((count + 1) > intBuffer.length) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        const lenOffset = inputOffset + 1;\r\n        const lengthBufferView = view.subarray(lenOffset, lenOffset + count);\r\n        if (lengthBufferView[count - 1] === 0x00)\r\n            this.warnings.push(\"Needlessly long encoded length\");\r\n        this.length = pvutils.utilFromBase(lengthBufferView, 8);\r\n        if (this.longFormUsed && (this.length <= 127))\r\n            this.warnings.push(\"Unnecessary usage of long length form\");\r\n        this.blockLength = count + 1;\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly = false) {\r\n        let retBuf;\r\n        let retView;\r\n        if (this.length > 127)\r\n            this.longFormUsed = true;\r\n        if (this.isIndefiniteForm) {\r\n            retBuf = new ArrayBuffer(1);\r\n            if (sizeOnly === false) {\r\n                retView = new Uint8Array(retBuf);\r\n                retView[0] = 0x80;\r\n            }\r\n            return retBuf;\r\n        }\r\n        if (this.longFormUsed) {\r\n            const encodedBuf = pvutils.utilToBase(this.length, 8);\r\n            if (encodedBuf.byteLength > 127) {\r\n                this.error = \"Too big length\";\r\n                return (EMPTY_BUFFER);\r\n            }\r\n            retBuf = new ArrayBuffer(encodedBuf.byteLength + 1);\r\n            if (sizeOnly)\r\n                return retBuf;\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = encodedBuf.byteLength | 0x80;\r\n            for (let i = 0; i < encodedBuf.byteLength; i++)\r\n                retView[i + 1] = encodedView[i];\r\n            return retBuf;\r\n        }\r\n        retBuf = new ArrayBuffer(1);\r\n        if (sizeOnly === false) {\r\n            retView = new Uint8Array(retBuf);\r\n            retView[0] = this.length;\r\n        }\r\n        return retBuf;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            longFormUsed: this.longFormUsed,\r\n            length: this.length,\r\n        };\r\n    }\r\n}\r\nLocalLengthBlock.NAME = \"lengthBlock\";\n\nconst typeStore = {};\n\nclass BaseBlock extends LocalBaseBlock {\r\n    constructor({ name = EMPTY_STRING, optional = false, primitiveSchema, ...parameters } = {}, valueBlockType) {\r\n        super(parameters);\r\n        this.name = name;\r\n        this.optional = optional;\r\n        if (primitiveSchema) {\r\n            this.primitiveSchema = primitiveSchema;\r\n        }\r\n        this.idBlock = new LocalIdentificationBlock(parameters);\r\n        this.lenBlock = new LocalLengthBlock(parameters);\r\n        this.valueBlock = valueBlockType ? new valueBlockType(parameters) : new ValueBlock(parameters);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        if (!writer) {\r\n            prepareIndefiniteForm(this);\r\n        }\r\n        const idBlockBuf = this.idBlock.toBER(sizeOnly);\r\n        _writer.write(idBlockBuf);\r\n        if (this.lenBlock.isIndefiniteForm) {\r\n            _writer.write(new Uint8Array([0x80]).buffer);\r\n            this.valueBlock.toBER(sizeOnly, _writer);\r\n            _writer.write(new ArrayBuffer(2));\r\n        }\r\n        else {\r\n            const valueBlockBuf = this.valueBlock.toBER(sizeOnly);\r\n            this.lenBlock.length = valueBlockBuf.byteLength;\r\n            const lenBlockBuf = this.lenBlock.toBER(sizeOnly);\r\n            _writer.write(lenBlockBuf);\r\n            _writer.write(valueBlockBuf);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            idBlock: this.idBlock.toJSON(),\r\n            lenBlock: this.lenBlock.toJSON(),\r\n            valueBlock: this.valueBlock.toJSON(),\r\n            name: this.name,\r\n            optional: this.optional,\r\n        };\r\n        if (this.primitiveSchema)\r\n            object.primitiveSchema = this.primitiveSchema.toJSON();\r\n        return object;\r\n    }\r\n    toString(encoding = \"ascii\") {\r\n        if (encoding === \"ascii\") {\r\n            return this.onAsciiEncoding();\r\n        }\r\n        return pvtsutils.Convert.ToHex(this.toBER());\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueBeforeDecodeView)}`;\r\n    }\r\n    isEqual(other) {\r\n        if (this === other) {\r\n            return true;\r\n        }\r\n        if (!(other instanceof this.constructor)) {\r\n            return false;\r\n        }\r\n        const thisRaw = this.toBER();\r\n        const otherRaw = other.toBER();\r\n        return pvutils.isEqualBuffer(thisRaw, otherRaw);\r\n    }\r\n}\r\nBaseBlock.NAME = \"BaseBlock\";\r\nfunction prepareIndefiniteForm(baseBlock) {\r\n    if (baseBlock instanceof typeStore.Constructed) {\r\n        for (const value of baseBlock.valueBlock.value) {\r\n            if (prepareIndefiniteForm(value)) {\r\n                baseBlock.lenBlock.isIndefiniteForm = true;\r\n            }\r\n        }\r\n    }\r\n    return !!baseBlock.lenBlock.isIndefiniteForm;\r\n}\n\nclass BaseStringBlock extends BaseBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}, stringValueBlockType) {\r\n        super(parameters, stringValueBlockType);\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        this.fromBuffer(this.valueBlock.valueHexView);\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : '${this.valueBlock.value}'`;\r\n    }\r\n}\r\nBaseStringBlock.NAME = \"BaseStringBlock\";\n\nclass LocalPrimitiveValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ isHexOnly = true, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = isHexOnly;\r\n    }\r\n}\r\nLocalPrimitiveValueBlock.NAME = \"PrimitiveValueBlock\";\n\nvar _a$w;\r\nclass Primitive extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalPrimitiveValueBlock);\r\n        this.idBlock.isConstructed = false;\r\n    }\r\n}\r\n_a$w = Primitive;\r\n(() => {\r\n    typeStore.Primitive = _a$w;\r\n})();\r\nPrimitive.NAME = \"PRIMITIVE\";\n\nfunction localChangeType(inputObject, newType) {\r\n    if (inputObject instanceof newType) {\r\n        return inputObject;\r\n    }\r\n    const newObject = new newType();\r\n    newObject.idBlock = inputObject.idBlock;\r\n    newObject.lenBlock = inputObject.lenBlock;\r\n    newObject.warnings = inputObject.warnings;\r\n    newObject.valueBeforeDecodeView = inputObject.valueBeforeDecodeView;\r\n    return newObject;\r\n}\r\nfunction localFromBER(inputBuffer, inputOffset = 0, inputLength = inputBuffer.length) {\r\n    const incomingOffset = inputOffset;\r\n    let returnObject = new BaseBlock({}, ValueBlock);\r\n    const baseBlock = new LocalBaseBlock();\r\n    if (!checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength)) {\r\n        returnObject.error = baseBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    const intBuffer = inputBuffer.subarray(inputOffset, inputOffset + inputLength);\r\n    if (!intBuffer.length) {\r\n        returnObject.error = \"Zero buffer length\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let resultOffset = returnObject.idBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.idBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.idBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.idBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.idBlock.blockLength;\r\n    resultOffset = returnObject.lenBlock.fromBER(inputBuffer, inputOffset, inputLength);\r\n    if (returnObject.lenBlock.warnings.length) {\r\n        returnObject.warnings.concat(returnObject.lenBlock.warnings);\r\n    }\r\n    if (resultOffset === -1) {\r\n        returnObject.error = returnObject.lenBlock.error;\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    inputOffset = resultOffset;\r\n    inputLength -= returnObject.lenBlock.blockLength;\r\n    if (!returnObject.idBlock.isConstructed &&\r\n        returnObject.lenBlock.isIndefiniteForm) {\r\n        returnObject.error = \"Indefinite length form used for primitive encoding form\";\r\n        return {\r\n            offset: -1,\r\n            result: returnObject\r\n        };\r\n    }\r\n    let newASN1Type = BaseBlock;\r\n    switch (returnObject.idBlock.tagClass) {\r\n        case 1:\r\n            if ((returnObject.idBlock.tagNumber >= 37) &&\r\n                (returnObject.idBlock.isHexOnly === false)) {\r\n                returnObject.error = \"UNIVERSAL 37 and upper tags are reserved by ASN.1 standard\";\r\n                return {\r\n                    offset: -1,\r\n                    result: returnObject\r\n                };\r\n            }\r\n            switch (returnObject.idBlock.tagNumber) {\r\n                case 0:\r\n                    if ((returnObject.idBlock.isConstructed) &&\r\n                        (returnObject.lenBlock.length > 0)) {\r\n                        returnObject.error = \"Type [UNIVERSAL 0] is reserved\";\r\n                        return {\r\n                            offset: -1,\r\n                            result: returnObject\r\n                        };\r\n                    }\r\n                    newASN1Type = typeStore.EndOfContent;\r\n                    break;\r\n                case 1:\r\n                    newASN1Type = typeStore.Boolean;\r\n                    break;\r\n                case 2:\r\n                    newASN1Type = typeStore.Integer;\r\n                    break;\r\n                case 3:\r\n                    newASN1Type = typeStore.BitString;\r\n                    break;\r\n                case 4:\r\n                    newASN1Type = typeStore.OctetString;\r\n                    break;\r\n                case 5:\r\n                    newASN1Type = typeStore.Null;\r\n                    break;\r\n                case 6:\r\n                    newASN1Type = typeStore.ObjectIdentifier;\r\n                    break;\r\n                case 10:\r\n                    newASN1Type = typeStore.Enumerated;\r\n                    break;\r\n                case 12:\r\n                    newASN1Type = typeStore.Utf8String;\r\n                    break;\r\n                case 13:\r\n                    newASN1Type = typeStore.RelativeObjectIdentifier;\r\n                    break;\r\n                case 14:\r\n                    newASN1Type = typeStore.TIME;\r\n                    break;\r\n                case 15:\r\n                    returnObject.error = \"[UNIVERSAL 15] is reserved by ASN.1 standard\";\r\n                    return {\r\n                        offset: -1,\r\n                        result: returnObject\r\n                    };\r\n                case 16:\r\n                    newASN1Type = typeStore.Sequence;\r\n                    break;\r\n                case 17:\r\n                    newASN1Type = typeStore.Set;\r\n                    break;\r\n                case 18:\r\n                    newASN1Type = typeStore.NumericString;\r\n                    break;\r\n                case 19:\r\n                    newASN1Type = typeStore.PrintableString;\r\n                    break;\r\n                case 20:\r\n                    newASN1Type = typeStore.TeletexString;\r\n                    break;\r\n                case 21:\r\n                    newASN1Type = typeStore.VideotexString;\r\n                    break;\r\n                case 22:\r\n                    newASN1Type = typeStore.IA5String;\r\n                    break;\r\n                case 23:\r\n                    newASN1Type = typeStore.UTCTime;\r\n                    break;\r\n                case 24:\r\n                    newASN1Type = typeStore.GeneralizedTime;\r\n                    break;\r\n                case 25:\r\n                    newASN1Type = typeStore.GraphicString;\r\n                    break;\r\n                case 26:\r\n                    newASN1Type = typeStore.VisibleString;\r\n                    break;\r\n                case 27:\r\n                    newASN1Type = typeStore.GeneralString;\r\n                    break;\r\n                case 28:\r\n                    newASN1Type = typeStore.UniversalString;\r\n                    break;\r\n                case 29:\r\n                    newASN1Type = typeStore.CharacterString;\r\n                    break;\r\n                case 30:\r\n                    newASN1Type = typeStore.BmpString;\r\n                    break;\r\n                case 31:\r\n                    newASN1Type = typeStore.DATE;\r\n                    break;\r\n                case 32:\r\n                    newASN1Type = typeStore.TimeOfDay;\r\n                    break;\r\n                case 33:\r\n                    newASN1Type = typeStore.DateTime;\r\n                    break;\r\n                case 34:\r\n                    newASN1Type = typeStore.Duration;\r\n                    break;\r\n                default: {\r\n                    const newObject = returnObject.idBlock.isConstructed\r\n                        ? new typeStore.Constructed()\r\n                        : new typeStore.Primitive();\r\n                    newObject.idBlock = returnObject.idBlock;\r\n                    newObject.lenBlock = returnObject.lenBlock;\r\n                    newObject.warnings = returnObject.warnings;\r\n                    returnObject = newObject;\r\n                }\r\n            }\r\n            break;\r\n        case 2:\r\n        case 3:\r\n        case 4:\r\n        default: {\r\n            newASN1Type = returnObject.idBlock.isConstructed\r\n                ? typeStore.Constructed\r\n                : typeStore.Primitive;\r\n        }\r\n    }\r\n    returnObject = localChangeType(returnObject, newASN1Type);\r\n    resultOffset = returnObject.fromBER(inputBuffer, inputOffset, returnObject.lenBlock.isIndefiniteForm ? inputLength : returnObject.lenBlock.length);\r\n    returnObject.valueBeforeDecodeView = inputBuffer.subarray(incomingOffset, incomingOffset + returnObject.blockLength);\r\n    return {\r\n        offset: resultOffset,\r\n        result: returnObject\r\n    };\r\n}\r\nfunction fromBER(inputBuffer) {\r\n    if (!inputBuffer.byteLength) {\r\n        const result = new BaseBlock({}, ValueBlock);\r\n        result.error = \"Input buffer has zero length\";\r\n        return {\r\n            offset: -1,\r\n            result\r\n        };\r\n    }\r\n    return localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).slice(), 0, inputBuffer.byteLength);\r\n}\n\nfunction checkLen(indefiniteLength, length) {\r\n    if (indefiniteLength) {\r\n        return 1;\r\n    }\r\n    return length;\r\n}\r\nclass LocalConstructedValueBlock extends ValueBlock {\r\n    constructor({ value = [], isIndefiniteForm = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.isIndefiniteForm = isIndefiniteForm;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const view = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, view, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueBeforeDecodeView = view.subarray(inputOffset, inputOffset + inputLength);\r\n        if (this.valueBeforeDecodeView.length === 0) {\r\n            this.warnings.push(\"Zero buffer length\");\r\n            return inputOffset;\r\n        }\r\n        let currentOffset = inputOffset;\r\n        while (checkLen(this.isIndefiniteForm, inputLength) > 0) {\r\n            const returnObject = localFromBER(view, currentOffset, inputLength);\r\n            if (returnObject.offset === -1) {\r\n                this.error = returnObject.result.error;\r\n                this.warnings.concat(returnObject.result.warnings);\r\n                return -1;\r\n            }\r\n            currentOffset = returnObject.offset;\r\n            this.blockLength += returnObject.result.blockLength;\r\n            inputLength -= returnObject.result.blockLength;\r\n            this.value.push(returnObject.result);\r\n            if (this.isIndefiniteForm && returnObject.result.constructor.NAME === END_OF_CONTENT_NAME) {\r\n                break;\r\n            }\r\n        }\r\n        if (this.isIndefiniteForm) {\r\n            if (this.value[this.value.length - 1].constructor.NAME === END_OF_CONTENT_NAME) {\r\n                this.value.pop();\r\n            }\r\n            else {\r\n                this.warnings.push(\"No EndOfContent block encoded\");\r\n            }\r\n        }\r\n        return currentOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const _writer = writer || new ViewWriter();\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            this.value[i].toBER(sizeOnly, _writer);\r\n        }\r\n        if (!writer) {\r\n            return _writer.final();\r\n        }\r\n        return EMPTY_BUFFER;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            isIndefiniteForm: this.isIndefiniteForm,\r\n            value: [],\r\n        };\r\n        for (const value of this.value) {\r\n            object.value.push(value.toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalConstructedValueBlock.NAME = \"ConstructedValueBlock\";\n\nvar _a$v;\r\nclass Constructed extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalConstructedValueBlock);\r\n        this.idBlock.isConstructed = true;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        const resultOffset = this.valueBlock.fromBER(inputBuffer, inputOffset, (this.lenBlock.isIndefiniteForm) ? inputLength : this.lenBlock.length);\r\n        if (resultOffset === -1) {\r\n            this.error = this.valueBlock.error;\r\n            return resultOffset;\r\n        }\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        if (!this.valueBlock.error.length)\r\n            this.blockLength += this.valueBlock.blockLength;\r\n        return resultOffset;\r\n    }\r\n    onAsciiEncoding() {\r\n        const values = [];\r\n        for (const value of this.valueBlock.value) {\r\n            values.push(value.toString(\"ascii\").split(\"\\n\").map(o => `  ${o}`).join(\"\\n\"));\r\n        }\r\n        const blockName = this.idBlock.tagClass === 3\r\n            ? `[${this.idBlock.tagNumber}]`\r\n            : this.constructor.NAME;\r\n        return values.length\r\n            ? `${blockName} :\\n${values.join(\"\\n\")}`\r\n            : `${blockName} :`;\r\n    }\r\n}\r\n_a$v = Constructed;\r\n(() => {\r\n    typeStore.Constructed = _a$v;\r\n})();\r\nConstructed.NAME = \"CONSTRUCTED\";\n\nclass LocalEndOfContentValueBlock extends ValueBlock {\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        return inputOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return EMPTY_BUFFER;\r\n    }\r\n}\r\nLocalEndOfContentValueBlock.override = \"EndOfContentValueBlock\";\n\nvar _a$u;\r\nclass EndOfContent extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalEndOfContentValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 0;\r\n    }\r\n}\r\n_a$u = EndOfContent;\r\n(() => {\r\n    typeStore.EndOfContent = _a$u;\r\n})();\r\nEndOfContent.NAME = END_OF_CONTENT_NAME;\n\nvar _a$t;\r\nclass Null extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, ValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 5;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (this.lenBlock.length > 0)\r\n            this.warnings.push(\"Non-zero length of value block for Null type\");\r\n        if (!this.idBlock.error.length)\r\n            this.blockLength += this.idBlock.blockLength;\r\n        if (!this.lenBlock.error.length)\r\n            this.blockLength += this.lenBlock.blockLength;\r\n        this.blockLength += inputLength;\r\n        if ((inputOffset + inputLength) > inputBuffer.byteLength) {\r\n            this.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n            return -1;\r\n        }\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuf = new ArrayBuffer(2);\r\n        if (!sizeOnly) {\r\n            const retView = new Uint8Array(retBuf);\r\n            retView[0] = 0x05;\r\n            retView[1] = 0x00;\r\n        }\r\n        if (writer) {\r\n            writer.write(retBuf);\r\n        }\r\n        return retBuf;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME}`;\r\n    }\r\n}\r\n_a$t = Null;\r\n(() => {\r\n    typeStore.Null = _a$t;\r\n})();\r\nNull.NAME = \"NULL\";\n\nclass LocalBooleanValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        if (parameters.valueHex) {\r\n            this.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(parameters.valueHex);\r\n        }\r\n        else {\r\n            this.valueHexView = new Uint8Array(1);\r\n        }\r\n        if (value) {\r\n            this.value = value;\r\n        }\r\n    }\r\n    get value() {\r\n        for (const octet of this.valueHexView) {\r\n            if (octet > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    set value(value) {\r\n        this.valueHexView[0] = value ? 0xFF : 0x00;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        this.valueHexView = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        if (inputLength > 1)\r\n            this.warnings.push(\"Boolean value encoded in more then 1 octet\");\r\n        this.isHexOnly = true;\r\n        pvutils.utilDecodeTC.call(this);\r\n        this.blockLength = inputLength;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER() {\r\n        return this.valueHexView.slice();\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalBooleanValueBlock.NAME = \"BooleanValueBlock\";\n\nvar _a$s;\r\nclass Boolean extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalBooleanValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 1;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.value;\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.value = value;\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.getValue}`;\r\n    }\r\n}\r\n_a$s = Boolean;\r\n(() => {\r\n    typeStore.Boolean = _a$s;\r\n})();\r\nBoolean.NAME = \"BOOLEAN\";\n\nclass LocalOctetStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isConstructed = isConstructed;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = 0;\r\n        if (this.isConstructed) {\r\n            this.isHexOnly = false;\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (let i = 0; i < this.value.length; i++) {\r\n                const currentBlockName = this.value[i].constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, OCTET STRING may consists of OCTET STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== OCTET_STRING_NAME) {\r\n                    this.error = \"OCTET STRING may consists of OCTET STRINGs only\";\r\n                    return -1;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this.isHexOnly = true;\r\n            resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n            this.blockLength = inputLength;\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed)\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.byteLength)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalOctetStringValueBlock.NAME = \"OctetStringValueBlock\";\n\nvar _a$r;\r\nclass OctetString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalOctetStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 4;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        if (inputLength === 0) {\r\n            if (this.idBlock.error.length === 0)\r\n                this.blockLength += this.idBlock.blockLength;\r\n            if (this.lenBlock.error.length === 0)\r\n                this.blockLength += this.lenBlock.blockLength;\r\n            return inputOffset;\r\n        }\r\n        if (!this.valueBlock.isConstructed) {\r\n            const view = inputBuffer instanceof ArrayBuffer ? new Uint8Array(inputBuffer) : inputBuffer;\r\n            const buf = view.subarray(inputOffset, inputOffset + inputLength);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === inputLength) {\r\n                        this.valueBlock.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        return `${this.constructor.NAME} : ${pvtsutils.Convert.ToHex(this.valueBlock.valueHexView)}`;\r\n    }\r\n    getValue() {\r\n        if (!this.idBlock.isConstructed) {\r\n            return this.valueBlock.valueHexView.slice().buffer;\r\n        }\r\n        const array = [];\r\n        for (const content of this.valueBlock.value) {\r\n            if (content instanceof OctetString) {\r\n                array.push(content.valueBlock.valueHexView);\r\n            }\r\n        }\r\n        return pvtsutils.BufferSourceConverter.concat(array);\r\n    }\r\n}\r\n_a$r = OctetString;\r\n(() => {\r\n    typeStore.OctetString = _a$r;\r\n})();\r\nOctetString.NAME = OCTET_STRING_NAME;\n\nclass LocalBitStringValueBlock extends HexBlock(LocalConstructedValueBlock) {\r\n    constructor({ unusedBits = 0, isConstructed = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.unusedBits = unusedBits;\r\n        this.isConstructed = isConstructed;\r\n        this.blockLength = this.valueHexView.byteLength;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        let resultOffset = -1;\r\n        if (this.isConstructed) {\r\n            resultOffset = LocalConstructedValueBlock.prototype.fromBER.call(this, inputBuffer, inputOffset, inputLength);\r\n            if (resultOffset === -1)\r\n                return resultOffset;\r\n            for (const value of this.value) {\r\n                const currentBlockName = value.constructor.NAME;\r\n                if (currentBlockName === END_OF_CONTENT_NAME) {\r\n                    if (this.isIndefiniteForm)\r\n                        break;\r\n                    else {\r\n                        this.error = \"EndOfContent is unexpected, BIT STRING may consists of BIT STRINGs only\";\r\n                        return -1;\r\n                    }\r\n                }\r\n                if (currentBlockName !== BIT_STRING_NAME) {\r\n                    this.error = \"BIT STRING may consists of BIT STRINGs only\";\r\n                    return -1;\r\n                }\r\n                const valueBlock = value.valueBlock;\r\n                if ((this.unusedBits > 0) && (valueBlock.unusedBits > 0)) {\r\n                    this.error = \"Using of \\\"unused bits\\\" inside constructive BIT STRING allowed for least one only\";\r\n                    return -1;\r\n                }\r\n                this.unusedBits = valueBlock.unusedBits;\r\n            }\r\n            return resultOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.unusedBits = intBuffer[0];\r\n        if (this.unusedBits > 7) {\r\n            this.error = \"Unused bits for BitString must be in range 0-7\";\r\n            return -1;\r\n        }\r\n        if (!this.unusedBits) {\r\n            const buf = intBuffer.subarray(1);\r\n            try {\r\n                if (buf.byteLength) {\r\n                    const asn = localFromBER(buf, 0, buf.byteLength);\r\n                    if (asn.offset !== -1 && asn.offset === (inputLength - 1)) {\r\n                        this.value = [asn.result];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {\r\n            }\r\n        }\r\n        this.valueHexView = intBuffer.subarray(1);\r\n        this.blockLength = intBuffer.length;\r\n        return (inputOffset + inputLength);\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        if (this.isConstructed) {\r\n            return LocalConstructedValueBlock.prototype.toBER.call(this, sizeOnly, writer);\r\n        }\r\n        if (sizeOnly) {\r\n            return new ArrayBuffer(this.valueHexView.byteLength + 1);\r\n        }\r\n        if (!this.valueHexView.byteLength) {\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(this.valueHexView.length + 1);\r\n        retView[0] = this.unusedBits;\r\n        retView.set(this.valueHexView, 1);\r\n        return retView.buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            unusedBits: this.unusedBits,\r\n            isConstructed: this.isConstructed,\r\n        };\r\n    }\r\n}\r\nLocalBitStringValueBlock.NAME = \"BitStringValueBlock\";\n\nvar _a$q;\r\nclass BitString extends BaseBlock {\r\n    constructor({ idBlock = {}, lenBlock = {}, ...parameters } = {}) {\r\n        var _b, _c;\r\n        (_b = parameters.isConstructed) !== null && _b !== void 0 ? _b : (parameters.isConstructed = !!((_c = parameters.value) === null || _c === void 0 ? void 0 : _c.length));\r\n        super({\r\n            idBlock: {\r\n                isConstructed: parameters.isConstructed,\r\n                ...idBlock,\r\n            },\r\n            lenBlock: {\r\n                ...lenBlock,\r\n                isIndefiniteForm: !!parameters.isIndefiniteForm,\r\n            },\r\n            ...parameters,\r\n        }, LocalBitStringValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 3;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        this.valueBlock.isConstructed = this.idBlock.isConstructed;\r\n        this.valueBlock.isIndefiniteForm = this.lenBlock.isIndefiniteForm;\r\n        return super.fromBER(inputBuffer, inputOffset, inputLength);\r\n    }\r\n    onAsciiEncoding() {\r\n        if (this.valueBlock.isConstructed || (this.valueBlock.value && this.valueBlock.value.length)) {\r\n            return Constructed.prototype.onAsciiEncoding.call(this);\r\n        }\r\n        else {\r\n            const bits = [];\r\n            const valueHex = this.valueBlock.valueHexView;\r\n            for (const byte of valueHex) {\r\n                bits.push(byte.toString(2).padStart(8, \"0\"));\r\n            }\r\n            const bitsStr = bits.join(\"\");\r\n            return `${this.constructor.NAME} : ${bitsStr.substring(0, bitsStr.length - this.valueBlock.unusedBits)}`;\r\n        }\r\n    }\r\n}\r\n_a$q = BitString;\r\n(() => {\r\n    typeStore.BitString = _a$q;\r\n})();\r\nBitString.NAME = BIT_STRING_NAME;\n\nvar _a$p;\r\nfunction viewAdd(first, second) {\r\n    const c = new Uint8Array([0]);\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    let firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value = 0;\r\n    const max = (secondViewCopyLength < firstViewCopyLength) ? firstViewCopyLength : secondViewCopyLength;\r\n    let counter = 0;\r\n    for (let i = max; i >= 0; i--, counter++) {\r\n        switch (true) {\r\n            case (counter < secondViewCopy.length):\r\n                value = firstViewCopy[firstViewCopyLength - counter] + secondViewCopy[secondViewCopyLength - counter] + c[0];\r\n                break;\r\n            default:\r\n                value = firstViewCopy[firstViewCopyLength - counter] + c[0];\r\n        }\r\n        c[0] = value / 10;\r\n        switch (true) {\r\n            case (counter >= firstViewCopy.length):\r\n                firstViewCopy = pvutils.utilConcatView(new Uint8Array([value % 10]), firstViewCopy);\r\n                break;\r\n            default:\r\n                firstViewCopy[firstViewCopyLength - counter] = value % 10;\r\n        }\r\n    }\r\n    if (c[0] > 0)\r\n        firstViewCopy = pvutils.utilConcatView(c, firstViewCopy);\r\n    return firstViewCopy;\r\n}\r\nfunction power2(n) {\r\n    if (n >= powers2.length) {\r\n        for (let p = powers2.length; p <= n; p++) {\r\n            const c = new Uint8Array([0]);\r\n            let digits = (powers2[p - 1]).slice(0);\r\n            for (let i = (digits.length - 1); i >= 0; i--) {\r\n                const newValue = new Uint8Array([(digits[i] << 1) + c[0]]);\r\n                c[0] = newValue[0] / 10;\r\n                digits[i] = newValue[0] % 10;\r\n            }\r\n            if (c[0] > 0)\r\n                digits = pvutils.utilConcatView(c, digits);\r\n            powers2.push(digits);\r\n        }\r\n    }\r\n    return powers2[n];\r\n}\r\nfunction viewSub(first, second) {\r\n    let b = 0;\r\n    const firstView = new Uint8Array(first);\r\n    const secondView = new Uint8Array(second);\r\n    const firstViewCopy = firstView.slice(0);\r\n    const firstViewCopyLength = firstViewCopy.length - 1;\r\n    const secondViewCopy = secondView.slice(0);\r\n    const secondViewCopyLength = secondViewCopy.length - 1;\r\n    let value;\r\n    let counter = 0;\r\n    for (let i = secondViewCopyLength; i >= 0; i--, counter++) {\r\n        value = firstViewCopy[firstViewCopyLength - counter] - secondViewCopy[secondViewCopyLength - counter] - b;\r\n        switch (true) {\r\n            case (value < 0):\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n                break;\r\n            default:\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n        }\r\n    }\r\n    if (b > 0) {\r\n        for (let i = (firstViewCopyLength - secondViewCopyLength + 1); i >= 0; i--, counter++) {\r\n            value = firstViewCopy[firstViewCopyLength - counter] - b;\r\n            if (value < 0) {\r\n                b = 1;\r\n                firstViewCopy[firstViewCopyLength - counter] = value + 10;\r\n            }\r\n            else {\r\n                b = 0;\r\n                firstViewCopy[firstViewCopyLength - counter] = value;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    return firstViewCopy.slice();\r\n}\r\nclass LocalIntegerValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ value, ...parameters } = {}) {\r\n        super(parameters);\r\n        this._valueDec = 0;\r\n        if (value !== undefined) {\r\n            this.valueDec = value;\r\n        }\r\n    }\r\n    setValueHex() {\r\n        if (this.valueHexView.length >= 4) {\r\n            this.warnings.push(\"Too big Integer for decoding, hex only\");\r\n            this.isHexOnly = true;\r\n            this._valueDec = 0;\r\n        }\r\n        else {\r\n            this.isHexOnly = false;\r\n            if (this.valueHexView.length > 0) {\r\n                this._valueDec = pvutils.utilDecodeTC.call(this);\r\n            }\r\n        }\r\n    }\r\n    set valueDec(v) {\r\n        this._valueDec = v;\r\n        this.isHexOnly = false;\r\n        this.valueHexView = new Uint8Array(pvutils.utilEncodeTC(v));\r\n    }\r\n    get valueDec() {\r\n        return this._valueDec;\r\n    }\r\n    fromDER(inputBuffer, inputOffset, inputLength, expectedLength = 0) {\r\n        const offset = this.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (offset === -1)\r\n            return offset;\r\n        const view = this.valueHexView;\r\n        if ((view[0] === 0x00) && ((view[1] & 0x80) !== 0)) {\r\n            this.valueHexView = view.subarray(1);\r\n        }\r\n        else {\r\n            if (expectedLength !== 0) {\r\n                if (view.length < expectedLength) {\r\n                    if ((expectedLength - view.length) > 1)\r\n                        expectedLength = view.length + 1;\r\n                    this.valueHexView = view.subarray(expectedLength - view.length);\r\n                }\r\n            }\r\n        }\r\n        return offset;\r\n    }\r\n    toDER(sizeOnly = false) {\r\n        const view = this.valueHexView;\r\n        switch (true) {\r\n            case ((view[0] & 0x80) !== 0):\r\n                {\r\n                    const updatedView = new Uint8Array(this.valueHexView.length + 1);\r\n                    updatedView[0] = 0x00;\r\n                    updatedView.set(view, 1);\r\n                    this.valueHexView = updatedView;\r\n                }\r\n                break;\r\n            case ((view[0] === 0x00) && ((view[1] & 0x80) === 0)):\r\n                {\r\n                    this.valueHexView = this.valueHexView.subarray(1);\r\n                }\r\n                break;\r\n        }\r\n        return this.toBER(sizeOnly);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const resultOffset = super.fromBER(inputBuffer, inputOffset, inputLength);\r\n        if (resultOffset === -1) {\r\n            return resultOffset;\r\n        }\r\n        this.setValueHex();\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return sizeOnly\r\n            ? new ArrayBuffer(this.valueHexView.length)\r\n            : this.valueHexView.slice().buffer;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n    toString() {\r\n        const firstBit = (this.valueHexView.length * 8) - 1;\r\n        let digits = new Uint8Array((this.valueHexView.length * 8) / 3);\r\n        let bitNumber = 0;\r\n        let currentByte;\r\n        const asn1View = this.valueHexView;\r\n        let result = \"\";\r\n        let flag = false;\r\n        for (let byteNumber = (asn1View.byteLength - 1); byteNumber >= 0; byteNumber--) {\r\n            currentByte = asn1View[byteNumber];\r\n            for (let i = 0; i < 8; i++) {\r\n                if ((currentByte & 1) === 1) {\r\n                    switch (bitNumber) {\r\n                        case firstBit:\r\n                            digits = viewSub(power2(bitNumber), digits);\r\n                            result = \"-\";\r\n                            break;\r\n                        default:\r\n                            digits = viewAdd(digits, power2(bitNumber));\r\n                    }\r\n                }\r\n                bitNumber++;\r\n                currentByte >>= 1;\r\n            }\r\n        }\r\n        for (let i = 0; i < digits.length; i++) {\r\n            if (digits[i])\r\n                flag = true;\r\n            if (flag)\r\n                result += digitsString.charAt(digits[i]);\r\n        }\r\n        if (flag === false)\r\n            result += digitsString.charAt(0);\r\n        return result;\r\n    }\r\n}\r\n_a$p = LocalIntegerValueBlock;\r\nLocalIntegerValueBlock.NAME = \"IntegerValueBlock\";\r\n(() => {\r\n    Object.defineProperty(_a$p.prototype, \"valueHex\", {\r\n        set: function (v) {\r\n            this.valueHexView = new Uint8Array(v);\r\n            this.setValueHex();\r\n        },\r\n        get: function () {\r\n            return this.valueHexView.slice().buffer;\r\n        },\r\n    });\r\n})();\n\nvar _a$o;\r\nclass Integer extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalIntegerValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 2;\r\n    }\r\n    toBigInt() {\r\n        assertBigInt();\r\n        return BigInt(this.valueBlock.toString());\r\n    }\r\n    static fromBigInt(value) {\r\n        assertBigInt();\r\n        const bigIntValue = BigInt(value);\r\n        const writer = new ViewWriter();\r\n        const hex = bigIntValue.toString(16).replace(/^-/, \"\");\r\n        const view = new Uint8Array(pvtsutils.Convert.FromHex(hex));\r\n        if (bigIntValue < 0) {\r\n            const first = new Uint8Array(view.length + (view[0] & 0x80 ? 1 : 0));\r\n            first[0] |= 0x80;\r\n            const firstInt = BigInt(`0x${pvtsutils.Convert.ToHex(first)}`);\r\n            const secondInt = firstInt + bigIntValue;\r\n            const second = pvtsutils.BufferSourceConverter.toUint8Array(pvtsutils.Convert.FromHex(secondInt.toString(16)));\r\n            second[0] |= 0x80;\r\n            writer.write(second);\r\n        }\r\n        else {\r\n            if (view[0] & 0x80) {\r\n                writer.write(new Uint8Array([0]));\r\n            }\r\n            writer.write(view);\r\n        }\r\n        const res = new Integer({\r\n            valueHex: writer.final(),\r\n        });\r\n        return res;\r\n    }\r\n    convertToDER() {\r\n        const integer = new Integer({ valueHex: this.valueBlock.valueHexView });\r\n        integer.valueBlock.toDER();\r\n        return integer;\r\n    }\r\n    convertFromDER() {\r\n        return new Integer({\r\n            valueHex: this.valueBlock.valueHexView[0] === 0\r\n                ? this.valueBlock.valueHexView.subarray(1)\r\n                : this.valueBlock.valueHexView,\r\n        });\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString()}`;\r\n    }\r\n}\r\n_a$o = Integer;\r\n(() => {\r\n    typeStore.Integer = _a$o;\r\n})();\r\nInteger.NAME = \"INTEGER\";\n\nvar _a$n;\r\nclass Enumerated extends Integer {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 10;\r\n    }\r\n}\r\n_a$n = Enumerated;\r\n(() => {\r\n    typeStore.Enumerated = _a$n;\r\n})();\r\nEnumerated.NAME = \"ENUMERATED\";\n\nclass LocalSidValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ valueDec = -1, isFirstSid = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n        this.isFirstSid = isFirstSid;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (!inputLength) {\r\n            return inputOffset;\r\n        }\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength)) {\r\n            return -1;\r\n        }\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++) {\r\n            tempView[i] = this.valueHexView[i];\r\n        }\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    set valueBigInt(value) {\r\n        assertBigInt();\r\n        let bits = BigInt(value).toString(2);\r\n        while (bits.length % 7) {\r\n            bits = \"0\" + bits;\r\n        }\r\n        const bytes = new Uint8Array(bits.length / 7);\r\n        for (let i = 0; i < bytes.length; i++) {\r\n            bytes[i] = parseInt(bits.slice(i * 7, i * 7 + 7), 2) + (i + 1 < bytes.length ? 0x80 : 0);\r\n        }\r\n        this.fromBER(bytes.buffer, 0, bytes.length);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            if (this.isFirstSid) {\r\n                let sidValue = this.valueDec;\r\n                if (this.valueDec <= 39)\r\n                    result = \"0.\";\r\n                else {\r\n                    if (this.valueDec <= 79) {\r\n                        result = \"1.\";\r\n                        sidValue -= 40;\r\n                    }\r\n                    else {\r\n                        result = \"2.\";\r\n                        sidValue -= 80;\r\n                    }\r\n                }\r\n                result += sidValue.toString();\r\n            }\r\n            else\r\n                result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n            isFirstSid: this.isFirstSid,\r\n        };\r\n    }\r\n}\r\nLocalSidValueBlock.NAME = \"sidBlock\";\n\nclass LocalObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            if (this.value.length === 0)\r\n                sidBlock.isFirstSid = true;\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        let flag = false;\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            if (flag) {\r\n                const sidBlock = this.value[0];\r\n                let plus = 0;\r\n                switch (sidBlock.valueDec) {\r\n                    case 0:\r\n                        break;\r\n                    case 1:\r\n                        plus = 40;\r\n                        break;\r\n                    case 2:\r\n                        plus = 80;\r\n                        break;\r\n                    default:\r\n                        this.value = [];\r\n                        return;\r\n                }\r\n                const parsedSID = parseInt(sid, 10);\r\n                if (isNaN(parsedSID))\r\n                    return;\r\n                sidBlock.valueDec = parsedSID + plus;\r\n                flag = false;\r\n            }\r\n            else {\r\n                const sidBlock = new LocalSidValueBlock();\r\n                if (sid > Number.MAX_SAFE_INTEGER) {\r\n                    assertBigInt();\r\n                    const sidValue = BigInt(sid);\r\n                    sidBlock.valueBigInt = sidValue;\r\n                }\r\n                else {\r\n                    sidBlock.valueDec = parseInt(sid, 10);\r\n                    if (isNaN(sidBlock.valueDec))\r\n                        return;\r\n                }\r\n                if (!this.value.length) {\r\n                    sidBlock.isFirstSid = true;\r\n                    flag = true;\r\n                }\r\n                this.value.push(sidBlock);\r\n            }\r\n        } while (pos2 !== -1);\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                if (this.value[i].isFirstSid)\r\n                    result = `2.{${sidStr} - 80}`;\r\n                else\r\n                    result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        }\r\n        return object;\r\n    }\r\n}\r\nLocalObjectIdentifierValueBlock.NAME = \"ObjectIdentifierValueBlock\";\n\nvar _a$m;\r\nclass ObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 6;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$m = ObjectIdentifier;\r\n(() => {\r\n    typeStore.ObjectIdentifier = _a$m;\r\n})();\r\nObjectIdentifier.NAME = \"OBJECT IDENTIFIER\";\n\nclass LocalRelativeSidValueBlock extends HexBlock(LocalBaseBlock) {\r\n    constructor({ valueDec = 0, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.valueDec = valueDec;\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        if (inputLength === 0)\r\n            return inputOffset;\r\n        const inputView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        if (!checkBufferParams(this, inputView, inputOffset, inputLength))\r\n            return -1;\r\n        const intBuffer = inputView.subarray(inputOffset, inputOffset + inputLength);\r\n        this.valueHexView = new Uint8Array(inputLength);\r\n        for (let i = 0; i < inputLength; i++) {\r\n            this.valueHexView[i] = intBuffer[i] & 0x7F;\r\n            this.blockLength++;\r\n            if ((intBuffer[i] & 0x80) === 0x00)\r\n                break;\r\n        }\r\n        const tempView = new Uint8Array(this.blockLength);\r\n        for (let i = 0; i < this.blockLength; i++)\r\n            tempView[i] = this.valueHexView[i];\r\n        this.valueHexView = tempView;\r\n        if ((intBuffer[this.blockLength - 1] & 0x80) !== 0x00) {\r\n            this.error = \"End of input reached before message was fully decoded\";\r\n            return -1;\r\n        }\r\n        if (this.valueHexView[0] === 0x00)\r\n            this.warnings.push(\"Needlessly long format of SID encoding\");\r\n        if (this.blockLength <= 8)\r\n            this.valueDec = pvutils.utilFromBase(this.valueHexView, 7);\r\n        else {\r\n            this.isHexOnly = true;\r\n            this.warnings.push(\"Too big SID for decoding, hex only\");\r\n        }\r\n        return (inputOffset + this.blockLength);\r\n    }\r\n    toBER(sizeOnly) {\r\n        if (this.isHexOnly) {\r\n            if (sizeOnly)\r\n                return (new ArrayBuffer(this.valueHexView.byteLength));\r\n            const curView = this.valueHexView;\r\n            const retView = new Uint8Array(this.blockLength);\r\n            for (let i = 0; i < (this.blockLength - 1); i++)\r\n                retView[i] = curView[i] | 0x80;\r\n            retView[this.blockLength - 1] = curView[this.blockLength - 1];\r\n            return retView.buffer;\r\n        }\r\n        const encodedBuf = pvutils.utilToBase(this.valueDec, 7);\r\n        if (encodedBuf.byteLength === 0) {\r\n            this.error = \"Error during encoding SID value\";\r\n            return EMPTY_BUFFER;\r\n        }\r\n        const retView = new Uint8Array(encodedBuf.byteLength);\r\n        if (!sizeOnly) {\r\n            const encodedView = new Uint8Array(encodedBuf);\r\n            const len = encodedBuf.byteLength - 1;\r\n            for (let i = 0; i < len; i++)\r\n                retView[i] = encodedView[i] | 0x80;\r\n            retView[len] = encodedView[len];\r\n        }\r\n        return retView.buffer;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        if (this.isHexOnly)\r\n            result = pvtsutils.Convert.ToHex(this.valueHexView);\r\n        else {\r\n            result = this.valueDec.toString();\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            valueDec: this.valueDec,\r\n        };\r\n    }\r\n}\r\nLocalRelativeSidValueBlock.NAME = \"relativeSidBlock\";\n\nclass LocalRelativeObjectIdentifierValueBlock extends ValueBlock {\r\n    constructor({ value = EMPTY_STRING, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = [];\r\n        if (value) {\r\n            this.fromString(value);\r\n        }\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        let resultOffset = inputOffset;\r\n        while (inputLength > 0) {\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            resultOffset = sidBlock.fromBER(inputBuffer, resultOffset, inputLength);\r\n            if (resultOffset === -1) {\r\n                this.blockLength = 0;\r\n                this.error = sidBlock.error;\r\n                return resultOffset;\r\n            }\r\n            this.blockLength += sidBlock.blockLength;\r\n            inputLength -= sidBlock.blockLength;\r\n            this.value.push(sidBlock);\r\n        }\r\n        return resultOffset;\r\n    }\r\n    toBER(sizeOnly, writer) {\r\n        const retBuffers = [];\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            const valueBuf = this.value[i].toBER(sizeOnly);\r\n            if (valueBuf.byteLength === 0) {\r\n                this.error = this.value[i].error;\r\n                return EMPTY_BUFFER;\r\n            }\r\n            retBuffers.push(valueBuf);\r\n        }\r\n        return concat(retBuffers);\r\n    }\r\n    fromString(string) {\r\n        this.value = [];\r\n        let pos1 = 0;\r\n        let pos2 = 0;\r\n        let sid = \"\";\r\n        do {\r\n            pos2 = string.indexOf(\".\", pos1);\r\n            if (pos2 === -1)\r\n                sid = string.substring(pos1);\r\n            else\r\n                sid = string.substring(pos1, pos2);\r\n            pos1 = pos2 + 1;\r\n            const sidBlock = new LocalRelativeSidValueBlock();\r\n            sidBlock.valueDec = parseInt(sid, 10);\r\n            if (isNaN(sidBlock.valueDec))\r\n                return true;\r\n            this.value.push(sidBlock);\r\n        } while (pos2 !== -1);\r\n        return true;\r\n    }\r\n    toString() {\r\n        let result = \"\";\r\n        let isHexOnly = false;\r\n        for (let i = 0; i < this.value.length; i++) {\r\n            isHexOnly = this.value[i].isHexOnly;\r\n            let sidStr = this.value[i].toString();\r\n            if (i !== 0)\r\n                result = `${result}.`;\r\n            if (isHexOnly) {\r\n                sidStr = `{${sidStr}}`;\r\n                result += sidStr;\r\n            }\r\n            else\r\n                result += sidStr;\r\n        }\r\n        return result;\r\n    }\r\n    toJSON() {\r\n        const object = {\r\n            ...super.toJSON(),\r\n            value: this.toString(),\r\n            sidArray: [],\r\n        };\r\n        for (let i = 0; i < this.value.length; i++)\r\n            object.sidArray.push(this.value[i].toJSON());\r\n        return object;\r\n    }\r\n}\r\nLocalRelativeObjectIdentifierValueBlock.NAME = \"RelativeObjectIdentifierValueBlock\";\n\nvar _a$l;\r\nclass RelativeObjectIdentifier extends BaseBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters, LocalRelativeObjectIdentifierValueBlock);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 13;\r\n    }\r\n    getValue() {\r\n        return this.valueBlock.toString();\r\n    }\r\n    setValue(value) {\r\n        this.valueBlock.fromString(value);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.valueBlock.toString() || \"empty\"}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.getValue(),\r\n        };\r\n    }\r\n}\r\n_a$l = RelativeObjectIdentifier;\r\n(() => {\r\n    typeStore.RelativeObjectIdentifier = _a$l;\r\n})();\r\nRelativeObjectIdentifier.NAME = \"RelativeObjectIdentifier\";\n\nvar _a$k;\r\nclass Sequence extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 16;\r\n    }\r\n}\r\n_a$k = Sequence;\r\n(() => {\r\n    typeStore.Sequence = _a$k;\r\n})();\r\nSequence.NAME = \"SEQUENCE\";\n\nvar _a$j;\r\nclass Set extends Constructed {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 17;\r\n    }\r\n}\r\n_a$j = Set;\r\n(() => {\r\n    typeStore.Set = _a$j;\r\n})();\r\nSet.NAME = \"SET\";\n\nclass LocalStringValueBlock extends HexBlock(ValueBlock) {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.isHexOnly = true;\r\n        this.value = EMPTY_STRING;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            value: this.value,\r\n        };\r\n    }\r\n}\r\nLocalStringValueBlock.NAME = \"StringValueBlock\";\n\nclass LocalSimpleStringValueBlock extends LocalStringValueBlock {\r\n}\r\nLocalSimpleStringValueBlock.NAME = \"SimpleStringValueBlock\";\n\nclass LocalSimpleStringBlock extends BaseStringBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters, LocalSimpleStringValueBlock);\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLen = inputString.length;\r\n        const view = this.valueBlock.valueHexView = new Uint8Array(strLen);\r\n        for (let i = 0; i < strLen; i++)\r\n            view[i] = inputString.charCodeAt(i);\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalSimpleStringBlock.NAME = \"SIMPLE STRING\";\n\nclass LocalUtf8StringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n        try {\r\n            this.valueBlock.value = pvtsutils.Convert.ToUtf8String(inputBuffer);\r\n        }\r\n        catch (ex) {\r\n            this.warnings.push(`Error during \"decodeURIComponent\": ${ex}, using raw string`);\r\n            this.valueBlock.value = pvtsutils.Convert.ToBinary(inputBuffer);\r\n        }\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf8String(inputString));\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUtf8StringValueBlock.NAME = \"Utf8StringValueBlock\";\n\nvar _a$i;\r\nclass Utf8String extends LocalUtf8StringValueBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 12;\r\n    }\r\n}\r\n_a$i = Utf8String;\r\n(() => {\r\n    typeStore.Utf8String = _a$i;\r\n})();\r\nUtf8String.NAME = \"UTF8String\";\n\nclass LocalBmpStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        this.valueBlock.value = pvtsutils.Convert.ToUtf16String(inputBuffer);\r\n        this.valueBlock.valueHexView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer);\r\n    }\r\n    fromString(inputString) {\r\n        this.valueBlock.value = inputString;\r\n        this.valueBlock.valueHexView = new Uint8Array(pvtsutils.Convert.FromUtf16String(inputString));\r\n    }\r\n}\r\nLocalBmpStringValueBlock.NAME = \"BmpStringValueBlock\";\n\nvar _a$h;\r\nclass BmpString extends LocalBmpStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 30;\r\n    }\r\n}\r\n_a$h = BmpString;\r\n(() => {\r\n    typeStore.BmpString = _a$h;\r\n})();\r\nBmpString.NAME = \"BMPString\";\n\nclass LocalUniversalStringValueBlock extends LocalSimpleStringBlock {\r\n    fromBuffer(inputBuffer) {\r\n        const copyBuffer = ArrayBuffer.isView(inputBuffer) ? inputBuffer.slice().buffer : inputBuffer.slice(0);\r\n        const valueView = new Uint8Array(copyBuffer);\r\n        for (let i = 0; i < valueView.length; i += 4) {\r\n            valueView[i] = valueView[i + 3];\r\n            valueView[i + 1] = valueView[i + 2];\r\n            valueView[i + 2] = 0x00;\r\n            valueView[i + 3] = 0x00;\r\n        }\r\n        this.valueBlock.value = String.fromCharCode.apply(null, new Uint32Array(copyBuffer));\r\n    }\r\n    fromString(inputString) {\r\n        const strLength = inputString.length;\r\n        const valueHexView = this.valueBlock.valueHexView = new Uint8Array(strLength * 4);\r\n        for (let i = 0; i < strLength; i++) {\r\n            const codeBuf = pvutils.utilToBase(inputString.charCodeAt(i), 8);\r\n            const codeView = new Uint8Array(codeBuf);\r\n            if (codeView.length > 4)\r\n                continue;\r\n            const dif = 4 - codeView.length;\r\n            for (let j = (codeView.length - 1); j >= 0; j--)\r\n                valueHexView[i * 4 + j + dif] = codeView[j];\r\n        }\r\n        this.valueBlock.value = inputString;\r\n    }\r\n}\r\nLocalUniversalStringValueBlock.NAME = \"UniversalStringValueBlock\";\n\nvar _a$g;\r\nclass UniversalString extends LocalUniversalStringValueBlock {\r\n    constructor({ ...parameters } = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 28;\r\n    }\r\n}\r\n_a$g = UniversalString;\r\n(() => {\r\n    typeStore.UniversalString = _a$g;\r\n})();\r\nUniversalString.NAME = \"UniversalString\";\n\nvar _a$f;\r\nclass NumericString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 18;\r\n    }\r\n}\r\n_a$f = NumericString;\r\n(() => {\r\n    typeStore.NumericString = _a$f;\r\n})();\r\nNumericString.NAME = \"NumericString\";\n\nvar _a$e;\r\nclass PrintableString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 19;\r\n    }\r\n}\r\n_a$e = PrintableString;\r\n(() => {\r\n    typeStore.PrintableString = _a$e;\r\n})();\r\nPrintableString.NAME = \"PrintableString\";\n\nvar _a$d;\r\nclass TeletexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 20;\r\n    }\r\n}\r\n_a$d = TeletexString;\r\n(() => {\r\n    typeStore.TeletexString = _a$d;\r\n})();\r\nTeletexString.NAME = \"TeletexString\";\n\nvar _a$c;\r\nclass VideotexString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 21;\r\n    }\r\n}\r\n_a$c = VideotexString;\r\n(() => {\r\n    typeStore.VideotexString = _a$c;\r\n})();\r\nVideotexString.NAME = \"VideotexString\";\n\nvar _a$b;\r\nclass IA5String extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 22;\r\n    }\r\n}\r\n_a$b = IA5String;\r\n(() => {\r\n    typeStore.IA5String = _a$b;\r\n})();\r\nIA5String.NAME = \"IA5String\";\n\nvar _a$a;\r\nclass GraphicString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 25;\r\n    }\r\n}\r\n_a$a = GraphicString;\r\n(() => {\r\n    typeStore.GraphicString = _a$a;\r\n})();\r\nGraphicString.NAME = \"GraphicString\";\n\nvar _a$9;\r\nclass VisibleString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 26;\r\n    }\r\n}\r\n_a$9 = VisibleString;\r\n(() => {\r\n    typeStore.VisibleString = _a$9;\r\n})();\r\nVisibleString.NAME = \"VisibleString\";\n\nvar _a$8;\r\nclass GeneralString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 27;\r\n    }\r\n}\r\n_a$8 = GeneralString;\r\n(() => {\r\n    typeStore.GeneralString = _a$8;\r\n})();\r\nGeneralString.NAME = \"GeneralString\";\n\nvar _a$7;\r\nclass CharacterString extends LocalSimpleStringBlock {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 29;\r\n    }\r\n}\r\n_a$7 = CharacterString;\r\n(() => {\r\n    typeStore.CharacterString = _a$7;\r\n})();\r\nCharacterString.NAME = \"CharacterString\";\n\nvar _a$6;\r\nclass UTCTime extends VisibleString {\r\n    constructor({ value, valueDate, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.year = 0;\r\n        this.month = 0;\r\n        this.day = 0;\r\n        this.hour = 0;\r\n        this.minute = 0;\r\n        this.second = 0;\r\n        if (value) {\r\n            this.fromString(value);\r\n            this.valueBlock.valueHexView = new Uint8Array(value.length);\r\n            for (let i = 0; i < value.length; i++)\r\n                this.valueBlock.valueHexView[i] = value.charCodeAt(i);\r\n        }\r\n        if (valueDate) {\r\n            this.fromDate(valueDate);\r\n            this.valueBlock.valueHexView = new Uint8Array(this.toBuffer());\r\n        }\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 23;\r\n    }\r\n    fromBuffer(inputBuffer) {\r\n        this.fromString(String.fromCharCode.apply(null, pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer)));\r\n    }\r\n    toBuffer() {\r\n        const str = this.toString();\r\n        const buffer = new ArrayBuffer(str.length);\r\n        const view = new Uint8Array(buffer);\r\n        for (let i = 0; i < str.length; i++)\r\n            view[i] = str.charCodeAt(i);\r\n        return buffer;\r\n    }\r\n    fromDate(inputDate) {\r\n        this.year = inputDate.getUTCFullYear();\r\n        this.month = inputDate.getUTCMonth() + 1;\r\n        this.day = inputDate.getUTCDate();\r\n        this.hour = inputDate.getUTCHours();\r\n        this.minute = inputDate.getUTCMinutes();\r\n        this.second = inputDate.getUTCSeconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second)));\r\n    }\r\n    fromString(inputString) {\r\n        const parser = /(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})Z/ig;\r\n        const parserArray = parser.exec(inputString);\r\n        if (parserArray === null) {\r\n            this.error = \"Wrong input string for conversion\";\r\n            return;\r\n        }\r\n        const year = parseInt(parserArray[1], 10);\r\n        if (year >= 50)\r\n            this.year = 1900 + year;\r\n        else\r\n            this.year = 2000 + year;\r\n        this.month = parseInt(parserArray[2], 10);\r\n        this.day = parseInt(parserArray[3], 10);\r\n        this.hour = parseInt(parserArray[4], 10);\r\n        this.minute = parseInt(parserArray[5], 10);\r\n        this.second = parseInt(parserArray[6], 10);\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = new Array(7);\r\n            outputArray[0] = pvutils.padNumber(((this.year < 2000) ? (this.year - 1900) : (this.year - 2000)), 2);\r\n            outputArray[1] = pvutils.padNumber(this.month, 2);\r\n            outputArray[2] = pvutils.padNumber(this.day, 2);\r\n            outputArray[3] = pvutils.padNumber(this.hour, 2);\r\n            outputArray[4] = pvutils.padNumber(this.minute, 2);\r\n            outputArray[5] = pvutils.padNumber(this.second, 2);\r\n            outputArray[6] = \"Z\";\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    onAsciiEncoding() {\r\n        return `${this.constructor.NAME} : ${this.toDate().toISOString()}`;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            year: this.year,\r\n            month: this.month,\r\n            day: this.day,\r\n            hour: this.hour,\r\n            minute: this.minute,\r\n            second: this.second,\r\n        };\r\n    }\r\n}\r\n_a$6 = UTCTime;\r\n(() => {\r\n    typeStore.UTCTime = _a$6;\r\n})();\r\nUTCTime.NAME = \"UTCTime\";\n\nvar _a$5;\r\nclass GeneralizedTime extends UTCTime {\r\n    constructor(parameters = {}) {\r\n        var _b;\r\n        super(parameters);\r\n        (_b = this.millisecond) !== null && _b !== void 0 ? _b : (this.millisecond = 0);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 24;\r\n    }\r\n    fromDate(inputDate) {\r\n        super.fromDate(inputDate);\r\n        this.millisecond = inputDate.getUTCMilliseconds();\r\n    }\r\n    toDate() {\r\n        return (new Date(Date.UTC(this.year, this.month - 1, this.day, this.hour, this.minute, this.second, this.millisecond)));\r\n    }\r\n    fromString(inputString) {\r\n        let isUTC = false;\r\n        let timeString = \"\";\r\n        let dateTimeString = \"\";\r\n        let fractionPart = 0;\r\n        let parser;\r\n        let hourDifference = 0;\r\n        let minuteDifference = 0;\r\n        if (inputString[inputString.length - 1] === \"Z\") {\r\n            timeString = inputString.substring(0, inputString.length - 1);\r\n            isUTC = true;\r\n        }\r\n        else {\r\n            const number = new Number(inputString[inputString.length - 1]);\r\n            if (isNaN(number.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            timeString = inputString;\r\n        }\r\n        if (isUTC) {\r\n            if (timeString.indexOf(\"+\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            if (timeString.indexOf(\"-\") !== -1)\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        else {\r\n            let multiplier = 1;\r\n            let differencePosition = timeString.indexOf(\"+\");\r\n            let differenceString = \"\";\r\n            if (differencePosition === -1) {\r\n                differencePosition = timeString.indexOf(\"-\");\r\n                multiplier = -1;\r\n            }\r\n            if (differencePosition !== -1) {\r\n                differenceString = timeString.substring(differencePosition + 1);\r\n                timeString = timeString.substring(0, differencePosition);\r\n                if ((differenceString.length !== 2) && (differenceString.length !== 4))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                let number = parseInt(differenceString.substring(0, 2), 10);\r\n                if (isNaN(number.valueOf()))\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                hourDifference = multiplier * number;\r\n                if (differenceString.length === 4) {\r\n                    number = parseInt(differenceString.substring(2, 4), 10);\r\n                    if (isNaN(number.valueOf()))\r\n                        throw new Error(\"Wrong input string for conversion\");\r\n                    minuteDifference = multiplier * number;\r\n                }\r\n            }\r\n        }\r\n        let fractionPointPosition = timeString.indexOf(\".\");\r\n        if (fractionPointPosition === -1)\r\n            fractionPointPosition = timeString.indexOf(\",\");\r\n        if (fractionPointPosition !== -1) {\r\n            const fractionPartCheck = new Number(`0${timeString.substring(fractionPointPosition)}`);\r\n            if (isNaN(fractionPartCheck.valueOf()))\r\n                throw new Error(\"Wrong input string for conversion\");\r\n            fractionPart = fractionPartCheck.valueOf();\r\n            dateTimeString = timeString.substring(0, fractionPointPosition);\r\n        }\r\n        else\r\n            dateTimeString = timeString;\r\n        switch (true) {\r\n            case (dateTimeString.length === 8):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1)\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n                break;\r\n            case (dateTimeString.length === 10):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.minute = Math.floor(fractionResult);\r\n                    fractionResult = 60 * (fractionResult - this.minute);\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 12):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    let fractionResult = 60 * fractionPart;\r\n                    this.second = Math.floor(fractionResult);\r\n                    fractionResult = 1000 * (fractionResult - this.second);\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            case (dateTimeString.length === 14):\r\n                parser = /(\\d{4})(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{2})/ig;\r\n                if (fractionPointPosition !== -1) {\r\n                    const fractionResult = 1000 * fractionPart;\r\n                    this.millisecond = Math.floor(fractionResult);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Wrong input string for conversion\");\r\n        }\r\n        const parserArray = parser.exec(dateTimeString);\r\n        if (parserArray === null)\r\n            throw new Error(\"Wrong input string for conversion\");\r\n        for (let j = 1; j < parserArray.length; j++) {\r\n            switch (j) {\r\n                case 1:\r\n                    this.year = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 2:\r\n                    this.month = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 3:\r\n                    this.day = parseInt(parserArray[j], 10);\r\n                    break;\r\n                case 4:\r\n                    this.hour = parseInt(parserArray[j], 10) + hourDifference;\r\n                    break;\r\n                case 5:\r\n                    this.minute = parseInt(parserArray[j], 10) + minuteDifference;\r\n                    break;\r\n                case 6:\r\n                    this.second = parseInt(parserArray[j], 10);\r\n                    break;\r\n                default:\r\n                    throw new Error(\"Wrong input string for conversion\");\r\n            }\r\n        }\r\n        if (isUTC === false) {\r\n            const tempDate = new Date(this.year, this.month, this.day, this.hour, this.minute, this.second, this.millisecond);\r\n            this.year = tempDate.getUTCFullYear();\r\n            this.month = tempDate.getUTCMonth();\r\n            this.day = tempDate.getUTCDay();\r\n            this.hour = tempDate.getUTCHours();\r\n            this.minute = tempDate.getUTCMinutes();\r\n            this.second = tempDate.getUTCSeconds();\r\n            this.millisecond = tempDate.getUTCMilliseconds();\r\n        }\r\n    }\r\n    toString(encoding = \"iso\") {\r\n        if (encoding === \"iso\") {\r\n            const outputArray = [];\r\n            outputArray.push(pvutils.padNumber(this.year, 4));\r\n            outputArray.push(pvutils.padNumber(this.month, 2));\r\n            outputArray.push(pvutils.padNumber(this.day, 2));\r\n            outputArray.push(pvutils.padNumber(this.hour, 2));\r\n            outputArray.push(pvutils.padNumber(this.minute, 2));\r\n            outputArray.push(pvutils.padNumber(this.second, 2));\r\n            if (this.millisecond !== 0) {\r\n                outputArray.push(\".\");\r\n                outputArray.push(pvutils.padNumber(this.millisecond, 3));\r\n            }\r\n            outputArray.push(\"Z\");\r\n            return outputArray.join(\"\");\r\n        }\r\n        return super.toString(encoding);\r\n    }\r\n    toJSON() {\r\n        return {\r\n            ...super.toJSON(),\r\n            millisecond: this.millisecond,\r\n        };\r\n    }\r\n}\r\n_a$5 = GeneralizedTime;\r\n(() => {\r\n    typeStore.GeneralizedTime = _a$5;\r\n})();\r\nGeneralizedTime.NAME = \"GeneralizedTime\";\n\nvar _a$4;\r\nclass DATE extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 31;\r\n    }\r\n}\r\n_a$4 = DATE;\r\n(() => {\r\n    typeStore.DATE = _a$4;\r\n})();\r\nDATE.NAME = \"DATE\";\n\nvar _a$3;\r\nclass TimeOfDay extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 32;\r\n    }\r\n}\r\n_a$3 = TimeOfDay;\r\n(() => {\r\n    typeStore.TimeOfDay = _a$3;\r\n})();\r\nTimeOfDay.NAME = \"TimeOfDay\";\n\nvar _a$2;\r\nclass DateTime extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 33;\r\n    }\r\n}\r\n_a$2 = DateTime;\r\n(() => {\r\n    typeStore.DateTime = _a$2;\r\n})();\r\nDateTime.NAME = \"DateTime\";\n\nvar _a$1;\r\nclass Duration extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 34;\r\n    }\r\n}\r\n_a$1 = Duration;\r\n(() => {\r\n    typeStore.Duration = _a$1;\r\n})();\r\nDuration.NAME = \"Duration\";\n\nvar _a;\r\nclass TIME extends Utf8String {\r\n    constructor(parameters = {}) {\r\n        super(parameters);\r\n        this.idBlock.tagClass = 1;\r\n        this.idBlock.tagNumber = 14;\r\n    }\r\n}\r\n_a = TIME;\r\n(() => {\r\n    typeStore.TIME = _a;\r\n})();\r\nTIME.NAME = \"TIME\";\n\nclass Any {\r\n    constructor({ name = EMPTY_STRING, optional = false, } = {}) {\r\n        this.name = name;\r\n        this.optional = optional;\r\n    }\r\n}\n\nclass Choice extends Any {\r\n    constructor({ value = [], ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n    }\r\n}\n\nclass Repeated extends Any {\r\n    constructor({ value = new Any(), local = false, ...parameters } = {}) {\r\n        super(parameters);\r\n        this.value = value;\r\n        this.local = local;\r\n    }\r\n}\n\nclass RawData {\r\n    constructor({ data = EMPTY_VIEW } = {}) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(data);\r\n    }\r\n    get data() {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n    set data(value) {\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(value);\r\n    }\r\n    fromBER(inputBuffer, inputOffset, inputLength) {\r\n        const endLength = inputOffset + inputLength;\r\n        this.dataView = pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer).subarray(inputOffset, endLength);\r\n        return endLength;\r\n    }\r\n    toBER(sizeOnly) {\r\n        return this.dataView.slice().buffer;\r\n    }\r\n}\n\nfunction compareSchema(root, inputData, inputSchema) {\r\n    if (inputSchema instanceof Choice) {\r\n        for (let j = 0; j < inputSchema.value.length; j++) {\r\n            const result = compareSchema(root, inputData, inputSchema.value[j]);\r\n            if (result.verified) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n        {\r\n            const _result = {\r\n                verified: false,\r\n                result: {\r\n                    error: \"Wrong values for Choice type\"\r\n                },\r\n            };\r\n            if (inputSchema.hasOwnProperty(NAME))\r\n                _result.name = inputSchema.name;\r\n            return _result;\r\n        }\r\n    }\r\n    if (inputSchema instanceof Any) {\r\n        if (inputSchema.hasOwnProperty(NAME))\r\n            root[inputSchema.name] = inputData;\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if ((root instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong root object\" }\r\n        };\r\n    }\r\n    if ((inputData instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 data\" }\r\n        };\r\n    }\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((ID_BLOCK in inputSchema) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((FROM_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if ((TO_BER in inputSchema.idBlock) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    const encodedId = inputSchema.idBlock.toBER(false);\r\n    if (encodedId.byteLength === 0) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error encoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    const decodedOffset = inputSchema.idBlock.fromBER(encodedId, 0, encodedId.byteLength);\r\n    if (decodedOffset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Error decoding idBlock for ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_CLASS) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagClass !== inputData.idBlock.tagClass) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(TAG_NUMBER) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.tagNumber !== inputData.idBlock.tagNumber) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.hasOwnProperty(IS_CONSTRUCTED) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isConstructed !== inputData.idBlock.isConstructed) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (!(IS_HEX_ONLY in inputSchema.idBlock)) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema\" }\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly !== inputData.idBlock.isHexOnly) {\r\n        return {\r\n            verified: false,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.idBlock.isHexOnly) {\r\n        if ((VALUE_HEX_VIEW in inputSchema.idBlock) === false) {\r\n            return {\r\n                verified: false,\r\n                result: { error: \"Wrong ASN.1 schema\" }\r\n            };\r\n        }\r\n        const schemaView = inputSchema.idBlock.valueHexView;\r\n        const asn1View = inputData.idBlock.valueHexView;\r\n        if (schemaView.length !== asn1View.length) {\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < schemaView.length; i++) {\r\n            if (schemaView[i] !== asn1View[1]) {\r\n                return {\r\n                    verified: false,\r\n                    result: root\r\n                };\r\n            }\r\n        }\r\n    }\r\n    if (inputSchema.name) {\r\n        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n        if (inputSchema.name)\r\n            root[inputSchema.name] = inputData;\r\n    }\r\n    if (inputSchema instanceof typeStore.Constructed) {\r\n        let admission = 0;\r\n        let result = {\r\n            verified: false,\r\n            result: {\r\n                error: \"Unknown error\",\r\n            }\r\n        };\r\n        let maxLength = inputSchema.valueBlock.value.length;\r\n        if (maxLength > 0) {\r\n            if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                maxLength = inputData.valueBlock.value.length;\r\n            }\r\n        }\r\n        if (maxLength === 0) {\r\n            return {\r\n                verified: true,\r\n                result: root\r\n            };\r\n        }\r\n        if ((inputData.valueBlock.value.length === 0) &&\r\n            (inputSchema.valueBlock.value.length !== 0)) {\r\n            let _optional = true;\r\n            for (let i = 0; i < inputSchema.valueBlock.value.length; i++)\r\n                _optional = _optional && (inputSchema.valueBlock.value[i].optional || false);\r\n            if (_optional) {\r\n                return {\r\n                    verified: true,\r\n                    result: root\r\n                };\r\n            }\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name)\r\n                    delete root[inputSchema.name];\r\n            }\r\n            root.error = \"Inconsistent object length\";\r\n            return {\r\n                verified: false,\r\n                result: root\r\n            };\r\n        }\r\n        for (let i = 0; i < maxLength; i++) {\r\n            if ((i - admission) >= inputData.valueBlock.value.length) {\r\n                if (inputSchema.valueBlock.value[i].optional === false) {\r\n                    const _result = {\r\n                        verified: false,\r\n                        result: root\r\n                    };\r\n                    root.error = \"Inconsistent length between ASN.1 data and schema\";\r\n                    if (inputSchema.name) {\r\n                        inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                        if (inputSchema.name) {\r\n                            delete root[inputSchema.name];\r\n                            _result.name = inputSchema.name;\r\n                        }\r\n                    }\r\n                    return _result;\r\n                }\r\n            }\r\n            else {\r\n                if (inputSchema.valueBlock.value[0] instanceof Repeated) {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i], inputSchema.valueBlock.value[0].value);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[0].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                    if ((NAME in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].name.length > 0)) {\r\n                        let arrayRoot = {};\r\n                        if ((LOCAL in inputSchema.valueBlock.value[0]) && (inputSchema.valueBlock.value[0].local))\r\n                            arrayRoot = inputData;\r\n                        else\r\n                            arrayRoot = root;\r\n                        if (typeof arrayRoot[inputSchema.valueBlock.value[0].name] === \"undefined\")\r\n                            arrayRoot[inputSchema.valueBlock.value[0].name] = [];\r\n                        arrayRoot[inputSchema.valueBlock.value[0].name].push(inputData.valueBlock.value[i]);\r\n                    }\r\n                }\r\n                else {\r\n                    result = compareSchema(root, inputData.valueBlock.value[i - admission], inputSchema.valueBlock.value[i]);\r\n                    if (result.verified === false) {\r\n                        if (inputSchema.valueBlock.value[i].optional)\r\n                            admission++;\r\n                        else {\r\n                            if (inputSchema.name) {\r\n                                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                                if (inputSchema.name)\r\n                                    delete root[inputSchema.name];\r\n                            }\r\n                            return result;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        if (result.verified === false) {\r\n            const _result = {\r\n                verified: false,\r\n                result: root\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return {\r\n            verified: true,\r\n            result: root\r\n        };\r\n    }\r\n    if (inputSchema.primitiveSchema &&\r\n        (VALUE_HEX_VIEW in inputData.valueBlock)) {\r\n        const asn1 = localFromBER(inputData.valueBlock.valueHexView);\r\n        if (asn1.offset === -1) {\r\n            const _result = {\r\n                verified: false,\r\n                result: asn1.result\r\n            };\r\n            if (inputSchema.name) {\r\n                inputSchema.name = inputSchema.name.replace(/^\\s+|\\s+$/g, EMPTY_STRING);\r\n                if (inputSchema.name) {\r\n                    delete root[inputSchema.name];\r\n                    _result.name = inputSchema.name;\r\n                }\r\n            }\r\n            return _result;\r\n        }\r\n        return compareSchema(root, asn1.result, inputSchema.primitiveSchema);\r\n    }\r\n    return {\r\n        verified: true,\r\n        result: root\r\n    };\r\n}\r\nfunction verifySchema(inputBuffer, inputSchema) {\r\n    if ((inputSchema instanceof Object) === false) {\r\n        return {\r\n            verified: false,\r\n            result: { error: \"Wrong ASN.1 schema type\" }\r\n        };\r\n    }\r\n    const asn1 = localFromBER(pvtsutils.BufferSourceConverter.toUint8Array(inputBuffer));\r\n    if (asn1.offset === -1) {\r\n        return {\r\n            verified: false,\r\n            result: asn1.result\r\n        };\r\n    }\r\n    return compareSchema(asn1.result, asn1.result, inputSchema);\r\n}\n\nexport { Any, BaseBlock, BaseStringBlock, BitString, BmpString, Boolean, CharacterString, Choice, Constructed, DATE, DateTime, Duration, EndOfContent, Enumerated, GeneralString, GeneralizedTime, GraphicString, HexBlock, IA5String, Integer, Null, NumericString, ObjectIdentifier, OctetString, Primitive, PrintableString, RawData, RelativeObjectIdentifier, Repeated, Sequence, Set, TIME, TeletexString, TimeOfDay, UTCTime, UniversalString, Utf8String, ValueBlock, VideotexString, ViewWriter, VisibleString, compareSchema, fromBER, verifySchema };\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AlgorithmIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AlgorithmIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {string} [algorithmId] ObjectIdentifier for algorithm (string representation)\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for algorithm (string representation)\r\n\t\t */\r\n\t\tthis.algorithmId = getParametersValue(parameters, \"algorithmId\", AlgorithmIdentifier.defaultValues(\"algorithmId\"));\r\n\r\n\t\tif(\"algorithmParams\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Object}\r\n\t\t\t * @desc Any algorithm parameters\r\n\t\t\t */\r\n\t\t\tthis.algorithmParams = getParametersValue(parameters, \"algorithmParams\", AlgorithmIdentifier.defaultValues(\"algorithmParams\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"algorithmId\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"algorithmParams\":\r\n\t\t\t\treturn (memberValue instanceof asn1js.Any);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AlgorithmIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AlgorithmIdentifier  ::=  Sequence  {\r\n\t *    algorithm               OBJECT IDENTIFIER,\r\n\t *    parameters              ANY DEFINED BY algorithm OPTIONAL  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} algorithmIdentifier ObjectIdentifier for the algorithm\r\n\t\t * @property {string} algorithmParams Any algorithm parameters\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\toptional: (names.optional || false),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.algorithmIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.algorithmParams || \"\"), optional: true })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"algorithm\",\r\n\t\t\t\"params\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAlgorithmIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\talgorithmIdentifier: \"algorithm\",\r\n\t\t\t\t\talgorithmParams: \"params\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AlgorithmIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.algorithmId = asn1.result.algorithm.valueBlock.toString();\r\n\t\tif(\"params\" in asn1.result)\r\n\t\t\tthis.algorithmParams = asn1.result.params;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.algorithmId }));\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\toutputArray.push(this.algorithmParams);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\talgorithmId: this.algorithmId\r\n\t\t};\r\n\r\n\t\tif((\"algorithmParams\" in this) && ((this.algorithmParams instanceof asn1js.Any) === false))\r\n\t\t\tobject.algorithmParams = this.algorithmParams.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Check that two \"AlgorithmIdentifiers\" are equal\r\n\t * @param {AlgorithmIdentifier} algorithmIdentifier\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(algorithmIdentifier)\r\n\t{\r\n\t\t//region Check input type\r\n\t\tif((algorithmIdentifier instanceof AlgorithmIdentifier) === false)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_id\"\r\n\t\tif(this.algorithmId !== algorithmIdentifier.algorithmId)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\t//region Check \"algorithm_params\"\r\n\t\tif(\"algorithmParams\" in this)\r\n\t\t{\r\n\t\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\t\treturn JSON.stringify(this.algorithmParams) === JSON.stringify(algorithmIdentifier.algorithmParams);\r\n\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif(\"algorithmParams\" in algorithmIdentifier)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","\r\nexport default class ECNamedCurves {\r\n\r\n\t/**\r\n\t * Registers an ECC named curve\r\n\t * @param {string} name The name o the curve\r\n\t * @param {string} id The curve ASN.1 object identifier\r\n\t * @param {number} size The coordinate length in bytes\r\n\t */\r\n\tstatic register(name, id, size) {\r\n\t\tthis.namedCurves[name.toLowerCase()] = this.namedCurves[id] = { name, id, size };\r\n\t}\r\n\r\n\t/**\r\n\t* Returns an ECC named curve object\r\n\t* @param {string} nameOrId Name or identifier of the named curve\r\n\t* @returns {Object | null}\r\n\t*/\r\n\tstatic find(nameOrId) {\r\n\t\treturn this.namedCurves[nameOrId.toLowerCase()] || null;\r\n\t}\r\n\r\n}\r\n\r\nECNamedCurves.namedCurves = {};\r\n\r\n// NIST\r\nECNamedCurves.register(\"P-256\", \"1.2.840.10045.3.1.7\", 32);\r\nECNamedCurves.register(\"P-384\", \"1.3.132.0.34\", 48);\r\nECNamedCurves.register(\"P-521\", \"1.3.132.0.35\", 66);\r\n\r\n// Brainpool\r\nECNamedCurves.register(\"brainpoolP256r1\", \"1.3.36.3.3.2.8.1.1.7\", 32);\r\nECNamedCurves.register(\"brainpoolP384r1\", \"1.3.36.3.3.2.8.1.1.11\", 48);\r\nECNamedCurves.register(\"brainpoolP512r1\", \"1.3.36.3.3.2.8.1.1.13\", 64);\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, utilConcatBuf, isEqualBuffer, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\r\nimport ECNamedCurves from \"./ECNamedCurves.js\";\r\n//**************************************************************************************\r\n\r\n/**\r\n * Class from RFC5480\r\n */\r\nexport default class ECPublicKey\r\n{\r\n\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ECCPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.x = getParametersValue(parameters, \"x\", ECPublicKey.defaultValues(\"x\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc values\r\n\t\t */\r\n\t\tthis.y = getParametersValue(parameters, \"y\", ECPublicKey.defaultValues(\"y\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc namedCurve\r\n\t\t */\r\n\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPublicKey.defaultValues(\"namedCurve\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"x\":\r\n\t\t\tcase \"y\":\r\n\t\t\t\treturn (isEqualBuffer(memberValue, ECPublicKey.defaultValues(memberName)));\r\n\t\t\tcase \"namedCurve\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ECCPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\treturn new asn1js.RawData();\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert ArrayBuffer into current class\r\n\t * @param {!ArrayBuffer} schema Special case: schema is an ArrayBuffer\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Check the schema is valid\r\n\t\tif((schema instanceof ArrayBuffer) === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tconst view = new Uint8Array(schema);\r\n\t\tif(view[0] !== 0x04)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tconst namedCurve = ECNamedCurves.find(this.namedCurve);\r\n\t\tif (!namedCurve) {\r\n\t\t\tthrow new Error(`Incorrect curve OID: ${this.namedCurve}`);\r\n\t\t}\r\n\t\tconst coordinateLength = namedCurve.size;\r\n\r\n\t\tif(schema.byteLength !== (coordinateLength * 2 + 1))\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPublicKey\");\r\n\r\n\t\tthis.x = schema.slice(1, coordinateLength + 1);\r\n\t\tthis.y = schema.slice(1 + coordinateLength, coordinateLength * 2 + 1);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\treturn new asn1js.RawData({ data: utilConcatBuf(\r\n\t\t\t(new Uint8Array([0x04])).buffer,\r\n\t\t\tthis.x,\r\n\t\t\tthis.y\r\n\t\t)\r\n\t\t});\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Conversion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst namedCurve = ECNamedCurves.find(this.namedCurve);\r\n\r\n\t\treturn {\r\n\t\t\tcrv: namedCurve ? namedCurve.name : this.namedCurve,\r\n\t\t\tx: toBase64(arrayBufferToString(this.x), true, true, false),\r\n\t\t\ty: toBase64(arrayBufferToString(this.y), true, true, false)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tlet coordinateLength = 0;\r\n\r\n\t\tif(\"crv\" in json)\r\n\t\t{\r\n\t\t\tconst namedCurve = ECNamedCurves.find(json.crv);\r\n\t\t\tif (namedCurve) {\r\n\t\t\t\tthis.namedCurve = namedCurve.id;\r\n\t\t\t\tcoordinateLength = namedCurve.size;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\r\n\r\n\t\tif(\"x\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.x, true));\r\n\r\n\t\t\tif(convertBuffer.byteLength < coordinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.x = new ArrayBuffer(coordinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.x);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.x = convertBuffer.slice(0, coordinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"x\\\"\");\r\n\r\n\t\tif(\"y\" in json)\r\n\t\t{\r\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.y, true));\r\n\r\n\t\t\tif(convertBuffer.byteLength < coordinateLength)\r\n\t\t\t{\r\n\t\t\t\tthis.y = new ArrayBuffer(coordinateLength);\r\n\t\t\t\tconst view = new Uint8Array(this.y);\r\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\r\n\t\t\t\tview.set(convertBufferView, 1);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tthis.y = convertBuffer.slice(0, coordinateLength);\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"y\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, nearestPowerOf2, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPublicKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPublicKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Integer} [modulus]\r\n\t * @property {Integer} [publicExponent]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Modulus part of RSA public key\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPublicKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Public exponent of RSA public key\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPublicKey.defaultValues(\"publicExponent\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPublicKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPublicKey ::= Sequence {\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer   -- e\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPublicKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPublicKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.modulus.convertToDER(),\r\n\t\t\t\tthis.publicExponent\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t{\r\n\t\t\tconst array = stringToArrayBuffer(fromBase64(json.n, true));\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: array.slice(0, Math.pow(2, nearestPowerOf2(array.byteLength))) });\r\n\t\t}\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true)).slice(0, 3) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport { getCrypto } from \"./common.js\";\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\nimport ECPublicKey from \"./ECPublicKey.js\";\nimport RSAPublicKey from \"./RSAPublicKey.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class PublicKeyInfo \n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for PublicKeyInfo class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {AlgorithmIdentifier}\n\t\t * @desc Algorithm identifier\n\t\t */\n\t\tthis.algorithm = getParametersValue(parameters, \"algorithm\", PublicKeyInfo.defaultValues(\"algorithm\"));\n\t\t/**\n\t\t * @type {BitString}\n\t\t * @desc Subject public key value\n\t\t */\n\t\tthis.subjectPublicKey = getParametersValue(parameters, \"subjectPublicKey\", PublicKeyInfo.defaultValues(\"subjectPublicKey\"));\n\t\t\n\t\tif(\"parsedKey\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ECPublicKey|RSAPublicKey}\n\t\t\t * @desc Parsed public key value\n\t\t\t */\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PublicKeyInfo.defaultValues(\"parsedKey\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif(\"json\" in parameters)\n\t\t\tthis.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"algorithm\":\n\t\t\t\treturn new AlgorithmIdentifier();\n\t\t\tcase \"subjectPublicKey\":\n\t\t\t\treturn new asn1js.BitString();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for PublicKeyInfo class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SubjectPublicKeyInfo  ::=  Sequence  {\n\t *    algorithm            AlgorithmIdentifier,\n\t *    subjectPublicKey     BIT STRING  }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [algorithm]\n\t\t * @property {string} [subjectPublicKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tAlgorithmIdentifier.schema(names.algorithm || {}),\n\t\t\t\tnew asn1js.BitString({ name: (names.subjectPublicKey || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"algorithm\",\n\t\t\t\"subjectPublicKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tPublicKeyInfo.schema({\n\t\t\t\tnames: {\n\t\t\t\t\talgorithm: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"algorithm\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tsubjectPublicKey: \"subjectPublicKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PublicKeyInfo\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tthis.algorithm = new AlgorithmIdentifier({ schema: asn1.result.algorithm });\n\t\tthis.subjectPublicKey = asn1.result.subjectPublicKey;\n\t\t\n\t\tswitch(this.algorithm.algorithmId)\n\t\t{\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\n\t\t\t\tif(\"algorithmParams\" in this.algorithm)\n\t\t\t\t{\n\t\t\t\t\tif(this.algorithm.algorithmParams.constructor.blockName() === asn1js.ObjectIdentifier.blockName())\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.parsedKey = new ECPublicKey({\n\t\t\t\t\t\t\t\tnamedCurve: this.algorithm.algorithmParams.valueBlock.toString(),\n\t\t\t\t\t\t\t\tschema: this.subjectPublicKey.valueBlock.valueHex\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\n\t\t\t\t{\n\t\t\t\t\tconst publicKeyASN1 = asn1js.fromBER(this.subjectPublicKey.valueBlock.valueHex);\n\t\t\t\t\tif(publicKeyASN1.offset !== (-1))\n\t\t\t\t\t{\n\t\t\t\t\t\ttry\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ schema: publicKeyASN1.result });\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcatch(ex){} // Could be a problems during recognision of internal public key data here. Let's ignore them.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: [\n\t\t\t\tthis.algorithm.toSchema(),\n\t\t\t\tthis.subjectPublicKey\n\t\t\t]\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\t//region Return common value in case we do not have enough info fo making JWK\n\t\tif((\"parsedKey\" in this) === false)\n\t\t{\n\t\t\treturn {\n\t\t\t\talgorithm: this.algorithm.toJSON(),\n\t\t\t\tsubjectPublicKey: this.subjectPublicKey.toJSON()\n\t\t\t};\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Making JWK\n\t\tconst jwk = {};\n\t\t\n\t\tswitch(this.algorithm.algorithmId)\n\t\t{\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\n\t\t\t\tjwk.kty = \"EC\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\n\t\t\t\tjwk.kty = \"RSA\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\n\t\t\n\t\tfor(const key of Object.keys(publicKeyJWK))\n\t\t\tjwk[key] = publicKeyJWK[key];\n\t\t\n\t\treturn jwk;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert JSON value into current object\n\t * @param {Object} json\n\t */\n\tfromJSON(json)\n\t{\n\t\tif(\"kty\" in json)\n\t\t{\n\t\t\tswitch(json.kty.toUpperCase())\n\t\t\t{\n\t\t\t\tcase \"EC\":\n\t\t\t\t\tthis.parsedKey = new ECPublicKey({ json });\n\t\t\t\t\t\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"RSA\":\n\t\t\t\t\tthis.parsedKey = new RSAPublicKey({ json });\n\t\t\t\t\t\n\t\t\t\t\tthis.algorithm = new AlgorithmIdentifier({\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\n\t\t\t}\n\t\t\t\n\t\t\tthis.subjectPublicKey = new asn1js.BitString({ valueHex: this.parsedKey.toSchema().toBER(false) });\n\t\t}\n\t}\n\t//**********************************************************************************\n\timportKey(publicKey)\n\t{\n\t\t//region Initial variables\n\t\tlet sequence = Promise.resolve();\n\t\tconst _this = this;\n\t\t//endregion\n\t\t\n\t\t//region Initial check\n\t\tif(typeof publicKey === \"undefined\")\n\t\t\treturn Promise.reject(\"Need to provide publicKey input parameter\");\n\t\t//endregion\n\t\t\n\t\t//region Get a \"crypto\" extension\n\t\tconst crypto = getCrypto();\n\t\tif(typeof crypto === \"undefined\")\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t\t//endregion\n\t\t\n\t\t//region Export public key\n\t\tsequence = sequence.then(() =>\n\t\t\tcrypto.exportKey(\"spki\", publicKey));\n\t\t//endregion\n\t\t\n\t\t//region Initialize internal variables by parsing exported value\n\t\tsequence = sequence.then(\n\t\t\t/**\n\t\t\t * @param {ArrayBuffer} exportedKey\n\t\t\t */\n\t\t\texportedKey =>\n\t\t\t{\n\t\t\t\tconst asn1 = asn1js.fromBER(exportedKey);\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t_this.fromSchema(asn1.result);\n\t\t\t\t}\n\t\t\t\tcatch(exception)\n\t\t\t\t{\n\t\t\t\t\treturn Promise.reject(\"Error during initializing object from schema\");\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\terror => Promise.reject(`Error during exporting public key: ${error}`)\n\t\t);\n\t\t//endregion\n\t\t\n\t\treturn sequence;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2986\r\n */\r\nexport default class Attribute {\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Attribute class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc ObjectIdentifier for attribute (string representation)\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Attribute.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Array}\r\n\t\t * @desc Any attribute values\r\n\t\t */\r\n\t\tthis.values = getParametersValue(parameters, \"values\", Attribute.defaultValues(\"values\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"values\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Attribute class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Attribute { ATTRIBUTE:IOSet } ::= SEQUENCE {\r\n\t *    type   ATTRIBUTE.&id({IOSet}),\r\n\t *    values SET SIZE(1..MAX) OF ATTRIBUTE.&Type({IOSet}{@type})\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [type]\r\n\t\t * @property {string} [setName]\r\n\t\t * @property {string} [values]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tname: (names.setName || \"\"),\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.values || \"\"),\r\n\t\t\t\t\t\t\tvalue: new asn1js.Any()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"values\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttribute.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalues: \"values\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Attribute\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\tthis.values = asn1.result.values;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tnew asn1js.Set({\r\n\t\t\t\t\tvalue: this.values\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalues: Array.from(this.values, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\nimport ECPublicKey from \"./ECPublicKey.js\";\n//**************************************************************************************\n/**\n * Class from RFC5915\n */\nexport default class ECPrivateKey\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for ECPrivateKey class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", ECPrivateKey.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc privateKey\n\t\t */\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", ECPrivateKey.defaultValues(\"privateKey\"));\n\n\t\tif(\"namedCurve\" in parameters)\n\t\t\t/**\n\t\t\t * @type {string}\n\t\t\t * @desc namedCurve\n\t\t\t */\n\t\t\tthis.namedCurve = getParametersValue(parameters, \"namedCurve\", ECPrivateKey.defaultValues(\"namedCurve\"));\n\n\t\tif(\"publicKey\" in parameters)\n\t\t\t/**\n\t\t\t * @type {ECPublicKey}\n\t\t\t * @desc publicKey\n\t\t\t */\n\t\t\tthis.publicKey = getParametersValue(parameters, \"publicKey\", ECPrivateKey.defaultValues(\"publicKey\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t//region If input argument array contains \"json\" for this object\n\t\tif(\"json\" in parameters)\n\t\t\tthis.fromJSON(parameters.json);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 1;\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn new ECPublicKey();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn (memberValue === ECPrivateKey.defaultValues(memberName));\n\t\t\tcase \"privateKey\":\n\t\t\t\treturn (memberValue.isEqual(ECPrivateKey.defaultValues(memberName)));\n\t\t\tcase \"namedCurve\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"publicKey\":\n\t\t\t\treturn ((ECPublicKey.compareWithDefault(\"namedCurve\", memberValue.namedCurve)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"x\", memberValue.x)) &&\n\t\t\t\t\t\t(ECPublicKey.compareWithDefault(\"y\", memberValue.y)));\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for ECCPrivateKey class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * ECPrivateKey ::= SEQUENCE {\n\t * version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),\n\t * privateKey     OCTET STRING,\n\t * parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,\n\t * publicKey  [1] BIT STRING OPTIONAL\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [version]\n\t\t * @property {string} [privateKey]\n\t\t * @property {string} [namedCurve]\n\t\t * @property {string} [publicKey]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.namedCurve || \"\") })\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.BitString({ name: (names.publicKey || \"\") })\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"version\",\n\t\t\t\"privateKey\",\n\t\t\t\"namedCurve\",\n\t\t\t\"publicKey\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tECPrivateKey.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tversion: \"version\",\n\t\t\t\t\tprivateKey: \"privateKey\",\n\t\t\t\t\tnamedCurve: \"namedCurve\",\n\t\t\t\t\tpublicKey: \"publicKey\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ECPrivateKey\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\n\t\tthis.privateKey = asn1.result.privateKey;\n\n\t\tif(\"namedCurve\" in asn1.result)\n\t\t\tthis.namedCurve = asn1.result.namedCurve.valueBlock.toString();\n\n\t\tif(\"publicKey\" in asn1.result)\n\t\t{\n\t\t\tconst publicKeyData = { schema: asn1.result.publicKey.valueBlock.valueHex };\n\t\t\tif(\"namedCurve\" in this)\n\t\t\t\tpublicKeyData.namedCurve = this.namedCurve;\n\n\t\t\tthis.publicKey = new ECPublicKey(publicKeyData);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst outputArray = [\n\t\t\tnew asn1js.Integer({ value: this.version }),\n\t\t\tthis.privateKey\n\t\t];\n\n\t\tif(\"namedCurve\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.namedCurve })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.BitString({ valueHex: this.publicKey.toSchema().toBER(false) })\n\t\t\t\t]\n\t\t\t}));\n\t\t}\n\n\t\treturn new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t});\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tif(((\"namedCurve\" in this) === false) || (ECPrivateKey.compareWithDefault(\"namedCurve\", this.namedCurve)))\n\t\t\tthrow new Error(\"Not enough information for making JSON: absent \\\"namedCurve\\\" value\");\n\n\t\tlet crvName = \"\";\n\n\t\tswitch(this.namedCurve)\n\t\t{\n\t\t\tcase \"1.2.840.10045.3.1.7\": // P-256\n\t\t\t\tcrvName = \"P-256\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.34\": // P-384\n\t\t\t\tcrvName = \"P-384\";\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.132.0.35\": // P-521\n\t\t\t\tcrvName = \"P-521\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\tconst privateKeyJSON = {\n\t\t\tcrv: crvName,\n\t\t\td: toBase64(arrayBufferToString(this.privateKey.valueBlock.valueHex), true, true, false)\n\t\t};\n\n\t\tif(\"publicKey\" in this)\n\t\t{\n\t\t\tconst publicKeyJSON = this.publicKey.toJSON();\n\n\t\t\tprivateKeyJSON.x = publicKeyJSON.x;\n\t\t\tprivateKeyJSON.y = publicKeyJSON.y;\n\t\t}\n\n\t\treturn privateKeyJSON;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert JSON value into current object\n\t * @param {Object} json\n\t */\n\tfromJSON(json)\n\t{\n\t\tlet coodinateLength = 0;\n\n\t\tif(\"crv\" in json)\n\t\t{\n\t\t\tswitch(json.crv.toUpperCase())\n\t\t\t{\n\t\t\t\tcase \"P-256\":\n\t\t\t\t\tthis.namedCurve = \"1.2.840.10045.3.1.7\";\n\t\t\t\t\tcoodinateLength = 32;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-384\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.34\";\n\t\t\t\t\tcoodinateLength = 48;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P-521\":\n\t\t\t\t\tthis.namedCurve = \"1.3.132.0.35\";\n\t\t\t\t\tcoodinateLength = 66;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t}\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"crv\\\"\");\n\n\t\tif(\"d\" in json)\n\t\t{\n\t\t\tconst convertBuffer = stringToArrayBuffer(fromBase64(json.d, true));\n\t\t\t\n\t\t\tif(convertBuffer.byteLength < coodinateLength)\n\t\t\t{\n\t\t\t\tconst buffer = new ArrayBuffer(coodinateLength);\n\t\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\tconst convertBufferView = new Uint8Array(convertBuffer);\n\t\t\t\tview.set(convertBufferView, 1);\n\t\t\t\t\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: buffer });\n\t\t\t}\n\t\t\telse\n\t\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: convertBuffer.slice(0, coodinateLength) });\n\t\t}\n\t\telse\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\n\n\t\tif((\"x\" in json) && (\"y\" in json))\n\t\t\tthis.publicKey = new ECPublicKey({ json });\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class OtherPrimeInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for OtherPrimeInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime\r\n\t\t */\r\n\t\tthis.prime = getParametersValue(parameters, \"prime\", OtherPrimeInfo.defaultValues(\"prime\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent\r\n\t\t */\r\n\t\tthis.exponent = getParametersValue(parameters, \"exponent\", OtherPrimeInfo.defaultValues(\"exponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", OtherPrimeInfo.defaultValues(\"coefficient\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"prime\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for OtherPrimeInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * OtherPrimeInfo ::= Sequence {\r\n\t *    prime             Integer,  -- ri\r\n\t *    exponent          Integer,  -- di\r\n\t *    coefficient       Integer   -- ti\r\n\t * }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} prime\r\n\t\t * @property {string} exponent\r\n\t\t * @property {string} coefficient\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"prime\",\r\n\t\t\t\"exponent\",\r\n\t\t\t\"coefficient\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tOtherPrimeInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tprime: \"prime\",\r\n\t\t\t\t\texponent: \"exponent\",\r\n\t\t\t\t\tcoefficient: \"coefficient\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for OtherPrimeInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.prime = asn1.result.prime.convertFromDER();\r\n\t\tthis.exponent = asn1.result.exponent.convertFromDER();\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.prime.convertToDER(),\r\n\t\t\t\tthis.exponent.convertToDER(),\r\n\t\t\t\tthis.coefficient.convertToDER()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tr: toBase64(arrayBufferToString(this.prime.valueBlock.valueHex), true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.exponent.valueBlock.valueHex), true, true),\r\n\t\t\tt: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"r\" in json)\r\n\t\t\tthis.prime = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.r, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"r\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.exponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"t\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.t, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"t\\\"\");\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, toBase64, arrayBufferToString, stringToArrayBuffer, fromBase64, clearProps } from \"pvutils\";\r\nimport OtherPrimeInfo from \"./OtherPrimeInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC3447\r\n */\r\nexport default class RSAPrivateKey\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSAPrivateKey class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", RSAPrivateKey.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc modulus\r\n\t\t */\r\n\t\tthis.modulus = getParametersValue(parameters, \"modulus\", RSAPrivateKey.defaultValues(\"modulus\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc publicExponent\r\n\t\t */\r\n\t\tthis.publicExponent = getParametersValue(parameters, \"publicExponent\", RSAPrivateKey.defaultValues(\"publicExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc privateExponent\r\n\t\t */\r\n\t\tthis.privateExponent = getParametersValue(parameters, \"privateExponent\", RSAPrivateKey.defaultValues(\"privateExponent\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime1\r\n\t\t */\r\n\t\tthis.prime1 = getParametersValue(parameters, \"prime1\", RSAPrivateKey.defaultValues(\"prime1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc prime2\r\n\t\t */\r\n\t\tthis.prime2 = getParametersValue(parameters, \"prime2\", RSAPrivateKey.defaultValues(\"prime2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent1\r\n\t\t */\r\n\t\tthis.exponent1 = getParametersValue(parameters, \"exponent1\", RSAPrivateKey.defaultValues(\"exponent1\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc exponent2\r\n\t\t */\r\n\t\tthis.exponent2 = getParametersValue(parameters, \"exponent2\", RSAPrivateKey.defaultValues(\"exponent2\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc coefficient\r\n\t\t */\r\n\t\tthis.coefficient = getParametersValue(parameters, \"coefficient\", RSAPrivateKey.defaultValues(\"coefficient\"));\r\n\r\n\t\tif(\"otherPrimeInfos\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<OtherPrimeInfo>}\r\n\t\t\t * @desc otherPrimeInfos\r\n\t\t\t */\r\n\t\t\tthis.otherPrimeInfos = getParametersValue(parameters, \"otherPrimeInfos\", RSAPrivateKey.defaultValues(\"otherPrimeInfos\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"modulus\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"publicExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"privateExponent\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"prime2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent1\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"exponent2\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"coefficient\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"otherPrimeInfos\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSAPrivateKey class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSAPrivateKey ::= Sequence {\r\n\t *    version           Version,\r\n\t *    modulus           Integer,  -- n\r\n\t *    publicExponent    Integer,  -- e\r\n\t *    privateExponent   Integer,  -- d\r\n\t *    prime1            Integer,  -- p\r\n\t *    prime2            Integer,  -- q\r\n\t *    exponent1         Integer,  -- d mod (p-1)\r\n\t *    exponent2         Integer,  -- d mod (q-1)\r\n\t *    coefficient       Integer,  -- (inverse of q) mod p\r\n\t *    otherPrimeInfos   OtherPrimeInfos OPTIONAL\r\n\t * }\r\n\t *\r\n\t * OtherPrimeInfos ::= Sequence SIZE(1..MAX) OF OtherPrimeInfo\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [modulus]\r\n\t\t * @property {string} [publicExponent]\r\n\t\t * @property {string} [privateExponent]\r\n\t\t * @property {string} [prime1]\r\n\t\t * @property {string} [prime2]\r\n\t\t * @property {string} [exponent1]\r\n\t\t * @property {string} [exponent2]\r\n\t\t * @property {string} [coefficient]\r\n\t\t * @property {string} [otherPrimeInfosName]\r\n\t\t * @property {Object} [otherPrimeInfo]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.modulus || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.publicExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.privateExponent || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.prime2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent1 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.exponent2 || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.coefficient || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.otherPrimeInfosName || \"\"),\r\n\t\t\t\t\t\t\tvalue: OtherPrimeInfo.schema(names.otherPrimeInfo || {})\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"modulus\",\r\n\t\t\t\"publicExponent\",\r\n\t\t\t\"privateExponent\",\r\n\t\t\t\"prime1\",\r\n\t\t\t\"prime2\",\r\n\t\t\t\"exponent1\",\r\n\t\t\t\"exponent2\",\r\n\t\t\t\"coefficient\",\r\n\t\t\t\"otherPrimeInfos\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSAPrivateKey.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tmodulus: \"modulus\",\r\n\t\t\t\t\tpublicExponent: \"publicExponent\",\r\n\t\t\t\t\tprivateExponent: \"privateExponent\",\r\n\t\t\t\t\tprime1: \"prime1\",\r\n\t\t\t\t\tprime2: \"prime2\",\r\n\t\t\t\t\texponent1: \"exponent1\",\r\n\t\t\t\t\texponent2: \"exponent2\",\r\n\t\t\t\t\tcoefficient: \"coefficient\",\r\n\t\t\t\t\totherPrimeInfo: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"otherPrimeInfos\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSAPrivateKey\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.modulus = asn1.result.modulus.convertFromDER(256);\r\n\t\tthis.publicExponent = asn1.result.publicExponent;\r\n\t\tthis.privateExponent = asn1.result.privateExponent.convertFromDER(256);\r\n\t\tthis.prime1 = asn1.result.prime1.convertFromDER(128);\r\n\t\tthis.prime2 = asn1.result.prime2.convertFromDER(128);\r\n\t\tthis.exponent1 = asn1.result.exponent1.convertFromDER(128);\r\n\t\tthis.exponent2 = asn1.result.exponent2.convertFromDER(128);\r\n\t\tthis.coefficient = asn1.result.coefficient.convertFromDER(128);\r\n\r\n\t\tif(\"otherPrimeInfos\" in asn1.result)\r\n\t\t\tthis.otherPrimeInfos = Array.from(asn1.result.otherPrimeInfos, element => new OtherPrimeInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.version }));\r\n\t\toutputArray.push(this.modulus.convertToDER());\r\n\t\toutputArray.push(this.publicExponent);\r\n\t\toutputArray.push(this.privateExponent.convertToDER());\r\n\t\toutputArray.push(this.prime1.convertToDER());\r\n\t\toutputArray.push(this.prime2.convertToDER());\r\n\t\toutputArray.push(this.exponent1.convertToDER());\r\n\t\toutputArray.push(this.exponent2.convertToDER());\r\n\t\toutputArray.push(this.coefficient.convertToDER());\r\n\t\t\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.otherPrimeInfos, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst jwk = {\r\n\t\t\tn: toBase64(arrayBufferToString(this.modulus.valueBlock.valueHex), true, true, true),\r\n\t\t\te: toBase64(arrayBufferToString(this.publicExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\td: toBase64(arrayBufferToString(this.privateExponent.valueBlock.valueHex), true, true, true),\r\n\t\t\tp: toBase64(arrayBufferToString(this.prime1.valueBlock.valueHex), true, true, true),\r\n\t\t\tq: toBase64(arrayBufferToString(this.prime2.valueBlock.valueHex), true, true, true),\r\n\t\t\tdp: toBase64(arrayBufferToString(this.exponent1.valueBlock.valueHex), true, true, true),\r\n\t\t\tdq: toBase64(arrayBufferToString(this.exponent2.valueBlock.valueHex), true, true, true),\r\n\t\t\tqi: toBase64(arrayBufferToString(this.coefficient.valueBlock.valueHex), true, true, true)\r\n\t\t};\r\n\r\n\t\tif(\"otherPrimeInfos\" in this)\r\n\t\t\tjwk.oth = Array.from(this.otherPrimeInfos, element => element.toJSON());\r\n\r\n\t\treturn jwk;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"n\" in json)\r\n\t\t\tthis.modulus = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.n, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"n\\\"\");\r\n\r\n\t\tif(\"e\" in json)\r\n\t\t\tthis.publicExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.e, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"e\\\"\");\r\n\r\n\t\tif(\"d\" in json)\r\n\t\t\tthis.privateExponent = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.d, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"d\\\"\");\r\n\r\n\t\tif(\"p\" in json)\r\n\t\t\tthis.prime1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.p, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"p\\\"\");\r\n\r\n\t\tif(\"q\" in json)\r\n\t\t\tthis.prime2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.q, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"q\\\"\");\r\n\r\n\t\tif(\"dp\" in json)\r\n\t\t\tthis.exponent1 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dp, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dp\\\"\");\r\n\r\n\t\tif(\"dq\" in json)\r\n\t\t\tthis.exponent2 = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.dq, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"dq\\\"\");\r\n\r\n\t\tif(\"qi\" in json)\r\n\t\t\tthis.coefficient = new asn1js.Integer({ valueHex: stringToArrayBuffer(fromBase64(json.qi, true, true)) });\r\n\t\telse\r\n\t\t\tthrow new Error(\"Absent mandatory parameter \\\"qi\\\"\");\r\n\r\n\t\tif(\"oth\" in json)\r\n\t\t\tthis.otherPrimeInfos = Array.from(json.oth, element => new OtherPrimeInfo({ json: element }));\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport Attribute from \"./Attribute.js\";\r\nimport ECPrivateKey from \"./ECPrivateKey.js\";\r\nimport RSAPrivateKey from \"./RSAPrivateKey.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5208\r\n */\r\nexport default class PrivateKeyInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc version\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", PrivateKeyInfo.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc privateKeyAlgorithm\r\n\t\t */\r\n\t\tthis.privateKeyAlgorithm = getParametersValue(parameters, \"privateKeyAlgorithm\", PrivateKeyInfo.defaultValues(\"privateKeyAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {OctetString}\r\n\t\t * @desc privateKey\r\n\t\t */\r\n\t\tthis.privateKey = getParametersValue(parameters, \"privateKey\", PrivateKeyInfo.defaultValues(\"privateKey\"));\r\n\r\n\t\tif(\"attributes\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<Attribute>}\r\n\t\t\t * @desc attributes\r\n\t\t\t */\r\n\t\t\tthis.attributes = getParametersValue(parameters, \"attributes\", PrivateKeyInfo.defaultValues(\"attributes\"));\r\n\r\n\t\tif(\"parsedKey\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ECPrivateKey|RSAPrivateKey}\r\n\t\t\t * @desc Parsed public key value\r\n\t\t\t */\r\n\t\t\tthis.parsedKey = getParametersValue(parameters, \"parsedKey\", PrivateKeyInfo.defaultValues(\"parsedKey\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t\t//region If input argument array contains \"json\" for this object\r\n\t\tif(\"json\" in parameters)\r\n\t\t\tthis.fromJSON(parameters.json);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"privateKeyAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"privateKey\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"parsedKey\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyInfo ::= SEQUENCE {\r\n\t *    version Version,\r\n\t *    privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},\r\n\t *    privateKey PrivateKey,\r\n\t *    attributes [0] Attributes OPTIONAL }\r\n\t *\r\n\t * Version ::= INTEGER {v1(0)} (v1,...)\r\n\t *\r\n\t * PrivateKey ::= OCTET STRING\r\n\t *\r\n\t * Attributes ::= SET OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [version]\r\n\t\t * @property {string} [privateKeyAlgorithm]\r\n\t\t * @property {string} [privateKey]\r\n\t\t * @property {string} [attributes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Integer({ name: (names.version || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.privateKeyAlgorithm || {}),\r\n\t\t\t\tnew asn1js.OctetString({ name: (names.privateKey || \"\") }),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"version\",\r\n\t\t\t\"privateKeyAlgorithm\",\r\n\t\t\t\"privateKey\",\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tversion: \"version\",\r\n\t\t\t\t\tprivateKeyAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"privateKeyAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tprivateKey: \"privateKey\",\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.version = asn1.result.version.valueBlock.valueDec;\r\n\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.privateKeyAlgorithm });\r\n\t\tthis.privateKey = asn1.result.privateKey;\r\n\r\n\t\tif(\"attributes\" in asn1.result)\r\n\t\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ schema: privateKeyASN1.result });\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tif(\"algorithmParams\" in this.privateKeyAlgorithm)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(this.privateKeyAlgorithm.algorithmParams instanceof asn1js.ObjectIdentifier)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst privateKeyASN1 = asn1js.fromBER(this.privateKey.valueBlock.valueHex);\r\n\t\t\t\t\t\tif(privateKeyASN1.offset !== (-1))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tthis.parsedKey = new ECPrivateKey({\r\n\t\t\t\t\t\t\t\tnamedCurve: this.privateKeyAlgorithm.algorithmParams.valueBlock.toString(),\r\n\t\t\t\t\t\t\t\tschema: privateKeyASN1.result\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [\r\n\t\t\tnew asn1js.Integer({ value: this.version }),\r\n\t\t\tthis.privateKeyAlgorithm.toSchema(),\r\n\t\t\tthis.privateKey\r\n\t\t];\r\n\r\n\t\tif(\"attributes\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\t//region Return common value in case we do not have enough info fo making JWK\r\n\t\tif((\"parsedKey\" in this) === false)\r\n\t\t{\r\n\t\t\tconst object = {\r\n\t\t\t\tversion: this.version,\r\n\t\t\t\tprivateKeyAlgorithm: this.privateKeyAlgorithm.toJSON(),\r\n\t\t\t\tprivateKey: this.privateKey.toJSON()\r\n\t\t\t};\r\n\r\n\t\t\tif(\"attributes\" in this)\r\n\t\t\t\tobject.attributes = Array.from(this.attributes, element => element.toJSON());\r\n\r\n\t\t\treturn object;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Making JWK\r\n\t\tconst jwk = {};\r\n\r\n\t\tswitch(this.privateKeyAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.2.1\": // ECDSA\r\n\t\t\t\tjwk.kty = \"EC\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.1\": // RSA\r\n\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\r\n\t\tconst publicKeyJWK = this.parsedKey.toJSON();\r\n\r\n\t\tfor(const key of Object.keys(publicKeyJWK))\r\n\t\t\tjwk[key] = publicKeyJWK[key];\r\n\r\n\t\treturn jwk;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert JSON value into current object\r\n\t * @param {Object} json\r\n\t */\r\n\tfromJSON(json)\r\n\t{\r\n\t\tif(\"kty\" in json)\r\n\t\t{\r\n\t\t\tswitch(json.kty.toUpperCase())\r\n\t\t\t{\r\n\t\t\t\tcase \"EC\":\r\n\t\t\t\t\tthis.parsedKey = new ECPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.10045.2.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.ObjectIdentifier({ value: this.parsedKey.namedCurve })\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSA\":\r\n\t\t\t\t\tthis.parsedKey = new RSAPrivateKey({ json });\r\n\r\n\t\t\t\t\tthis.privateKeyAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.1\",\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new Error(`Invalid value for \"kty\" parameter: ${json.kty}`);\r\n\t\t\t}\r\n\r\n\t\t\tthis.privateKey = new asn1js.OctetString({ valueHex: this.parsedKey.toSchema().toBER(false) });\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5652\r\n */\r\nexport default class EncryptedContentInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for EncryptedContentInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc contentType\r\n\t\t */\r\n\t\tthis.contentType = getParametersValue(parameters, \"contentType\", EncryptedContentInfo.defaultValues(\"contentType\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc contentEncryptionAlgorithm\r\n\t\t */\r\n\t\tthis.contentEncryptionAlgorithm = getParametersValue(parameters, \"contentEncryptionAlgorithm\", EncryptedContentInfo.defaultValues(\"contentEncryptionAlgorithm\"));\r\n\r\n\t\tif(\"encryptedContent\" in parameters)\r\n\t\t{\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc encryptedContent (!!!) could be contructive or primitive value (!!!)\r\n\t\t\t */\r\n\t\t\tthis.encryptedContent = parameters.encryptedContent;\r\n\t\t\t\r\n\t\t\tif((this.encryptedContent.idBlock.tagClass === 1) &&\r\n\t\t\t\t(this.encryptedContent.idBlock.tagNumber === 4))\r\n\t\t\t{\r\n\t\t\t\t//region Divide OCTETSTRING value down to small pieces\r\n\t\t\t\tif(this.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst constrString = new asn1js.OctetString({\r\n\t\t\t\t\t\tidBlock: { isConstructed: true },\r\n\t\t\t\t\t\tisConstructed: true\r\n\t\t\t\t\t});\r\n\t\t\t\t\t\r\n\t\t\t\t\tlet offset = 0;\r\n\t\t\t\t\tlet length = this.encryptedContent.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\twhile(length > 0)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst pieceView = new Uint8Array(this.encryptedContent.valueBlock.valueHex, offset, ((offset + 1024) > this.encryptedContent.valueBlock.valueHex.byteLength) ? (this.encryptedContent.valueBlock.valueHex.byteLength - offset) : 1024);\r\n\t\t\t\t\t\tconst _array = new ArrayBuffer(pieceView.length);\r\n\t\t\t\t\t\tconst _view = new Uint8Array(_array);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tfor(let i = 0; i < _view.length; i++)\r\n\t\t\t\t\t\t\t_view[i] = pieceView[i];\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tconstrString.valueBlock.value.push(new asn1js.OctetString({ valueHex: _array }));\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tlength -= pieceView.length;\r\n\t\t\t\t\t\toffset += pieceView.length;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tthis.encryptedContent = constrString;\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"contentType\":\r\n\t\t\t\treturn (memberValue === \"\");\r\n\t\t\tcase \"contentEncryptionAlgorithm\":\r\n\t\t\t\treturn ((memberValue.algorithmId === \"\") && ((\"algorithmParams\" in memberValue) === false));\r\n\t\t\tcase \"encryptedContent\":\r\n\t\t\t\treturn (memberValue.isEqual(EncryptedContentInfo.defaultValues(memberName)));\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for EncryptedContentInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * EncryptedContentInfo ::= SEQUENCE {\r\n\t *    contentType ContentType,\r\n\t *    contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,\r\n\t *    encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL }\r\n\t *\r\n\t * Comment: Strange, but modern crypto engines create \"encryptedContent\" as \"[0] EXPLICIT EncryptedContent\"\r\n\t *\r\n\t * EncryptedContent ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [contentType]\r\n\t\t * @property {string} [contentEncryptionAlgorithm]\r\n\t\t * @property {string} [encryptedContent]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.contentType || \"\") }),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.contentEncryptionAlgorithm || {}),\r\n\t\t\t\t// The CHOICE we need because \"EncryptedContent\" could have either \"constructive\"\r\n\t\t\t\t// or \"primitive\" form of encoding and we need to handle both variants\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\tvalue: new asn1js.OctetString()\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t}),\r\n\t\t\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\t\t\tname: (names.encryptedContent || \"\"),\r\n\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"contentType\",\r\n\t\t\t\"contentEncryptionAlgorithm\",\r\n\t\t\t\"encryptedContent\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tEncryptedContentInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcontentType: \"contentType\",\r\n\t\t\t\t\tcontentEncryptionAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"contentEncryptionAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptedContent: \"encryptedContent\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for EncryptedContentInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.contentType = asn1.result.contentType.valueBlock.toString();\r\n\t\tthis.contentEncryptionAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.contentEncryptionAlgorithm });\r\n\r\n\t\tif(\"encryptedContent\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.encryptedContent = asn1.result.encryptedContent;\r\n\r\n\t\t\tthis.encryptedContent.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tthis.encryptedContent.idBlock.tagNumber = 4; // OCTETSTRING (!!!) The value still has instance of \"in_window.org.pkijs.asn1.ASN1_CONSTRUCTED / ASN1_PRIMITIVE\"\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst sequenceLengthBlock = {\r\n\t\t\tisIndefiniteForm: false\r\n\t\t};\r\n\r\n\t\tconst outputArray = [];\r\n\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.contentType }));\r\n\t\toutputArray.push(this.contentEncryptionAlgorithm.toSchema());\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t{\r\n\t\t\tsequenceLengthBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\tconst encryptedValue = this.encryptedContent;\r\n\r\n\t\t\tencryptedValue.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tencryptedValue.idBlock.tagNumber = 0; // [0]\r\n\r\n\t\t\tencryptedValue.lenBlock.isIndefiniteForm = this.encryptedContent.idBlock.isConstructed;\r\n\r\n\t\t\toutputArray.push(encryptedValue);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tlenBlock: sequenceLengthBlock,\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tcontentType: this.contentType,\r\n\t\t\tcontentEncryptionAlgorithm: this.contentEncryptionAlgorithm.toJSON()\r\n\t\t};\r\n\r\n\t\tif(\"encryptedContent\" in this)\r\n\t\t\t_object.encryptedContent = this.encryptedContent.toJSON();\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC4055\r\n */\r\nexport default class RSASSAPSSParams\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RSASSAPSSParams class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithms of hashing (DEFAULT sha1)\r\n\t\t */\r\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", RSASSAPSSParams.defaultValues(\"hashAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc Algorithm of \"mask generaion function (MGF)\" (DEFAULT mgf1SHA1)\r\n\t\t */\r\n\t\tthis.maskGenAlgorithm = getParametersValue(parameters, \"maskGenAlgorithm\", RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Salt length (DEFAULT 20)\r\n\t\t */\r\n\t\tthis.saltLength = getParametersValue(parameters, \"saltLength\", RSASSAPSSParams.defaultValues(\"saltLength\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc (DEFAULT 1)\r\n\t\t */\r\n\t\tthis.trailerField = getParametersValue(parameters, \"trailerField\", RSASSAPSSParams.defaultValues(\"trailerField\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"hashAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tcase \"maskGenAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\talgorithmParams: (new AlgorithmIdentifier({\r\n\t\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t})).toSchema()\r\n\t\t\t\t});\r\n\t\t\tcase \"saltLength\":\r\n\t\t\t\treturn 20;\r\n\t\t\tcase \"trailerField\":\r\n\t\t\t\treturn 1;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RSASSAPSSParams class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RSASSA-PSS-params  ::=  Sequence  {\r\n\t *    hashAlgorithm      [0] HashAlgorithm DEFAULT sha1Identifier,\r\n\t *    maskGenAlgorithm   [1] MaskGenAlgorithm DEFAULT mgf1SHA1Identifier,\r\n\t *    saltLength         [2] Integer DEFAULT 20,\r\n\t *    trailerField       [3] Integer DEFAULT 1  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [hashAlgorithm]\r\n\t\t * @property {string} [maskGenAlgorithm]\r\n\t\t * @property {string} [saltLength]\r\n\t\t * @property {string} [trailerField]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.hashAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [AlgorithmIdentifier.schema(names.maskGenAlgorithm || {})]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.saltLength || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t\t},\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.trailerField || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"hashAlgorithm\",\r\n\t\t\t\"maskGenAlgorithm\",\r\n\t\t\t\"saltLength\",\r\n\t\t\t\"trailerField\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRSASSAPSSParams.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\thashAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"hashAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tmaskGenAlgorithm: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"maskGenAlgorithm\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsaltLength: \"saltLength\",\r\n\t\t\t\t\ttrailerField: \"trailerField\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RSASSAPSSParams\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"hashAlgorithm\" in asn1.result)\r\n\t\t\tthis.hashAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.hashAlgorithm });\r\n\r\n\t\tif(\"maskGenAlgorithm\" in asn1.result)\r\n\t\t\tthis.maskGenAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.maskGenAlgorithm });\r\n\r\n\t\tif(\"saltLength\" in asn1.result)\r\n\t\t\tthis.saltLength = asn1.result.saltLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"trailerField\" in asn1.result)\r\n\t\t\tthis.trailerField = asn1.result.trailerField.valueBlock.valueDec;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.hashAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [this.maskGenAlgorithm.toSchema()]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.saltLength })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Integer({ value: this.trailerField })]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(!this.hashAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"hashAlgorithm\")))\r\n\t\t\tobject.hashAlgorithm = this.hashAlgorithm.toJSON();\r\n\r\n\t\tif(!this.maskGenAlgorithm.isEqual(RSASSAPSSParams.defaultValues(\"maskGenAlgorithm\")))\r\n\t\t\tobject.maskGenAlgorithm = this.maskGenAlgorithm.toJSON();\r\n\r\n\t\tif(this.saltLength !== RSASSAPSSParams.defaultValues(\"saltLength\"))\r\n\t\t\tobject.saltLength = this.saltLength;\r\n\r\n\t\tif(this.trailerField !== RSASSAPSSParams.defaultValues(\"trailerField\"))\r\n\t\t\tobject.trailerField = this.trailerField;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBKDF2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBKDF2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc salt\r\n\t\t */\r\n\t\tthis.salt = getParametersValue(parameters, \"salt\", PBKDF2Params.defaultValues(\"salt\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc iterationCount\r\n\t\t */\r\n\t\tthis.iterationCount = getParametersValue(parameters, \"iterationCount\", PBKDF2Params.defaultValues(\"iterationCount\"));\r\n\t\t\r\n\t\tif(\"keyLength\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc keyLength\r\n\t\t\t */\r\n\t\t\tthis.keyLength = getParametersValue(parameters, \"keyLength\", PBKDF2Params.defaultValues(\"keyLength\"));\r\n\t\t\r\n\t\tif(\"prf\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {AlgorithmIdentifier}\r\n\t\t\t * @desc prf\r\n\t\t\t */\r\n\t\t\tthis.prf = getParametersValue(parameters, \"prf\", PBKDF2Params.defaultValues(\"prf\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"salt\":\r\n\t\t\t\treturn {};\r\n\t\t\tcase \"iterationCount\":\r\n\t\t\t\treturn (-1);\r\n\t\t\tcase \"keyLength\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"prf\":\r\n\t\t\t\treturn new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.3.14.3.2.26\", // SHA-1\r\n\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t});\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBKDF2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBKDF2-params ::= SEQUENCE {\r\n\t *    salt CHOICE {\r\n\t *        specified OCTET STRING,\r\n\t *        otherSource AlgorithmIdentifier },\r\n\t *  iterationCount INTEGER (1..MAX),\r\n\t *  keyLength INTEGER (1..MAX) OPTIONAL,\r\n\t *  prf AlgorithmIdentifier\r\n\t *    DEFAULT { algorithm hMAC-SHA1, parameters NULL } }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [saltPrimitive]\r\n\t\t * @property {string} [saltConstructed]\r\n\t\t * @property {string} [iterationCount]\r\n\t\t * @property {string} [keyLength]\r\n\t\t * @property {string} [prf]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.OctetString({ name: (names.saltPrimitive || \"\") }),\r\n\t\t\t\t\t\tAlgorithmIdentifier.schema(names.saltConstructed || {})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({ name: (names.iterationCount || \"\") }),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\tname: (names.keyLength || \"\"),\r\n\t\t\t\t\toptional: true\r\n\t\t\t\t}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.prf || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"salt\",\r\n\t\t\t\"iterationCount\",\r\n\t\t\t\"keyLength\",\r\n\t\t\t\"prf\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBKDF2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tsaltPrimitive: \"salt\",\r\n\t\t\t\t\tsaltConstructed: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"salt\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\titerationCount: \"iterationCount\",\r\n\t\t\t\t\tkeyLength: \"keyLength\",\r\n\t\t\t\t\tprf: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"prf\",\r\n\t\t\t\t\t\t\toptional: true\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBKDF2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.salt = asn1.result.salt;\r\n\t\tthis.iterationCount = asn1.result.iterationCount.valueBlock.valueDec;\r\n\r\n\t\tif(\"keyLength\" in asn1.result)\r\n\t\t\tthis.keyLength = asn1.result.keyLength.valueBlock.valueDec;\r\n\r\n\t\tif(\"prf\" in asn1.result)\r\n\t\t\tthis.prf = new AlgorithmIdentifier({ schema: asn1.result.prf });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence \r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.salt);\r\n\t\toutputArray.push(new asn1js.Integer({ value: this.iterationCount }));\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.keyLength }));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\toutputArray.push(this.prf.toSchema());\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object \r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion \r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\tsalt: this.salt.toJSON(),\r\n\t\t\titerationCount: this.iterationCount\r\n\t\t};\r\n\t\t\r\n\t\tif(\"keyLength\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"keyLength\") !== this.keyLength)\r\n\t\t\t\t_object.keyLength = this.keyLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(\"prf\" in this)\r\n\t\t{\r\n\t\t\tif(PBKDF2Params.defaultValues(\"prf\").isEqual(this.prf) === false)\r\n\t\t\t\t_object.prf = this.prf.toJSON();\r\n\t\t}\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC2898\r\n */\r\nexport default class PBES2Params\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PBES2Params class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc keyDerivationFunc\r\n\t\t */\r\n\t\tthis.keyDerivationFunc = getParametersValue(parameters, \"keyDerivationFunc\", PBES2Params.defaultValues(\"keyDerivationFunc\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc encryptionScheme\r\n\t\t */\r\n\t\tthis.encryptionScheme = getParametersValue(parameters, \"encryptionScheme\", PBES2Params.defaultValues(\"encryptionScheme\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyDerivationFunc\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"encryptionScheme\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PBES2Params class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PBES2-params ::= SEQUENCE {\r\n\t *    keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\r\n\t *    encryptionScheme AlgorithmIdentifier {{PBES2-Encs}} }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyDerivationFunc]\r\n\t\t * @property {string} [encryptionScheme]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tAlgorithmIdentifier.schema(names.keyDerivationFunc || {}),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.encryptionScheme || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyDerivationFunc\",\r\n\t\t\t\"encryptionScheme\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPBES2Params.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyDerivationFunc: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"keyDerivationFunc\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tencryptionScheme: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"encryptionScheme\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PBES2Params\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyDerivationFunc = new AlgorithmIdentifier({ schema: asn1.result.keyDerivationFunc });\r\n\t\tthis.encryptionScheme = new AlgorithmIdentifier({ schema: asn1.result.encryptionScheme });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.keyDerivationFunc.toSchema(),\r\n\t\t\t\tthis.encryptionScheme.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyDerivationFunc: this.keyDerivationFunc.toJSON(),\r\n\t\t\tencryptionScheme: this.encryptionScheme.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, stringToArrayBuffer, arrayBufferToString, utilConcatBuf } from \"pvutils\";\r\nimport { createCMSECDSASignature, createECDSASignatureFromCMS } from \"./common.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport PrivateKeyInfo from \"./PrivateKeyInfo.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport EncryptedContentInfo from \"./EncryptedContentInfo.js\";\r\nimport RSASSAPSSParams from \"./RSASSAPSSParams.js\";\r\nimport PBKDF2Params from \"./PBKDF2Params.js\";\r\nimport PBES2Params from \"./PBES2Params.js\";\r\n//**************************************************************************************\r\n/**\r\n * Making MAC key using algorithm described in B.2 of PKCS#12 standard.\r\n */\r\nfunction makePKCS12B2Key(cryptoEngine, hashAlgorithm, keyLength, password, salt, iterationCount)\r\n{\r\n\t//region Initial variables\r\n\tlet u;\r\n\tlet v;\r\n\t\r\n\tconst result = [];\r\n\t//endregion\r\n\t\r\n\t//region Get \"u\" and \"v\" values\r\n\tswitch(hashAlgorithm.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\tu = 20; // 160\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\tu = 32; // 256\r\n\t\t\tv = 64; // 512\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\tu = 48; // 384\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\tu = 64; // 512\r\n\t\t\tv = 128; // 1024\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(\"Unsupported hashing algorithm\");\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Main algorithm making key\r\n\t//region Transform password to UTF-8 like string\r\n\tconst passwordViewInitial = new Uint8Array(password);\r\n\t\r\n\tconst passwordTransformed = new ArrayBuffer((password.byteLength * 2) + 2);\r\n\tconst passwordTransformedView = new Uint8Array(passwordTransformed);\r\n\t\r\n\tfor(let i = 0; i < passwordViewInitial.length; i++)\r\n\t{\r\n\t\tpasswordTransformedView[i * 2] = 0x00;\r\n\t\tpasswordTransformedView[i * 2 + 1] = passwordViewInitial[i];\r\n\t}\r\n\t\r\n\tpasswordTransformedView[passwordTransformedView.length - 2] = 0x00;\r\n\tpasswordTransformedView[passwordTransformedView.length - 1] = 0x00;\r\n\t\r\n\tpassword = passwordTransformed.slice(0);\r\n\t//endregion\r\n\t\r\n\t//region Construct a string D (the \"diversifier\") by concatenating v/8 copies of ID\r\n\tconst D = new ArrayBuffer(v);\r\n\tconst dView = new Uint8Array(D);\r\n\t\r\n\tfor(let i = 0; i < D.byteLength; i++)\r\n\t\tdView[i] = 3; // The ID value equal to \"3\" for MACing (see B.3 of standard)\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the salt together to create a string S of length v * ceil(s / v) bytes (the final copy of the salt may be trunacted to create S)\r\n\tconst saltLength = salt.byteLength;\r\n\t\r\n\tconst sLen = v * Math.ceil(saltLength / v);\r\n\tconst S = new ArrayBuffer(sLen);\r\n\tconst sView = new Uint8Array(S);\r\n\t\r\n\tconst saltView = new Uint8Array(salt);\r\n\t\r\n\tfor(let i = 0; i < sLen; i++)\r\n\t\tsView[i] = saltView[i % saltLength];\r\n\t//endregion\r\n\t\r\n\t//region Concatenate copies of the password together to create a string P of length v * ceil(p / v) bytes (the final copy of the password may be truncated to create P)\r\n\tconst passwordLength = password.byteLength;\r\n\t\r\n\tconst pLen = v * Math.ceil(passwordLength / v);\r\n\tconst P = new ArrayBuffer(pLen);\r\n\tconst pView = new Uint8Array(P);\r\n\t\r\n\tconst passwordView = new Uint8Array(password);\r\n\t\r\n\tfor(let i = 0; i < pLen; i++)\r\n\t\tpView[i] = passwordView[i % passwordLength];\r\n\t//endregion\r\n\t\r\n\t//region Set I=S||P to be the concatenation of S and P\r\n\tconst sPlusPLength = S.byteLength + P.byteLength;\r\n\t\r\n\tlet I = new ArrayBuffer(sPlusPLength);\r\n\tlet iView = new Uint8Array(I);\r\n\t\r\n\tiView.set(sView);\r\n\tiView.set(pView, sView.length);\r\n\t//endregion\r\n\t\r\n\t//region Set c=ceil(n / u)\r\n\tconst c = Math.ceil((keyLength >> 3) / u);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tlet internalSequence = Promise.resolve(I);\r\n\t//endregion\r\n\t\r\n\t//region For i=1, 2, ..., c, do the following:\r\n\tfor(let i = 0; i <= c; i++)\r\n\t{\r\n\t\tinternalSequence = internalSequence.then(_I =>\r\n\t\t{\r\n\t\t\t//region Create contecanetion of D and I\r\n\t\t\tconst dAndI = new ArrayBuffer(D.byteLength + _I.byteLength);\r\n\t\t\tconst dAndIView = new Uint8Array(dAndI);\r\n\t\t\t\r\n\t\t\tdAndIView.set(dView);\r\n\t\t\tdAndIView.set(iView, dView.length);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn dAndI;\r\n\t\t});\r\n\t\t\r\n\t\t//region Make \"iterationCount\" rounds of hashing\r\n\t\tfor(let j = 0; j < iterationCount; j++)\r\n\t\t\tinternalSequence = internalSequence.then(roundBuffer => cryptoEngine.digest({ name: hashAlgorithm }, new Uint8Array(roundBuffer)));\r\n\t\t//endregion\r\n\t\t\r\n\t\tinternalSequence = internalSequence.then(roundBuffer =>\r\n\t\t{\r\n\t\t\t//region Concatenate copies of Ai to create a string B of length v bits (the final copy of Ai may be truncated to create B)\r\n\t\t\tconst B = new ArrayBuffer(v);\r\n\t\t\tconst bView = new Uint8Array(B);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < B.byteLength; j++)\r\n\t\t\t\tbView[j] = roundBuffer[j % roundBuffer.length];\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Make new I value\r\n\t\t\tconst k = Math.ceil(saltLength / v) + Math.ceil(passwordLength / v);\r\n\t\t\tconst iRound = [];\r\n\t\t\t\r\n\t\t\tlet sliceStart = 0;\r\n\t\t\tlet sliceLength = v;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < k; j++)\r\n\t\t\t{\r\n\t\t\t\tconst chunk = Array.from(new Uint8Array(I.slice(sliceStart, sliceStart + sliceLength)));\r\n\t\t\t\tsliceStart += v;\r\n\t\t\t\tif((sliceStart + v) > I.byteLength)\r\n\t\t\t\t\tsliceLength = I.byteLength - sliceStart;\r\n\t\t\t\t\r\n\t\t\t\tlet x = 0x1ff;\r\n\t\t\t\t\r\n\t\t\t\tfor(let l = (B.byteLength - 1); l >= 0; l--)\r\n\t\t\t\t{\r\n\t\t\t\t\tx >>= 8;\r\n\t\t\t\t\tx += bView[l] + chunk[l];\r\n\t\t\t\t\tchunk[l] = (x & 0xff);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tiRound.push(...chunk);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tI = new ArrayBuffer(iRound.length);\r\n\t\t\tiView = new Uint8Array(I);\r\n\t\t\t\r\n\t\t\tiView.set(iRound);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tresult.push(...(new Uint8Array(roundBuffer)));\r\n\t\t\t\r\n\t\t\treturn I;\r\n\t\t});\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Initialize final key\r\n\tinternalSequence = internalSequence.then(() =>\r\n\t{\r\n\t\tconst resultBuffer = new ArrayBuffer(keyLength >> 3);\r\n\t\tconst resultView = new Uint8Array(resultBuffer);\r\n\t\t\r\n\t\tresultView.set((new Uint8Array(result)).slice(0, keyLength >> 3));\r\n\t\t\r\n\t\treturn resultBuffer;\r\n\t});\r\n\t//endregion\r\n\t//endregion\r\n\t\r\n\treturn internalSequence;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Default cryptographic engine for Web Cryptography API\r\n */\r\nexport default class CryptoEngine\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CryptoEngine class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.crypto = getParametersValue(parameters, \"crypto\", {});\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Usually here we are expecting \"window.crypto.subtle\" or an equivalent from custom \"crypto engine\"\r\n\t\t */\r\n\t\tthis.subtle = getParametersValue(parameters, \"subtle\", {});\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc Name of the \"crypto engine\"\r\n\t\t */\r\n\t\tthis.name = getParametersValue(parameters, \"name\", \"\");\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Import WebCrypto keys from different formats\r\n\t * @param {string} format\r\n\t * @param {ArrayBuffer|Uint8Array} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\timportKey(format, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet jwk = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"keyData\" type if needed\r\n\t\tif(keyData instanceof Uint8Array)\r\n\t\t\tkeyData = keyData.buffer;\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.importKey(\"raw\", keyData, algorithm, extractable, keyUsages);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"verify\"]; // Override existing keyUsages value since the key is a public key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about algorithm\r\n\t\t\t\t\t\t\t\tif(publicKeyInfo.algorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect public key algorithm: ${publicKeyInfo.algorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Public Key elements\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\tconst publicKeyJSON = publicKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(publicKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = publicKeyJSON[key];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\t//region Parse \"PrivateKeyInfo\" object\r\n\t\t\t\t\tconst asn1 = asn1js.fromBER(keyData);\r\n\t\t\t\t\tif(asn1.offset === (-1))\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromSchema(asn1.result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif((\"parsedKey\" in privateKeyInfo) === false)\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect keyData\");\r\n\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\t// noinspection FallThroughInSwitchStatementJS\r\n\t\t\t\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS256\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS384\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\tjwk.alg = \"PS512\";\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.113549.1.1.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect private key algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif((\"alg\" in jwk) === false)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS1\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RS512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"ECDSA\":\r\n\t\t\t\t\t\t\tkeyUsages = [\"sign\"]; // Override existing keyUsages value since the key is a private key\r\n\t\t\t\t\t\t\t// break omitted\r\n\t\t\t\t\t\tcase \"ECDH\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t//region Initial variables\r\n\t\t\t\t\t\t\t\tjwk = {\r\n\t\t\t\t\t\t\t\t\tkty: \"EC\",\r\n\t\t\t\t\t\t\t\t\text: extractable,\r\n\t\t\t\t\t\t\t\t\tkey_ops: keyUsages\r\n\t\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(privateKeyInfo.privateKeyAlgorithm.algorithmId !== \"1.2.840.10045.2.1\")\r\n\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm: ${privateKeyInfo.privateKeyAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\t\t\t//endregion\r\n\r\n\t\t\t\t\t\t\t\t//region Create ECDSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Get information about used hash function\r\n\t\t\t\t\t\t\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-256\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-384\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\t\t\t\t\tjwk.alg = \"RSA-OAEP-512\";\r\n\t\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\t\t\t\treturn Promise.reject(`Incorrect hash algorithm: ${algorithm.hash.name.toUpperCase()}`);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tkeyUsages = [\"decrypt\"]; // Override existing keyUsages value since the key is a private key\r\n\r\n\t\t\t\t\t\t\t\tjwk.kty = \"RSA\";\r\n\t\t\t\t\t\t\t\tjwk.ext = extractable;\r\n\t\t\t\t\t\t\t\tjwk.key_ops = keyUsages;\r\n\t\t\t\t\t\t\t\tjwk.alg = \"PS1\";\r\n\r\n\t\t\t\t\t\t\t\t//region Create RSA Private Key elements\r\n\t\t\t\t\t\t\t\tconst privateKeyJSON = privateKeyInfo.toJSON();\r\n\r\n\t\t\t\t\t\t\t\tfor(const key of Object.keys(privateKeyJSON))\r\n\t\t\t\t\t\t\t\t\tjwk[key] = privateKeyJSON[key];\r\n\t\t\t\t\t\t\t\t//endregion\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\treturn Promise.reject(`Incorrect algorithm name: ${algorithm.name.toUpperCase()}`);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tjwk = keyData;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\t\t\r\n\t\t//region Special case for Safari browser (since its acting not as WebCrypto standard describes)\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\t// Try to use both ways - import using ArrayBuffer and pure JWK (for Safari Technology Preview)\r\n\t\t\treturn Promise.resolve().then(() => this.subtle.importKey(\"jwk\", stringToArrayBuffer(JSON.stringify(jwk)), algorithm, extractable, keyUsages))\r\n\t\t\t\t.then(result => result, () => this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.subtle.importKey(\"jwk\", jwk, algorithm, extractable, keyUsages);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Export WebCrypto keys to different formats\r\n\t * @param {string} format\r\n\t * @param {Object} key\r\n\t * @returns {Promise}\r\n\t */\r\n\texportKey(format, key)\r\n\t{\r\n\t\tlet sequence = this.subtle.exportKey(\"jwk\", key);\r\n\t\t\r\n\t\t//region Currently Safari returns ArrayBuffer as JWK thus we need an additional transformation\r\n\t\tif(this.name.toLowerCase() === \"safari\")\r\n\t\t{\r\n\t\t\tsequence = sequence.then(result =>\r\n\t\t\t{\r\n\t\t\t\t// Some additional checks for Safari Technology Preview\r\n\t\t\t\tif(result instanceof ArrayBuffer)\r\n\t\t\t\t\treturn JSON.parse(arrayBufferToString(result));\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\tswitch(format.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\treturn this.subtle.exportKey(\"raw\", key);\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst publicKeyInfo = new PublicKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tpublicKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn publicKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tsequence = sequence.then(result =>\r\n\t\t\t\t{\r\n\t\t\t\t\tconst privateKeyInfo = new PrivateKeyInfo();\r\n\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tprivateKeyInfo.fromJSON(result);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\treturn Promise.reject(\"Incorrect key data\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn privateKeyInfo.toSchema().toBER(false);\r\n\t\t\t\t});\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect format: ${format}`);\r\n\t\t}\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert WebCrypto keys between different export formats\r\n\t * @param {string} inputFormat\r\n\t * @param {string} outputFormat\r\n\t * @param {ArrayBuffer|Object} keyData\r\n\t * @param {Object} algorithm\r\n\t * @param {boolean} extractable\r\n\t * @param {Array} keyUsages\r\n\t * @returns {Promise}\r\n\t */\r\n\tconvert(inputFormat, outputFormat, keyData, algorithm, extractable, keyUsages)\r\n\t{\r\n\t\tswitch(inputFormat.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"raw\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"raw\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"spki\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"spki\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"pkcs8\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.reject(\"Impossible to convert between SPKI/PKCS8\");\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"pkcs8\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"jwk\", result));\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tcase \"jwk\":\r\n\t\t\t\tswitch(outputFormat.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"raw\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"raw\", result));\r\n\t\t\t\t\tcase \"spki\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"spki\", result));\r\n\t\t\t\t\tcase \"pkcs8\":\r\n\t\t\t\t\t\treturn Promise.resolve()\r\n\t\t\t\t\t\t\t.then(() => this.importKey(\"jwk\", keyData, algorithm, extractable, keyUsages))\r\n\t\t\t\t\t\t\t.then(result => this.exportKey(\"pkcs8\", result));\r\n\t\t\t\t\tcase \"jwk\":\r\n\t\t\t\t\t\treturn Promise.resolve(keyData);\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn Promise.reject(`Incorrect outputFormat: ${outputFormat}`);\r\n\t\t\t\t}\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect inputFormat: ${inputFormat}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"encrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tencrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.encrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"decrypt\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdecrypt(...args)\r\n\t{\r\n\t\treturn this.subtle.decrypt(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"sign\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tsign(...args)\r\n\t{\r\n\t\treturn this.subtle.sign(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"verify\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tverify(...args)\r\n\t{\r\n\t\treturn this.subtle.verify(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"digest\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tdigest(...args)\r\n\t{\r\n\t\treturn this.subtle.digest(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"generateKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tgenerateKey(...args)\r\n\t{\r\n\t\treturn this.subtle.generateKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveKey(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"deriveBits\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tderiveBits(...args)\r\n\t{\r\n\t\treturn this.subtle.deriveBits(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"wrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\twrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.wrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Wrapper for standard function \"unwrapKey\"\r\n\t * @param args\r\n\t * @returns {Promise}\r\n\t */\r\n\tunwrapKey(...args)\r\n\t{\r\n\t\treturn this.subtle.unwrapKey(...args);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n\t * @param {!Uint8Array} view\r\n\t * @returns {*}\r\n\t */\r\n\tgetRandomValues(view)\r\n\t{\r\n\t\tif((\"getRandomValues\" in this.crypto) === false)\r\n\t\t\tthrow new Error(\"No support for getRandomValues\");\r\n\t\t\r\n\t\treturn this.crypto.getRandomValues(view);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get WebCrypto algorithm by wel-known OID\r\n\t * @param {string} oid well-known OID to search for\r\n\t * @returns {Object}\r\n\t */\r\n\tgetAlgorithmByOID(oid)\r\n\t{\r\n\t\tswitch(oid)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.113549.1.1.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSAES-PKCS1-v1_5\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.2.1\":\r\n\t\t\tcase \"1.2.840.10045.4.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.10045.4.3.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.133.16.840.63.0.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.1.11.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\tkdf: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.22\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.42\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.6\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.46\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.4\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.24\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.44\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-CFB\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 128\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.25\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 192\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.1.45\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\tlength: 256\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.9\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.10\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.2.11\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\thash: {\r\n\t\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.9.16.3.5\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"DH\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.14.3.2.26\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.1\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.2\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"2.16.840.1.101.3.4.2.3\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"SHA-512\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.2.840.113549.1.5.12\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t};\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"1.2.840.10045.3.1.7\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-256\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.34\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-384\"\r\n\t\t\t\t};\r\n\t\t\tcase \"1.3.132.0.35\":\r\n\t\t\t\treturn {\r\n\t\t\t\t\tname: \"P-521\"\r\n\t\t\t\t};\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn {};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get OID for each specific algorithm\r\n\t * @param {Object} algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetOIDByAlgorithm(algorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.12\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.1.1.13\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.1\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.3\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.10045.4.3.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(algorithm.kdf.toUpperCase()) // Non-standard addition - hash algorithm of KDF function\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.3.133.16.840.63.0.2\"; // dhSinglePass-stdDH-sha1kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.1\"; // dhSinglePass-stdDH-sha256kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.2\"; // dhSinglePass-stdDH-sha384kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.3.132.1.11.3\"; // dhSinglePass-stdDH-sha512kdf-scheme\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.2\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.22\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.42\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CMAC\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.6\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.26\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.46\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CFB\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.4\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.24\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.44\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(algorithm.length)\r\n\t\t\t\t{\r\n\t\t\t\t\tcase 128:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.5\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 192:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.25\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 256:\r\n\t\t\t\t\t\tresult = \"2.16.840.1.101.3.4.1.45\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(algorithm.hash.name.toUpperCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"SHA-1\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.7\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.9\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.10\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\tresult = \"1.2.840.113549.2.11\";\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"DH\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.9.16.3.5\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-1\":\r\n\t\t\t\tresult = \"1.3.14.3.2.26\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-256\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-384\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.2\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"SHA-512\":\r\n\t\t\t\tresult = \"2.16.840.1.101.3.4.2.3\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"CONCAT\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tresult = \"1.2.840.113549.1.5.12\";\r\n\t\t\t\tbreak;\r\n\t\t\t//region Special case - OIDs for ECC curves\r\n\t\t\tcase \"P-256\":\r\n\t\t\t\tresult = \"1.2.840.10045.3.1.7\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-384\":\r\n\t\t\t\tresult = \"1.3.132.0.34\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"P-521\":\r\n\t\t\t\tresult = \"1.3.132.0.35\";\r\n\t\t\t\tbreak;\r\n\t\t\t//endregion\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get default algorithm parameters for each kind of operation\r\n\t * @param {string} algorithmName Algorithm name to get common parameters for\r\n\t * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n\t * @returns {*}\r\n\t */\r\n\tgetAlgorithmParameters(algorithmName, operation)\r\n\t{\r\n\t\tlet result = {\r\n\t\t\talgorithm: {},\r\n\t\t\tusages: []\r\n\t\t};\r\n\t\t\r\n\t\tswitch(algorithmName.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSAES-PKCS1-V1_5\":\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSASSA-PKCS1-v1_5\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tsaltLength: 20\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-1\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // For importKey(\"pkcs8\") usage must be \"sign\" only\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-PSS\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-OAEP\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\tmodulusLength: 2048,\r\n\t\t\t\t\t\t\t\tpublicExponent: new Uint8Array([0x01, 0x00, 0x01]),\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\"] // encrypt for \"spki\" and decrypt for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"RSA-OAEP\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"verify\"] // \"sign\" for \"pkcs8\"\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\",\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDSA\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"ECDH\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"deriveKey\", \"deriveBits\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\tcase \"derivebits\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\",\r\n\t\t\t\t\t\t\t\tnamedCurve: \"P-256\",\r\n\t\t\t\t\t\t\t\tpublic: [] // Must be a \"publicKey\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"ECDH\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CTR\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\",\r\n\t\t\t\t\t\t\t\tcounter: new Uint8Array(16),\r\n\t\t\t\t\t\t\t\tlength: 10\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CTR\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-CBC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-CBC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-GCM\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"decrypt\":\r\n\t\t\t\t\tcase \"encrypt\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\",\r\n\t\t\t\t\t\t\t\tiv: this.getRandomValues(new Uint8Array(16)) // For \"decrypt\" the value should be replaced with value got on \"encrypt\" step\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\", \"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-GCM\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"AES-KW\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\tcase \"wrapkey\":\r\n\t\t\t\t\tcase \"unwrapkey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\",\r\n\t\t\t\t\t\t\t\tlength: 256\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"wrapKey\", \"unwrapKey\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"AES-KW\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HMAC\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"sign\":\r\n\t\t\t\t\tcase \"verify\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"importkey\":\r\n\t\t\t\t\tcase \"exportkey\":\r\n\t\t\t\t\tcase \"generatekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\",\r\n\t\t\t\t\t\t\t\tlength: 32,\r\n\t\t\t\t\t\t\t\thash: {\r\n\t\t\t\t\t\t\t\t\tname: \"SHA-256\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"sign\", \"verify\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HMAC\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"HKDF\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\",\r\n\t\t\t\t\t\t\t\thash: \"SHA-256\",\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\tinfo: new Uint8Array([])\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"HKDF\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"PBKDF2\":\r\n\t\t\t\tswitch(operation.toLowerCase())\r\n\t\t\t\t{\r\n\t\t\t\t\tcase \"derivekey\":\r\n\t\t\t\t\t\tresult = {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\t\t\t\t\thash: { name: \"SHA-256\" },\r\n\t\t\t\t\t\t\t\tsalt: new Uint8Array([]),\r\n\t\t\t\t\t\t\t\titerations: 10000\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: [\"encrypt\", \"decrypt\"]\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\talgorithm: {\r\n\t\t\t\t\t\t\t\tname: \"PBKDF2\"\r\n\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\tusages: []\r\n\t\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getting hash algorithm by signature algorithm\r\n\t * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n\t * @returns {string}\r\n\t */\r\n\tgetHashAlgorithm(signatureAlgorithm)\r\n\t{\r\n\t\tlet result = \"\";\r\n\t\t\r\n\t\tswitch(signatureAlgorithm.algorithmId)\r\n\t\t{\r\n\t\t\tcase \"1.2.840.10045.4.1\": // ecdsa-with-SHA1\r\n\t\t\tcase \"1.2.840.113549.1.1.5\":\r\n\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.2\": // ecdsa-with-SHA256\r\n\t\t\tcase \"1.2.840.113549.1.1.11\":\r\n\t\t\t\tresult = \"SHA-256\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.3\": // ecdsa-with-SHA384\r\n\t\t\tcase \"1.2.840.113549.1.1.12\":\r\n\t\t\t\tresult = \"SHA-384\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.10045.4.3.4\": // ecdsa-with-SHA512\r\n\t\t\tcase \"1.2.840.113549.1.1.13\":\r\n\t\t\t\tresult = \"SHA-512\";\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"1.2.840.113549.1.1.10\": // RSA-PSS\r\n\t\t\t\t{\r\n\t\t\t\t\ttry\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst params = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t\t\tif(\"hashAlgorithm\" in params)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tconst algorithm = this.getAlgorithmByOID(params.hashAlgorithm.algorithmId);\r\n\t\t\t\t\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\t\t\t\t\treturn \"\";\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\tresult = algorithm.name;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse\r\n\t\t\t\t\t\t\tresult = \"SHA-1\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcatch(ex)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Specialized function encrypting \"EncryptedContentInfo\" object using parameters\r\n\t * @param {Object} parameters\r\n\t * @returns {Promise}\r\n\t */\r\n\tencryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"contentEncryptionAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentEncryptionAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"hmacHashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hmacHashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"contentToEncrypt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToEncrypt\\\"\");\r\n\t\t\r\n\t\tif((\"contentType\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentType\\\"\");\r\n\r\n\t\tconst contentEncryptionOID = this.getOIDByAlgorithm(parameters.contentEncryptionAlgorithm);\r\n\t\tif(contentEncryptionOID === \"\")\r\n\t\t\treturn Promise.reject(\"Wrong \\\"contentEncryptionAlgorithm\\\" value\");\r\n\t\t\r\n\t\tconst pbkdf2OID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"PBKDF2\"\r\n\t\t});\r\n\t\tif(pbkdf2OID === \"\")\r\n\t\t\treturn Promise.reject(\"Can not find OID for PBKDF2\");\r\n\t\t\r\n\t\tconst hmacOID = this.getOIDByAlgorithm({\r\n\t\t\tname: \"HMAC\",\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t}\r\n\t\t});\r\n\t\tif(hmacOID === \"\")\r\n\t\t\treturn Promise.reject(`Incorrect value for \"hmacHashAlgorithm\": ${parameters.hmacHashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst ivBuffer = new ArrayBuffer(16); // For AES we need IV 16 bytes long\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\tthis.getRandomValues(ivView);\r\n\t\t\r\n\t\tconst saltBuffer = new ArrayBuffer(64);\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\tthis.getRandomValues(saltView);\r\n\t\t\r\n\t\tconst contentView = new Uint8Array(parameters.contentToEncrypt);\r\n\t\t\r\n\t\tconst pbkdf2Params = new PBKDF2Params({\r\n\t\t\tsalt: new asn1js.OctetString({ valueHex: saltBuffer }),\r\n\t\t\titerationCount: parameters.iterationCount,\r\n\t\t\tprf: new AlgorithmIdentifier({\r\n\t\t\t\talgorithmId: hmacOID,\r\n\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t})\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tconst passwordView = new Uint8Array(parameters.password);\r\n\t\t\t\r\n\t\t\treturn this.importKey(\"raw\",\r\n\t\t\t\tpasswordView,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: parameters.hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: parameters.iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tparameters.contentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"encrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Encrypt content\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.encrypt({\r\n\t\t\t\tname: parameters.contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentView),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store all parameters in EncryptedData object\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tconst pbes2Parameters = new PBES2Params({\r\n\t\t\t\tkeyDerivationFunc: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: pbkdf2OID,\r\n\t\t\t\t\talgorithmParams: pbkdf2Params.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptionScheme: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: contentEncryptionOID,\r\n\t\t\t\t\talgorithmParams: new asn1js.OctetString({ valueHex: ivBuffer })\r\n\t\t\t\t})\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\treturn new EncryptedContentInfo({\r\n\t\t\t\tcontentType: parameters.contentType,\r\n\t\t\t\tcontentEncryptionAlgorithm: new AlgorithmIdentifier({\r\n\t\t\t\t\talgorithmId: \"1.2.840.113549.1.5.13\", // pkcs5PBES2\r\n\t\t\t\t\talgorithmParams: pbes2Parameters.toSchema()\r\n\t\t\t\t}),\r\n\t\t\t\tencryptedContent: new asn1js.OctetString({ valueHex: result })\r\n\t\t\t});\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Decrypt data stored in \"EncryptedContentInfo\" object using parameters\r\n\t * @param parameters\r\n\t * @return {Promise}\r\n\t */\r\n\tdecryptEncryptedContentInfo(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"encryptedContentInfo\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"encryptedContentInfo\\\"\");\r\n\r\n\t\tif(parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId !== \"1.2.840.113549.1.5.13\") // pkcs5PBES2\r\n\t\t\treturn Promise.reject(`Unknown \"contentEncryptionAlgorithm\": ${parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tlet pbes2Parameters;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbes2Parameters = new PBES2Params({ schema: parameters.encryptedContentInfo.contentEncryptionAlgorithm.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbes2Parameters\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tlet pbkdf2Params;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\tpbkdf2Params = new PBKDF2Params({ schema: pbes2Parameters.keyDerivationFunc.algorithmParams });\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\treturn Promise.reject(\"Incorrectly encoded \\\"pbkdf2Params\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\tconst contentEncryptionAlgorithm = this.getAlgorithmByOID(pbes2Parameters.encryptionScheme.algorithmId);\r\n\t\tif((\"name\" in contentEncryptionAlgorithm) === false)\r\n\t\t\treturn Promise.reject(`Incorrect OID for \"contentEncryptionAlgorithm\": ${pbes2Parameters.encryptionScheme.algorithmId}`);\r\n\t\t\r\n\t\tconst ivBuffer = pbes2Parameters.encryptionScheme.algorithmParams.valueBlock.valueHex;\r\n\t\tconst ivView = new Uint8Array(ivBuffer);\r\n\t\t\r\n\t\tconst saltBuffer = pbkdf2Params.salt.valueBlock.valueHex;\r\n\t\tconst saltView = new Uint8Array(saltBuffer);\r\n\t\t\r\n\t\tconst iterationCount = pbkdf2Params.iterationCount;\r\n\t\t\r\n\t\tlet hmacHashAlgorithm = \"SHA-1\";\r\n\t\t\r\n\t\tif(\"prf\" in pbkdf2Params)\r\n\t\t{\r\n\t\t\tconst algorithm = this.getAlgorithmByOID(pbkdf2Params.prf.algorithmId);\r\n\t\t\tif((\"name\" in algorithm) === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect OID for HMAC hash algorithm\");\r\n\t\t\t\r\n\t\t\thmacHashAlgorithm = algorithm.hash.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive PBKDF2 key from \"password\" buffer\r\n\t\tsequence = sequence.then(() =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tparameters.password,\r\n\t\t\t\t\"PBKDF2\",\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"deriveKey\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Derive key for \"contentEncryptionAlgorithm\"\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.deriveKey({\r\n\t\t\t\tname: \"PBKDF2\",\r\n\t\t\t\thash: {\r\n\t\t\t\t\tname: hmacHashAlgorithm\r\n\t\t\t\t},\r\n\t\t\t\tsalt: saltView,\r\n\t\t\t\titerations: iterationCount\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tcontentEncryptionAlgorithm,\r\n\t\t\tfalse,\r\n\t\t\t[\"decrypt\"]),\r\n\t\terror =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrypt internal content using derived key\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\t//region Create correct data block for decryption\r\n\t\t\tlet dataBuffer = new ArrayBuffer(0);\r\n\t\t\t\r\n\t\t\tif(parameters.encryptedContentInfo.encryptedContent.idBlock.isConstructed === false)\r\n\t\t\t\tdataBuffer = parameters.encryptedContentInfo.encryptedContent.valueBlock.valueHex;\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tfor(const content of parameters.encryptedContentInfo.encryptedContent.valueBlock.value)\r\n\t\t\t\t\tdataBuffer = utilConcatBuf(dataBuffer, content.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.decrypt({\r\n\t\t\t\tname: contentEncryptionAlgorithm.name,\r\n\t\t\t\tiv: ivView\r\n\t\t\t},\r\n\t\t\tresult,\r\n\t\t\tdataBuffer);\r\n\t\t}, error =>\r\n\t\t\tPromise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Stamping (signing) data using algorithm simular to HMAC\r\n\t * @param {Object} parameters\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tstampDataWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToStamp\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToStamp\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\t\thmacAlgorithm,\r\n\t\t\t\t\tfalse,\r\n\t\t\t\t\t[\"sign\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.sign(hmacAlgorithm, result, new Uint8Array(parameters.contentToStamp)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyDataStampedWithPassword(parameters)\r\n\t{\r\n\t\t//region Check for input parameters\r\n\t\tif((parameters instanceof Object) === false)\r\n\t\t\treturn Promise.reject(\"Parameters must have type \\\"Object\\\"\");\r\n\t\t\r\n\t\tif((\"password\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"password\\\"\");\r\n\t\t\r\n\t\tif((\"hashAlgorithm\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"hashAlgorithm\\\"\");\r\n\t\t\r\n\t\tif((\"salt\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"iterationCount\\\"\");\r\n\t\t\r\n\t\tif((\"iterationCount\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"salt\\\"\");\r\n\t\t\r\n\t\tif((\"contentToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"contentToVerify\\\"\");\r\n\t\t\r\n\t\tif((\"signatureToVerify\" in parameters) === false)\r\n\t\t\treturn Promise.reject(\"Absent mandatory parameter \\\"signatureToVerify\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Choose correct length for HMAC key\r\n\t\tlet length;\r\n\t\t\r\n\t\tswitch(parameters.hashAlgorithm.toLowerCase())\r\n\t\t{\r\n\t\t\tcase \"sha-1\":\r\n\t\t\t\tlength = 160;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-256\":\r\n\t\t\t\tlength = 256;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-384\":\r\n\t\t\t\tlength = 384;\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"sha-512\":\r\n\t\t\t\tlength = 512;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Incorrect \"parameters.hashAlgorithm\" parameter: ${parameters.hashAlgorithm}`);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t\r\n\t\tconst hmacAlgorithm = {\r\n\t\t\tname: \"HMAC\",\r\n\t\t\tlength,\r\n\t\t\thash: {\r\n\t\t\t\tname: parameters.hashAlgorithm\r\n\t\t\t}\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create PKCS#12 key for integrity checking\r\n\t\tsequence = sequence.then(() => makePKCS12B2Key(this, parameters.hashAlgorithm, length, parameters.password, parameters.salt, parameters.iterationCount));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Import HMAC key\r\n\t\t// noinspection JSCheckFunctionSignatures\r\n\t\tsequence = sequence.then(result =>\r\n\t\t\tthis.importKey(\"raw\",\r\n\t\t\t\tnew Uint8Array(result),\r\n\t\t\t\thmacAlgorithm,\r\n\t\t\t\tfalse,\r\n\t\t\t\t[\"verify\"])\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make signed HMAC value\r\n\t\tsequence = sequence.then(\r\n\t\t\tresult =>\r\n\t\t\t\tthis.verify(hmacAlgorithm, result, new Uint8Array(parameters.signatureToVerify), new Uint8Array(parameters.contentToVerify)),\r\n\t\t\terror => Promise.reject(error)\r\n\t\t);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get signature parameters by analyzing private key algorithm\r\n\t * @param {Object} privateKey The private key user would like to use\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hash algorithm user would like to use\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tgetSignatureParameters(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Check hashing algorithm\r\n\t\tconst oid = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\tif(oid === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst signatureAlgorithm = new AlgorithmIdentifier();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm\r\n\t\tconst parameters = this.getAlgorithmParameters(privateKey.algorithm.name, \"sign\");\r\n\t\tparameters.algorithm.hash.name = hashAlgorithm;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Fill internal structures base on \"privateKey\" and \"hashAlgorithm\"\r\n\t\tswitch(privateKey.algorithm.name.toUpperCase())\r\n\t\t{\r\n\t\t\tcase \"RSASSA-PKCS1-V1_5\":\r\n\t\t\tcase \"ECDSA\":\r\n\t\t\t\tsignatureAlgorithm.algorithmId = this.getOIDByAlgorithm(parameters.algorithm);\r\n\t\t\t\tbreak;\r\n\t\t\tcase \"RSA-PSS\":\r\n\t\t\t\t{\r\n\t\t\t\t\t//region Set \"saltLength\" as a length (in octets) of hash function result\r\n\t\t\t\t\tswitch(hashAlgorithm.toUpperCase())\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tcase \"SHA-256\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 32;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-384\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 48;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase \"SHA-512\":\r\n\t\t\t\t\t\t\tparameters.algorithm.saltLength = 64;\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t}\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Fill \"RSASSA_PSS_params\" object\r\n\t\t\t\t\tconst paramsObject = {};\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(hashAlgorithm.toUpperCase() !== \"SHA-1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tconst hashAlgorithmOID = this.getOIDByAlgorithm({ name: hashAlgorithm });\r\n\t\t\t\t\t\tif(hashAlgorithmOID === \"\")\r\n\t\t\t\t\t\t\treturn Promise.reject(`Unsupported hash algorithm: ${hashAlgorithm}`);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.hashAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: hashAlgorithmOID,\r\n\t\t\t\t\t\t\talgorithmParams: new asn1js.Null()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tparamsObject.maskGenAlgorithm = new AlgorithmIdentifier({\r\n\t\t\t\t\t\t\talgorithmId: \"1.2.840.113549.1.1.8\", // MGF1\r\n\t\t\t\t\t\t\talgorithmParams: paramsObject.hashAlgorithm.toSchema()\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif(parameters.algorithm.saltLength !== 20)\r\n\t\t\t\t\t\tparamsObject.saltLength = parameters.algorithm.saltLength;\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst pssParameters = new RSASSAPSSParams(paramsObject);\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t\t\r\n\t\t\t\t\t//region Automatically set signature algorithm\r\n\t\t\t\t\tsignatureAlgorithm.algorithmId = \"1.2.840.113549.1.1.10\";\r\n\t\t\t\t\tsignatureAlgorithm.algorithmParams = pssParameters.toSchema();\r\n\t\t\t\t\t//endregion\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${privateKey.algorithm.name}`);\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\treturn Promise.resolve().then(() => ({\r\n\t\t\tsignatureAlgorithm,\r\n\t\t\tparameters\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Sign data with pre-defined private key\r\n\t * @param {ArrayBuffer} data Data to be signed\r\n\t * @param {Object} privateKey Private key to use\r\n\t * @param {Object} parameters Parameters for used algorithm\r\n\t * @return {Promise.<T>|Promise}\r\n\t */\r\n\tsignWithPrivateKey(data, privateKey, parameters)\r\n\t{\r\n\t\treturn this.sign(parameters.algorithm,\r\n\t\t\tprivateKey,\r\n\t\t\tnew Uint8Array(data))\r\n\t\t\t.then(result =>\r\n\t\t\t{\r\n\t\t\t\t//region Special case for ECDSA algorithm\r\n\t\t\t\tif(parameters.algorithm.name === \"ECDSA\")\r\n\t\t\t\t\tresult = createCMSECDSASignature(result);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\treturn result;\r\n\t\t\t}, error =>\r\n\t\t\t\tPromise.reject(`Signing error: ${error}`)\r\n\t\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tfillPublicKeyParameters(publicKeyInfo, signatureAlgorithm)\r\n\t{\r\n\t\tconst parameters = {};\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tconst shaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\tif(shaAlgorithm === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\tlet algorithmId;\r\n\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\telse\r\n\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\r\n\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\r\n\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\r\n\t\t//region Special case for ECDSA\r\n\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t{\r\n\t\t\t//region Get information about named curve\r\n\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\r\n\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t{\r\n\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t{\r\n\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\r\n\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn parameters;\r\n\t}\r\n\t//**********************************************************************************\r\n\tgetPublicKey(publicKeyInfo, signatureAlgorithm, parameters = null)\r\n\t{\r\n\t\tif(parameters === null)\r\n\t\t\tparameters = this.fillPublicKeyParameters(publicKeyInfo, signatureAlgorithm);\r\n\t\t\r\n\t\tconst publicKeyInfoSchema = publicKeyInfo.toSchema();\r\n\t\tconst publicKeyInfoBuffer = publicKeyInfoSchema.toBER(false);\r\n\t\tconst publicKeyInfoView = new Uint8Array(publicKeyInfoBuffer);\r\n\t\t\r\n\t\treturn this.importKey(\"spki\",\r\n\t\t\tpublicKeyInfoView,\r\n\t\t\tparameters.algorithm.algorithm,\r\n\t\t\ttrue,\r\n\t\t\tparameters.algorithm.usages\r\n\t\t);\r\n\t}\r\n\t//**********************************************************************************\r\n\tverifyWithPublicKey(data, signature, publicKeyInfo, signatureAlgorithm, shaAlgorithm = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find signer's hashing algorithm\r\n\t\tif(shaAlgorithm === null)\r\n\t\t{\r\n\t\t\tshaAlgorithm = this.getHashAlgorithm(signatureAlgorithm);\r\n\t\t\tif(shaAlgorithm === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported signature algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, signatureAlgorithm));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst parameters = {};\r\n\t\t\t\r\n\t\t\t//region Get information about public key algorithm and default parameters for import\r\n\t\t\tlet algorithmId;\r\n\t\t\tif(signatureAlgorithm.algorithmId === \"1.2.840.113549.1.1.10\")\r\n\t\t\t\talgorithmId = signatureAlgorithm.algorithmId;\r\n\t\t\telse\r\n\t\t\t\talgorithmId = publicKeyInfo.algorithm.algorithmId;\r\n\t\t\t\r\n\t\t\tconst algorithmObject = this.getAlgorithmByOID(algorithmId);\r\n\t\t\tif((\"name\" in algorithmObject) === \"\")\r\n\t\t\t\treturn Promise.reject(`Unsupported public key algorithm: ${signatureAlgorithm.algorithmId}`);\r\n\t\t\t\r\n\t\t\tparameters.algorithm = this.getAlgorithmParameters(algorithmObject.name, \"importkey\");\r\n\t\t\tif(\"hash\" in parameters.algorithm.algorithm)\r\n\t\t\t\tparameters.algorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA\r\n\t\t\tif(algorithmObject.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\t//region Get information about named curve\r\n\t\t\t\tlet algorithmParamsChecked = false;\r\n\t\t\t\t\r\n\t\t\t\tif((\"algorithmParams\" in publicKeyInfo.algorithm) === true)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(\"idBlock\" in publicKeyInfo.algorithm.algorithmParams)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tif((publicKeyInfo.algorithm.algorithmParams.idBlock.tagClass === 1) && (publicKeyInfo.algorithm.algorithmParams.idBlock.tagNumber === 6))\r\n\t\t\t\t\t\t\talgorithmParamsChecked = true;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(algorithmParamsChecked === false)\r\n\t\t\t\t\treturn Promise.reject(\"Incorrect type for ECDSA public key parameters\");\r\n\t\t\t\t\r\n\t\t\t\tconst curveObject = this.getAlgorithmByOID(publicKeyInfo.algorithm.algorithmParams.valueBlock.toString());\r\n\t\t\t\tif((\"name\" in curveObject) === false)\r\n\t\t\t\t\treturn Promise.reject(`Unsupported named curve algorithm: ${publicKeyInfo.algorithm.algorithmParams.valueBlock.toString()}`);\r\n\t\t\t\t//endregion\r\n\t\t\t\t\r\n\t\t\t\tparameters.algorithm.algorithm.namedCurve = curveObject.name;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t//endregion\r\n\r\n\t\t\t//region Import public key\r\n\t\t\tsequence = sequence.then(() =>\r\n\t\t\t\tthis.getPublicKey(publicKeyInfo, null, parameters));\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Verify signature\r\n\t\tsequence = sequence.then(publicKey =>\r\n\t\t{\r\n\t\t\t//region Get default algorithm parameters for verification\r\n\t\t\tconst algorithm = this.getAlgorithmParameters(publicKey.algorithm.name, \"verify\");\r\n\t\t\tif(\"hash\" in algorithm.algorithm)\r\n\t\t\t\talgorithm.algorithm.hash.name = shaAlgorithm;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for ECDSA signatures\r\n\t\t\tlet signatureValue = signature.valueBlock.valueHex;\r\n\t\t\t\r\n\t\t\tif(publicKey.algorithm.name === \"ECDSA\")\r\n\t\t\t{\r\n\t\t\t\tconst asn1 = asn1js.fromBER(signatureValue);\r\n\t\t\t\t// noinspection JSCheckFunctionSignatures\r\n\t\t\t\tsignatureValue = createECDSASignatureFromCMS(asn1.result);\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Special case for RSA-PSS\r\n\t\t\tif(publicKey.algorithm.name === \"RSA-PSS\")\r\n\t\t\t{\r\n\t\t\t\tlet pssParameters;\r\n\t\t\t\t\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tpssParameters = new RSASSAPSSParams({ schema: signatureAlgorithm.algorithmParams });\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\treturn Promise.reject(ex);\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(\"saltLength\" in pssParameters)\r\n\t\t\t\t\talgorithm.algorithm.saltLength = pssParameters.saltLength;\r\n\t\t\t\telse\r\n\t\t\t\t\talgorithm.algorithm.saltLength = 20;\r\n\t\t\t\t\r\n\t\t\t\tlet hashAlgo = \"SHA-1\";\r\n\t\t\t\t\r\n\t\t\t\tif(\"hashAlgorithm\" in pssParameters)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst hashAlgorithm = this.getAlgorithmByOID(pssParameters.hashAlgorithm.algorithmId);\r\n\t\t\t\t\tif((\"name\" in hashAlgorithm) === false)\r\n\t\t\t\t\t\treturn Promise.reject(`Unrecognized hash algorithm: ${pssParameters.hashAlgorithm.algorithmId}`);\r\n\t\t\t\t\t\r\n\t\t\t\t\thashAlgo = hashAlgorithm.name;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\talgorithm.algorithm.hash.name = hashAlgo;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\treturn this.verify(algorithm.algorithm,\r\n\t\t\t\tpublicKey,\r\n\t\t\t\tnew Uint8Array(signatureValue),\r\n\t\t\t\tnew Uint8Array(data)\r\n\t\t\t);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { utilConcatBuf } from \"pvutils\";\r\nimport CryptoEngine from \"./CryptoEngine.js\";\r\n//**************************************************************************************\r\n//region Crypto engine related function\r\n//**************************************************************************************\r\nlet engine = {\r\n\tname: \"none\",\r\n\tcrypto: null,\r\n\tsubtle: null\r\n};\r\n//**************************************************************************************\r\nexport function setEngine(name, crypto, subtle)\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\t// noinspection ES6ModulesDependencies, JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid] === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid] = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid] !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid} already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tif(typeof global[process.pid].pkijs === \"undefined\")\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tglobal[process.pid].pkijs = {};\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tif(typeof global[process.pid].pkijs !== \"object\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t\tthrow new Error(`Name global.${process.pid}.pkijs already exists and it is not an object`);\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tglobal[process.pid].pkijs.engine = {\r\n\t\t\tname: name,\r\n\t\t\tcrypto: crypto,\r\n\t\t\tsubtle: subtle\r\n\t\t};\r\n\t}\r\n\t//endregion\r\n\t//region We are in browser\r\n\telse\r\n\t{\r\n\t\tif(engine.name !== name)\r\n\t\t{\r\n\t\t\tengine = {\r\n\t\t\t\tname: name,\r\n\t\t\t\tcrypto: crypto,\r\n\t\t\t\tsubtle: subtle\r\n\t\t\t};\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\nexport function getEngine()\r\n{\r\n\t//region We are in Node\r\n\t// noinspection JSUnresolvedVariable\r\n\tif((typeof process !== \"undefined\") && (\"pid\" in process) && (typeof global !== \"undefined\") && (typeof window === \"undefined\"))\r\n\t{\r\n\t\tlet _engine;\r\n\t\t\r\n\t\ttry\r\n\t\t{\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\t_engine = global[process.pid].pkijs.engine;\r\n\t\t}\r\n\t\tcatch(ex)\r\n\t\t{\r\n\t\t\tthrow new Error(\"Please call \\\"setEngine\\\" before call to \\\"getEngine\\\"\");\r\n\t\t}\r\n\t\t\r\n\t\treturn _engine;\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn engine;\r\n}\r\n//**************************************************************************************\r\n(function initCryptoEngine()\r\n{\r\n\tif(typeof self !== \"undefined\")\r\n\t{\r\n\t\tif(\"crypto\" in self)\r\n\t\t{\r\n\t\t\tlet engineName = \"webcrypto\";\r\n\t\t\t\r\n\t\t\t/**\r\n\t\t\t * Standard crypto object\r\n\t\t\t * @type {Object}\r\n\t\t\t * @property {Object} [webkitSubtle] Subtle object from Apple\r\n\t\t\t */\r\n\t\t\tconst cryptoObject = self.crypto;\r\n\t\t\tlet subtleObject;\r\n\t\t\t\r\n\t\t\t// Apple Safari support\r\n\t\t\tif(\"webkitSubtle\" in self.crypto)\r\n\t\t\t{\r\n\t\t\t\ttry\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.webkitSubtle;\r\n\t\t\t\t}\r\n\t\t\t\tcatch(ex)\r\n\t\t\t\t{\r\n\t\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tengineName = \"safari\";\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(\"subtle\" in self.crypto)\r\n\t\t\t\tsubtleObject = self.crypto.subtle;\r\n\r\n\r\n\t\t\tif(typeof subtleObject === \"undefined\")\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: null\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tengine = {\r\n\t\t\t\t\tname: engineName,\r\n\t\t\t\t\tcrypto: cryptoObject,\r\n\t\t\t\t\tsubtle: new CryptoEngine({name: engineName, crypto: self.crypto, subtle: subtleObject})\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n\tsetEngine(engine.name, engine.crypto, engine.subtle);\r\n})();\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n//region Declaration of common functions\r\n//**************************************************************************************\r\n/**\r\n * Get crypto subtle from current \"crypto engine\" or \"undefined\"\r\n * @returns {({decrypt, deriveKey, digest, encrypt, exportKey, generateKey, importKey, sign, unwrapKey, verify, wrapKey}|null)}\r\n */\r\nexport function getCrypto()\r\n{\r\n\tconst _engine = getEngine();\r\n\t\r\n\tif(_engine.subtle !== null)\r\n\t\treturn _engine.subtle;\r\n\t\r\n\treturn undefined;\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Initialize input Uint8Array by random values (with help from current \"crypto engine\")\r\n * @param {!Uint8Array} view\r\n * @returns {*}\r\n */\r\nexport function getRandomValues(view)\r\n{\r\n\treturn getEngine().subtle.getRandomValues(view);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get OID for each specific algorithm\r\n * @param {Object} algorithm\r\n * @returns {string}\r\n */\r\nexport function getOIDByAlgorithm(algorithm)\r\n{\r\n\treturn getEngine().subtle.getOIDByAlgorithm(algorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get default algorithm parameters for each kind of operation\r\n * @param {string} algorithmName Algorithm name to get common parameters for\r\n * @param {string} operation Kind of operation: \"sign\", \"encrypt\", \"generatekey\", \"importkey\", \"exportkey\", \"verify\"\r\n * @returns {*}\r\n */\r\nexport function getAlgorithmParameters(algorithmName, operation)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmParameters(algorithmName, operation);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create CMS ECDSA signature from WebCrypto ECDSA signature\r\n * @param {ArrayBuffer} signatureBuffer WebCrypto result of \"sign\" function\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createCMSECDSASignature(signatureBuffer)\r\n{\r\n\t//region Initial check for correct length\r\n\tif((signatureBuffer.byteLength % 2) !== 0)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst length = signatureBuffer.byteLength / 2; // There are two equal parts inside incoming ArrayBuffer\r\n\t\r\n\tconst rBuffer = new ArrayBuffer(length);\r\n\tconst rView = new Uint8Array(rBuffer);\r\n\trView.set(new Uint8Array(signatureBuffer, 0, length));\r\n\t\r\n\tconst rInteger = new asn1js.Integer({ valueHex: rBuffer });\r\n\t\r\n\tconst sBuffer = new ArrayBuffer(length);\r\n\tconst sView = new Uint8Array(sBuffer);\r\n\tsView.set(new Uint8Array(signatureBuffer, length, length));\r\n\t\r\n\tconst sInteger = new asn1js.Integer({ valueHex: sBuffer });\r\n\t//endregion\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tvalue: [\r\n\t\t\trInteger.convertToDER(),\r\n\t\t\tsInteger.convertToDER()\r\n\t\t]\r\n\t})).toBER(false);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * String preparation function. In a future here will be realization of algorithm from RFC4518\r\n * @param {string} inputString JavaScript string. As soon as for each ASN.1 string type we have a specific transformation function here we will work with pure JavaScript string\r\n * @returns {string} Formated string\r\n */\r\nexport function stringPrep(inputString)\r\n{\r\n\t//region Initial variables\r\n\tlet isSpace = false;\r\n\tlet cuttedResult = \"\";\r\n\t//endregion\r\n\t\r\n\tconst result = inputString.trim(); // Trim input string\r\n\t\r\n\t//region Change all sequence of SPACE down to SPACE char\r\n\tfor(let i = 0; i < result.length; i++)\r\n\t{\r\n\t\tif(result.charCodeAt(i) === 32)\r\n\t\t{\r\n\t\t\tif(isSpace === false)\r\n\t\t\t\tisSpace = true;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(isSpace)\r\n\t\t\t{\r\n\t\t\t\tcuttedResult += \" \";\r\n\t\t\t\tisSpace = false;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcuttedResult += result[i];\r\n\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn cuttedResult.toLowerCase();\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Create a single ArrayBuffer from CMS ECDSA signature\r\n * @param {Sequence} cmsSignature ASN.1 SEQUENCE contains CMS ECDSA signature\r\n * @returns {ArrayBuffer}\r\n */\r\nexport function createECDSASignatureFromCMS(cmsSignature)\r\n{\r\n\t//region Check input variables\r\n\tif((cmsSignature instanceof asn1js.Sequence) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif(cmsSignature.valueBlock.value.length !== 2)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[0] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t\r\n\tif((cmsSignature.valueBlock.value[1] instanceof asn1js.Integer) === false)\r\n\t\treturn new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\tconst rValue = cmsSignature.valueBlock.value[0].convertFromDER();\r\n\tconst sValue = cmsSignature.valueBlock.value[1].convertFromDER();\r\n\t\r\n\t//region Check the lengths of two parts are equal\r\n\tswitch(true)\r\n\t{\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength < sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((sValue.valueBlock.valueHex.byteLength - rValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = sValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValue.valueBlock.valueHex);\r\n\t\t\t}\r\n\t\tcase (rValue.valueBlock.valueHex.byteLength > sValue.valueBlock.valueHex.byteLength):\r\n\t\t\t{\r\n\t\t\t\tif((rValue.valueBlock.valueHex.byteLength - sValue.valueBlock.valueHex.byteLength) !== 1)\r\n\t\t\t\t\tthrow new Error(\"Incorrect DER integer decoding\");\r\n\t\t\t\t\r\n\t\t\t\tconst correctedLength = rValue.valueBlock.valueHex.byteLength;\r\n\t\t\t\t\r\n\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\r\n\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\r\n\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\r\n\t\t\t\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValueBufferCorrected);\r\n\t\t\t}\r\n\t\tdefault:\r\n\t\t\t{\r\n\t\t\t\t//region In case we have equal length and the length is not even with 2\r\n\t\t\t\tif(rValue.valueBlock.valueHex.byteLength % 2)\r\n\t\t\t\t{\r\n\t\t\t\t\tconst correctedLength = (rValue.valueBlock.valueHex.byteLength + 1);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueView = new Uint8Array(rValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst rValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst rValueViewCorrected = new Uint8Array(rValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\trValueViewCorrected.set(rValueView, 1);\r\n\t\t\t\t\trValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueView = new Uint8Array(sValue.valueBlock.valueHex);\r\n\t\t\t\t\t\r\n\t\t\t\t\tconst sValueBufferCorrected = new ArrayBuffer(correctedLength);\r\n\t\t\t\t\tconst sValueViewCorrected = new Uint8Array(sValueBufferCorrected);\r\n\t\t\t\t\t\r\n\t\t\t\t\tsValueViewCorrected.set(sValueView, 1);\r\n\t\t\t\t\tsValueViewCorrected[0] = 0x00; // In order to be sure we do not have any garbage here\r\n\t\t\t\t\t\r\n\t\t\t\t\treturn utilConcatBuf(rValueBufferCorrected, sValueBufferCorrected);\r\n\t\t\t\t}\r\n\t\t\t\t//endregion\r\n\t\t\t}\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn utilConcatBuf(rValue.valueBlock.valueHex, sValue.valueBlock.valueHex);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Get WebCrypto algorithm by wel-known OID\r\n * @param {string} oid well-known OID to search for\r\n * @returns {Object}\r\n */\r\nexport function getAlgorithmByOID(oid)\r\n{\r\n\treturn getEngine().subtle.getAlgorithmByOID(oid);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Getting hash algorithm by signature algorithm\r\n * @param {AlgorithmIdentifier} signatureAlgorithm Signature algorithm\r\n * @returns {string}\r\n */\r\nexport function getHashAlgorithm(signatureAlgorithm)\r\n{\r\n\treturn getEngine().subtle.getHashAlgorithm(signatureAlgorithm);\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function having a \"Counter\" as a parameter\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} Counter\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdfWithCounter(hashFunction, Zbuffer, Counter, SharedInfo)\r\n{\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\tcase \"SHA-256\":\r\n\t\tcase \"SHA-384\":\r\n\t\tcase \"SHA-512\":\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Counter > 255)\r\n\t\treturn Promise.reject(\"Please set \\\"Counter\\\" variable to value less or equal to 255\");\r\n\t//endregion\r\n\t\r\n\t//region Initial variables\r\n\tconst counterBuffer = new ArrayBuffer(4);\r\n\tconst counterView = new Uint8Array(counterBuffer);\r\n\tcounterView[0] = 0x00;\r\n\tcounterView[1] = 0x00;\r\n\tcounterView[2] = 0x00;\r\n\tcounterView[3] = Counter;\r\n\t\r\n\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t//endregion\r\n\t\r\n\t//region Get a \"crypto\" extension\r\n\tconst crypto = getCrypto();\r\n\tif(typeof crypto === \"undefined\")\r\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t//endregion\r\n\t\r\n\t//region Create a combined ArrayBuffer for digesting\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, Zbuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, counterBuffer);\r\n\tcombinedBuffer = utilConcatBuf(combinedBuffer, SharedInfo);\r\n\t//endregion\r\n\t\r\n\t//region Return digest of combined ArrayBuffer and information about current counter\r\n\treturn crypto.digest({\r\n\t\tname: hashFunction\r\n\t},\r\n\tcombinedBuffer)\r\n\t\t.then(result =>\r\n\t\t\t({\r\n\t\t\t\tcounter: Counter,\r\n\t\t\t\tresult\r\n\t\t\t}));\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n/**\r\n * ANS X9.63 Key Derivation Function\r\n * @param {string} hashFunction Used hash function\r\n * @param {ArrayBuffer} Zbuffer ArrayBuffer containing ECDH shared secret to derive from\r\n * @param {number} keydatalen Length (!!! in BITS !!!) of used kew derivation function\r\n * @param {ArrayBuffer} SharedInfo Usually DER encoded \"ECC_CMS_SharedInfo\" structure\r\n */\r\nexport function kdf(hashFunction, Zbuffer, keydatalen, SharedInfo)\r\n{\r\n\t//region Initial variables\r\n\tlet hashLength = 0;\r\n\tlet maxCounter = 1;\r\n\t\r\n\tconst kdfArray = [];\r\n\t//endregion\r\n\t\r\n\t//region Check of input parameters\r\n\tswitch(hashFunction.toUpperCase())\r\n\t{\r\n\t\tcase \"SHA-1\":\r\n\t\t\thashLength = 160; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-256\":\r\n\t\t\thashLength = 256; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-384\":\r\n\t\t\thashLength = 384; // In bits\r\n\t\t\tbreak;\r\n\t\tcase \"SHA-512\":\r\n\t\t\thashLength = 512; // In bits\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\treturn Promise.reject(`Unknown hash function: ${hashFunction}`);\r\n\t}\r\n\t\r\n\tif((Zbuffer instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"Zbuffer\\\" as \\\"ArrayBuffer\\\"\");\r\n\t\r\n\tif(Zbuffer.byteLength === 0)\r\n\t\treturn Promise.reject(\"\\\"Zbuffer\\\" has zero length, error\");\r\n\t\r\n\tif((SharedInfo instanceof ArrayBuffer) === false)\r\n\t\treturn Promise.reject(\"Please set \\\"SharedInfo\\\" as \\\"ArrayBuffer\\\"\");\r\n\t//endregion\r\n\t\r\n\t//region Calculated maximum value of \"Counter\" variable\r\n\tconst quotient = keydatalen / hashLength;\r\n\t\r\n\tif(Math.floor(quotient) > 0)\r\n\t{\r\n\t\tmaxCounter = Math.floor(quotient);\r\n\t\t\r\n\t\tif((quotient - maxCounter) > 0)\r\n\t\t\tmaxCounter++;\r\n\t}\r\n\t//endregion\r\n\t\r\n\t//region Create an array of \"kdfWithCounter\"\r\n\tfor(let i = 1; i <= maxCounter; i++)\r\n\t\tkdfArray.push(kdfWithCounter(hashFunction, Zbuffer, i, SharedInfo));\r\n\t//endregion\r\n\t\r\n\t//region Return combined digest with specified length\r\n\treturn Promise.all(kdfArray).then(incomingResult =>\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet combinedBuffer = new ArrayBuffer(0);\r\n\t\tlet currentCounter = 1;\r\n\t\tlet found = true;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine all buffer together\r\n\t\twhile(found)\r\n\t\t{\r\n\t\t\tfound = false;\r\n\t\t\t\r\n\t\t\tfor(const result of incomingResult)\r\n\t\t\t{\r\n\t\t\t\tif(result.counter === currentCounter)\r\n\t\t\t\t{\r\n\t\t\t\t\tcombinedBuffer = utilConcatBuf(combinedBuffer, result.result);\r\n\t\t\t\t\tfound = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tcurrentCounter++;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create output buffer with specified length\r\n\t\tkeydatalen >>= 3; // Divide by 8 since \"keydatalen\" is in bits\r\n\t\t\r\n\t\tif(combinedBuffer.byteLength > keydatalen)\r\n\t\t{\r\n\t\t\tconst newBuffer = new ArrayBuffer(keydatalen);\r\n\t\t\tconst newView = new Uint8Array(newBuffer);\r\n\t\t\tconst combinedView = new Uint8Array(combinedBuffer);\r\n\t\t\t\r\n\t\t\tfor(let i = 0; i < keydatalen; i++)\r\n\t\t\t\tnewView[i] = combinedView[i];\r\n\t\t\t\r\n\t\t\treturn newBuffer;\r\n\t\t}\r\n\t\t\r\n\t\treturn combinedBuffer; // Since the situation when \"combinedBuffer.byteLength < keydatalen\" here we have only \"combinedBuffer.byteLength === keydatalen\"\r\n\t\t//endregion\r\n\t});\r\n\t//endregion\r\n}\r\n//**************************************************************************************\r\n//endregion\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport { stringPrep } from \"./common.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AttributeTypeAndValue\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AttributeTypeAndValue class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", AttributeTypeAndValue.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc Value of the AttributeTypeAndValue class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", AttributeTypeAndValue.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn {};\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AttributeTypeAndValue class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AttributeTypeAndValue ::= Sequence {\r\n\t *    type     AttributeType,\r\n\t *    value    AttributeValue }\r\n\t *\r\n\t * AttributeType ::= OBJECT IDENTIFIER\r\n\t *\r\n\t * AttributeValue ::= ANY -- DEFINED BY AttributeType\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [type] Name for \"type\" element\r\n\t\t * @property {string} [value] Name for \"value\" element\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.type || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.value || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\tstatic blockName()\r\n\t{\r\n\t\treturn \"AttributeTypeAndValue\";\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"type\",\r\n\t\t\t\"typeValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAttributeTypeAndValue.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttype: \"type\",\r\n\t\t\t\t\tvalue: \"typeValue\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AttributeTypeAndValue\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.type = asn1.result.type.valueBlock.toString();\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.value = asn1.result.typeValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.type }),\r\n\t\t\t\tthis.value\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst _object = {\r\n\t\t\ttype: this.type\r\n\t\t};\r\n\r\n\t\tif(Object.keys(this.value).length !== 0)\r\n\t\t\t_object.value = this.value.toJSON();\r\n\t\telse\r\n\t\t\t_object.value = this.value;\r\n\r\n\t\treturn _object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two AttributeTypeAndValue values, or AttributeTypeAndValue with ArrayBuffer value\r\n\t * @param {(AttributeTypeAndValue|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tconst stringBlockNames = [\r\n\t\t\tasn1js.Utf8String.blockName(),\r\n\t\t\tasn1js.BmpString.blockName(),\r\n\t\t\tasn1js.UniversalString.blockName(),\r\n\t\t\tasn1js.NumericString.blockName(),\r\n\t\t\tasn1js.PrintableString.blockName(),\r\n\t\t\tasn1js.TeletexString.blockName(),\r\n\t\t\tasn1js.VideotexString.blockName(),\r\n\t\t\tasn1js.IA5String.blockName(),\r\n\t\t\tasn1js.GraphicString.blockName(),\r\n\t\t\tasn1js.VisibleString.blockName(),\r\n\t\t\tasn1js.GeneralString.blockName(),\r\n\t\t\tasn1js.CharacterString.blockName()\r\n\t\t];\r\n\r\n\t\tif(compareTo.constructor.blockName() === AttributeTypeAndValue.blockName())\r\n\t\t{\r\n\t\t\tif(this.type !== compareTo.type)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t//region Check we do have both strings\r\n\t\t\tlet isString = [false, false];\r\n\t\t\tconst thisName = this.value.constructor.blockName();\r\n\t\t\tfor(const name of stringBlockNames)\r\n\t\t\t{\r\n\t\t\t\tif(thisName === name)\r\n\t\t\t\t{\r\n\t\t\t\t\tisString[0] = true;\r\n\t\t\t\t}\r\n\t\t\t\tif(compareTo.value.constructor.blockName() === name)\r\n\t\t\t\t{\r\n\t\t\t\t\tisString[1] = true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(isString[0] ^ isString[1])\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tisString = (isString[0] && isString[1]);\r\n\t\t\t//endregion\r\n\r\n\t\t\tif(isString)\r\n\t\t\t{\r\n\t\t\t\tconst value1 = stringPrep(this.value.valueBlock.value);\r\n\t\t\t\tconst value2 = stringPrep(compareTo.value.valueBlock.value);\r\n\r\n\t\t\t\tif(value1.localeCompare(value2) !== 0)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\telse // Comparing as two ArrayBuffers\r\n\t\t\t{\r\n\t\t\t\tif(isEqualBuffer(this.value.valueBeforeDecode, compareTo.value.valueBeforeDecode) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.value.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, isEqualBuffer, clearProps } from \"pvutils\";\r\nimport AttributeTypeAndValue from \"./AttributeTypeAndValue.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class RelativeDistinguishedNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for RelativeDistinguishedNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Array.<AttributeTypeAndValue>} [typesAndValues] Array of \"type and value\" objects\r\n\t * @property {ArrayBuffer} [valueBeforeDecode] Value of the RDN before decoding from schema\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AttributeTypeAndValue>}\r\n\t\t * @desc Array of \"type and value\" objects\r\n\t\t */\r\n\t\tthis.typesAndValues = getParametersValue(parameters, \"typesAndValues\", RelativeDistinguishedNames.defaultValues(\"typesAndValues\"));\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc Value of the RDN before decoding from schema\r\n\t\t */\r\n\t\tthis.valueBeforeDecode = getParametersValue(parameters, \"valueBeforeDecode\", RelativeDistinguishedNames.defaultValues(\"valueBeforeDecode\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare values with default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t * @param {*} memberValue Value to compare with default value\r\n\t */\r\n\tstatic compareWithDefault(memberName, memberValue)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"typesAndValues\":\r\n\t\t\t\treturn (memberValue.length === 0);\r\n\t\t\tcase \"valueBeforeDecode\":\r\n\t\t\t\treturn (memberValue.byteLength === 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for RelativeDistinguishedNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * RDNSequence ::= Sequence OF RelativeDistinguishedName\r\n\t *\r\n\t * RelativeDistinguishedName ::=\r\n\t * SET SIZE (1..MAX) OF AttributeTypeAndValue\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName] Name for entire block\r\n\t\t * @property {string} [repeatedSequence] Name for \"repeatedSequence\" block\r\n\t\t * @property {string} [repeatedSet] Name for \"repeatedSet\" block\r\n\t\t * @property {string} [typeAndValue] Name for \"typeAndValue\" block\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.repeatedSequence || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.Set({\r\n\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\tname: (names.repeatedSet || \"\"),\r\n\t\t\t\t\t\t\t\tvalue: AttributeTypeAndValue.schema(names.typeAndValue || {})\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t]\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"RDN\",\r\n\t\t\t\"typesAndValues\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tRelativeDistinguishedNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"RDN\",\r\n\t\t\t\t\trepeatedSet: \"typesAndValues\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for RelativeDistinguishedNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"typesAndValues\" in asn1.result) // Could be a case when there is no \"types and values\"\r\n\t\t\tthis.typesAndValues = Array.from(asn1.result.typesAndValues, element => new AttributeTypeAndValue({ schema: element }));\r\n\r\n\t\t// noinspection JSUnresolvedVariable\r\n\t\tthis.valueBeforeDecode = asn1.result.RDN.valueBeforeDecode;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Decode stored TBS value\r\n\t\tif(this.valueBeforeDecode.byteLength === 0) // No stored encoded array, create \"from scratch\"\r\n\t\t{\r\n\t\t\treturn (new asn1js.Sequence({\r\n\t\t\t\tvalue: [new asn1js.Set({\r\n\t\t\t\t\tvalue: Array.from(this.typesAndValues, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\r\n\t\tconst asn1 = asn1js.fromBER(this.valueBeforeDecode);\r\n\t\t//endregion\r\n\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn asn1.result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttypesAndValues: Array.from(this.typesAndValues, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Compare two RDN values, or RDN with ArrayBuffer value\r\n\t * @param {(RelativeDistinguishedNames|ArrayBuffer)} compareTo The value compare to current\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(compareTo)\r\n\t{\r\n\t\tif(compareTo instanceof RelativeDistinguishedNames)\r\n\t\t{\r\n\t\t\tif(this.typesAndValues.length !== compareTo.typesAndValues.length)\r\n\t\t\t\treturn false;\r\n\r\n\t\t\tfor(const [index, typeAndValue] of this.typesAndValues.entries())\r\n\t\t\t{\r\n\t\t\t\tif(typeAndValue.isEqual(compareTo.typesAndValues[index]) === false)\r\n\t\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\tif(compareTo instanceof ArrayBuffer)\r\n\t\t\treturn isEqualBuffer(this.valueBeforeDecode, compareTo);\r\n\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Time\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Time class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {number} [type] 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t * @property {Date} [value] Value of the TIME class\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc 0 - UTCTime; 1 - GeneralizedTime; 2 - empty value\r\n\t\t */\r\n\t\tthis.type = getParametersValue(parameters, \"type\", Time.defaultValues(\"type\"));\r\n\t\t/**\r\n\t\t * @type {Date}\r\n\t\t * @desc Value of the TIME class\r\n\t\t */\r\n\t\tthis.value = getParametersValue(parameters, \"value\", Time.defaultValues(\"value\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"type\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"value\":\r\n\t\t\t\treturn new Date(0, 0, 0);\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Time class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Time ::= CHOICE {\r\n     *   utcTime        UTCTime,\r\n     *   generalTime    GeneralizedTime }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Choice({\r\n\t\t\toptional,\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.UTCTime({ name: (names.utcTimeName || \"\") }),\r\n\t\t\t\tnew asn1js.GeneralizedTime({ name: (names.generalTimeName || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"utcTimeName\",\r\n\t\t\t\"generalTimeName\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema, schema, Time.schema({\r\n\t\t\tnames: {\r\n\t\t\t\tutcTimeName: \"utcTimeName\",\r\n\t\t\t\tgeneralTimeName: \"generalTimeName\"\r\n\t\t\t}\r\n\t\t}));\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Time\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"utcTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 0;\r\n\t\t\tthis.value = asn1.result.utcTimeName.toDate();\r\n\t\t}\r\n\t\tif(\"generalTimeName\" in asn1.result)\r\n\t\t{\r\n\t\t\tthis.type = 1;\r\n\t\t\tthis.value = asn1.result.generalTimeName.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\tlet result = {};\r\n\r\n\t\tif(this.type === 0)\r\n\t\t\tresult = new asn1js.UTCTime({ valueDate: this.value });\r\n\t\tif(this.type === 1)\r\n\t\t\tresult = new asn1js.GeneralizedTime({ valueDate: this.value });\r\n\r\n\t\treturn result;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\ttype: this.type,\r\n\t\t\tvalue: this.value\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Attribute from \"./Attribute.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class SubjectDirectoryAttributes\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for SubjectDirectoryAttributes class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Attribute>}\r\n\t\t * @desc attributes\r\n\t\t */\r\n\t\tthis.attributes = getParametersValue(parameters, \"attributes\", SubjectDirectoryAttributes.defaultValues(\"attributes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"attributes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for SubjectDirectoryAttributes class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * SubjectDirectoryAttributes ::= SEQUENCE SIZE (1..MAX) OF Attribute\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.attributes || \"\"),\r\n\t\t\t\t\tvalue: Attribute.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"attributes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tSubjectDirectoryAttributes.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tattributes: \"attributes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SubjectDirectoryAttributes\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.attributes = Array.from(asn1.result.attributes, element => new Attribute({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.attributes, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tattributes: Array.from(this.attributes, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PrivateKeyUsagePeriod\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PrivateKeyUsagePeriod class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"notBefore\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc notBefore\r\n\t\t\t */\r\n\t\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", PrivateKeyUsagePeriod.defaultValues(\"notBefore\"));\r\n\r\n\t\tif(\"notAfter\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Date}\r\n\t\t\t * @desc notAfter\r\n\t\t\t */\r\n\t\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", PrivateKeyUsagePeriod.defaultValues(\"notAfter\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Date();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PrivateKeyUsagePeriod class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PrivateKeyUsagePeriod OID ::= 2.5.29.16\r\n\t *\r\n\t * PrivateKeyUsagePeriod ::= SEQUENCE {\r\n\t *    notBefore       [0]     GeneralizedTime OPTIONAL,\r\n\t *    notAfter        [1]     GeneralizedTime OPTIONAL }\r\n\t * -- either notBefore or notAfter MUST be present\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [notBefore]\r\n\t\t * @property {string} [notAfter]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.notBefore || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.notAfter || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"notBefore\",\r\n\t\t\t\"notAfter\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPrivateKeyUsagePeriod.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tnotBefore: \"notBefore\",\r\n\t\t\t\t\tnotAfter: \"notAfter\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PrivateKeyUsagePeriod\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"notBefore\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst localNotBefore = new asn1js.GeneralizedTime();\r\n\t\t\tlocalNotBefore.fromBuffer(asn1.result.notBefore.valueBlock.valueHex);\r\n\t\t\tthis.notBefore = localNotBefore.toDate();\r\n\t\t}\r\n\r\n\t\tif(\"notAfter\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst localNotAfter = new asn1js.GeneralizedTime({ valueHex: asn1.result.notAfter.valueBlock.valueHex });\r\n\t\t\tlocalNotAfter.fromBuffer(asn1.result.notAfter.valueBlock.valueHex);\r\n\t\t\tthis.notAfter = localNotAfter.toDate();\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"notBefore\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: (new asn1js.GeneralizedTime({ valueDate: this.notBefore })).valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"notAfter\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: (new asn1js.GeneralizedTime({ valueDate: this.notAfter })).valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"notBefore\" in this)\r\n\t\t\tobject.notBefore = this.notBefore;\r\n\r\n\t\tif(\"notAfter\" in this)\r\n\t\t\tobject.notAfter = this.notAfter;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\n//**************************************************************************************\n//region Additional asn1js schema elements existing inside GeneralName schema\n//**************************************************************************************\n/**\n * Schema for \"builtInStandardAttributes\" of \"ORAddress\"\n * @param {Object} parameters\n * @property {Object} [names]\n * @param {boolean} optional\n * @returns {Sequence}\n */\nfunction builtInStandardAttributes(parameters = {}, optional = false)\n{\n\t//builtInStandardAttributes ::= Sequence {\n\t//    country-name                  CountryName OPTIONAL,\n\t//    administration-domain-name    AdministrationDomainName OPTIONAL,\n\t//    network-address           [0] IMPLICIT NetworkAddress OPTIONAL,\n\t//    terminal-identifier       [1] IMPLICIT TerminalIdentifier OPTIONAL,\n\t//    private-domain-name       [2] PrivateDomainName OPTIONAL,\n\t//    organization-name         [3] IMPLICIT OrganizationName OPTIONAL,\n\t//    numeric-user-identifier   [4] IMPLICIT NumericUserIdentifier OPTIONAL,\n\t//    personal-name             [5] IMPLICIT PersonalName OPTIONAL,\n\t//    organizational-unit-names [6] IMPLICIT OrganizationalUnitNames OPTIONAL }\n\n\t/**\n\t * @type {Object}\n\t * @property {string} [country_name]\n\t * @property {string} [administration_domain_name]\n\t * @property {string} [network_address]\n\t * @property {string} [terminal_identifier]\n\t * @property {string} [private_domain_name]\n\t * @property {string} [organization_name]\n\t * @property {string} [numeric_user_identifier]\n\t * @property {string} [personal_name]\n\t * @property {string} [organizational_unit_names]\n\t */\n\tconst names = getParametersValue(parameters, \"names\", {});\n\n\treturn (new asn1js.Sequence({\n\t\toptional,\n\t\tvalue: [\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 2, // APPLICATION-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tname: (names.country_name || \"\"),\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\tnew asn1js.NumericString(),\n\t\t\t\t\t\t\tnew asn1js.PrintableString()\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}),\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 2, // APPLICATION-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tname: (names.administration_domain_name || \"\"),\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\tnew asn1js.NumericString(),\n\t\t\t\t\t\t\tnew asn1js.PrintableString()\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}),\n\t\t\tnew asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tname: (names.network_address || \"\"),\n\t\t\t\tisHexOnly: true\n\t\t\t}),\n\t\t\tnew asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tname: (names.terminal_identifier || \"\"),\n\t\t\t\tisHexOnly: true\n\t\t\t}),\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tname: (names.private_domain_name || \"\"),\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\tnew asn1js.NumericString(),\n\t\t\t\t\t\t\tnew asn1js.PrintableString()\n\t\t\t\t\t\t]\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}),\n\t\t\tnew asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tname: (names.organization_name || \"\"),\n\t\t\t\tisHexOnly: true\n\t\t\t}),\n\t\t\tnew asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tname: (names.numeric_user_identifier || \"\"),\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t}),\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tname: (names.personal_name || \"\"),\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisHexOnly: true\n\t\t\t\t\t}),\n\t\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisHexOnly: true\n\t\t\t\t\t}),\n\t\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisHexOnly: true\n\t\t\t\t\t}),\n\t\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tisHexOnly: true\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t}),\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tname: (names.organizational_unit_names || \"\"),\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 6 // [6]\n\t\t\t\t},\n\t\t\t\tvalue: [\n\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\tvalue: new asn1js.PrintableString()\n\t\t\t\t\t})\n\t\t\t\t]\n\t\t\t})\n\t\t]\n\t}));\n}\n//**************************************************************************************\n/**\n * Schema for \"builtInDomainDefinedAttributes\" of \"ORAddress\"\n * @param {boolean} optional\n * @returns {Sequence}\n */\nfunction builtInDomainDefinedAttributes(optional = false)\n{\n\treturn (new asn1js.Sequence({\n\t\toptional,\n\t\tvalue: [\n\t\t\tnew asn1js.PrintableString(),\n\t\t\tnew asn1js.PrintableString()\n\t\t]\n\t}));\n}\n//**************************************************************************************\n/**\n * Schema for \"builtInDomainDefinedAttributes\" of \"ORAddress\"\n * @param {boolean} optional\n * @returns {Set}\n */\nfunction extensionAttributes(optional = false)\n{\n\treturn (new asn1js.Set({\n\t\toptional,\n\t\tvalue: [\n\t\t\tnew asn1js.Primitive({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tisHexOnly: true\n\t\t\t}),\n\t\t\tnew asn1js.Constructed({\n\t\t\t\toptional: true,\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: [new asn1js.Any()]\n\t\t\t})\n\t\t]\n\t}));\n}\n//**************************************************************************************\n//endregion\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class GeneralName\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for GeneralName class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t * @property {number} [type] value type - from a tagged value (0 for \"otherName\", 1 for \"rfc822Name\" etc.)\n\t * @property {Object} [value] asn1js object having GeneralName value (type depends on \"type\" value)\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc value type - from a tagged value (0 for \"otherName\", 1 for \"rfc822Name\" etc.)\n\t\t */\n\t\tthis.type = getParametersValue(parameters, \"type\", GeneralName.defaultValues(\"type\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc asn1js object having GeneralName value (type depends on \"type\" value)\n\t\t */\n\t\tthis.value = getParametersValue(parameters, \"value\", GeneralName.defaultValues(\"value\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"type\":\n\t\t\t\treturn 9;\n\t\t\tcase \"value\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralName class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"type\":\n\t\t\t\treturn (memberValue === GeneralName.defaultValues(memberName));\n\t\t\tcase \"value\":\n\t\t\t\treturn (Object.keys(memberValue).length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for GeneralName class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * GeneralName ::= Choice {\n\t *    otherName                       [0]     OtherName,\n\t *    rfc822Name                      [1]     IA5String,\n\t *    dNSName                         [2]     IA5String,\n\t *    x400Address                     [3]     ORAddress,\n\t *    directoryName                   [4]     value,\n\t *    ediPartyName                    [5]     EDIPartyName,\n\t *    uniformResourceIdentifier       [6]     IA5String,\n\t *    iPAddress                       [7]     OCTET STRING,\n\t *    registeredID                    [8]     OBJECT IDENTIFIER }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {Object} [directoryName]\n\t\t * @property {Object} [builtInStandardAttributes]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Choice({\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.ObjectIdentifier(),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: [new asn1js.Any()]\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t},\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tbuiltInStandardAttributes((names.builtInStandardAttributes || {}), false),\n\t\t\t\t\t\tbuiltInDomainDefinedAttributes(true),\n\t\t\t\t\t\textensionAttributes(true)\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t\t},\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tvalue: [RelativeDistinguishedNames.schema(names.directoryName || {})]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t\t},\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\toptional: true,\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.TeletexString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.PrintableString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.UniversalString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Utf8String(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.BmpString()\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.TeletexString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.PrintableString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.UniversalString(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Utf8String(),\n\t\t\t\t\t\t\t\t\t\tnew asn1js.BmpString()\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 6 // [6]\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 7 // [7]\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.blockName || \"\"),\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 8 // [8]\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"blockName\",\n\t\t\t\"otherName\",\n\t\t\t\"rfc822Name\",\n\t\t\t\"dNSName\",\n\t\t\t\"x400Address\",\n\t\t\t\"directoryName\",\n\t\t\t\"ediPartyName\",\n\t\t\t\"uniformResourceIdentifier\",\n\t\t\t\"iPAddress\",\n\t\t\t\"registeredID\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tGeneralName.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tblockName: \"blockName\",\n\t\t\t\t\totherName: \"otherName\",\n\t\t\t\t\trfc822Name: \"rfc822Name\",\n\t\t\t\t\tdNSName: \"dNSName\",\n\t\t\t\t\tx400Address: \"x400Address\",\n\t\t\t\t\tdirectoryName: {\n\t\t\t\t\t\tnames: {\n\t\t\t\t\t\t\tblockName: \"directoryName\"\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tediPartyName: \"ediPartyName\",\n\t\t\t\t\tuniformResourceIdentifier: \"uniformResourceIdentifier\",\n\t\t\t\t\tiPAddress: \"iPAddress\",\n\t\t\t\t\tregisteredID: \"registeredID\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralName\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.type = asn1.result.blockName.idBlock.tagNumber;\n\n\t\tswitch(this.type)\n\t\t{\n\t\t\tcase 0: // otherName\n\t\t\t\tthis.value = asn1.result.blockName;\n\t\t\t\tbreak;\n\t\t\tcase 1: // rfc822Name + dNSName + uniformResourceIdentifier\n\t\t\tcase 2:\n\t\t\tcase 6:\n\t\t\t\t{\n\t\t\t\t\tconst value = asn1.result.blockName;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\t\t\tvalue.idBlock.tagNumber = 22; // IA5STRING\n\n\t\t\t\t\tconst valueBER = value.toBER(false);\n\n\t\t\t\t\tthis.value = asn1js.fromBER(valueBER).result.valueBlock.value;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 3: // x400Address\n\t\t\t\tthis.value = asn1.result.blockName;\n\t\t\t\tbreak;\n\t\t\tcase 4: // directoryName\n\t\t\t\tthis.value = new RelativeDistinguishedNames({ schema: asn1.result.directoryName });\n\t\t\t\tbreak;\n\t\t\tcase 5: // ediPartyName\n\t\t\t\tthis.value = asn1.result.ediPartyName;\n\t\t\t\tbreak;\n\t\t\tcase 7: // iPAddress\n\t\t\t\tthis.value = new asn1js.OctetString({ valueHex: asn1.result.blockName.valueBlock.valueHex });\n\t\t\t\tbreak;\n\t\t\tcase 8: // registeredID\n\t\t\t\t{\n\t\t\t\t\tconst value = asn1.result.blockName;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 1; // UNIVERSAL\n\t\t\t\t\tvalue.idBlock.tagNumber = 6; // ObjectIdentifier\n\n\t\t\t\t\tconst valueBER = value.toBER(false);\n\n\t\t\t\t\tthis.value = asn1js.fromBER(valueBER).result.valueBlock.toString(); // Getting a string representation of the ObjectIdentifier\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\tswitch(this.type)\n\t\t{\n\t\t\tcase 0:\n\t\t\tcase 3:\n\t\t\tcase 5:\n\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: this.type\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tthis.value\n\t\t\t\t\t]\n\t\t\t\t});\n\t\t\tcase 1:\n\t\t\tcase 2:\n\t\t\tcase 6:\n\t\t\t\t{\n\t\t\t\t\tconst value = new asn1js.IA5String({ value: this.value });\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tcase 4:\n\t\t\t\treturn new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [this.value.toSchema()]\n\t\t\t\t});\n\t\t\tcase 7:\n\t\t\t\t{\n\t\t\t\t\tconst value = this.value;\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tcase 8:\n\t\t\t\t{\n\t\t\t\t\tconst value = new asn1js.ObjectIdentifier({ value: this.value });\n\n\t\t\t\t\tvalue.idBlock.tagClass = 3;\n\t\t\t\t\tvalue.idBlock.tagNumber = this.type;\n\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\treturn GeneralName.schema();\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst _object = {\n\t\t\ttype: this.type,\n\t\t\tvalue: \"\"\n\t\t};\n\n\t\tif((typeof this.value) === \"string\")\n\t\t\t_object.value = this.value;\n\t\telse\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t_object.value = this.value.toJSON();\n\t\t\t}\n\t\t\tcatch(ex){}\n\t\t}\n\n\t\treturn _object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AltName\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AltName class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @desc Array of alternative names in GeneralName type\r\n\t\t */\r\n\t\tthis.altNames = getParametersValue(parameters, \"altNames\", AltName.defaultValues(\"altNames\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"altNames\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AltName class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AltName ::= GeneralNames\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [altNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.altNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"altNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAltName.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taltNames: \"altNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AltName\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"altNames\" in asn1.result)\r\n\t\t\tthis.altNames = Array.from(asn1.result.altNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.altNames, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taltNames: Array.from(this.altNames, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class BasicConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for BasicConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [cA]\r\n\t * @property {Object} [pathLenConstraint]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {boolean}\r\n\t\t * @desc cA\r\n\t\t */\r\n\t\tthis.cA = getParametersValue(parameters, \"cA\", false);\r\n\r\n\t\tif(\"pathLenConstraint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc pathLenConstraint\r\n\t\t\t */\r\n\t\t\tthis.pathLenConstraint = getParametersValue(parameters, \"pathLenConstraint\", 0);\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"cA\":\r\n\t\t\t\treturn false;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for BasicConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * BasicConstraints ::= SEQUENCE {\r\n\t *    cA                      BOOLEAN DEFAULT FALSE,\r\n\t *    pathLenConstraint       INTEGER (0..MAX) OPTIONAL }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [cA]\r\n\t\t * @property {string} [pathLenConstraint]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Boolean({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.cA || \"\")\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Integer({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tname: (names.pathLenConstraint || \"\")\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"cA\",\r\n\t\t\t\"pathLenConstraint\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tBasicConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcA: \"cA\",\r\n\t\t\t\t\tpathLenConstraint: \"pathLenConstraint\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for BasicConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"cA\" in asn1.result)\r\n\t\t\tthis.cA = asn1.result.cA.valueBlock.value;\r\n\r\n\t\tif(\"pathLenConstraint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.pathLenConstraint.valueBlock.isHexOnly)\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint;\r\n\t\t\telse\r\n\t\t\t\tthis.pathLenConstraint = asn1.result.pathLenConstraint.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.cA }));\r\n\t\t\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\toutputArray.push(this.pathLenConstraint);\r\n\t\t\telse\r\n\t\t\t\toutputArray.push(new asn1js.Integer({ value: this.pathLenConstraint }));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(this.cA !== BasicConstraints.defaultValues(\"cA\"))\r\n\t\t\tobject.cA = this.cA;\r\n\r\n\t\tif(\"pathLenConstraint\" in this)\r\n\t\t{\r\n\t\t\tif(this.pathLenConstraint instanceof asn1js.Integer)\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint.toJSON();\r\n\t\t\telse\r\n\t\t\t\tobject.pathLenConstraint = this.pathLenConstraint;\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralName from \"./GeneralName.js\";\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class IssuingDistributionPoint\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for IssuingDistributionPoint class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"distributionPoint\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralName>|RelativeDistinguishedNames}\n\t\t\t * @desc distributionPoint\n\t\t\t */\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", IssuingDistributionPoint.defaultValues(\"distributionPoint\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsUserCerts\n\t\t */\n\t\tthis.onlyContainsUserCerts = getParametersValue(parameters, \"onlyContainsUserCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsCACerts\n\t\t */\n\t\tthis.onlyContainsCACerts = getParametersValue(parameters, \"onlyContainsCACerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"));\n\n\t\tif(\"onlySomeReasons\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc onlySomeReasons\n\t\t\t */\n\t\t\tthis.onlySomeReasons = getParametersValue(parameters, \"onlySomeReasons\", IssuingDistributionPoint.defaultValues(\"onlySomeReasons\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc indirectCRL\n\t\t */\n\t\tthis.indirectCRL = getParametersValue(parameters, \"indirectCRL\", IssuingDistributionPoint.defaultValues(\"indirectCRL\"));\n\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc onlyContainsAttributeCerts\n\t\t */\n\t\tthis.onlyContainsAttributeCerts = getParametersValue(parameters, \"onlyContainsAttributeCerts\", IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"distributionPoint\":\n\t\t\t\treturn [];\n\t\t\tcase \"onlyContainsUserCerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsCACerts\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlySomeReasons\":\n\t\t\t\treturn 0;\n\t\t\tcase \"indirectCRL\":\n\t\t\t\treturn false;\n\t\t\tcase \"onlyContainsAttributeCerts\":\n\t\t\t\treturn false;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for IssuingDistributionPoint class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * IssuingDistributionPoint ::= SEQUENCE {\n\t *    distributionPoint          [0] DistributionPointName OPTIONAL,\n\t *    onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE,\n\t *    onlySomeReasons            [3] ReasonFlags OPTIONAL,\n\t *    indirectCRL                [4] BOOLEAN DEFAULT FALSE,\n\t *    onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }\n\t *\n\t * ReasonFlags ::= BIT STRING {\n\t *    unused                  (0),\n\t *    keyCompromise           (1),\n\t *    cACompromise            (2),\n\t *    affiliationChanged      (3),\n\t *    superseded              (4),\n\t *    cessationOfOperation    (5),\n\t *    certificateHold         (6),\n\t *    privilegeWithdrawn      (7),\n\t *    aACompromise            (8) }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [distributionPoint]\n\t\t * @property {string} [distributionPointNames]\n\t\t * @property {string} [onlyContainsUserCerts]\n\t\t * @property {string} [onlyContainsCACerts]\n\t\t * @property {string} [onlySomeReasons]\n\t\t * @property {string} [indirectCRL]\n\t\t * @property {string} [onlyContainsAttributeCerts]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Choice({\n\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: [\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\n\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}),\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\n\t\t\t\t\t\t\t\t\tidBlock: {\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsUserCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsCACerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlySomeReasons || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT bitstring value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.indirectCRL || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t\t}\n\t\t\t\t}), // IMPLICIT boolean value\n\t\t\t\tnew asn1js.Primitive({\n\t\t\t\t\tname: (names.onlyContainsAttributeCerts || \"\"),\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t\t}\n\t\t\t\t}) // IMPLICIT boolean value\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"distributionPoint\",\n\t\t\t\"distributionPointNames\",\n\t\t\t\"onlyContainsUserCerts\",\n\t\t\t\"onlyContainsCACerts\",\n\t\t\t\"onlySomeReasons\",\n\t\t\t\"indirectCRL\",\n\t\t\t\"onlyContainsAttributeCerts\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tIssuingDistributionPoint.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\n\t\t\t\t\tonlyContainsUserCerts: \"onlyContainsUserCerts\",\n\t\t\t\t\tonlyContainsCACerts: \"onlyContainsCACerts\",\n\t\t\t\t\tonlySomeReasons: \"onlySomeReasons\",\n\t\t\t\t\tindirectCRL: \"indirectCRL\",\n\t\t\t\t\tonlyContainsAttributeCerts: \"onlyContainsAttributeCerts\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\t\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for IssuingDistributionPoint\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"distributionPoint\" in asn1.result)\n\t\t{\n\t\t\tswitch(true)\n\t\t\t{\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 0): // GENERAL_NAMES variant\n\t\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\n\t\t\t\t\tbreak;\n\t\t\t\tcase (asn1.result.distributionPoint.idBlock.tagNumber === 1): // RDN variant\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\n\t\t\t\t\t\t\tschema: new asn1js.Sequence({\n\t\t\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Unknown tagNumber for distributionPoint: {$asn1.result.distributionPoint.idBlock.tagNumber}\");\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(\"onlyContainsUserCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsUserCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsUserCerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsCACerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsCACerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsCACerts = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlySomeReasons.valueBlock.valueHex);\n\t\t\tthis.onlySomeReasons = view[0];\n\t\t}\n\t\t\n\t\tif(\"indirectCRL\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.indirectCRL.valueBlock.valueHex);\n\t\t\tthis.indirectCRL = (view[0] !== 0x00);\n\t\t}\n\t\t\n\t\tif(\"onlyContainsAttributeCerts\" in asn1.result)\n\t\t{\n\t\t\tconst view = new Uint8Array(asn1.result.onlyContainsAttributeCerts.valueBlock.valueHex);\n\t\t\tthis.onlyContainsAttributeCerts = (view[0] !== 0x00);\n\t\t}\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tlet value;\n\t\t\t\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t{\n\t\t\t\tvalue = new asn1js.Constructed({\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tvalue = this.distributionPoint.toSchema();\n\t\t\t\t\n\t\t\t\tvalue.idBlock.tagClass = 3; // CONTEXT - SPECIFIC\n\t\t\t\tvalue.idBlock.tagNumber = 1; // [1]\n\t\t\t}\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: [value]\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 2 // [2]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t{\n\t\t\tconst buffer = new ArrayBuffer(1);\n\t\t\tconst view = new Uint8Array(buffer);\n\t\t\t\n\t\t\tview[0] = this.onlySomeReasons;\n\t\t\t\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 3 // [3]\n\t\t\t\t},\n\t\t\t\tvalueHex: buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 4 // [4]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t{\n\t\t\toutputArray.push(new asn1js.Primitive({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 5 // [5]\n\t\t\t\t},\n\t\t\t\tvalueHex: (new Uint8Array([0xFF])).buffer\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"distributionPoint\" in this)\n\t\t{\n\t\t\tif(this.distributionPoint instanceof Array)\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\n\t\t\telse\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\n\t\t}\n\t\t\n\t\tif(this.onlyContainsUserCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsUserCerts\"))\n\t\t\tobject.onlyContainsUserCerts = this.onlyContainsUserCerts;\n\t\t\n\t\tif(this.onlyContainsCACerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsCACerts\"))\n\t\t\tobject.onlyContainsCACerts = this.onlyContainsCACerts;\n\t\t\n\t\tif(\"onlySomeReasons\" in this)\n\t\t\tobject.onlySomeReasons = this.onlySomeReasons;\n\t\t\n\t\tif(this.indirectCRL !== IssuingDistributionPoint.defaultValues(\"indirectCRL\"))\n\t\t\tobject.indirectCRL = this.indirectCRL;\n\t\t\n\t\tif(this.onlyContainsAttributeCerts !== IssuingDistributionPoint.defaultValues(\"onlyContainsAttributeCerts\"))\n\t\t\tobject.onlyContainsAttributeCerts = this.onlyContainsAttributeCerts;\n\t\t\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralNames\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralNames class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<GeneralName>}\r\n\t\t * @desc Array of \"general names\"\r\n\t\t */\r\n\t\tthis.names = getParametersValue(parameters, \"names\", GeneralNames.defaultValues(\"names\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"names\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralNames class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} [optional=false] Flag would be element optional or not\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} utcTimeName Name for \"utcTimeName\" choice\r\n\t\t * @property {string} generalTimeName Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.generalNames || \"\"),\r\n\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"names\",\r\n\t\t\t\"generalNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralNames.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"names\",\r\n\t\t\t\t\tgeneralNames: \"generalNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralNames\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.names = Array.from(asn1.result.generalNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.names, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tnames: Array.from(this.names, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class GeneralSubtree\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for GeneralSubtree class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.base = getParametersValue(parameters, \"base\", GeneralSubtree.defaultValues(\"base\"));\r\n\r\n\t\t/**\r\n\t\t * @type {number|Integer}\r\n\t\t * @desc base\r\n\t\t */\r\n\t\tthis.minimum = getParametersValue(parameters, \"minimum\", GeneralSubtree.defaultValues(\"minimum\"));\r\n\r\n\t\tif(\"maximum\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number|Integer}\r\n\t\t\t * @desc minimum\r\n\t\t\t */\r\n\t\t\tthis.maximum = getParametersValue(parameters, \"maximum\", GeneralSubtree.defaultValues(\"maximum\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"base\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tcase \"minimum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"maximum\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for GeneralSubtree class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * GeneralSubtree ::= SEQUENCE {\r\n\t *    base                    GeneralName,\r\n\t *    minimum         [0]     BaseDistance DEFAULT 0,\r\n\t *    maximum         [1]     BaseDistance OPTIONAL }\r\n\t *\r\n\t * BaseDistance ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [base]\r\n\t\t * @property {string} [minimum]\r\n\t\t * @property {string} [maximum]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tGeneralName.schema(names.base || {}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.minimum || \"\") })]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [new asn1js.Integer({ name: (names.maximum || \"\") })]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"base\",\r\n\t\t\t\"minimum\",\r\n\t\t\t\"maximum\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tGeneralSubtree.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tbase: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"base\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t},\r\n\t\t\t\t\tminimum: \"minimum\",\r\n\t\t\t\t\tmaximum: \"maximum\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for GeneralSubtree\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.base = new GeneralName({ schema: asn1.result.base });\r\n\r\n\t\tif(\"minimum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.minimum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.minimum = asn1.result.minimum;\r\n\t\t\telse\r\n\t\t\t\tthis.minimum = asn1.result.minimum.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"maximum\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.maximum.valueBlock.isHexOnly)\r\n\t\t\t\tthis.maximum = asn1.result.maximum;\r\n\t\t\telse\r\n\t\t\t\tthis.maximum = asn1.result.maximum.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(this.base.toSchema());\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tlet valueMinimum = 0;\r\n\t\t\t\r\n\t\t\tif(this.minimum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMinimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tvalueMinimum = new asn1js.Integer({ value: this.minimum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMinimum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tlet valueMaximum = 0;\r\n\t\t\t\r\n\t\t\tif(this.maximum instanceof asn1js.Integer)\r\n\t\t\t\tvalueMaximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tvalueMaximum = new asn1js.Integer({ value: this.maximum });\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [valueMaximum]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tbase: this.base.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif(this.minimum !== 0)\r\n\t\t{\r\n\t\t\tif((typeof this.minimum) === \"number\")\r\n\t\t\t\tobject.minimum = this.minimum;\r\n\t\t\telse\r\n\t\t\t\tobject.minimum = this.minimum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\tif(\"maximum\" in this)\r\n\t\t{\r\n\t\t\tif((typeof this.maximum) === \"number\")\r\n\t\t\t\tobject.maximum = this.maximum;\r\n\t\t\telse\r\n\t\t\t\tobject.maximum = this.maximum.toJSON();\r\n\t\t}\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport GeneralSubtree from \"./GeneralSubtree.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class NameConstraints\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for NameConstraints class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\tif(\"permittedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc permittedSubtrees\n\t\t\t */\n\t\t\tthis.permittedSubtrees = getParametersValue(parameters, \"permittedSubtrees\", NameConstraints.defaultValues(\"permittedSubtrees\"));\n\n\t\tif(\"excludedSubtrees\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Array.<GeneralSubtree>}\n\t\t\t * @desc excludedSubtrees\n\t\t\t */\n\t\t\tthis.excludedSubtrees = getParametersValue(parameters, \"excludedSubtrees\", NameConstraints.defaultValues(\"excludedSubtrees\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"permittedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tcase \"excludedSubtrees\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for NameConstraints class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * NameConstraints ::= SEQUENCE {\n\t *    permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,\n\t *    excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [permittedSubtrees]\n\t\t * @property {string} [excludedSubtrees]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.permittedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Constructed({\n\t\t\t\t\toptional: true,\n\t\t\t\t\tidBlock: {\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t\t},\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\t\t\tname: (names.excludedSubtrees || \"\"),\n\t\t\t\t\t\t\tvalue: GeneralSubtree.schema()\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"permittedSubtrees\",\n\t\t\t\"excludedSubtrees\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tNameConstraints.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tpermittedSubtrees: \"permittedSubtrees\",\n\t\t\t\t\texcludedSubtrees: \"excludedSubtrees\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for NameConstraints\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tif(\"permittedSubtrees\" in asn1.result)\n\t\t\tthis.permittedSubtrees = Array.from(asn1.result.permittedSubtrees, element => new GeneralSubtree({ schema: element }));\n\n\t\tif(\"excludedSubtrees\" in asn1.result)\n\t\t\tthis.excludedSubtrees = Array.from(asn1.result.excludedSubtrees, element => new GeneralSubtree({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 0 // [0]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.permittedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t\n\t\tif(\"excludedSubtrees\" in this)\n\t\t{\n\t\t\toutputArray.push(new asn1js.Constructed({\n\t\t\t\tidBlock: {\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\n\t\t\t\t\ttagNumber: 1 // [1]\n\t\t\t\t},\n\t\t\t\tvalue: Array.from(this.excludedSubtrees, element => element.toSchema())\n\t\t\t}));\n\t\t}\n\t\t//endregion\n\t\t\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {};\n\t\t\n\t\tif(\"permittedSubtrees\" in this)\n\t\t\tobject.permittedSubtrees = Array.from(this.permittedSubtrees, element => element.toJSON());\n\n\t\tif(\"excludedSubtrees\" in this)\n\t\t\tobject.excludedSubtrees = Array.from(this.excludedSubtrees, element => element.toJSON());\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class DistributionPoint\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for DistributionPoint class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t * @property {Object} [distributionPoint]\r\n\t * @property {Object} [reasons]\r\n\t * @property {Object} [cRLIssuer]\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"distributionPoint\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc distributionPoint\r\n\t\t\t */\r\n\t\t\tthis.distributionPoint = getParametersValue(parameters, \"distributionPoint\", DistributionPoint.defaultValues(\"distributionPoint\"));\r\n\r\n\t\tif(\"reasons\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {BitString}\r\n\t\t\t * @desc values\r\n\t\t\t */\r\n\t\t\tthis.reasons = getParametersValue(parameters, \"reasons\", DistributionPoint.defaultValues(\"reasons\"));\r\n\r\n\t\tif(\"cRLIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc cRLIssuer\r\n\t\t\t */\r\n\t\t\tthis.cRLIssuer = getParametersValue(parameters, \"cRLIssuer\", DistributionPoint.defaultValues(\"cRLIssuer\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"distributionPoint\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"reasons\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tcase \"cRLIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for DistributionPoint class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * DistributionPoint ::= SEQUENCE {\r\n\t *    distributionPoint       [0]     DistributionPointName OPTIONAL,\r\n\t *    reasons                 [1]     ReasonFlags OPTIONAL,\r\n\t *    cRLIssuer               [2]     GeneralNames OPTIONAL }\r\n\t *\r\n\t * DistributionPointName ::= CHOICE {\r\n\t *    fullName                [0]     GeneralNames,\r\n\t *    nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }\r\n\t *\r\n\t * ReasonFlags ::= BIT STRING {\r\n\t *    unused                  (0),\r\n\t *    keyCompromise           (1),\r\n\t *    cACompromise            (2),\r\n\t *    affiliationChanged      (3),\r\n\t *    superseded              (4),\r\n\t *    cessationOfOperation    (5),\r\n\t *    certificateHold         (6),\r\n\t *    privilegeWithdrawn      (7),\r\n\t *    aACompromise            (8) }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [distributionPoint]\r\n\t\t * @property {string} [distributionPointNames]\r\n\t\t * @property {string} [reasons]\r\n\t\t * @property {string} [cRLIssuer]\r\n\t\t * @property {string} [cRLIssuerNames]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Choice({\r\n\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\t\t\t\t\tname: (names.distributionPointNames || \"\"),\r\n\t\t\t\t\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t\t\t}),\r\n\t\t\t\t\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\t\t\t\t\tname: (names.distributionPoint || \"\"),\r\n\t\t\t\t\t\t\t\t\toptional: true,\r\n\t\t\t\t\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\t\tvalue: RelativeDistinguishedNames.schema().valueBlock.value\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t]\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.reasons || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t}), // IMPLICIT bitstring value\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\tname: (names.cRLIssuer || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.cRLIssuerNames || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}) // IMPLICIT bitstring value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"distributionPoint\",\r\n\t\t\t\"distributionPointNames\",\r\n\t\t\t\"reasons\",\r\n\t\t\t\"cRLIssuer\",\r\n\t\t\t\"cRLIssuerNames\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tDistributionPoint.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdistributionPoint: \"distributionPoint\",\r\n\t\t\t\t\tdistributionPointNames: \"distributionPointNames\",\r\n\t\t\t\t\treasons: \"reasons\",\r\n\t\t\t\t\tcRLIssuer: \"cRLIssuer\",\r\n\t\t\t\t\tcRLIssuerNames: \"cRLIssuerNames\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for DistributionPoint\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"distributionPoint\" in asn1.result)\r\n\t\t{\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 0) // GENERAL_NAMES variant\r\n\t\t\t\tthis.distributionPoint = Array.from(asn1.result.distributionPointNames, element => new GeneralName({ schema: element }));\r\n\r\n\t\t\tif(asn1.result.distributionPoint.idBlock.tagNumber === 1) // RDN variant\r\n\t\t\t{\r\n\t\t\t\tthis.distributionPoint = new RelativeDistinguishedNames({\r\n\t\t\t\t\tschema: new asn1js.Sequence({\r\n\t\t\t\t\t\tvalue: asn1.result.distributionPoint.valueBlock.value\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in asn1.result)\r\n\t\t\tthis.reasons = new asn1js.BitString({ valueHex: asn1.result.reasons.valueBlock.valueHex });\r\n\r\n\t\tif(\"cRLIssuer\" in asn1.result)\r\n\t\t\tthis.cRLIssuer = Array.from(asn1.result.cRLIssuerNames, element => new GeneralName({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tlet internalValue;\r\n\t\t\t\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: Array.from(this.distributionPoint, element => element.toSchema())\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tinternalValue = new asn1js.Constructed({\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [this.distributionPoint.toSchema()]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [internalValue]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"reasons\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.reasons.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.cRLIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"distributionPoint\" in this)\r\n\t\t{\r\n\t\t\tif(this.distributionPoint instanceof Array)\r\n\t\t\t\tobject.distributionPoint = Array.from(this.distributionPoint, element => element.toJSON());\r\n\t\t\telse\r\n\t\t\t\tobject.distributionPoint = this.distributionPoint.toJSON();\r\n\t\t}\r\n\r\n\t\tif(\"reasons\" in this)\r\n\t\t\tobject.reasons = this.reasons.toJSON();\r\n\r\n\t\tif(\"cRLIssuer\" in this)\r\n\t\t\tobject.cRLIssuer = Array.from(this.cRLIssuer, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport DistributionPoint from \"./DistributionPoint.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CRLDistributionPoints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CRLDistributionPoints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<DistributionPoint>}\r\n\t\t * @desc distributionPoints\r\n\t\t */\r\n\t\tthis.distributionPoints = getParametersValue(parameters, \"distributionPoints\", CRLDistributionPoints.defaultValues(\"distributionPoints\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"distributionPoints\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CRLDistributionPoints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [distributionPoints]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.distributionPoints || \"\"),\r\n\t\t\t\t\tvalue: DistributionPoint.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"distributionPoints\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCRLDistributionPoints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tdistributionPoints: \"distributionPoints\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CRLDistributionPoints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.distributionPoints = Array.from(asn1.result.distributionPoints, element => new DistributionPoint({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.distributionPoints, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tdistributionPoints: Array.from(this.distributionPoints, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyQualifierInfo\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyQualifierInfo class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyQualifierId\r\n\t\t */\r\n\t\tthis.policyQualifierId = getParametersValue(parameters, \"policyQualifierId\", PolicyQualifierInfo.defaultValues(\"policyQualifierId\"));\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @desc qualifier\r\n\t\t */\r\n\t\tthis.qualifier = getParametersValue(parameters, \"qualifier\", PolicyQualifierInfo.defaultValues(\"qualifier\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyQualifierId\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"qualifier\":\r\n\t\t\t\treturn new asn1js.Any();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyQualifierInfo class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyQualifierInfo ::= SEQUENCE {\r\n\t *    policyQualifierId  PolicyQualifierId,\r\n\t *    qualifier          ANY DEFINED BY policyQualifierId }\r\n\t *\r\n\t * id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }\r\n\t * id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }\r\n\t * id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }\r\n\t *\r\n\t * PolicyQualifierId ::= OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyQualifierId]\r\n\t\t * @property {string} [qualifier]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyQualifierId || \"\") }),\r\n\t\t\t\tnew asn1js.Any({ name: (names.qualifier || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyQualifierId\",\r\n\t\t\t\"qualifier\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyQualifierInfo.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyQualifierId: \"policyQualifierId\",\r\n\t\t\t\t\tqualifier: \"qualifier\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyQualifierInfo\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyQualifierId = asn1.result.policyQualifierId.valueBlock.toString();\r\n\t\tthis.qualifier = asn1.result.qualifier;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.policyQualifierId }),\r\n\t\t\t\tthis.qualifier\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tpolicyQualifierId: this.policyQualifierId,\r\n\t\t\tqualifier: this.qualifier.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyQualifierInfo from \"./PolicyQualifierInfo.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyInformation\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyInformation class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc policyIdentifier\r\n\t\t */\r\n\t\tthis.policyIdentifier = getParametersValue(parameters, \"policyIdentifier\", PolicyInformation.defaultValues(\"policyIdentifier\"));\r\n\r\n\t\tif(\"policyQualifiers\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<PolicyQualifierInfo>}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.policyQualifiers = getParametersValue(parameters, \"policyQualifiers\", PolicyInformation.defaultValues(\"policyQualifiers\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"policyIdentifier\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"policyQualifiers\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyInformation class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyInformation ::= SEQUENCE {\r\n\t *    policyIdentifier   CertPolicyId,\r\n\t *    policyQualifiers   SEQUENCE SIZE (1..MAX) OF\r\n\t *    PolicyQualifierInfo OPTIONAL }\r\n\t *\r\n\t * CertPolicyId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [policyIdentifier]\r\n\t\t * @property {string} [policyQualifiers]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.policyIdentifier || \"\") }),\r\n\t\t\t\tnew asn1js.Sequence({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.policyQualifiers || \"\"),\r\n\t\t\t\t\t\t\tvalue: PolicyQualifierInfo.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"policyIdentifier\",\r\n\t\t\t\"policyQualifiers\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyInformation.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tpolicyIdentifier: \"policyIdentifier\",\r\n\t\t\t\t\tpolicyQualifiers: \"policyQualifiers\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyInformation\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.policyIdentifier = asn1.result.policyIdentifier.valueBlock.toString();\r\n\r\n\t\tif(\"policyQualifiers\" in asn1.result)\r\n\t\t\tthis.policyQualifiers = Array.from(asn1.result.policyQualifiers, element => new PolicyQualifierInfo({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.policyIdentifier }));\r\n\t\t\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\t\tvalue: Array.from(this.policyQualifiers, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\tpolicyIdentifier: this.policyIdentifier\r\n\t\t};\r\n\r\n\t\tif(\"policyQualifiers\" in this)\r\n\t\t\tobject.policyQualifiers = Array.from(this.policyQualifiers, element => element.toJSON());\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyInformation from \"./PolicyInformation.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class CertificatePolicies\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for CertificatePolicies class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyInformation>}\r\n\t\t * @desc certificatePolicies\r\n\t\t */\r\n\t\tthis.certificatePolicies = getParametersValue(parameters, \"certificatePolicies\", CertificatePolicies.defaultValues(\"certificatePolicies\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"certificatePolicies\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for CertificatePolicies class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [certificatePolicies]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.certificatePolicies || \"\"),\r\n\t\t\t\t\tvalue: PolicyInformation.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"certificatePolicies\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificatePolicies.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tcertificatePolicies: \"certificatePolicies\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificatePolicies\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.certificatePolicies = Array.from(asn1.result.certificatePolicies, element => new PolicyInformation({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.certificatePolicies, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tcertificatePolicies: Array.from(this.certificatePolicies, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyMapping\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyMapping class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc issuerDomainPolicy\r\n\t\t */\r\n\t\tthis.issuerDomainPolicy = getParametersValue(parameters, \"issuerDomainPolicy\", PolicyMapping.defaultValues(\"issuerDomainPolicy\"));\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc subjectDomainPolicy\r\n\t\t */\r\n\t\tthis.subjectDomainPolicy = getParametersValue(parameters, \"subjectDomainPolicy\", PolicyMapping.defaultValues(\"subjectDomainPolicy\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"issuerDomainPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"subjectDomainPolicy\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMapping class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyMapping ::= SEQUENCE {\r\n\t *    issuerDomainPolicy      CertPolicyId,\r\n\t *    subjectDomainPolicy     CertPolicyId }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [issuerDomainPolicy]\r\n\t\t * @property {string} [subjectDomainPolicy]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.issuerDomainPolicy || \"\") }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.subjectDomainPolicy || \"\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"issuerDomainPolicy\",\r\n\t\t\t\"subjectDomainPolicy\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyMapping.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tissuerDomainPolicy: \"issuerDomainPolicy\",\r\n\t\t\t\t\tsubjectDomainPolicy: \"subjectDomainPolicy\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyMapping\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.issuerDomainPolicy = asn1.result.issuerDomainPolicy.valueBlock.toString();\r\n\t\tthis.subjectDomainPolicy = asn1.result.subjectDomainPolicy.valueBlock.toString();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.issuerDomainPolicy }),\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.subjectDomainPolicy })\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tissuerDomainPolicy: this.issuerDomainPolicy,\r\n\t\t\tsubjectDomainPolicy: this.subjectDomainPolicy\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport PolicyMapping from \"./PolicyMapping.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyMappings\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyMappings class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<PolicyMapping>}\r\n\t\t * @desc mappings\r\n\t\t */\r\n\t\tthis.mappings = getParametersValue(parameters, \"mappings\", PolicyMappings.defaultValues(\"mappings\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"mappings\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyMappings class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF PolicyMapping\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [utcTimeName] Name for \"utcTimeName\" choice\r\n\t\t * @property {string} [generalTimeName] Name for \"generalTimeName\" choice\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.mappings || \"\"),\r\n\t\t\t\t\tvalue: PolicyMapping.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"mappings\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyMappings.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tmappings: \"mappings\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyMappings\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.mappings = Array.from(asn1.result.mappings, element => new PolicyMapping({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.mappings, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tmappings: Array.from(this.mappings, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AuthorityKeyIdentifier\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AuthorityKeyIdentifier class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"keyIdentifier\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {OctetString}\r\n\t\t\t * @desc keyIdentifier\r\n\t\t\t */\r\n\t\t\tthis.keyIdentifier = getParametersValue(parameters, \"keyIdentifier\", AuthorityKeyIdentifier.defaultValues(\"keyIdentifier\"));\r\n\r\n\t\tif(\"authorityCertIssuer\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array.<GeneralName>}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertIssuer = getParametersValue(parameters, \"authorityCertIssuer\", AuthorityKeyIdentifier.defaultValues(\"authorityCertIssuer\"));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Integer}\r\n\t\t\t * @desc authorityCertIssuer\r\n\t\t\t */\r\n\t\t\tthis.authorityCertSerialNumber = getParametersValue(parameters, \"authorityCertSerialNumber\", AuthorityKeyIdentifier.defaultValues(\"authorityCertSerialNumber\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyIdentifier\":\r\n\t\t\t\treturn new asn1js.OctetString();\r\n\t\t\tcase \"authorityCertIssuer\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"authorityCertSerialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AuthorityKeyIdentifier class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthorityKeyIdentifier OID ::= 2.5.29.35\r\n\t *\r\n\t * AuthorityKeyIdentifier ::= SEQUENCE {\r\n\t *    keyIdentifier             [0] KeyIdentifier           OPTIONAL,\r\n\t *    authorityCertIssuer       [1] GeneralNames            OPTIONAL,\r\n\t *    authorityCertSerialNumber [2] CertificateSerialNumber OPTIONAL  }\r\n\t *\r\n\t * KeyIdentifier ::= OCTET STRING\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyIdentifier]\r\n\t\t * @property {string} [authorityCertIssuer]\r\n\t\t * @property {string} [authorityCertSerialNumber]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.keyIdentifier || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Constructed({\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t},\r\n\t\t\t\t\tvalue: [\r\n\t\t\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\t\t\tname: (names.authorityCertIssuer || \"\"),\r\n\t\t\t\t\t\t\tvalue: GeneralName.schema()\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t]\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.authorityCertSerialNumber || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyIdentifier\",\r\n\t\t\t\"authorityCertIssuer\",\r\n\t\t\t\"authorityCertSerialNumber\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAuthorityKeyIdentifier.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyIdentifier: \"keyIdentifier\",\r\n\t\t\t\t\tauthorityCertIssuer: \"authorityCertIssuer\",\r\n\t\t\t\t\tauthorityCertSerialNumber: \"authorityCertSerialNumber\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AuthorityKeyIdentifier\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"keyIdentifier\" in asn1.result)\r\n\t\t\tthis.keyIdentifier = new asn1js.OctetString({ valueHex: asn1.result.keyIdentifier.valueBlock.valueHex });\r\n\r\n\t\tif(\"authorityCertIssuer\" in asn1.result)\r\n\t\t\tthis.authorityCertIssuer = Array.from(asn1.result.authorityCertIssuer, element => new GeneralName({ schema: element }));\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in asn1.result)\r\n\t\t\tthis.authorityCertSerialNumber = new asn1js.Integer({ valueHex: asn1.result.authorityCertSerialNumber.valueBlock.valueHex });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.keyIdentifier.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: Array.from(this.authorityCertIssuer, element => element.toSchema())\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.authorityCertSerialNumber.valueBlock.valueHex\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"keyIdentifier\" in this)\r\n\t\t\tobject.keyIdentifier = this.keyIdentifier.toJSON();\r\n\r\n\t\tif(\"authorityCertIssuer\" in this)\r\n\t\t\tobject.authorityCertIssuer = Array.from(this.authorityCertIssuer, element => element.toJSON());\r\n\r\n\t\tif(\"authorityCertSerialNumber\" in this)\r\n\t\t\tobject.authorityCertSerialNumber = this.authorityCertSerialNumber.toJSON();\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class PolicyConstraints\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for PolicyConstraints class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\tif(\"requireExplicitPolicy\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc requireExplicitPolicy\r\n\t\t\t */\r\n\t\t\tthis.requireExplicitPolicy = getParametersValue(parameters, \"requireExplicitPolicy\", PolicyConstraints.defaultValues(\"requireExplicitPolicy\"));\r\n\r\n\t\tif(\"inhibitPolicyMapping\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {number}\r\n\t\t\t * @desc Value of the TIME class\r\n\t\t\t */\r\n\t\t\tthis.inhibitPolicyMapping = getParametersValue(parameters, \"inhibitPolicyMapping\", PolicyConstraints.defaultValues(\"inhibitPolicyMapping\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"requireExplicitPolicy\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"inhibitPolicyMapping\":\r\n\t\t\t\treturn 0;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for PolicyConstraints class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * PolicyConstraints ::= SEQUENCE {\r\n\t *    requireExplicitPolicy           [0] SkipCerts OPTIONAL,\r\n\t *    inhibitPolicyMapping            [1] SkipCerts OPTIONAL }\r\n\t *\r\n\t * SkipCerts ::= INTEGER (0..MAX)\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [requireExplicitPolicy]\r\n\t\t * @property {string} [inhibitPolicyMapping]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.requireExplicitPolicy || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t\t}\r\n\t\t\t\t}), // IMPLICIT integer value\r\n\t\t\t\tnew asn1js.Primitive({\r\n\t\t\t\t\tname: (names.inhibitPolicyMapping || \"\"),\r\n\t\t\t\t\toptional: true,\r\n\t\t\t\t\tidBlock: {\r\n\t\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t\t}\r\n\t\t\t\t}) // IMPLICIT integer value\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"requireExplicitPolicy\",\r\n\t\t\t\"inhibitPolicyMapping\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tPolicyConstraints.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\trequireExplicitPolicy: \"requireExplicitPolicy\",\r\n\t\t\t\t\tinhibitPolicyMapping: \"inhibitPolicyMapping\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for PolicyConstraints\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tif(\"requireExplicitPolicy\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst field1 = asn1.result.requireExplicitPolicy;\r\n\r\n\t\t\tfield1.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tfield1.idBlock.tagNumber = 2; // INTEGER\r\n\r\n\t\t\tconst ber1 = field1.toBER(false);\r\n\t\t\tconst int1 = asn1js.fromBER(ber1);\r\n\r\n\t\t\tthis.requireExplicitPolicy = int1.result.valueBlock.valueDec;\r\n\t\t}\r\n\r\n\t\tif(\"inhibitPolicyMapping\" in asn1.result)\r\n\t\t{\r\n\t\t\tconst field2 = asn1.result.inhibitPolicyMapping;\r\n\r\n\t\t\tfield2.idBlock.tagClass = 1; // UNIVERSAL\r\n\t\t\tfield2.idBlock.tagNumber = 2; // INTEGER\r\n\r\n\t\t\tconst ber2 = field2.toBER(false);\r\n\t\t\tconst int2 = asn1js.fromBER(ber2);\r\n\r\n\t\t\tthis.inhibitPolicyMapping = int2.result.valueBlock.valueDec;\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Create correct values for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif(\"requireExplicitPolicy\" in this)\r\n\t\t{\r\n\t\t\tconst int1 = new asn1js.Integer({ value: this.requireExplicitPolicy });\r\n\t\t\t\r\n\t\t\tint1.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tint1.idBlock.tagNumber = 0; // [0]\r\n\t\t\t\r\n\t\t\toutputArray.push(int1);\r\n\t\t}\r\n\t\t\r\n\t\tif(\"inhibitPolicyMapping\" in this)\r\n\t\t{\r\n\t\t\tconst int2 = new asn1js.Integer({ value: this.inhibitPolicyMapping });\r\n\t\t\t\r\n\t\t\tint2.idBlock.tagClass = 3; // CONTEXT-SPECIFIC\r\n\t\t\tint2.idBlock.tagNumber = 1; // [1]\r\n\t\t\t\r\n\t\t\toutputArray.push(int2);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {};\r\n\r\n\t\tif(\"requireExplicitPolicy\" in this)\r\n\t\t\tobject.requireExplicitPolicy = this.requireExplicitPolicy;\r\n\r\n\t\tif(\"inhibitPolicyMapping\" in this)\r\n\t\t\tobject.inhibitPolicyMapping = this.inhibitPolicyMapping;\r\n\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class ExtKeyUsage\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for ExtKeyUsage class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<string>}\r\n\t\t * @desc keyPurposes\r\n\t\t */\r\n\t\tthis.keyPurposes = getParametersValue(parameters, \"keyPurposes\", ExtKeyUsage.defaultValues(\"keyPurposes\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"keyPurposes\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for ExtKeyUsage class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * ExtKeyUsage ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId\r\n\t *\r\n\t * KeyPurposeId ::= OBJECT IDENTIFIER\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [keyPurposes]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.keyPurposes || \"\"),\r\n\t\t\t\t\tvalue: new asn1js.ObjectIdentifier()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"keyPurposes\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtKeyUsage.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tkeyPurposes: \"keyPurposes\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for ExtKeyUsage\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.keyPurposes = Array.from(asn1.result.keyPurposes, element => element.valueBlock.toString());\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.keyPurposes, element => new asn1js.ObjectIdentifier({ value: element }))\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\tkeyPurposes: Array.from(this.keyPurposes)\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport GeneralName from \"./GeneralName.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class AccessDescription\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for AccessDescription class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {string}\r\n\t\t * @desc The type and format of the information are specified by the accessMethod field. This profile defines two accessMethod OIDs: id-ad-caIssuers and id-ad-ocsp\r\n\t\t */\r\n\t\tthis.accessMethod = getParametersValue(parameters, \"accessMethod\", AccessDescription.defaultValues(\"accessMethod\"));\r\n\t\t/**\r\n\t\t * @type {GeneralName}\r\n\t\t * @desc The accessLocation field specifies the location of the information\r\n\t\t */\r\n\t\tthis.accessLocation = getParametersValue(parameters, \"accessLocation\", AccessDescription.defaultValues(\"accessLocation\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"accessMethod\":\r\n\t\t\t\treturn \"\";\r\n\t\t\tcase \"accessLocation\":\r\n\t\t\t\treturn new GeneralName();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for AccessDescription class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AccessDescription  ::=  SEQUENCE {\r\n\t *    accessMethod          OBJECT IDENTIFIER,\r\n\t *    accessLocation        GeneralName  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [accessMethod]\r\n\t\t * @property {string} [accessLocation]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.accessMethod || \"\") }),\r\n\t\t\t\tGeneralName.schema(names.accessLocation || {})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"accessMethod\",\r\n\t\t\t\"accessLocation\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tAccessDescription.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taccessMethod: \"accessMethod\",\r\n\t\t\t\t\taccessLocation: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tblockName: \"accessLocation\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for AccessDescription\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.accessMethod = asn1.result.accessMethod.valueBlock.toString();\r\n\t\tthis.accessLocation = new GeneralName({ schema: asn1.result.accessLocation });\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.ObjectIdentifier({ value: this.accessMethod }),\r\n\t\t\t\tthis.accessLocation.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taccessMethod: this.accessMethod,\r\n\t\t\taccessLocation: this.accessLocation.toJSON()\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport AccessDescription from \"./AccessDescription.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class InfoAccess\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for InfoAccess class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<AccessDescription>}\r\n\t\t * @desc accessDescriptions\r\n\t\t */\r\n\t\tthis.accessDescriptions = getParametersValue(parameters, \"accessDescriptions\", InfoAccess.defaultValues(\"accessDescriptions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"accessDescriptions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for InfoAccess class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * AuthorityInfoAccessSyntax  ::=\r\n\t * SEQUENCE SIZE (1..MAX) OF AccessDescription\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [accessDescriptions]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.accessDescriptions || \"\"),\r\n\t\t\t\t\tvalue: AccessDescription.schema()\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"accessDescriptions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tInfoAccess.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\taccessDescriptions: \"accessDescriptions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for InfoAccess\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.accessDescriptions = Array.from(asn1.result.accessDescriptions, element => new AccessDescription({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.accessDescriptions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\taccessDescriptions: Array.from(this.accessDescriptions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","/*\r\n * Copyright (c) 2016-2018, Peculiar Ventures\r\n * All rights reserved.\r\n *\r\n * Author 2016-2018, Yury Strozhevsky <www.strozhevsky.com>.\r\n *\r\n */\r\n//**************************************************************************************\r\nexport class ByteStream\r\n{\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS\r\n\t/**\r\n\t * Constructor for ByteStream class\r\n\t * @param {{[length]: number, [stub]: number, [view]: Uint8Array, [buffer]: ArrayBuffer, [string]: string, [hexstring]: string}} parameters\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.clear();\r\n\t\t\r\n\t\tfor(const key of Object.keys(parameters))\r\n\t\t{\r\n\t\t\tswitch(key)\r\n\t\t\t{\r\n\t\t\t\tcase \"length\":\r\n\t\t\t\t\tthis.length = parameters.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"stub\":\r\n\t\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\t\tfor(let i = 0; i < this._view.length; i++)\r\n\t\t\t\t\t\tthis._view[i] = parameters.stub;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"view\":\r\n\t\t\t\t\tthis.fromUint8Array(parameters.view);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"buffer\":\r\n\t\t\t\t\tthis.fromArrayBuffer(parameters.buffer);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"string\":\r\n\t\t\t\t\tthis.fromString(parameters.string);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"hexstring\":\r\n\t\t\t\t\tthis.fromHexString(parameters.hexstring);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"buffer\"\r\n\t * @param {ArrayBuffer} value\r\n\t */\r\n\tset buffer(value)\r\n\t{\r\n\t\tthis._buffer = value.slice(0);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"buffer\"\r\n\t * @returns {ArrayBuffer}\r\n\t */\r\n\tget buffer()\r\n\t{\r\n\t\treturn this._buffer;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"view\"\r\n\t * @param {Uint8Array} value\r\n\t */\r\n\tset view(value)\r\n\t{\r\n\t\tthis._buffer = new ArrayBuffer(value.length);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t\t\r\n\t\tthis._view.set(value);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"view\"\r\n\t * @returns {Uint8Array}\r\n\t */\r\n\tget view()\r\n\t{\r\n\t\treturn this._view;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"length\"\r\n\t * @returns {number}\r\n\t */\r\n\tget length()\r\n\t{\r\n\t\treturn this._buffer.byteLength;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"length\"\r\n\t * @param {number} value\r\n\t */\r\n\tset length(value)\r\n\t{\r\n\t\tthis._buffer = new ArrayBuffer(value);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Clear existing stream\r\n\t */\r\n\tclear()\r\n\t{\r\n\t\tthis._buffer = new ArrayBuffer(0);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"Stream\" object from existing \"ArrayBuffer\"\r\n\t * @param {!ArrayBuffer} array The ArrayBuffer to copy from\r\n\t */\r\n\tfromArrayBuffer(array)\r\n\t{\r\n\t\tthis.buffer = array;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionNamingConventionJS\r\n\t/**\r\n\t * Initialize \"Stream\" object from existing \"Uint8Array\"\r\n\t * @param {!Uint8Array} array The Uint8Array to copy from\r\n\t */\r\n\tfromUint8Array(array)\r\n\t{\r\n\t\tthis._buffer = new ArrayBuffer(array.length);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t\t\r\n\t\tthis._view.set(array);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"Stream\" object from existing string\r\n\t * @param {string} string The string to initialize from\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\tconst stringLength = string.length;\r\n\t\t\r\n\t\tthis.length = stringLength;\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(let i = 0; i < stringLength; i++)\r\n\t\t\tthis.view[i] = string.charCodeAt(i);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Represent \"Stream\" object content as a string\r\n\t * @param {number} [start] Start position to convert to string\r\n\t * @param {number} [length] Length of array to convert to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString(start = 0, length = (this.view.length - start))\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = \"\";\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((start >= this.view.length) || (start < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((length >= this.view.length) || (length < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.view.length - start;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert array of bytes to string\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(let i = start; i < (start + length); i++)\r\n\t\t\tresult += String.fromCharCode(this.view[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionTooLongJS\r\n\t/**\r\n\t * Initialize \"Stream\" object from existing hexdecimal string\r\n\t * @param {string} hexString String to initialize from\r\n\t */\r\n\tfromHexString(hexString)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst stringLength = hexString.length;\r\n\t\t\r\n\t\tthis.buffer = new ArrayBuffer(stringLength >> 1);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tconst hexMap = new Map();\r\n\t\t\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"0\", 0x00);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"1\", 0x01);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"2\", 0x02);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"3\", 0x03);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"4\", 0x04);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"5\", 0x05);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"6\", 0x06);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"7\", 0x07);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"8\", 0x08);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"9\", 0x09);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"A\", 0x0A);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"a\", 0x0A);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"B\", 0x0B);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"b\", 0x0B);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"C\", 0x0C);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"c\", 0x0C);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"D\", 0x0D);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"d\", 0x0D);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"E\", 0x0E);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"e\", 0x0E);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"F\", 0x0F);\r\n\t\t// noinspection MagicNumberJS\r\n\t\thexMap.set(\"f\", 0x0F);\r\n\t\t\r\n\t\tlet j = 0;\r\n\t\t// noinspection MagicNumberJS\r\n\t\tlet temp = 0x00;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert char-by-char\r\n\t\tfor(let i = 0; i < stringLength; i++)\r\n\t\t{\r\n\t\t\t// noinspection NegatedIfStatementJS\r\n\t\t\tif(!(i % 2))\r\n\t\t\t{\r\n\t\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\t\ttemp = hexMap.get(hexString.charAt(i)) << 4;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\t\ttemp |= hexMap.get(hexString.charAt(i));\r\n\t\t\t\t\r\n\t\t\t\tthis.view[j] = temp;\r\n\t\t\t\tj++;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Represent \"Stream\" object content as a hexdecimal string\r\n\t * @param {number} [start=0] Start position to convert to string\r\n\t * @param {number} [length=(this.view.length - start)] Length of array to convert to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoHexString(start = 0, length = (this.view.length - start))\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result = \"\";\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((start >= this.view.length) || (start < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((length >= this.view.length) || (length < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.view.length - start;\r\n\t\t}\r\n\t\t//endregion\r\n\r\n\t\tfor(let i = start; i < (start + length); i++)\r\n\t\t{\r\n\t\t\t// noinspection ChainedFunctionCallJS\r\n\t\t\tconst str = this.view[i].toString(16).toUpperCase();\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, ConditionalExpressionJS, EqualityComparisonWithCoercionJS\r\n\t\t\tresult = result + ((str.length == 1) ? \"0\" : \"\") + str;\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Return copy of existing \"Stream\"\r\n\t * @param {number} [start=0] Start position of the copy\r\n\t * @param {number} [length=this.view.length] Length of the copy\r\n\t * @returns {ByteStream}\r\n\t */\r\n\tcopy(start = 0, length = (this._buffer.byteLength - start))\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start === 0) && (this._buffer.byteLength === 0))\r\n\t\t\treturn new ByteStream();\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start < 0) || (start > (this._buffer.byteLength - 1)))\r\n\t\t\tthrow new Error(`Wrong start position: ${start}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\tconst stream = new ByteStream();\r\n\t\t\r\n\t\tstream._buffer = this._buffer.slice(start, start + length);\r\n\t\tstream._view = new Uint8Array(stream._buffer);\r\n\t\t\r\n\t\treturn stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Return slice of existing \"Stream\"\r\n\t * @param {number} [start=0] Start position of the slice\r\n\t * @param {number} [end=this._buffer.byteLength] End position of the slice\r\n\t * @returns {ByteStream}\r\n\t */\r\n\tslice(start = 0, end = this._buffer.byteLength)\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start === 0) && (this._buffer.byteLength === 0))\r\n\t\t\treturn new ByteStream();\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start < 0) || (start > (this._buffer.byteLength - 1)))\r\n\t\t\tthrow new Error(`Wrong start position: ${start}`);\r\n\t\t//endregion\r\n\t\t\r\n\t\tconst stream = new ByteStream();\r\n\t\t\r\n\t\tstream._buffer = this._buffer.slice(start, end);\r\n\t\tstream._view = new Uint8Array(stream._buffer);\r\n\t\t\r\n\t\treturn stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Change size of existing \"Stream\"\r\n\t * @param {!number} size Size for new \"Stream\"\r\n\t */\r\n\trealloc(size)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst buffer = new ArrayBuffer(size);\r\n\t\tconst view = new Uint8Array(buffer);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create a new ArrayBuffer content\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(size > this._view.length)\r\n\t\t\tview.set(this._view);\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tview.set(new Uint8Array(this._buffer, 0, size));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initialize \"Stream\" with new \"ArrayBuffer\"\r\n\t\tthis._buffer = buffer.slice(0);\r\n\t\tthis._view = new Uint8Array(this._buffer);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Append a new \"Stream\" content to the current \"Stream\"\r\n\t * @param {ByteStream} stream A new \"stream\" to append to current \"stream\"\r\n\t */\r\n\tappend(stream)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst initialSize = this._buffer.byteLength;\r\n\t\tconst streamViewLength = stream._buffer.byteLength;\r\n\t\t\r\n\t\tconst copyView = stream._view.slice();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Re-allocate current internal buffer\r\n\t\tthis.realloc(initialSize + streamViewLength);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Copy input stream content to a new place\r\n\t\tthis._view.set(copyView, initialSize);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Insert \"Stream\" content to the current \"Stream\" at specific position\r\n\t * @param {ByteStream} stream A new \"stream\" to insert to current \"stream\"\r\n\t * @param {number} [start=0] Start position to insert to\r\n\t * @param {number} [length]\r\n\t * @returns {boolean}\r\n\t */\r\n\tinsert(stream, start = 0, length = (this._buffer.byteLength - start))\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this._buffer.byteLength - 1))\r\n\t\t\treturn false;\r\n\t\t\r\n\t\tif(length > (this._buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this._buffer.byteLength - start;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check input variables\r\n\t\tif(length > stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = stream._buffer.byteLength;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Update content of the current stream\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(length == stream._buffer.byteLength)\r\n\t\t\tthis._view.set(stream._view, start);\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tthis._view.set(stream._view.slice(0, length), start);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Check that two \"Stream\" objects has equal content\r\n\t * @param {ByteStream} stream Stream to compare with\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqual(stream)\r\n\t{\r\n\t\t//region Check length of both buffers\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(this._buffer.byteLength != stream._buffer.byteLength)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare each byte of both buffers\r\n\t\tfor(let i = 0; i < stream._buffer.byteLength; i++)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(this.view[i] != stream.view[i])\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Check that current \"Stream\" objects has equal content with input \"Uint8Array\"\r\n\t * @param {Uint8Array} view View to compare with\r\n\t * @returns {boolean}\r\n\t */\r\n\tisEqualView(view)\r\n\t{\r\n\t\t//region Check length of both buffers\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(view.length != this.view.length)\r\n\t\t\treturn false;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Compare each byte of both buffers\r\n\t\tfor(let i = 0; i < view.length; i++)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(this.view[i] != view[i])\r\n\t\t\t\treturn false;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn true;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Find any byte pattern in \"Stream\"\r\n\t * @param {ByteStream} pattern Stream having pattern value\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @param {boolean} [backward] Flag to search in backward order\r\n\t * @returns {number}\r\n\t */\r\n\tfindPattern(pattern, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Check input variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst patternLength = pattern.buffer.byteLength;\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(patternLength > length)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make a \"pre-read\" array for pattern\r\n\t\tconst patternArray = [];\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(let i = 0; i < patternLength; i++)\r\n\t\t\tpatternArray.push(pattern.view[i]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for pattern\r\n\t\tfor(let i = 0; i <= (length - patternLength); i++)\r\n\t\t{\r\n\t\t\tlet equal = true;\r\n\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\tconst equalStart = (backward) ? (start - patternLength - i) : (start + i);\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < patternLength; j++)\r\n\t\t\t{\r\n\t\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\t\tif(this.view[j + equalStart] != patternArray[j])\r\n\t\t\t\t{\r\n\t\t\t\t\tequal = false;\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(equal)\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\t\treturn (backward) ? (start - patternLength - i) : (start + patternLength + i); // Position after the pattern found\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn (-1);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection OverlyComplexFunctionJS\r\n\t/**\r\n\t * Find first position of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {{id: number, position: number}}\r\n\t */\r\n\tfindFirstIn(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst result = {\r\n\t\t\tid: (-1),\r\n\t\t\tposition: (backward) ? 0 : (start + length),\r\n\t\t\tlength: 0\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tconst position = this.findPattern(patterns[i], start, length, backward);\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(position != (-1))\r\n\t\t\t{\r\n\t\t\t\tlet valid = false;\r\n\t\t\t\tconst patternLength = patterns[i].length;\r\n\r\n\t\t\t\tif(backward)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\t\tif((position - patternLength) >= (result.position - result.length))\r\n\t\t\t\t\t\tvalid = true;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\t\tif((position - patternLength) <= (result.position - result.length))\r\n\t\t\t\t\t\tvalid = true;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(valid)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult.position = position;\r\n\t\t\t\t\tresult.id = i;\r\n\t\t\t\t\tresult.length = patternLength;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all positions of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllIn(patterns, start = 0, length = (this.buffer.byteLength - start))\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tlet patternFound = {\r\n\t\t\tid: (-1),\r\n\t\t\tposition: start\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all accurences of patterns\r\n\t\tdo\r\n\t\t{\r\n\t\t\tconst position = patternFound.position;\r\n\t\t\t\r\n\t\t\tpatternFound = this.findFirstIn(patterns, patternFound.position, length);\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(patternFound.id == (-1))\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength -= (patternFound.position - position);\r\n\t\t\t\r\n\t\t\tresult.push({\r\n\t\t\t\tid: patternFound.id,\r\n\t\t\t\tposition: patternFound.position\r\n\t\t\t});\r\n\t\t} while(true); // eslint-disable-line\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all positions of a pattern\r\n\t * @param {ByteStream} pattern Stream having pattern value\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @returns {Array|number} Array with all pattern positions or (-1) if failed\r\n\t */\r\n\tfindAllPatternIn(pattern, start = 0, length = (this.buffer.byteLength - start))\r\n\t{\r\n\t\t//region Check input variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\tconst patternLength = pattern.buffer.byteLength;\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(patternLength > length)\r\n\t\t\treturn (-1);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make a \"pre-read\" array for pattern\r\n\t\tconst patternArray = Array.from(pattern.view);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for pattern\r\n\t\tfor(let i = 0; i <= (length - patternLength); i++)\r\n\t\t{\r\n\t\t\tlet equal = true;\r\n\t\t\tconst equalStart = start + i;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < patternLength; j++)\r\n\t\t\t{\r\n\t\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\t\tif(this.view[j + equalStart] != patternArray[j])\r\n\t\t\t\t{\r\n\t\t\t\t\tequal = false;\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(equal)\r\n\t\t\t{\r\n\t\t\t\tresult.push(start + patternLength + i); // Position after the pattern found\r\n\t\t\t\ti += (patternLength - 1); // On next step of \"for\" we will have \"i++\"\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Find first position of data, not included in patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {{left: {id: number, position: *}, right: {id: number, position: number}, value: ByteStream}}\r\n\t */\r\n\tfindFirstNotIn(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tconst result = {\r\n\t\t\tleft: {\r\n\t\t\t\tid: (-1),\r\n\t\t\t\tposition: start\r\n\t\t\t},\r\n\t\t\tright: {\r\n\t\t\t\tid: (-1),\r\n\t\t\t\tposition: 0\r\n\t\t\t},\r\n\t\t\tvalue: new ByteStream()\r\n\t\t};\r\n\t\t\r\n\t\tlet currentLength = length;\r\n\t\t//endregion\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\twhile(currentLength > 0)\r\n\t\t{\r\n\t\t\t//region Search for nearest \"pattern\"\r\n\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\tresult.right = this.findFirstIn(patterns,\r\n\t\t\t\t(backward) ? (start - length + currentLength) : (start + length - currentLength),\r\n\t\t\t\tcurrentLength,\r\n\t\t\t\tbackward);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region No pattern at all\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.right.id == (-1))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = currentLength;\r\n\t\t\t\t\r\n\t\t\t\tif(backward)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tstart -= length;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tstart = result.left.position;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tresult.value = new ByteStream();\r\n\t\t\t\t\r\n\t\t\t\tresult.value._buffer = this._buffer.slice(start, start + length);\r\n\t\t\t\tresult.value._view = new Uint8Array(result.value._buffer);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Check distance between two patterns\r\n\t\t\t// noinspection ConditionalExpressionJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.right.position != ((backward) ? (result.left.position - patterns[result.right.id].buffer.byteLength) : (result.left.position + patterns[result.right.id].buffer.byteLength)))\r\n\t\t\t{\r\n\t\t\t\tif(backward)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tstart = result.right.position + patterns[result.right.id].buffer.byteLength;\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tlength = result.left.position - result.right.position - patterns[result.right.id].buffer.byteLength;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tstart = result.left.position;\r\n\t\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\t\tlength = result.right.position - result.left.position - patterns[result.right.id].buffer.byteLength;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tresult.value = new ByteStream();\r\n\t\t\t\t\r\n\t\t\t\tresult.value._buffer = this._buffer.slice(start, start + length);\r\n\t\t\t\tresult.value._view = new Uint8Array(result.value._buffer);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Store information about previous pattern\r\n\t\t\tresult.left = result.right;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Change current length\r\n\t\t\tcurrentLength -= patterns[result.right.id]._buffer.byteLength;\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t\r\n\t\t//region Swap \"patterns\" in case of backward order\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\tconst temp = result.right;\r\n\t\t\tresult.right = result.left;\r\n\t\t\tresult.left = temp;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all positions of data, not included in patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllNotIn(patterns, start = null, length = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tlet patternFound = {\r\n\t\t\tleft: {\r\n\t\t\t\tid: (-1),\r\n\t\t\t\tposition: start\r\n\t\t\t},\r\n\t\t\tright: {\r\n\t\t\t\tid: (-1),\r\n\t\t\t\tposition: start\r\n\t\t\t},\r\n\t\t\tvalue: new ByteStream()\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all accurences of patterns\r\n\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\tdo\r\n\t\t{\r\n\t\t\tconst position = patternFound.right.position;\r\n\t\t\t\r\n\t\t\tpatternFound = this.findFirstNotIn(patterns, patternFound.right.position, length);\r\n\t\t\t\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength -= (patternFound.right.position - position);\r\n\t\t\t\r\n\t\t\tresult.push({\r\n\t\t\t\tleft: {\r\n\t\t\t\t\tid: patternFound.left.id,\r\n\t\t\t\t\tposition: patternFound.left.position\r\n\t\t\t\t},\r\n\t\t\t\tright: {\r\n\t\t\t\t\tid: patternFound.right.id,\r\n\t\t\t\t\tposition: patternFound.right.position\r\n\t\t\t\t},\r\n\t\t\t\tvalue: patternFound.value\r\n\t\t\t});\r\n\t\t} while(patternFound.right.id != (-1));\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS\r\n\t/**\r\n\t * Find position of a sequence of any patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array of pattern to look for\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {*}\r\n\t */\r\n\tfindFirstSequence(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find first byte from sequence\r\n\t\tconst firstIn = this.skipNotPatterns(patterns, start, length, backward);\r\n\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\tif(firstIn == (-1))\r\n\t\t{\r\n\t\t\treturn {\r\n\t\t\t\tposition: (-1),\r\n\t\t\t\tvalue: new ByteStream()\r\n\t\t\t};\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find first byte not in sequence\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst firstNotIn = this.skipPatterns(patterns,\r\n\t\t\tfirstIn,\r\n\t\t\tlength - ((backward) ? (start - firstIn) : (firstIn - start)),\r\n\t\t\tbackward);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Make output value\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = firstNotIn;\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = (firstIn - firstNotIn);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = firstIn;\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = (firstNotIn - firstIn);\r\n\t\t}\r\n\t\t\r\n\t\tconst value = new ByteStream();\r\n\t\t\r\n\t\tvalue._buffer = this._buffer.slice(start, start + length);\r\n\t\tvalue._view = new Uint8Array(value._buffer);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn {\r\n\t\t\tposition: firstNotIn,\r\n\t\t\tvalue\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all positions of a sequence of any patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array of patterns to search for\r\n\t * @param {?number} [start] Start position to search from\r\n\t * @param {?number} [length] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllSequences(patterns, start = null, length = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tlet patternFound = {\r\n\t\t\tposition: start,\r\n\t\t\tvalue: new ByteStream()\r\n\t\t};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all accurences of patterns\r\n\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\tdo\r\n\t\t{\r\n\t\t\tconst position = patternFound.position;\r\n\t\t\t\r\n\t\t\tpatternFound = this.findFirstSequence(patterns, patternFound.position, length);\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(patternFound.position != (-1))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength -= (patternFound.position - position);\r\n\t\t\t\t\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tposition: patternFound.position,\r\n\t\t\t\t\tvalue: patternFound.value\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t\r\n\t\t} while(patternFound.position != (-1));\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {ByteStream} leftPattern Left pattern to search for\r\n\t * @param {ByteStream} rightPattern Right pattern to search for\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedPatterns(leftPattern, rightPattern, start = null, length = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(leftPattern.isEqual(rightPattern))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tlet currentPositionLeft = 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all \"left patterns\" as sorted array\r\n\t\tconst leftPatterns = this.findAllPatternIn(leftPattern, start, length);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(leftPatterns.length == 0)\r\n\t\t\treturn result;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all \"right patterns\" as sorted array\r\n\t\tconst rightPatterns = this.findAllPatternIn(rightPattern, start, length);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(rightPatterns.length == 0)\r\n\t\t\treturn result;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine patterns\r\n\t\twhile(currentPositionLeft < leftPatterns.length)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(rightPatterns.length == 0)\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(leftPatterns[0] == rightPatterns[0])\r\n\t\t\t{\r\n\t\t\t\t// Possible situation when one pattern is a part of another\r\n\t\t\t\t// For example \"stream\" and \"endstream\"\r\n\t\t\t\t// In case when we have only \"endstream\" in fact \"stream\" will be also found at the same position\r\n\t\t\t\t// (position of the pattern is an index AFTER the pattern)\r\n\t\t\t\t\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tleft: leftPatterns[0],\r\n\t\t\t\t\tright: rightPatterns[0]\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tleftPatterns.splice(0, 1);\r\n\t\t\t\trightPatterns.splice(0, 1);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection ContinueStatementJS\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(leftPatterns[currentPositionLeft] > rightPatterns[0])\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile(leftPatterns[currentPositionLeft] < rightPatterns[0])\r\n\t\t\t{\r\n\t\t\t\tcurrentPositionLeft++;\r\n\t\t\t\t\r\n\t\t\t\tif(currentPositionLeft >= leftPatterns.length)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult.push({\r\n\t\t\t\tleft: leftPatterns[currentPositionLeft - 1],\r\n\t\t\t\tright: rightPatterns[0]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tleftPatterns.splice(currentPositionLeft - 1, 1);\r\n\t\t\trightPatterns.splice(0, 1);\r\n\t\t\t\r\n\t\t\tcurrentPositionLeft = 0;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Sort result\r\n\t\tresult.sort((a, b) => (a.left - b.left));\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {Array.<ByteStream>} inputLeftPatterns Array of left patterns to search for\r\n\t * @param {Array.<ByteStream>} inputRightPatterns Array of right patterns to search for\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedArrays(inputLeftPatterns, inputRightPatterns, start = null, length = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tlet currentPositionLeft = 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all \"left patterns\" as sorted array\r\n\t\tconst leftPatterns = this.findAllIn(inputLeftPatterns, start, length);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(leftPatterns.length == 0)\r\n\t\t\treturn result;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find all \"right patterns\" as sorted array\r\n\t\tconst rightPatterns = this.findAllIn(inputRightPatterns, start, length);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(rightPatterns.length == 0)\r\n\t\t\treturn result;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Combine patterns\r\n\t\twhile(currentPositionLeft < leftPatterns.length)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(rightPatterns.length == 0)\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(leftPatterns[0].position == rightPatterns[0].position)\r\n\t\t\t{\r\n\t\t\t\t// Possible situation when one pattern is a part of another\r\n\t\t\t\t// For example \"stream\" and \"endstream\"\r\n\t\t\t\t// In case when we have only \"endstream\" in fact \"stream\" will be also found at the same position\r\n\t\t\t\t// (position of the pattern is an index AFTER the pattern)\r\n\t\t\t\t\r\n\t\t\t\tresult.push({\r\n\t\t\t\t\tleft: leftPatterns[0],\r\n\t\t\t\t\tright: rightPatterns[0]\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t\tleftPatterns.splice(0, 1);\r\n\t\t\t\trightPatterns.splice(0, 1);\r\n\t\t\t\t\r\n\t\t\t\t// noinspection ContinueStatementJS\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(leftPatterns[currentPositionLeft].position > rightPatterns[0].position)\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\twhile(leftPatterns[currentPositionLeft].position < rightPatterns[0].position)\r\n\t\t\t{\r\n\t\t\t\tcurrentPositionLeft++;\r\n\t\t\t\t\r\n\t\t\t\tif(currentPositionLeft >= leftPatterns.length)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tresult.push({\r\n\t\t\t\tleft: leftPatterns[currentPositionLeft - 1],\r\n\t\t\t\tright: rightPatterns[0]\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\tleftPatterns.splice(currentPositionLeft - 1, 1);\r\n\t\t\trightPatterns.splice(0, 1);\r\n\t\t\t\r\n\t\t\tcurrentPositionLeft = 0;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Sort result\r\n\t\tresult.sort((a, b) => (a.left.position - b.left.position));\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS, FunctionTooLongJS\r\n\t/**\r\n\t * Replace one patter with other\r\n\t * @param {ByteStream} searchPattern The pattern to search for\r\n\t * @param {ByteStream} replacePattern The pattern to replace initial pattern\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {Array|null} [findAllResult=null] Pre-calculated results of \"findAllIn\"\r\n\t * @returns {*}\r\n\t */\r\n\treplacePattern(searchPattern, replacePattern, start = null, length = null, findAllResult = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\t\r\n\t\tlet i;\r\n\t\tconst output = {\r\n\t\t\tstatus: (-1),\r\n\t\t\tsearchPatternPositions: [],\r\n\t\t\treplacePatternPositions: []\r\n\t\t};\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(start > (this.buffer.byteLength - 1))\r\n\t\t\treturn false;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t\r\n\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find a pattern to search for\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(findAllResult == null)\r\n\t\t{\r\n\t\t\tresult = this.findAllIn([searchPattern], start, length);\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.length == 0)\r\n\t\t\t\treturn output;\r\n\t\t}\r\n\t\telse\r\n\t\t\tresult = findAllResult;\r\n\t\t\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\toutput.searchPatternPositions.push(...Array.from(result, element => element.position));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Variables for new buffer initialization\r\n\t\tconst patternDifference = searchPattern.buffer.byteLength - replacePattern.buffer.byteLength;\r\n\t\t\r\n\t\tconst changedBuffer = new ArrayBuffer(this.view.length - (result.length * patternDifference));\r\n\t\tconst changedView = new Uint8Array(changedBuffer);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Copy data from 0 to start\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tchangedView.set(new Uint8Array(this.buffer, 0, start));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Replace pattern\r\n\t\tfor(i = 0; i < result.length; i++)\r\n\t\t{\r\n\t\t\t//region Initial variables\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, ConditionalExpressionJS, EqualityComparisonWithCoercionJS\r\n\t\t\tconst currentPosition = (i == 0) ? start : result[i - 1].position;\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Copy bytes other then search pattern\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tchangedView.set(new Uint8Array(this.buffer, currentPosition, result[i].position - searchPattern.buffer.byteLength - currentPosition), currentPosition - i * patternDifference);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Put replace pattern in a new buffer\r\n\t\t\tchangedView.set(replacePattern.view, result[i].position - searchPattern.buffer.byteLength - i * patternDifference);\r\n\t\t\t\r\n\t\t\toutput.replacePatternPositions.push(result[i].position - searchPattern.buffer.byteLength - i * patternDifference);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Copy data from the end of old buffer\r\n\t\ti--;\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tchangedView.set(new Uint8Array(this.buffer, result[i].position, this.buffer.byteLength - result[i].position), result[i].position - searchPattern.buffer.byteLength + replacePattern.buffer.byteLength - i * patternDifference);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Re-initialize existing buffer\r\n\t\tthis.buffer = changedBuffer;\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t//endregion\r\n\t\t\r\n\t\toutput.status = 1;\r\n\t\t\r\n\t\treturn output;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Skip any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {*}\r\n\t */\r\n\tskipPatterns(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlet result = start;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for pattern\r\n\t\tfor(let k = 0; k < patterns.length; k++)\r\n\t\t{\r\n\t\t\tconst patternLength = patterns[k].buffer.byteLength;\r\n\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\tconst equalStart = (backward) ? (result - patternLength) : (result);\r\n\t\t\tlet equal = true;\r\n\t\t\t\r\n\t\t\tfor(let j = 0; j < patternLength; j++)\r\n\t\t\t{\r\n\t\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\t\tif(this.view[j + equalStart] != patterns[k].view[j])\r\n\t\t\t\t{\r\n\t\t\t\t\tequal = false;\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(equal)\r\n\t\t\t{\r\n\t\t\t\tk = (-1);\r\n\t\t\t\t\r\n\t\t\t\tif(backward)\r\n\t\t\t\t{\r\n\t\t\t\t\tresult -= patternLength;\r\n\t\t\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\t\t\t\tif(result <= 0)\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tresult += patternLength;\r\n\t\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\t\tif(result >= (start + length))\r\n\t\t\t\t\t\treturn result;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleLoopsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n\t/**\r\n\t * Skip any pattern not from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should not be ommited\r\n\t * @param start\r\n\t * @param length\r\n\t * @param backward\r\n\t * @returns {number}\r\n\t */\r\n\tskipNotPatterns(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS, ConditionalExpressionJS\r\n\t\t\tstart = (backward) ? this.buffer.byteLength : 0;\r\n\t\t}\r\n\t\t\r\n\t\tif(start > this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = this.buffer.byteLength;\r\n\t\t}\r\n\t\t\r\n\t\tif(backward)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > start)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = start;\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\t\tif(length == null)\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tif(length > (this.buffer.byteLength - start))\r\n\t\t\t{\r\n\t\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\t\tlength = this.buffer.byteLength - start;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\tlet result = (-1);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for pattern\r\n\t\tfor(let i = 0; i < length; i++)\r\n\t\t{\r\n\t\t\tfor(let k = 0; k < patterns.length; k++)\r\n\t\t\t{\r\n\t\t\t\tconst patternLength = patterns[k].buffer.byteLength;\r\n\t\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\t\tconst equalStart = (backward) ? (start - i - patternLength) : (start + i);\r\n\t\t\t\tlet equal = true;\r\n\t\t\t\t\r\n\t\t\t\tfor(let j = 0; j < patternLength; j++)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\t\t\tif(this.view[j + equalStart] != patterns[k].view[j])\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tequal = false;\r\n\t\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\tif(equal)\r\n\t\t\t\t{\r\n\t\t\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\t\t\tresult = (backward) ? (start - i) : (start + i); // Exact position of pattern found\r\n\t\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(result != (-1))\r\n\t\t\t{\r\n\t\t\t\t// noinspection BreakStatementJS\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class SeqStream \r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"SeqStream\" class\r\n\t * @param {{[stream]: ByteStream, [length]: number, [backward]: boolean, [start]: number, [appendBlock]: number}} parameters\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * Major stream\r\n\t\t * @type {ByteStream}\r\n\t\t */\r\n\t\tthis.stream = new ByteStream();\r\n\t\t/**\r\n\t\t * Length of the major stream\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis._length = 0;\r\n\t\t/**\r\n\t\t * Flag to search in backward direction\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.backward = false;\r\n\t\t/**\r\n\t\t * Start position to search\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis._start = 0;\r\n\t\t/**\r\n\t\t * Length of a block when append information to major stream\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.appendBlock = 0;\r\n\t\t\r\n\t\tthis.prevLength = 0;\r\n\t\tthis.prevStart = 0;\r\n\t\t\r\n\t\tfor(const key of Object.keys(parameters))\r\n\t\t{\r\n\t\t\tswitch(key)\r\n\t\t\t{\r\n\t\t\t\tcase \"stream\":\r\n\t\t\t\t\tthis.stream = parameters.stream;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"backward\":\r\n\t\t\t\t\tthis.backward = parameters.backward;\r\n\t\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\t\tthis._start = this.stream.buffer.byteLength;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"length\":\r\n\t\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\t\tthis._length = parameters.length;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"start\":\r\n\t\t\t\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\t\t\t\tthis._start = parameters.start;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"appendBlock\":\r\n\t\t\t\t\tthis.appendBlock = parameters.appendBlock;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"view\":\r\n\t\t\t\t\tthis.stream = new ByteStream({ view: parameters.view});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"buffer\":\r\n\t\t\t\t\tthis.stream = new ByteStream({ buffer: parameters.buffer});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"string\":\r\n\t\t\t\t\tthis.stream = new ByteStream({ string: parameters.string});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"hexstring\":\r\n\t\t\t\t\tthis.stream = new ByteStream({ hexstring: parameters.hexstring});\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"stream\" property\r\n\t * @param {ByteStream} value\r\n\t */\r\n\tset stream(value)\r\n\t{\r\n\t\tthis._stream = value;\r\n\t\t\r\n\t\tthis.prevLength = this._length;\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._length = value._buffer.byteLength;\r\n\t\t\r\n\t\tthis.prevStart = this._start;\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._start = 0;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"stream\" property\r\n\t * @returns {ByteStream}\r\n\t */\r\n\tget stream()\r\n\t{\r\n\t\treturn this._stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Setter for \"length\" property\r\n\t * @param {number} value\r\n\t */\r\n\tset length(value)\r\n\t{\r\n\t\tthis.prevLength = this._length;\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._length = value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Getter for \"length\" property\r\n\t * @returns {number}\r\n\t */\r\n\tget length()\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(this.appendBlock)\r\n\t\t\treturn this.start;\r\n\t\t\r\n\t\treturn this._length;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Setter for \"start\" property\r\n\t * @param {number} value\r\n\t */\r\n\tset start(value)\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(value > this.stream.buffer.byteLength)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t//region Initialization of \"prev\" internal variables\r\n\t\tthis.prevStart = this._start;\r\n\t\tthis.prevLength = this._length;\r\n\t\t//endregion\r\n\t\t\r\n\t\t// noinspection JSUnusedGlobalSymbols, ConditionalExpressionJS\r\n\t\tthis._length -= ((this.backward) ? (this._start - value) : (value - this._start));\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._start = value;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Getter for \"start\" property\r\n\t * @returns {number}\r\n\t */\r\n\tget start()\r\n\t{\r\n\t\treturn this._start;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return ArrayBuffer with having value of existing SeqStream length\r\n\t * @return {ArrayBuffer}\r\n\t */\r\n\tget buffer()\r\n\t{\r\n\t\treturn this._stream._buffer.slice(0, this._length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Reset current position of the \"SeqStream\"\r\n\t */\r\n\tresetPosition()\r\n\t{\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._start = this.prevStart;\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis._length = this.prevLength;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find any byte pattern in \"ByteStream\"\r\n\t * @param {ByteStream} pattern Stream having pattern value\r\n\t * @param {?number} [gap] Maximum gap between start position and position of nearest object\r\n\t * @returns {number}\r\n\t */\r\n\tfindPattern(pattern, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > this.length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = this.length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Find pattern\r\n\t\tconst result = this.stream.findPattern(pattern, this.start, this.length, this.backward);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(result == (-1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\tif(result < (this.start - pattern.buffer.byteLength - gap))\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\tif(result > (this.start + pattern.buffer.byteLength + gap))\r\n\t\t\t\treturn (-1);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tthis.start = result;\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find first position of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [gap] Maximum gap between start position and position of nearest object\r\n\t * @returns {{id: number, position: number}}\r\n\t */\r\n\tfindFirstIn(patterns, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > this.length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = this.length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for patterns\r\n\t\tconst result = this.stream.findFirstIn(patterns, this.start, this.length, this.backward);\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(result.id == (-1))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\tif(result.position < (this.start - patterns[result.id].buffer.byteLength - gap))\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: (-1),\r\n\t\t\t\t\tposition: (this.backward) ? 0 : (this.start + this.length)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(result.position > (this.start + patterns[result.id].buffer.byteLength + gap))\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid: (-1),\r\n\t\t\t\t\tposition: (this.backward) ? 0 : (this.start + this.length)\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tthis.start = result.position;\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all positions of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be found\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllIn(patterns)\r\n\t{\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this.start - this.length) : this.start;\r\n\t\t\r\n\t\treturn this.stream.findAllIn(patterns, start, this.length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS\r\n\t/**\r\n\t * Find first position of data, not included in patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} gap Maximum gap between start position and position of nearest object\r\n\t * @returns {*}\r\n\t */\r\n\tfindFirstNotIn(patterns, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > this._length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = this._length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for patterns\r\n\t\tconst result = this._stream.findFirstNotIn(patterns, this._start, this._length, this.backward);\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif((result.left.id == (-1)) && (result.right.id == (-1)))\r\n\t\t\treturn result;\r\n\t\t\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.right.id != (-1))\r\n\t\t\t{\r\n\t\t\t\tif(result.right.position < (this._start - patterns[result.right.id]._buffer.byteLength - gap))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\tid: (-1),\r\n\t\t\t\t\t\t\tposition: this._start\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\tid: (-1),\r\n\t\t\t\t\t\t\tposition: 0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tvalue: new ByteStream()\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.left.id != (-1))\r\n\t\t\t{\r\n\t\t\t\tif(result.left.position > (this._start + patterns[result.left.id]._buffer.byteLength + gap))\r\n\t\t\t\t{\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\tleft: {\r\n\t\t\t\t\t\t\tid: (-1),\r\n\t\t\t\t\t\t\tposition: this._start\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tright: {\r\n\t\t\t\t\t\t\tid: (-1),\r\n\t\t\t\t\t\t\tposition: 0\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tvalue: new ByteStream()\r\n\t\t\t\t\t};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.left.id == (-1))\r\n\t\t\t\tthis.start = 0;\r\n\t\t\telse\r\n\t\t\t\tthis.start = result.left.position;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(result.right.id == (-1))\r\n\t\t\t\tthis.start = (this._start + this._length);\r\n\t\t\telse\r\n\t\t\t\tthis.start = result.right.position;\r\n\t\t}\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all positions of data, not included in patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllNotIn(patterns)\r\n\t{\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this._start - this._length) : this._start;\r\n\t\t\r\n\t\treturn this._stream.findAllNotIn(patterns, start, this._length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find position of a sequence of any patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [length] Length to search sequence for\r\n\t * @param {?number} [gap] Maximum gap between start position and position of nearest object\r\n\t * @returns {*}\r\n\t */\r\n\tfindFirstSequence(patterns, length = null, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((length == null) || (length > this._length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this._length;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Search for sequence\r\n\t\tconst result = this._stream.findFirstSequence(patterns, this._start, length, this.backward);\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(result.value.buffer.byteLength == 0)\r\n\t\t\treturn result;\r\n\t\t\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\tif(result.position < (this._start - result.value._buffer.byteLength - gap))\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tposition: (-1),\r\n\t\t\t\t\tvalue: new ByteStream()\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(result.position > (this._start + result.value._buffer.byteLength + gap))\r\n\t\t\t{\r\n\t\t\t\treturn {\r\n\t\t\t\t\tposition: (-1),\r\n\t\t\t\t\tvalue: new ByteStream()\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tthis.start = result.position;\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find position of a sequence of any patterns from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be found\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllSequences(patterns)\r\n\t{\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this.start - this.length) : this.start;\r\n\t\t\r\n\t\treturn this.stream.findAllSequences(patterns, start, this.length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {ByteStream} leftPattern Left pattern to search for\r\n\t * @param {ByteStream} rightPattern Right pattern to search for\r\n\t * @param {?number} [gap] Maximum gap between start position and position of nearest object\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedPatterns(leftPattern, rightPattern, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > this.length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = this.length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this.start - this.length) : this.start;\r\n\t\t\r\n\t\t//region Search for patterns\r\n\t\tconst result = this.stream.findPairedPatterns(leftPattern, rightPattern, start, this.length);\r\n\t\tif(result.length)\r\n\t\t{\r\n\t\t\tif(this.backward)\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(result[0].right < (this.start - rightPattern.buffer.byteLength - gap))\r\n\t\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(result[0].left > (this.start + leftPattern.buffer.byteLength + gap))\r\n\t\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {Array.<ByteStream>} leftPatterns Array of left patterns to search for\r\n\t * @param {Array.<ByteStream>} rightPatterns Array of right patterns to search for\r\n\t * @param {?number} [gap] Maximum gap between start position and position of nearest object\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedArrays(leftPatterns, rightPatterns, gap = null)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((gap == null) || (gap > this.length))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tgap = this.length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this.start - this.length) : this.start;\r\n\t\t\r\n\t\t//region Search for patterns\r\n\t\tconst result = this.stream.findPairedArrays(leftPatterns, rightPatterns, start, this.length);\r\n\t\tif(result.length)\r\n\t\t{\r\n\t\t\tif(this.backward)\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(result[0].right.position < (this.start - rightPatterns[result[0].right.id].buffer.byteLength - gap))\r\n\t\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(result[0].left.position > (this.start + leftPatterns[result[0].left.id].buffer.byteLength + gap))\r\n\t\t\t\t\treturn [];\r\n\t\t\t}\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Replace one patter with other\r\n\t * @param {ByteStream} searchPattern The pattern to search for\r\n\t * @param {ByteStream} replacePattern The pattern to replace initial pattern\r\n\t * @returns {*}\r\n\t */\r\n\treplacePattern(searchPattern, replacePattern)\r\n\t{\r\n\t\t// In case of \"backward order\" the start position is at the end on stream.\r\n\t\t// In case of \"normal order\" the start position is at the begging of the stream.\r\n\t\t// But in fact for search for all patterns we need to have start position in \"normal order\".\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst start = (this.backward) ? (this.start - this.length) : this.start;\r\n\t\t\r\n\t\treturn this.stream.replacePattern(searchPattern, replacePattern, start, this.length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Skip of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @returns {*}\r\n\t */\r\n\tskipPatterns(patterns)\r\n\t{\r\n\t\tconst result = this.stream.skipPatterns(patterns, this.start, this.length, this.backward);\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tthis.start = result;\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Skip of any pattern from input array\r\n\t * @param {Array.<ByteStream>} patterns Array with patterns which should be ommited\r\n\t * @returns {number}\r\n\t */\r\n\tskipNotPatterns(patterns)\r\n\t{\r\n\t\tconst result = this.stream.skipNotPatterns(patterns, this.start, this.length, this.backward);\r\n\t\t// noinspection NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\tif(result == (-1))\r\n\t\t\treturn (-1);\r\n\t\t\r\n\t\t//region Create new values\r\n\t\tthis.start = result;\r\n\t\t//endregion ;\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Append a new \"Stream\" content to the current \"Stream\"\r\n\t * @param {ByteStream} stream A new \"stream\" to append to current \"stream\"\r\n\t */\r\n\tappend(stream)\r\n\t{\r\n\t\tif((this._start + stream._buffer.byteLength) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\tif(stream._buffer.byteLength > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = (stream._buffer.byteLength + 1000);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tthis._stream._view.set(stream._view, this._start);\r\n\t\t\r\n\t\tthis._length += (stream._buffer.byteLength * 2);\r\n\t\tthis.start = (this._start + stream._buffer.byteLength);\r\n\t\tthis.prevLength -= (stream._buffer.byteLength * 2);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Append a \"view\" content to the current \"Stream\"\r\n\t * @param {Uint8Array} view A new \"view\" to append to current \"stream\"\r\n\t */\r\n\tappendView(view)\r\n\t{\r\n\t\tif((this._start + view.length) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\tif(view.length > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = (view.length + 1000);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tthis._stream._view.set(view, this._start);\r\n\t\t\r\n\t\tthis._length += (view.length * 2);\r\n\t\tthis.start = (this._start + view.length);\r\n\t\tthis.prevLength -= (view.length * 2);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Append a new char to the current \"Stream\"\r\n\t * @param {number} char A new char to append to current \"stream\"\r\n\t */\r\n\tappendChar(char)\r\n\t{\r\n\t\tif((this._start + 1) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnLefSideOfComparisonJS\r\n\t\t\tif(1 > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = 1000;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tthis._stream._view[this._start] = char;\r\n\t\t\r\n\t\tthis._length += 2;\r\n\t\tthis.start = (this._start + 1);\r\n\t\tthis.prevLength -= 2;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionNamingConventionJS\r\n\t/**\r\n\t * Append a new number to the current \"Stream\"\r\n\t * @param {number} number A new unsigned 16-bit integer to append to current \"stream\"\r\n\t */\r\n\tappendUint16(number)\r\n\t{\r\n\t\tif((this._start + 2) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnLefSideOfComparisonJS\r\n\t\t\tif(2 > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = 1000;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tconst value = new Uint16Array([number]);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\tthis._stream._view[this._start] = view[1];\r\n\t\tthis._stream._view[this._start + 1] = view[0];\r\n\t\t\r\n\t\tthis._length += 4;\r\n\t\tthis.start = (this._start + 2);\r\n\t\tthis.prevLength -= 4;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionNamingConventionJS\r\n\t/**\r\n\t * Append a new number to the current \"Stream\"\r\n\t * @param {number} number A new unsigned 24-bit integer to append to current \"stream\"\r\n\t */\r\n\tappendUint24(number)\r\n\t{\r\n\t\tif((this._start + 3) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnLefSideOfComparisonJS\r\n\t\t\tif(3 > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = 1000;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tconst value = new Uint32Array([number]);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\tthis._stream._view[this._start] = view[2];\r\n\t\tthis._stream._view[this._start + 1] = view[1];\r\n\t\tthis._stream._view[this._start + 2] = view[0];\r\n\t\t\r\n\t\tthis._length += 6;\r\n\t\tthis.start = (this._start + 3);\r\n\t\tthis.prevLength -= 6;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionNamingConventionJS\r\n\t/**\r\n\t * Append a new number to the current \"Stream\"\r\n\t * @param {number} number A new unsigned 32-bit integer to append to current \"stream\"\r\n\t */\r\n\tappendUint32(number)\r\n\t{\r\n\t\tif((this._start + 4) > this._stream._buffer.byteLength)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnLefSideOfComparisonJS\r\n\t\t\tif(4 > this.appendBlock)\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tthis.appendBlock = 1000;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\tthis._stream.realloc(this._stream._buffer.byteLength + this.appendBlock);\r\n\t\t}\r\n\t\t\r\n\t\tconst value = new Uint32Array([number]);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\tthis._stream._view[this._start] = view[3];\r\n\t\tthis._stream._view[this._start + 1] = view[2];\r\n\t\tthis._stream._view[this._start + 2] = view[1];\r\n\t\tthis._stream._view[this._start + 3] = view[0];\r\n\t\t\r\n\t\tthis._length += 8;\r\n\t\tthis.start = (this._start + 4);\r\n\t\tthis.prevLength -= 8;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Get a block of data\r\n\t * @param {number} size Size of the data block to get\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {Array}\r\n\t */\r\n\tgetBlock(size, changeLength = true)\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(this._length <= 0)\r\n\t\t\treturn [];\r\n\t\t\r\n\t\tif(this._length < size)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tsize = this._length;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Getting result depends on \"backward\" flag\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\tconst buffer = this._stream._buffer.slice(this._length - size, this._length);\r\n\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\r\n\t\t\tresult = new Array(size);\r\n\t\t\t\r\n\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\tfor(let i = 0; i < size; i++)\r\n\t\t\t\tresult[size - 1 - i] = view[i];\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tconst buffer = this._stream._buffer.slice(this._start, this._start + size);\r\n\t\t\t\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tresult = Array.from(new Uint8Array(buffer));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"length\" value if needed\r\n\t\tif(changeLength)\r\n\t\t{\r\n\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\tthis.start += ((this.backward) ? ((-1) * size) : size);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS, FunctionNamingConventionJS\r\n\t/**\r\n\t * Get 2-byte unsigned integer value\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {number}\r\n\t */\r\n\tgetUint16(changeLength = true)\r\n\t{\r\n\t\tconst block = this.getBlock(2, changeLength);\r\n\t\t\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(block.length < 2)\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert byte array to \"Uint16Array\" value\r\n\t\tconst value = new Uint16Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\tview[0] = block[1];\r\n\t\tview[1] = block[0];\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS, FunctionNamingConventionJS\r\n\t/**\r\n\t * Get 2-byte signed integer value\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {number}\r\n\t */\r\n\tgetInt16(changeLength = true)\r\n\t{\r\n\t\tconst block = this.getBlock(2, changeLength);\r\n\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(block.length < 2)\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert byte array to \"Int16Array\" value\r\n\t\tconst value = new Int16Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\r\n\t\tview[0] = block[1];\r\n\t\tview[1] = block[0];\r\n\t\t//endregion\r\n\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS, FunctionNamingConventionJS\r\n\t/**\r\n\t * Get 3-byte unsigned integer value\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {number}\r\n\t */\r\n\tgetUint24(changeLength = true)\r\n\t{\r\n\t\tconst block = this.getBlock(3, changeLength);\r\n\t\t\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(block.length < 3)\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert byte array to \"Uint32Array\" value\r\n\t\tconst value = new Uint32Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tfor(let i = 3; i >= 1; i--)\r\n\t\t\tview[3 - i] = block[i - 1];\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS, FunctionNamingConventionJS\r\n\t/**\r\n\t * Get 4-byte unsigned integer value\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {number}\r\n\t */\r\n\tgetUint32(changeLength = true)\r\n\t{\r\n\t\tconst block = this.getBlock(4, changeLength);\r\n\t\t\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(block.length < 4)\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert byte array to \"Uint32Array\" value\r\n\t\tconst value = new Uint32Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tfor(let i = 3; i >= 0; i--)\r\n\t\t\tview[3 - i] = block[i];\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get 4-byte signed integer value\r\n\t * @param {boolean} [changeLength=true] Should we change \"length\" and \"start\" value after reading the data block\r\n\t * @returns {number}\r\n\t */\r\n\tgetInt32(changeLength = true)\r\n\t{\r\n\t\tconst block = this.getBlock(4, changeLength);\r\n\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(block.length < 4)\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\r\n\t\t//region Convert byte array to \"Int32Array\" value\r\n\t\tconst value = new Int32Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tfor(let i = 3; i >= 0; i--)\r\n\t\t\tview[3 - i] = block[i];\r\n\t\t//endregion\r\n\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n// noinspection FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS, OverlyComplexFunctionJS, FunctionTooLongJS\r\n/**\r\n * Get parsed values from \"byte map\"\r\n * @param {ByteStream} stream Stream to parse data from\r\n * @param {Object} map Object with information how to parse \"byte map\"\r\n * @param {number} elements Number of elements in parsing byte map\r\n * @param {?number} [start=null] Start position to parse from\r\n * @param {?number} [length=null] Length of byte block to parse from\r\n * @returns {*}\r\n */\r\nexport function parseByteMap(stream, map, elements, start = null, length = null)\r\n{\r\n\t/*\r\n\t Map example:\r\n\t \r\n\t let map = [\r\n\t {\r\n\t type: \"string\",\r\n\t name: \"type\",\r\n\t minlength: 1,\r\n\t maxlength: 1,\r\n\t func: function(array)\r\n\t {\r\n\t let result = {\r\n\t status: (-1),\r\n\t length: 1\r\n\t };\r\n\t \r\n\t switch(array[0])\r\n\t {\r\n\t case 0x6E: // \"n\"\r\n\t result.value = \"n\";\r\n\t break;\r\n\t case 0x66: // \"f\"\r\n\t result.value = \"f\";\r\n\t break;\r\n\t default:\r\n\t return result;\r\n\t }\r\n\t \r\n\t result.status = 1;\r\n\t \r\n\t return result;\r\n\t }\r\n\t },\r\n\t {\r\n\t type: \"check\",\r\n\t minlength: 1,\r\n\t maxlength: 2,\r\n\t func: function(array)\r\n\t {\r\n\t let position = (-1);\r\n\t \r\n\t if(array[0] == 0x0A)\r\n\t position = 1;\r\n\t if(array[1] == 0x0A)\r\n\t position = 2;\r\n\t \r\n\t return {\r\n\t status: (position > 0) ? 1 : (-1),\r\n\t length: position\r\n\t };\r\n\t }\r\n\t }\r\n\t ];\r\n\t */\r\n\t\r\n\t//region Initial variables\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\tif(start === null)\r\n\t{\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tstart = 0;\r\n\t}\r\n\t\r\n\t// noinspection NonBlockStatementBodyJS\r\n\tif(start > (stream.buffer.byteLength - 1))\r\n\t\treturn false;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\tif(length === null)\r\n\t{\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tlength = stream.buffer.byteLength - start;\r\n\t}\r\n\t\r\n\tif(length > (stream.buffer.byteLength - start))\r\n\t{\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tlength = stream.buffer.byteLength - start;\r\n\t}\r\n\t\r\n\tlet dataView;\r\n\t\r\n\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\tif((start == 0) && (length == stream.buffer.byteLength))\r\n\t\tdataView = stream.view;\r\n\telse\r\n\t\tdataView = new Uint8Array(stream.buffer, start, length);\r\n\t\r\n\tconst resultArray = new Array(elements);\r\n\tlet elementsCount = 0;\r\n\t\r\n\tlet count = 0;\r\n\tconst mapLength = map.length;\r\n\t//endregion\r\n\t\r\n\t//region Parse all byte, structure by structure\r\n\twhile(count < length)\r\n\t{\r\n\t\tlet structureLength = 0;\r\n\t\t\r\n\t\tresultArray[elementsCount] = {};\r\n\t\t\r\n\t\tfor(let i = 0; i < mapLength; i++)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, JSUnresolvedVariable, EqualityComparisonWithCoercionJS\r\n\t\t\tif(map[i].maxlength == 0)\r\n\t\t\t{\r\n\t\t\t\t// noinspection NonBlockStatementBodyJS\r\n\t\t\t\tif(\"defaultValue\" in map[i])\r\n\t\t\t\t\t(resultArray[elementsCount])[map[i].name] = map[i].defaultValue;\r\n\t\t\t\t\r\n\t\t\t\t// noinspection ContinueStatementJS\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tconst array = new Array(map[i].maxlength);\r\n\t\t\t\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tfor(let j = 0; j < map[i].maxlength; j++)\r\n\t\t\t{\r\n\t\t\t\t// noinspection IncrementDecrementResultUsedJS\r\n\t\t\t\tarray[j] = dataView[count++];\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tconst result = (map[i].func)(array);\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(result.status == (-1))\r\n\t\t\t{\r\n\t\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS, EqualityComparisonWithCoercionJS\r\n\t\t\t\tif(resultArray.length == 1)\r\n\t\t\t\t\treturn [];\r\n\r\n\t\t\t\treturn resultArray.slice(0, resultArray.length - 1);\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(map[i].type != \"check\")\r\n\t\t\t\t(resultArray[elementsCount])[map[i].name] = result.value;\r\n\t\t\t\r\n\t\t\t// noinspection JSUnresolvedVariable\r\n\t\t\tcount -= (map[i].maxlength - result.length);\r\n\t\t\tstructureLength += result.length;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection IncrementDecrementResultUsedJS\r\n\t\t(resultArray[elementsCount++]).structureLength = structureLength;\r\n\t}\r\n\t//endregion\r\n\t\r\n\treturn resultArray;\r\n}\r\n//**************************************************************************************\r\n//region \"Bits-to-string\" array\r\nconst bitsToStringArray = [\r\n\t\"00000000\", \"00000001\", \"00000010\",\r\n\t\"00000011\", \"00000100\", \"00000101\",\r\n\t\"00000110\", \"00000111\", \"00001000\",\r\n\t\"00001001\", \"00001010\", \"00001011\",\r\n\t\"00001100\", \"00001101\", \"00001110\",\r\n\t\"00001111\", \"00010000\", \"00010001\",\r\n\t\"00010010\", \"00010011\", \"00010100\",\r\n\t\"00010101\", \"00010110\", \"00010111\",\r\n\t\"00011000\", \"00011001\", \"00011010\",\r\n\t\"00011011\", \"00011100\", \"00011101\",\r\n\t\"00011110\", \"00011111\", \"00100000\",\r\n\t\"00100001\", \"00100010\", \"00100011\",\r\n\t\"00100100\", \"00100101\", \"00100110\",\r\n\t\"00100111\", \"00101000\", \"00101001\",\r\n\t\"00101010\", \"00101011\", \"00101100\",\r\n\t\"00101101\", \"00101110\", \"00101111\",\r\n\t\"00110000\", \"00110001\", \"00110010\",\r\n\t\"00110011\", \"00110100\", \"00110101\",\r\n\t\"00110110\", \"00110111\", \"00111000\",\r\n\t\"00111001\", \"00111010\", \"00111011\",\r\n\t\"00111100\", \"00111101\", \"00111110\",\r\n\t\"00111111\", \"01000000\", \"01000001\",\r\n\t\"01000010\", \"01000011\", \"01000100\",\r\n\t\"01000101\", \"01000110\", \"01000111\",\r\n\t\"01001000\", \"01001001\", \"01001010\",\r\n\t\"01001011\", \"01001100\", \"01001101\",\r\n\t\"01001110\", \"01001111\", \"01010000\",\r\n\t\"01010001\", \"01010010\", \"01010011\",\r\n\t\"01010100\", \"01010101\", \"01010110\",\r\n\t\"01010111\", \"01011000\", \"01011001\",\r\n\t\"01011010\", \"01011011\", \"01011100\",\r\n\t\"01011101\", \"01011110\", \"01011111\",\r\n\t\"01100000\", \"01100001\", \"01100010\",\r\n\t\"01100011\", \"01100100\", \"01100101\",\r\n\t\"01100110\", \"01100111\", \"01101000\",\r\n\t\"01101001\", \"01101010\", \"01101011\",\r\n\t\"01101100\", \"01101101\", \"01101110\",\r\n\t\"01101111\", \"01110000\", \"01110001\",\r\n\t\"01110010\", \"01110011\", \"01110100\",\r\n\t\"01110101\", \"01110110\", \"01110111\",\r\n\t\"01111000\", \"01111001\", \"01111010\",\r\n\t\"01111011\", \"01111100\", \"01111101\",\r\n\t\"01111110\", \"01111111\", \"10000000\",\r\n\t\"10000001\", \"10000010\", \"10000011\",\r\n\t\"10000100\", \"10000101\", \"10000110\",\r\n\t\"10000111\", \"10001000\", \"10001001\",\r\n\t\"10001010\", \"10001011\", \"10001100\",\r\n\t\"10001101\", \"10001110\", \"10001111\",\r\n\t\"10010000\", \"10010001\", \"10010010\",\r\n\t\"10010011\", \"10010100\", \"10010101\",\r\n\t\"10010110\", \"10010111\", \"10011000\",\r\n\t\"10011001\", \"10011010\", \"10011011\",\r\n\t\"10011100\", \"10011101\", \"10011110\",\r\n\t\"10011111\", \"10100000\", \"10100001\",\r\n\t\"10100010\", \"10100011\", \"10100100\",\r\n\t\"10100101\", \"10100110\", \"10100111\",\r\n\t\"10101000\", \"10101001\", \"10101010\",\r\n\t\"10101011\", \"10101100\", \"10101101\",\r\n\t\"10101110\", \"10101111\", \"10110000\",\r\n\t\"10110001\", \"10110010\", \"10110011\",\r\n\t\"10110100\", \"10110101\", \"10110110\",\r\n\t\"10110111\", \"10111000\", \"10111001\",\r\n\t\"10111010\", \"10111011\", \"10111100\",\r\n\t\"10111101\", \"10111110\", \"10111111\",\r\n\t\"11000000\", \"11000001\", \"11000010\",\r\n\t\"11000011\", \"11000100\", \"11000101\",\r\n\t\"11000110\", \"11000111\", \"11001000\",\r\n\t\"11001001\", \"11001010\", \"11001011\",\r\n\t\"11001100\", \"11001101\", \"11001110\",\r\n\t\"11001111\", \"11010000\", \"11010001\",\r\n\t\"11010010\", \"11010011\", \"11010100\",\r\n\t\"11010101\", \"11010110\", \"11010111\",\r\n\t\"11011000\", \"11011001\", \"11011010\",\r\n\t\"11011011\", \"11011100\", \"11011101\",\r\n\t\"11011110\", \"11011111\", \"11100000\",\r\n\t\"11100001\", \"11100010\", \"11100011\",\r\n\t\"11100100\", \"11100101\", \"11100110\",\r\n\t\"11100111\", \"11101000\", \"11101001\",\r\n\t\"11101010\", \"11101011\", \"11101100\",\r\n\t\"11101101\", \"11101110\", \"11101111\",\r\n\t\"11110000\", \"11110001\", \"11110010\",\r\n\t\"11110011\", \"11110100\", \"11110101\",\r\n\t\"11110110\", \"11110111\", \"11111000\",\r\n\t\"11111001\", \"11111010\", \"11111011\",\r\n\t\"11111100\", \"11111101\", \"11111110\",\r\n\t\"11111111\"\r\n];\r\n//endregion\r\n//**************************************************************************************\r\nexport class BitStream\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for \"BitStream\" class\r\n\t * @param {{[byteStream]: ByteStream, [view]: Uint8Array, [buffer]: ArrayBuffer, [string]: string, [bitsCount]: number}} parameters\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\tthis.buffer = new ArrayBuffer(0);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.bitsCount = 0; // Number of bits stored in current \"BitStream\"\r\n\t\t\r\n\t\tfor(const key of Object.keys(parameters))\r\n\t\t{\r\n\t\t\tswitch(key)\r\n\t\t\t{\r\n\t\t\t\tcase \"byteStream\":\r\n\t\t\t\t\tthis.fromByteStream(parameters.byteStream);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"view\":\r\n\t\t\t\t\tthis.fromUint8Array(parameters.view);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"buffer\":\r\n\t\t\t\t\tthis.fromArrayBuffer(parameters.buffer);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"string\":\r\n\t\t\t\t\tthis.fromString(parameters.string);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"uint32\":\r\n\t\t\t\t\tthis.fromUint32(parameters.uint32);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"bitsCount\":\r\n\t\t\t\t\tthis.bitsCount = parameters.bitsCount;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Clear existing stream\r\n\t */\r\n\tclear()\r\n\t{\r\n\t\tthis.buffer = new ArrayBuffer(0);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.bitsCount = 0;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"BitStream\" by data from existing \"ByteStream\"\r\n\t * @param {ByteStream} stream\r\n\t */\r\n\tfromByteStream(stream)\r\n\t{\r\n\t\tthis.buffer = stream.buffer.slice(0);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.bitsCount = this.view.length << 3;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"BitStream\" object from existing \"ArrayBuffer\"\r\n\t * @param {ArrayBuffer} array The ArrayBuffer to copy from\r\n\t */\r\n\tfromArrayBuffer(array)\r\n\t{\r\n\t\tthis.buffer = array.slice(0);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.bitsCount = this.view.length << 3;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionNamingConventionJS\r\n\t/**\r\n\t * Initialize \"BitStream\" object from existing \"Uint8Array\"\r\n\t * @param {Uint8Array} array The Uint8Array to copy from\r\n\t */\r\n\tfromUint8Array(array)\r\n\t{\r\n\t\tthis.buffer = new ArrayBuffer(array.length);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.view.set(array);\r\n\t\t\r\n\t\tthis.bitsCount = this.view.length << 3;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"BitStream\" object from existing bit string\r\n\t * @param {string} string The string to initialize from\r\n\t */\r\n\tfromString(string)\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst stringLength = string.length;\r\n\t\t\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tthis.buffer = new ArrayBuffer((stringLength >> 3) + ((stringLength % 8) ? 1 : 0));\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\r\n\t\tthis.bitsCount = ((stringLength >> 3) + 1) << 3; // In order to handle correct shifting\r\n\t\t\r\n\t\tlet byteIndex = 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert from \"bit string\" to bytes\r\n\t\tfor(let i = 0; i < stringLength; i++)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(string[i] == \"1\")\r\n\t\t\t\tthis.view[byteIndex] |= 1 << (7 - (i % 8));\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(i && (((i + 1) % 8) == 0))\r\n\t\t\t\tbyteIndex++;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Shift \"BitStream\" into correct position\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(stringLength % 8)\r\n\t\t\tthis.shiftRight(8 - (stringLength % 8));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"bitsCount\"\r\n\t\tthis.bitsCount = stringLength;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Initialize \"BitStream\" object from existing uint32 number\r\n\t * @param {Number} number The string to initialize from\r\n\t */\r\n\tfromUint32(uint32)\r\n\t{\r\n\t\tthis.buffer = new ArrayBuffer(4);\r\n\t\tthis.view = new Uint8Array(this.buffer);\r\n\r\n\t\tconst value = new Uint32Array([uint32]);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\tfor(let i = 3; i >= 0; i--)\r\n\t\t\tthis.view[i] = view[3 - i];\r\n\r\n\t\tthis.bitsCount = 32;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Represent \"BitStream\" object content as a string\r\n\t * @param {?number} [start=null] Start number to convert to string from\r\n\t * @param {?number} [length=null] Length of BitStream to convert to string\r\n\t * @returns {string}\r\n\t */\r\n\ttoString(start = null, length = null)\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((start >= this.view.length) || (start < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.view.length - start;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif((length >= this.view.length) || (length < 0))\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = this.view.length - start;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tconst result = [];\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert from bytes to \"bit string\"\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(let i = start; i < (start + length); i++)\r\n\t\t\tresult.push(bitsToStringArray[this.view[i]]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t// noinspection ChainedFunctionCallJS\r\n\t\treturn result.join(\"\").slice((this.view.length << 3) - this.bitsCount);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Shift entire \"BitStream\" value right to number of bits\r\n\t * @param {number} shift Number of bits to shift value\r\n\t * @param {boolean} [needShrink=true] Need to shrink result or not\r\n\t */\r\n\tshiftRight(shift, needShrink = true)\r\n\t{\r\n\t\t//region Check parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(this.view.length == 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((shift < 0) || (shift > 8))\r\n\t\t\tthrow new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(shift > this.bitsCount)\r\n\t\t\tthrow new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\t// noinspection MagicNumberJS\r\n\t\tconst shiftMask = 0xFF >> (8 - shift);\r\n\t\tthis.view[this.view.length - 1] >>= shift;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Shift value\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tfor(let i = (this.view.length - 2); i >= 0; i--)\r\n\t\t{\r\n\t\t\t// noinspection NonShortCircuitBooleanExpressionJS\r\n\t\t\tthis.view[i + 1] |= (this.view[i] & shiftMask) << (8 - shift);\r\n\t\t\tthis.view[i] >>= shift;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrease number of bits stored into value\r\n\t\tthis.bitsCount -= shift;\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(this.bitsCount == 0)\r\n\t\t\tthis.clear();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change stream size if needed\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(needShrink)\r\n\t\t\tthis.shrink();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Shift entire \"BitStream\" value left to number of bits\r\n\t * @param {number} shift Number of bits to shift value\r\n\t */\r\n\tshiftLeft(shift)\r\n\t{\r\n\t\t/*\r\n\t\t NOTE: We do not really shift value because of internal structure of \"BitStream\":\r\n\t\t all bytes inside \"BitStream\" are aligned to right position. So, even if we will\r\n\t\t really shift value to left after that we will need again shift it right to the\r\n\t\t same number of bits. Thus all that we do here is hiding of left bits and descresing\r\n\t\t the \"bitsCount\" number.\r\n\t\t */\r\n\t\t\r\n\t\t//region Check parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(this.view.length == 0)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((shift < 0) || (shift > 8))\r\n\t\t\tthrow new Error(\"The \\\"shift\\\" parameter must be in range 0-8\");\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(shift > this.bitsCount)\r\n\t\t\tthrow new Error(\"The \\\"shift\\\" parameter can not be bigger than \\\"this.bitsCount\\\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Remove shifted bits\r\n\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst bitsOffset = this.bitsCount & 0x07;\r\n\t\tif(bitsOffset > shift)\r\n\t\t{\r\n\t\t\t// noinspection MagicNumberJS\r\n\t\t\tthis.view[0] &= 0xFF >> (bitsOffset + shift);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//region Change size of buffer\r\n\t\t\tconst buffer = new ArrayBuffer(this.buffer.byteLength - 1);\r\n\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tview.set(new Uint8Array(this.buffer, 1, this.buffer.byteLength - 1));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Mask item with index 0\r\n\t\t\t// noinspection MagicNumberJS\r\n\t\t\tview[0] &= 0xFF >> (shift - bitsOffset);\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Store final array into current stream\r\n\t\t\tthis.buffer = buffer.slice(0);\r\n\t\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Decrease number of bits stored into value\r\n\t\tthis.bitsCount -= shift;\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(this.bitsCount == 0)\r\n\t\t\tthis.clear();\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS, FunctionTooLongJS\r\n\t/**\r\n\t * Return slice of existing \"BitStream\"\r\n\t * @param {?number} [start=null] Start position of the slice (in bits)\r\n\t * @param {?number} [end=null] End position of the slice (in bits)\r\n\t * @returns {BitStream}\r\n\t */\r\n\tslice(start = null, end = null)\r\n\t{\r\n\t\t//region Make ability to pass non-value bits\r\n\t\tlet valueShift = 0;\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(this.bitsCount % 8)\r\n\t\t\tvalueShift = (8 - (this.bitsCount % 8));\r\n\t\t\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tstart += valueShift;\r\n\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\tend += valueShift;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(start == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start < 0) || (start > ((this.view.length << 3) - 1)))\r\n\t\t\treturn new BitStream(); //(\"Wrong start position: \" + start);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(end == null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tend = (this.view.length << 3) - 1;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((end < 0) || (end > ((this.view.length << 3) - 1)))\r\n\t\t\treturn new BitStream(); //(\"Wrong end position: \" + end);\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif((end - start + 1) > this.bitsCount)\r\n\t\t\treturn new BitStream(); //(\"Maximum length is \" + this.bitsCount);\r\n\t\t\r\n\t\tconst startIndex = start >> 3;\r\n\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst startOffset = start & 0x07;\r\n\t\t\r\n\t\tconst endIndex = end >> 3;\r\n\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst endOffset = end & 0x07;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, ConditionalExpressionJS, EqualityComparisonWithCoercionJS\r\n\t\tconst bitsLength = ((endIndex - startIndex) == 0) ? 1 : (endIndex - startIndex + 1);\r\n\t\t\r\n\t\tconst result = new BitStream();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Store \"primary bytes\"\r\n\t\tresult.buffer = new ArrayBuffer(bitsLength);\r\n\t\tresult.view = new Uint8Array(result.buffer);\r\n\t\tresult.bitsCount = bitsLength << 3;\r\n\t\t\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tresult.view.set(new Uint8Array(this.buffer, startIndex, bitsLength));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"start byte\"\r\n\t\t// noinspection MagicNumberJS\r\n\t\tresult.view[0] &= (0xFF >> startOffset);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change \"end byte\"\r\n\t\t// noinspection MagicNumberJS\r\n\t\tresult.view[bitsLength] &= (0xFF << (7 - endOffset));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Shift result array to right\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(7 - endOffset)\r\n\t\t\tresult.shiftRight(7 - endOffset, false);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set final number of bits\r\n\t\tresult.bitsCount = (end - start + 1);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Cut unnecessary bytes from result\r\n\t\tresult.shrink();\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Return copy of existing \"BitStream\"\r\n\t * @param {?number} [start=null] Start position of the copy (in bits)\r\n\t * @param {?number} [length=null] Length of the copy (in bits)\r\n\t * @returns {BitStream}\r\n\t */\r\n\tcopy(start = null, length = null)\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif((start < 0) || (start > ((this.view.length << 3) - 1)))\r\n\t\t\treturn new BitStream(); //(\"Wrong start position: \" + start);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS\r\n\t\tif(length === null)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = (this.view.length << 3) - start - 1;\r\n\t\t}\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(length > this.bitsCount)\r\n\t\t\treturn new BitStream(); //(\"Maximum length is \" + this.bitsCount);\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn this.slice(start, start + length - 1);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Shrink unnecessary bytes in current stream accordingly to \"bitsCount\" value\r\n\t */\r\n\tshrink()\r\n\t{\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tconst currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\r\n\t\tif(currentLength < this.buffer.byteLength)\r\n\t\t{\r\n\t\t\t//region Change size of buffer\r\n\t\t\tconst buffer = new ArrayBuffer(currentLength);\r\n\t\t\tconst view = new Uint8Array(buffer);\r\n\t\t\t\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tview.set(new Uint8Array(this.buffer, this.buffer.byteLength - currentLength, currentLength));\r\n\t\t\t//endregion\r\n\t\t\t\r\n\t\t\t//region Store final array into current stream\r\n\t\t\tthis.buffer = buffer.slice(0);\r\n\t\t\tthis.view = new Uint8Array(this.buffer);\r\n\t\t\t//endregion\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Reverse bits order in each byte in the stream\r\n\t * Got it from here: http://graphics.stanford.edu/~seander/bithacks.html#ReverseByteWith32Bits\r\n\t */\r\n\treverseBytes()\r\n\t{\r\n\t\t//region Reverse bits order in each byte in the stream\r\n\t\tfor(let i = 0; i < this.view.length; i++)\r\n\t\t{\r\n\t\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\t\tthis.view[i] = ((this.view[i] * 0x0802 & 0x22110) | (this.view[i] * 0x8020 & 0x88440)) * 0x10101 >> 16;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Shift \"most significant\" byte\r\n\t\tif(this.bitsCount % 8)\r\n\t\t{\r\n\t\t\t// noinspection ConditionalExpressionJS\r\n\t\t\tconst currentLength = (this.bitsCount >> 3) + ((this.bitsCount % 8) ? 1 : 0);\r\n\t\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\t\tthis.view[this.view.length - currentLength] >>= (8 - (this.bitsCount & 0x07));\r\n\t\t}\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Reverse all bits in entire \"BitStream\"\r\n\t */\r\n\treverseValue()\r\n\t{\r\n\t\tconst initialValue = this.toString();\r\n\t\tconst initialValueLength = initialValue.length;\r\n\t\t\r\n\t\tconst reversedValue = new Array(initialValueLength);\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(let i = 0; i < initialValueLength; i++)\r\n\t\t\treversedValue[initialValueLength - 1 - i] = initialValue[i];\r\n\t\t\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tthis.fromString(reversedValue.join(\"\"));\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Trying to represent entire \"BitStream\" as an unsigned integer.\r\n\t * @return {number}\r\n\t */\r\n\tgetNumberValue()\r\n\t{\r\n\t\t//region Initial variables\r\n\t\tconst byteLength = (this.buffer.byteLength - 1);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check posibility for convertion\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tif(byteLength > 3)\r\n\t\t\treturn (-1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(byteLength == (-1))\r\n\t\t\treturn 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Convert byte array to \"Uint32Array\" value\r\n\t\tconst value = new Uint32Array(1);\r\n\t\tconst view = new Uint8Array(value.buffer);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, NonBlockStatementBodyJS\r\n\t\tfor(let i = byteLength; i >= 0; i--)\r\n\t\t\tview[byteLength - i] = this.view[i];\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find any bit pattern in \"BitStream\"\r\n\t * @param {BitStream} pattern Stream having pattern value\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {number}\r\n\t */\r\n\tfindPattern(pattern, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\tconst stringPattern = new ByteStream({\r\n\t\t\tstring: pattern.toString()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findPattern(stringPattern, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find first position of any pattern from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {{id: number, position: number}}\r\n\t */\r\n\tfindFirstIn(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findFirstIn(stringPatterns, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all positions of any pattern from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllIn(patterns, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findAllIn(stringPatterns, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all positions of a pattern\r\n\t * @param {BitStream} pattern Stream having pattern value\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array|number}\r\n\t */\r\n\tfindAllPatternIn(pattern, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\" \r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\tconst stringPattern = new ByteStream({\r\n\t\t\tstring: pattern.toString()\r\n\t\t});\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn stringStream.findAllPatternIn(stringPattern, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find first position of data, not included in patterns from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {{left: {id: number, position: *}, right: {id: number, position: number}, value: ByteStream}}\r\n\t */\r\n\tfindFirstNotIn(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findFirstNotIn(stringPatterns, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all positions of data, not included in patterns from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllNotIn(patterns, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findAllNotIn(stringPatterns, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find position of a sequence of any patterns from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {{position, value}|*}\r\n\t */\r\n\tfindFirstSequence(patterns, start = null, length = null, backward = false)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findFirstSequence(stringPatterns, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find position of a sequence of any patterns from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be found\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindAllSequences(patterns, start, length)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findAllSequences(stringPatterns, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {BitStream} leftPattern Left pattern to search for\r\n\t * @param {BitStream} rightPattern Right pattern to search for\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedPatterns(leftPattern, rightPattern, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\tconst stringLeftPattern = new ByteStream({\r\n\t\t\tstring: leftPattern.toString()\r\n\t\t});\r\n\t\tconst stringRightPattern = new ByteStream({\r\n\t\t\tstring: rightPattern.toString()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findPairedPatterns(stringLeftPattern, stringRightPattern, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleLoopsJS\r\n\t/**\r\n\t * Find all paired patterns in the stream\r\n\t * @param {Array.<BitStream>} inputLeftPatterns Array of left patterns to search for\r\n\t * @param {Array.<BitStream>} inputRightPatterns Array of right patterns to search for\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {Array}\r\n\t */\r\n\tfindPairedArrays(inputLeftPatterns, inputRightPatterns, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringLeftPatterns = new Array(inputLeftPatterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < inputLeftPatterns.length; i++)\r\n\t\t{\r\n\t\t\tstringLeftPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: inputLeftPatterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t\r\n\t\tconst stringRightPatterns = new Array(inputRightPatterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < inputRightPatterns.length; i++)\r\n\t\t{\r\n\t\t\tstringRightPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: inputRightPatterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.findPairedArrays(stringLeftPatterns, stringRightPatterns, start, length);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Replace one pattern with other\r\n\t * @param {BitStream} searchPattern The pattern to search for\r\n\t * @param {BitStream} replacePattern The pattern to replace initial pattern\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @returns {boolean}\r\n\t */\r\n\treplacePattern(searchPattern, replacePattern, start = null, length = null)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\tconst stringSearchPattern = new ByteStream({\r\n\t\t\tstring: searchPattern.toString()\r\n\t\t});\r\n\t\tconst stringReplacePattern = new ByteStream({\r\n\t\t\tstring: replacePattern.toString()\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Re-initialize existing data\r\n\t\tif(stringStream.findPairedPatterns(stringSearchPattern, stringReplacePattern, start, length))\r\n\t\t{\r\n\t\t\t// noinspection NestedFunctionCallJS\r\n\t\t\tthis.fromString(stringStream.toString());\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn false;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Skip any pattern from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {*}\r\n\t */\r\n\tskipPatterns(patterns, start, length, backward)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.skipPatterns(stringPatterns, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Skip any pattern not from input array\r\n\t * @param {Array.<BitStream>} patterns Array with patterns which should be ommited\r\n\t * @param {?number} [start=null] Start position to search from\r\n\t * @param {?number} [length=null] Length of byte block to search at\r\n\t * @param {boolean} [backward=false] Flag to search in backward order\r\n\t * @returns {number}\r\n\t */\r\n\tskipNotPatterns(patterns, start, length, backward)\r\n\t{\r\n\t\t//region Convert \"BitStream\" values to \"ByteStream\"\r\n\t\tconst stringStream = new ByteStream({\r\n\t\t\tstring: this.toString()\r\n\t\t});\r\n\t\t\r\n\t\tconst stringPatterns = new Array(patterns.length);\r\n\t\t\r\n\t\tfor(let i = 0; i < patterns.length; i++)\r\n\t\t{\r\n\t\t\tstringPatterns[i] = new ByteStream({\r\n\t\t\t\tstring: patterns[i].toString()\r\n\t\t\t});\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn stringStream.skipNotPatterns(stringPatterns, start, length, backward);\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Append a new \"BitStream\" content to the current \"BitStream\"\r\n\t * @param {BitStream} stream A new \"stream\" to append to current \"stream\"\r\n\t */\r\n\tappend(stream)\r\n\t{\r\n\t\t//region Initialize current stream with new data\r\n\t\t// noinspection NestedFunctionCallJS\r\n\t\tthis.fromString([\r\n\t\t\tthis.toString(),\r\n\t\t\tstream.toString()\r\n\t\t].join(\"\"));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\nexport class SeqBitStream\r\n{\r\n\t//**********************************************************************************\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal variables\r\n\t\tthis.stream = new BitStream();\r\n\t\t\r\n\t\tthis._start = 0;\r\n\t\tthis._length = this.stream.bitsCount;\r\n\t\t\r\n\t\tthis.backward = false;\r\n\t\t\r\n\t\tthis.appendBlock = 0;\r\n\t\t//endregion\r\n\t\t\r\n\t\tfor(const key of Object.keys(parameters))\r\n\t\t{\r\n\t\t\tswitch(key)\r\n\t\t\t{\r\n\t\t\t\tcase \"stream\":\r\n\t\t\t\tcase \"start\":\r\n\t\t\t\tcase \"length\":\r\n\t\t\t\tcase \"backward\":\r\n\t\t\t\tcase \"appendBlock\":\r\n\t\t\t\t\tthis[key] = parameters[key];\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\tset start(value)\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(value > this.stream.bitsCount)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tthis._length -= ((this.backward) ? (this._start - value) : (value - this._start));\r\n\t\tthis._start = value;\r\n\t\t\r\n\t\t//region Initialization of \"prev\" internal variables\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.prevStart = this._start;\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.prevLength = this._length;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\tget start()\r\n\t{\r\n\t\treturn this._start;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionWithMultipleReturnPointsJS\r\n\tset length(value)\r\n\t{\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(value > this.stream.bitsCount)\r\n\t\t\treturn;\r\n\t\t\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.prevLength = this._length;\r\n\t\tthis._length = value;\r\n\t}\r\n\t//**********************************************************************************\r\n\tget length()\r\n\t{\r\n\t\treturn this._length;\r\n\t}\r\n\t//**********************************************************************************\r\n\tset stream(value)\r\n\t{\r\n\t\tthis._stream = value;\r\n\t\t\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.prevLength = this._length;\r\n\t\tthis._length = value.bitsCount;\r\n\t\t\r\n\t\t// noinspection JSUnusedGlobalSymbols\r\n\t\tthis.prevStart = this._start;\r\n\t\t// noinspection ConditionalExpressionJS\r\n\t\tthis._start = (this.backward) ? this.length : 0;\r\n\t}\r\n\t//**********************************************************************************\r\n\tget stream()\r\n\t{\r\n\t\treturn this._stream;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols\r\n\t/**\r\n\t * Get next \"length\" bits from the stream\r\n\t * @param {number} length Number of bits to read\r\n\t * @returns {*}\r\n\t */\r\n\tgetBits(length)\r\n\t{\r\n\t\t//region Check input parameters \r\n\t\tif((this.start + length) > this.stream.bitsCount)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = (this.stream.bitsCount - this.start);\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Initial variables \r\n\t\tlet result;\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Copy necessary length of bits\r\n\t\tif(this.backward)\r\n\t\t{\r\n\t\t\tresult = this.stream.copy(this.start - length, length);\r\n\t\t\tthis.start -= result.bitsCount;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tresult = this.stream.copy(this.start, length);\r\n\t\t\tthis.start += result.bitsCount;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection FunctionTooLongJS\r\n\t/**\r\n\t * Get string representation for the next \"length\" bits from the stream\r\n\t * @param {number} length Number of bits to read\r\n\t * @returns {string}\r\n\t */\r\n\tgetBitsString(length)\r\n\t{\r\n\t\t//region Check input parameters\r\n\t\tif((this.start + length) > this.stream.bitsCount)\r\n\t\t{\r\n\t\t\t// noinspection AssignmentToFunctionParameterJS\r\n\t\t\tlength = (this.stream.bitsCount - this.start);\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet result = [];\r\n\t\t\r\n\t\tlet start;\r\n\t\t\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(this.backward)\r\n\t\t\tstart = this.start - length;\r\n\t\telse\r\n\t\t\tstart = this.start;\r\n\t\t\r\n\t\tlet end = this.start + length - 1;\r\n\t\t\r\n\t\t//region Make ability to pass non-value bits\r\n\t\tlet valueShift = 0;\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(this.stream.bitsCount % 8)\r\n\t\t\tvalueShift = (8 - (this.stream.bitsCount % 8));\r\n\t\t\r\n\t\tstart += valueShift;\r\n\t\tend += valueShift;\r\n\t\t//endregion\r\n\t\t\r\n\t\tconst startIndex = start >> 3;\r\n\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst startOffset = start & 0x07;\r\n\t\t\r\n\t\tconst endIndex = end >> 3;\r\n\t\t// noinspection MagicNumberJS, NonShortCircuitBooleanExpressionJS\r\n\t\tconst endOffset = end & 0x07;\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, ConditionalExpressionJS, EqualityComparisonWithCoercionJS\r\n\t\tconst bitsLengthIndex = startIndex + (((endIndex - startIndex) == 0) ? 1 : (endIndex - startIndex + 1));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get string representation of bits\r\n\t\tfor(let i = startIndex; i < bitsLengthIndex; i++)\r\n\t\t{\r\n\t\t\tlet value = bitsToStringArray[this.stream.view[i]];\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(i == startIndex)\r\n\t\t\t\tvalue = value.slice(startOffset);\r\n\t\t\t\r\n\t\t\t// noinspection EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(i == (bitsLengthIndex - 1))\r\n\t\t\t\tvalue = value.slice(0, endOffset - 7 + value.length);\r\n\t\t\t\r\n\t\t\tresult.push(value);\r\n\t\t}\r\n\t\t\r\n\t\tresult = result.join(\"\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Change internal values\r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tif(this.backward)\r\n\t\t\tthis.start -= result.length;\r\n\t\telse\r\n\t\t\tthis.start += result.length;\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn result;\r\n\t}\r\n\t//**********************************************************************************\r\n\t// noinspection JSUnusedGlobalSymbols, FunctionWithMultipleLoopsJS, FunctionWithMultipleReturnPointsJS\r\n\t/**\r\n\t * Get number value representation of the next \"length\" bits from the stream, preliminary reversed\r\n\t * @param {number} length Number of bits to read\r\n\t * @returns {*}\r\n\t */\r\n\tgetBitsReversedValue(length)\r\n\t{\r\n\t\t//region Initial variables \r\n\t\tconst initialValue = this.getBitsString(length);\r\n\t\tconst initialValueLength = initialValue.length;\r\n\t\t\r\n\t\tlet byteIndex;\r\n\t\t\r\n\t\tconst initialOffset = 8 - (initialValueLength % 8);\r\n\t\t\r\n\t\tconst reversedValue = new Array(initialValueLength);\r\n\t\t\r\n\t\tconst value = new Uint32Array(1);\r\n\t\tconst valueView = new Uint8Array(value.buffer, 0, 4);\r\n\t\t\r\n\t\tlet i;\r\n\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, MagicNumberJS, NonBlockStatementBodyJS\r\n\t\tif(initialValueLength > 32)\r\n\t\t\treturn (-1);\r\n\t\t\r\n\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, MagicNumberJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\tif(length == 32)\r\n\t\t\tbyteIndex = 3;\r\n\t\telse\r\n\t\t\tbyteIndex = ((initialValueLength - 1) >> 3);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Reverse value \r\n\t\t// noinspection NonBlockStatementBodyJS\r\n\t\tfor(i = 0; i < initialValueLength; i++)\r\n\t\t\treversedValue[initialValueLength - 1 - i] = initialValue[i];\r\n\t\t//endregion \r\n\t\t\r\n\t\t//region Convert byte array to \"Uint32Array\" value \r\n\t\tfor(i = initialOffset; i < (initialOffset + initialValueLength); i++)\r\n\t\t{\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS\r\n\t\t\tif(reversedValue[i - initialOffset] == \"1\")\r\n\t\t\t{\r\n\t\t\t\t// noinspection MagicNumberJS\r\n\t\t\t\tvalueView[byteIndex] |= 0x01 << (7 - (i % 8));\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t// noinspection ConstantOnRightSideOfComparisonJS, ConstantOnLeftSideOfComparisonJS, EqualityComparisonWithCoercionJS, NonBlockStatementBodyJS\r\n\t\t\tif(i && (((i + 1) % 8) == 0))\r\n\t\t\t\tbyteIndex--;\r\n\t\t}\r\n\t\t//endregion \r\n\t\t\r\n\t\treturn value[0];\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Represent remaining bits in \"BitStream\" as a string\r\n\t * @return {string}\r\n\t */\r\n\ttoString()\r\n\t{\r\n\t\tconst streamToDisplay = this.stream.copy(this.start, this.length);\r\n\t\treturn streamToDisplay.toString();\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilFromBase, utilToBase, bufferToHexCodes, toBase64, fromBase64, arrayBufferToString, stringToArrayBuffer } from \"pvutils\";\nimport { ByteStream, SeqStream } from \"bytestreamjs\";\nimport { getCrypto, getEngine } from \"./common.js\";\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\n//**************************************************************************************\nexport class SignedCertificateTimestamp\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestamp class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc version\n\t\t */\n\t\tthis.version = getParametersValue(parameters, \"version\", SignedCertificateTimestamp.defaultValues(\"version\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc logID\n\t\t */\n\t\tthis.logID = getParametersValue(parameters, \"logID\", SignedCertificateTimestamp.defaultValues(\"logID\"));\n\t\t/**\n\t\t * @type {Date}\n\t\t * @desc timestamp\n\t\t */\n\t\tthis.timestamp = getParametersValue(parameters, \"timestamp\", SignedCertificateTimestamp.defaultValues(\"timestamp\"));\n\t\t/**\n\t\t * @type {ArrayBuffer}\n\t\t * @desc extensions\n\t\t */\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", SignedCertificateTimestamp.defaultValues(\"extensions\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc hashAlgorithm\n\t\t */\n\t\tthis.hashAlgorithm = getParametersValue(parameters, \"hashAlgorithm\", SignedCertificateTimestamp.defaultValues(\"hashAlgorithm\"));\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc signatureAlgorithm\n\t\t */\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", SignedCertificateTimestamp.defaultValues(\"signatureAlgorithm\"));\n\t\t/**\n\t\t * @type {Object}\n\t\t * @desc signature\n\t\t */\n\t\tthis.signature = getParametersValue(parameters, \"signature\", SignedCertificateTimestamp.defaultValues(\"signature\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"stream\"\n\t\tif(\"stream\" in parameters)\n\t\t\tthis.fromStream(parameters.stream);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"version\":\n\t\t\t\treturn 0;\n\t\t\tcase \"logID\":\n\t\t\tcase \"extensions\":\n\t\t\t\treturn new ArrayBuffer(0);\n\t\t\tcase \"timestamp\":\n\t\t\t\treturn new Date(0);\n\t\t\tcase \"hashAlgorithm\":\n\t\t\tcase \"signatureAlgorithm\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"signature\":\n\t\t\t\treturn new asn1js.Any();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestamp class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\tif((schema instanceof asn1js.RawData) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestamp\");\n\t\t\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.data\n\t\t\t})\n\t\t});\n\t\t\n\t\tthis.fromStream(seqStream);\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert SeqStream data into current class\n\t * @param {!SeqStream} stream\n\t */\n\tfromStream(stream)\n\t{\n\t\tconst blockLength = stream.getUint16();\n\t\t\n\t\tthis.version = (stream.getBlock(1))[0];\n\t\t\n\t\tif(this.version === 0)\n\t\t{\n\t\t\tthis.logID = (new Uint8Array(stream.getBlock(32))).buffer.slice(0);\n\t\t\tthis.timestamp = new Date(utilFromBase(new Uint8Array(stream.getBlock(8)), 8));\n\t\t\t\n\t\t\t//region Extensions\n\t\t\tconst extensionsLength = stream.getUint16();\n\t\t\tthis.extensions = (new Uint8Array(stream.getBlock(extensionsLength))).buffer.slice(0);\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Hash algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.hashAlgorithm = \"none\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.hashAlgorithm = \"md5\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.hashAlgorithm = \"sha1\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.hashAlgorithm = \"sha224\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tthis.hashAlgorithm = \"sha256\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tthis.hashAlgorithm = \"sha384\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 6:\n\t\t\t\t\tthis.hashAlgorithm = \"sha512\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature algorithm\n\t\t\tswitch((stream.getBlock(1))[0])\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tthis.signatureAlgorithm = \"anonymous\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tthis.signatureAlgorithm = \"rsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tthis.signatureAlgorithm = \"dsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tthis.signatureAlgorithm = \"ecdsa\";\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t}\n\t\t\t//endregion\n\t\t\t\n\t\t\t//region Signature\n\t\t\tconst signatureLength = stream.getUint16();\n\t\t\tconst signatureData = (new Uint8Array(stream.getBlock(signatureLength))).buffer.slice(0);\n\t\t\t\n\t\t\tconst asn1 = asn1js.fromBER(signatureData);\n\t\t\tif(asn1.offset === (-1))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t\t\n\t\t\tthis.signature = asn1.result;\n\t\t\t//endregion\n\t\t\t\n\t\t\tif(blockLength !== (47 + extensionsLength + signatureLength))\n\t\t\t\tthrow new Error(\"Object's stream was not correct for SignedCertificateTimestamp\");\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst stream = this.toStream();\n\t\t\n\t\treturn new asn1js.RawData({ data: stream.stream.buffer });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to SeqStream data\n\t * @returns {SeqStream} SeqStream object\n\t */\n\ttoStream()\n\t{\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tstream.appendUint16(47 + this.extensions.byteLength + this.signature.valueBeforeDecode.byteLength);\n\t\tstream.appendChar(this.version);\n\t\tstream.appendView(new Uint8Array(this.logID));\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t\n\t\tlet _hashAlgorithm;\n\t\t\n\t\tswitch(this.hashAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"none\":\n\t\t\t\t_hashAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"md5\":\n\t\t\t\t_hashAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"sha1\":\n\t\t\t\t_hashAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"sha224\":\n\t\t\t\t_hashAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tcase \"sha256\":\n\t\t\t\t_hashAlgorithm = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"sha384\":\n\t\t\t\t_hashAlgorithm = 5;\n\t\t\t\tbreak;\n\t\t\tcase \"sha512\":\n\t\t\t\t_hashAlgorithm = 6;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for hashAlgorithm: ${this.hashAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_hashAlgorithm);\n\t\t\n\t\tlet _signatureAlgorithm;\n\t\t\n\t\tswitch(this.signatureAlgorithm.toLowerCase())\n\t\t{\n\t\t\tcase \"anonymous\":\n\t\t\t\t_signatureAlgorithm = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"rsa\":\n\t\t\t\t_signatureAlgorithm = 1;\n\t\t\t\tbreak;\n\t\t\tcase \"dsa\":\n\t\t\t\t_signatureAlgorithm = 2;\n\t\t\t\tbreak;\n\t\t\tcase \"ecdsa\":\n\t\t\t\t_signatureAlgorithm = 3;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Incorrect data for signatureAlgorithm: ${this.signatureAlgorithm}`);\n\t\t}\n\t\t\n\t\tstream.appendChar(_signatureAlgorithm);\n\t\t\n\t\tconst _signature = this.signature.toBER(false);\n\t\t\n\t\tstream.appendUint16(_signature.byteLength);\n\t\tstream.appendView(new Uint8Array(_signature));\n\t\t\n\t\treturn stream;\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tversion: this.version,\n\t\t\tlogID: bufferToHexCodes(this.logID),\n\t\t\ttimestamp: this.timestamp,\n\t\t\textensions: bufferToHexCodes(this.extensions),\n\t\t\thashAlgorithm: this.hashAlgorithm,\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm,\n\t\t\tsignature: this.signature.toJSON()\n\t\t};\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Verify SignedCertificateTimestamp for specific input data\n\t * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n\t * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n\t * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n\t * @param {ArrayBuffer} data Data to verify signature against. Could be encoded Certificate or encoded PreCert\n\t * @param {Number} [dataType=0] Type = 0 (data is encoded Certificate), type = 1 (data is encoded PreCert)\n\t * @return {Promise<void>}\n\t */\n\tasync verify(logs, data, dataType = 0)\n\t{\n\t\t//region Initial variables\n\t\tlet logId = toBase64(arrayBufferToString(this.logID));\n\t\t\n\t\tlet publicKeyBase64 = null;\n\t\tlet publicKeyInfo;\n\t\t\n\t\tlet stream = new SeqStream();\n\t\t//endregion\n\t\t\n\t\t//region Found and init public key\n\t\tfor(const log of logs)\n\t\t{\n\t\t\tif(log.log_id === logId)\n\t\t\t{\n\t\t\t\tpublicKeyBase64 = log.key;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(publicKeyBase64 === null)\n\t\t\tthrow new Error(`Public key not found for CT with logId: ${logId}`);\n\t\t\n\t\tconst asn1 = asn1js.fromBER(stringToArrayBuffer(fromBase64(publicKeyBase64)));\n\t\tif(asn1.offset === (-1))\n\t\t\tthrow new Error(`Incorrect key value for CT Log with logId: ${logId}`);\n\t\t\n\t\tpublicKeyInfo = new PublicKeyInfo({ schema: asn1.result });\n\t\t//endregion\n\t\t\n\t\t//region Initialize signed data block\n\t\tstream.appendChar(0x00); // sct_version\n\t\tstream.appendChar(0x00); // signature_type = certificate_timestamp\n\t\t\n\t\tconst timeBuffer = new ArrayBuffer(8);\n\t\tconst timeView = new Uint8Array(timeBuffer);\n\t\t\n\t\tconst baseArray = utilToBase(this.timestamp.valueOf(), 8);\n\t\ttimeView.set(new Uint8Array(baseArray), 8 - baseArray.byteLength);\n\t\t\n\t\tstream.appendView(timeView);\n\t\t\n\t\tstream.appendUint16(dataType);\n\t\t\n\t\tif(dataType === 0)\n\t\t\tstream.appendUint24(data.byteLength);\n\t\t\n\t\tstream.appendView(new Uint8Array(data));\n\t\t\n\t\tstream.appendUint16(this.extensions.byteLength);\n\t\t\n\t\tif(this.extensions.byteLength !== 0)\n\t\t\tstream.appendView(new Uint8Array(this.extensions));\n\t\t//endregion\n\t\t\n\t\t//region Perform verification\n\t\treturn getEngine().subtle.verifyWithPublicKey(\n\t\t\tstream._stream._buffer.slice(0, stream._length),\n\t\t\t{ valueBlock: { valueHex: this.signature.toBER(false) } },\n\t\t\tpublicKeyInfo,\n\t\t\t{ algorithmId: \"\" },\n\t\t\t\"SHA-256\"\n\t\t);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC6962\n */\nexport default class SignedCertificateTimestampList\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for SignedCertificateTimestampList class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array.<SignedCertificateTimestamp>}\n\t\t * @desc timestamps\n\t\t */\n\t\tthis.timestamps = getParametersValue(parameters, \"timestamps\", SignedCertificateTimestampList.defaultValues(\"timestamps\"));\n\t\t//endregion\n\t\t\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"timestamps\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for SignedCertificateTimestampList class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * SignedCertificateTimestampList ::= OCTET STRING\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [optional]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\t\t\n\t\tif((\"optional\" in names) === false)\n\t\t\tnames.optional = false;\n\t\t\n\t\treturn (new asn1js.OctetString({\n\t\t\tname: (names.blockName || \"SignedCertificateTimestampList\"),\n\t\t\toptional: names.optional\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif((schema instanceof asn1js.OctetString) === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t//endregion\n\t\t\n\t\t//region Get internal properties from parsed schema\n\t\tconst seqStream = new SeqStream({\n\t\t\tstream: new ByteStream({\n\t\t\t\tbuffer: schema.valueBlock.valueHex\n\t\t\t})\n\t\t});\n\t\t\n\t\tlet dataLength = seqStream.getUint16();\n\t\tif(dataLength !== seqStream.length)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for SignedCertificateTimestampList\");\n\t\t\n\t\twhile(seqStream.length)\n\t\t\tthis.timestamps.push(new SignedCertificateTimestamp({ stream: seqStream }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Initial variables\n\t\tconst stream = new SeqStream();\n\t\t\n\t\tlet overallLength = 0;\n\t\t\n\t\tconst timestampsData = [];\n\t\t//endregion\n\t\t\n\t\t//region Get overall length\n\t\tfor(const timestamp of this.timestamps)\n\t\t{\n\t\t\tconst timestampStream = timestamp.toStream();\n\t\t\ttimestampsData.push(timestampStream);\n\t\t\toverallLength += timestampStream.stream.buffer.byteLength;\n\t\t}\n\t\t//endregion\n\t\t\n\t\tstream.appendUint16(overallLength);\n\t\t\n\t\t//region Set data from all timestamps\n\t\tfor(const timestamp of timestampsData)\n\t\t\tstream.appendView(timestamp.stream.view);\n\t\t//endregion\n\t\t\n\t\treturn new asn1js.OctetString({ valueHex: stream.stream.buffer.slice(0) });\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\ttimestamps: Array.from(this.timestamps, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Verify SignedCertificateTimestamp for specific certificate content\n * @param {Certificate} certificate Certificate for which verification would be performed\n * @param {Certificate} issuerCertificate Certificate of the issuer of target certificate\n * @param {Object[]} logs Array of objects with information about each CT Log (like here: https://ct.grahamedgecombe.com/logs.json)\n * @param {String} logs.log_id Identifier of the CT Log encoded in BASE-64 format\n * @param {String} logs.key Public key of the CT Log encoded in BASE-64 format\n * @param {Number} [index=-1] Index of SignedCertificateTimestamp inside SignedCertificateTimestampList (for -1 would verify all)\n * @return {Array} Array of verification results\n */\nexport async function verifySCTsForCertificate(certificate, issuerCertificate, logs, index = (-1))\n{\n\t//region Initial variables\n\tlet parsedValue = null;\n\tlet tbs;\n\tlet issuerId;\n\t\n\tconst stream = new SeqStream();\n\t\n\tlet preCert;\n\t//endregion\n\t\n\t//region Get a \"crypto\" extension\n\tconst crypto = getCrypto();\n\tif(typeof crypto === \"undefined\")\n\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\n\t//endregion\n\t\n\t//region Remove certificate extension\n\tfor(let i = 0; i < certificate.extensions.length; i++)\n\t{\n\t\tswitch(certificate.extensions[i].extnID)\n\t\t{\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\":\n\t\t\t\t{\n\t\t\t\t\tparsedValue = certificate.extensions[i].parsedValue;\n\t\t\t\t\t\n\t\t\t\t\tif(parsedValue.timestamps.length === 0)\n\t\t\t\t\t\tthrow new Error(\"Nothing to verify in the certificate\");\n\t\t\t\t\t\n\t\t\t\t\tcertificate.extensions.splice(i, 1);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t}\n\t//endregion\n\t\n\t//region Check we do have what to verify\n\tif(parsedValue === null)\n\t\tthrow new Error(\"No SignedCertificateTimestampList extension in the specified certificate\");\n\t//endregion\n\t\n\t//region Prepare modifier TBS value\n\ttbs = certificate.encodeTBS().toBER(false);\n\t//endregion\n\t\n\t//region Initialize \"issuer_key_hash\" value\n\tissuerId = await crypto.digest({ name: \"SHA-256\" }, new Uint8Array(issuerCertificate.subjectPublicKeyInfo.toSchema().toBER(false)));\n\t//endregion\n\t\n\t//region Make final \"PreCert\" value\n\tstream.appendView(new Uint8Array(issuerId));\n\tstream.appendUint24(tbs.byteLength);\n\tstream.appendView(new Uint8Array(tbs));\n\t\n\tpreCert = stream._stream._buffer.slice(0, stream._length);\n\t//endregion\n\t\n\t//region Call verification function for specified index\n\tif(index === (-1))\n\t{\n\t\tconst verifyArray = [];\n\t\t\n\t\tfor(const timestamp of parsedValue.timestamps)\n\t\t{\n\t\t\tconst verifyResult = await timestamp.verify(logs, preCert, 1);\n\t\t\tverifyArray.push(verifyResult);\n\t\t}\n\t\t\n\t\treturn verifyArray;\n\t}\n\t\n\tif(index >= parsedValue.timestamps.length)\n\t\tindex = (parsedValue.timestamps.length - 1);\n\t\n\treturn [await parsedValue.timestamps[index].verify(logs, preCert, 1)];\n\t//endregion\n}\n//**********************************************************************************\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from \"[MS-WCCE]: Windows Client Certificate Enrollment Protocol\"\n */\nexport default class CertificateTemplate\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CertificateTemplate class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc templateID\n\t\t */\n\t\tthis.templateID = getParametersValue(parameters, \"templateID\", CertificateTemplate.defaultValues(\"templateID\"));\n\n\t\tif(\"templateMajorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMajorVersion\n\t\t\t */\n\t\t\tthis.templateMajorVersion = getParametersValue(parameters, \"templateMajorVersion\", CertificateTemplate.defaultValues(\"templateMajorVersion\"));\n\n\t\tif(\"templateMinorVersion\" in parameters)\n\t\t\t/**\n\t\t\t * @type {number}\n\t\t\t * @desc templateMinorVersion\n\t\t\t */\n\t\t\tthis.templateMinorVersion = getParametersValue(parameters, \"templateMinorVersion\", CertificateTemplate.defaultValues(\"templateMinorVersion\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"templateID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"templateMajorVersion\":\n\t\t\tcase \"templateMinorVersion\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CertificateTemplate class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CertificateTemplateOID ::= SEQUENCE {\n     *    templateID              OBJECT IDENTIFIER,\n     *    templateMajorVersion    INTEGER (0..4294967295) OPTIONAL,\n     *    templateMinorVersion    INTEGER (0..4294967295) OPTIONAL\n     * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [templateID]\n\t\t * @property {string} [templateMajorVersion]\n\t\t * @property {string} [templateMinorVersion]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.templateID || \"\") }),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMajorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.Integer({\n\t\t\t\t\tname: (names.templateMinorVersion || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"templateID\",\n\t\t\t\"templateMajorVersion\",\n\t\t\t\"templateMinorVersion\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tCertificateTemplate.schema({\n\t\t\t\tnames: {\n\t\t\t\t\ttemplateID: \"templateID\",\n\t\t\t\t\ttemplateMajorVersion: \"templateMajorVersion\",\n\t\t\t\t\ttemplateMinorVersion: \"templateMinorVersion\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CertificateTemplate\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.templateID = asn1.result.templateID.valueBlock.toString();\n\n\t\tif(\"templateMajorVersion\" in asn1.result)\n\t\t\tthis.templateMajorVersion = asn1.result.templateMajorVersion.valueBlock.valueDec;\n\n\t\tif(\"templateMinorVersion\" in asn1.result)\n\t\t\tthis.templateMinorVersion = asn1.result.templateMinorVersion.valueBlock.valueDec;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.templateID }));\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMajorVersion }));\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\toutputArray.push(new asn1js.Integer({ value: this.templateMinorVersion }));\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.templateID\n\t\t};\n\n\t\tif(\"templateMajorVersion\" in this)\n\t\t\tobject.templateMajorVersion = this.templateMajorVersion;\n\n\t\tif(\"templateMinorVersion\" in this)\n\t\t\tobject.templateMinorVersion = this.templateMinorVersion;\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, utilConcatBuf } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from https://docs.microsoft.com/en-us/windows/desktop/seccrypto/certification-authority-renewal\n */\nexport default class CAVersion\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for CAVersion class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc certificateIndex\n\t\t */\n\t\tthis.certificateIndex = getParametersValue(parameters, \"certificateIndex\", CAVersion.defaultValues(\"certificateIndex\"));\n\n\t\t/**\n\t\t * @type {number}\n\t\t * @desc keyIndex\n\t\t */\n\t\tthis.keyIndex = getParametersValue(parameters, \"keyIndex\", CAVersion.defaultValues(\"keyIndex\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"certificateIndex\":\n\t\t\tcase \"keyIndex\":\n\t\t\t\treturn 0;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for CAVersion class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * CAVersion ::= INTEGER\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\treturn (new asn1js.Integer());\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Check the schema is valid\n\t\tif(schema.constructor.blockName() !== asn1js.Integer.blockName())\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for CAVersion\");\n\t\t//endregion\n\n\t\t//region Check length of the input value and correct it if needed\n\t\tlet value = schema.valueBlock.valueHex.slice(0);\n\t\tconst valueView = new Uint8Array(value);\n\n\t\tswitch(true)\n\t\t{\n\t\t\tcase (value.byteLength < 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView, 4 - value.byteLength);\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase (value.byteLength > 4):\n\t\t\t\t{\n\t\t\t\t\tconst tempValue = new ArrayBuffer(4);\n\t\t\t\t\tconst tempValueView = new Uint8Array(tempValue);\n\n\t\t\t\t\ttempValueView.set(valueView.slice(0, 4));\n\n\t\t\t\t\tvalue = tempValue.slice(0);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tconst keyIndexBuffer = value.slice(0, 2);\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\tlet temp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\n\t\tconst keyIndexView16 = new Uint16Array(keyIndexBuffer);\n\n\t\tthis.keyIndex = keyIndexView16[0];\n\n\t\tconst certificateIndexBuffer = value.slice(2);\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\ttemp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst certificateIndexView16 = new Uint16Array(certificateIndexBuffer);\n\n\t\tthis.certificateIndex = certificateIndexView16[0];\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create raw values\n\t\tconst certificateIndexBuffer = new ArrayBuffer(2);\n\t\tconst certificateIndexView = new Uint16Array(certificateIndexBuffer);\n\n\t\tcertificateIndexView[0] = this.certificateIndex;\n\n\t\tconst certificateIndexView8 = new Uint8Array(certificateIndexBuffer);\n\t\tlet temp = certificateIndexView8[0];\n\t\tcertificateIndexView8[0] = certificateIndexView8[1];\n\t\tcertificateIndexView8[1] = temp;\n\n\t\tconst keyIndexBuffer = new ArrayBuffer(2);\n\t\tconst keyIndexView = new Uint16Array(keyIndexBuffer);\n\n\t\tkeyIndexView[0] = this.keyIndex;\n\n\t\tconst keyIndexView8 = new Uint8Array(keyIndexBuffer);\n\t\ttemp = keyIndexView8[0];\n\t\tkeyIndexView8[0] = keyIndexView8[1];\n\t\tkeyIndexView8[1] = temp;\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Integer({\n\t\t\tvalueHex: utilConcatBuf(keyIndexBuffer, certificateIndexBuffer)\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\tcertificateIndex: this.certificateIndex,\n\t\t\tkeyIndex: this.keyIndex\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport class QCStatement\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatement class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t */\n\t\tthis.id = getParametersValue(parameters, \"id\", QCStatement.defaultValues(\"id\"));\n\n\t\tif(\"type\" in parameters)\n\t\t{\n\t\t\t/**\n\t\t\t * @type {*} Any data described by \"id\"\n\t\t\t */\n\t\t\tthis.type = getParametersValue(parameters, \"type\", QCStatement.defaultValues(\"type\"));\n\t\t}\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"type\":\n\t\t\t\treturn new asn1js.Null();\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"id\":\n\t\t\t\treturn (memberValue === \"\");\n\t\t\tcase \"type\":\n\t\t\t\treturn (memberValue instanceof asn1js.Null);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatement class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n \t *\t QCStatement ::= SEQUENCE {\n\t *       statementId   QC-STATEMENT.&id({SupportedStatements}),\n\t *       statementInfo QC-STATEMENT.&Type({SupportedStatements}{@statementId}) OPTIONAL\n\t *   }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [id]\n\t\t * @property {string} [type]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.id || \"\") }),\n\t\t\t\tnew asn1js.Any({\n\t\t\t\t\tname: (names.type || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t})\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"id\",\n\t\t\t\"type\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatement.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tid: \"id\",\n\t\t\t\t\ttype: \"type\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatement\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.id = asn1.result.id.valueBlock.toString();\n\n\t\tif(\"type\" in asn1.result)\n\t\t\tthis.type = asn1.result.type;\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\tconst value = [\n\t\t\tnew asn1js.ObjectIdentifier({ value: this.id })\n\t\t];\n\n\t\tif(\"type\" in this)\n\t\t\tvalue.push(this.type);\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\tid: this.id\n\t\t};\n\n\t\tif(\"type\" in this)\n\t\t\tobject.type = this.type.toJSON();\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n/**\n * Class from RFC3739\n */\nexport default class QCStatements\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for QCStatements class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {Array<QCStatement>}\n\t\t */\n\t\tthis.values = getParametersValue(parameters, \"values\", QCStatements.defaultValues(\"values\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn [];\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Compare values with default values for all class members\n\t * @param {string} memberName String name for a class member\n\t * @param {*} memberValue Value to compare with default value\n\t */\n\tstatic compareWithDefault(memberName, memberValue)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"values\":\n\t\t\t\treturn (memberValue.length === 0);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for QCStatements class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * QCStatements ::= SEQUENCE OF QCStatement\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [values]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.Repeated({\n\t\t\t\t\tname: (names.values || \"\"),\n\t\t\t\t\tvalue: QCStatement.schema(names.value || {})\n\t\t\t\t}),\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"values\"\n\t\t]);\n\t\t//endregion\n\n\t\t//region Check the schema is valid\n\t\tconst asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tQCStatements.schema({\n\t\t\t\tnames: {\n\t\t\t\t\tvalues: \"values\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for QCStatements\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.values = Array.from(asn1.result.values, element => new QCStatement({ schema: element }));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: Array.from(this.values, element => element.toSchema())\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\treturn {\n\t\t\textensions: Array.from(this.values, element => element.toJSON())\n\t\t};\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\nimport { getParametersValue, clearProps } from \"pvutils\";\nimport SubjectDirectoryAttributes from \"./SubjectDirectoryAttributes.js\";\nimport PrivateKeyUsagePeriod from \"./PrivateKeyUsagePeriod.js\";\nimport AltName from \"./AltName.js\";\nimport BasicConstraints from \"./BasicConstraints.js\";\nimport IssuingDistributionPoint from \"./IssuingDistributionPoint.js\";\nimport GeneralNames from \"./GeneralNames.js\";\nimport NameConstraints from \"./NameConstraints.js\";\nimport CRLDistributionPoints from \"./CRLDistributionPoints.js\";\nimport CertificatePolicies from \"./CertificatePolicies.js\";\nimport PolicyMappings from \"./PolicyMappings.js\";\nimport AuthorityKeyIdentifier from \"./AuthorityKeyIdentifier.js\";\nimport PolicyConstraints from \"./PolicyConstraints.js\";\nimport ExtKeyUsage from \"./ExtKeyUsage.js\";\nimport InfoAccess from \"./InfoAccess.js\";\nimport SignedCertificateTimestampList from \"./SignedCertificateTimestampList.js\";\nimport CertificateTemplate from \"./CertificateTemplate.js\";\nimport CAVersion from \"./CAVersion.js\";\nimport QCStatements from \"./QCStatements.js\";\n//**************************************************************************************\n/**\n * Class from RFC5280\n */\nexport default class Extension\n{\n\t//**********************************************************************************\n\t/**\n\t * Constructor for Extension class\n\t * @param {Object} [parameters={}]\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\n\t */\n\tconstructor(parameters = {})\n\t{\n\t\t//region Internal properties of the object\n\t\t/**\n\t\t * @type {string}\n\t\t * @desc extnID\n\t\t */\n\t\tthis.extnID = getParametersValue(parameters, \"extnID\", Extension.defaultValues(\"extnID\"));\n\t\t/**\n\t\t * @type {boolean}\n\t\t * @desc critical\n\t\t */\n\t\tthis.critical = getParametersValue(parameters, \"critical\", Extension.defaultValues(\"critical\"));\n\t\t/**\n\t\t * @type {OctetString}\n\t\t * @desc extnValue\n\t\t */\n\t\tif(\"extnValue\" in parameters)\n\t\t\tthis.extnValue = new asn1js.OctetString({ valueHex: parameters.extnValue });\n\t\telse\n\t\t\tthis.extnValue = Extension.defaultValues(\"extnValue\");\n\n\t\tif(\"parsedValue\" in parameters)\n\t\t\t/**\n\t\t\t * @type {Object}\n\t\t\t * @desc parsedValue\n\t\t\t */\n\t\t\tthis.parsedValue = getParametersValue(parameters, \"parsedValue\", Extension.defaultValues(\"parsedValue\"));\n\t\t//endregion\n\n\t\t//region If input argument array contains \"schema\" for this object\n\t\tif(\"schema\" in parameters)\n\t\t\tthis.fromSchema(parameters.schema);\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return default values for all class members\n\t * @param {string} memberName String name for a class member\n\t */\n\tstatic defaultValues(memberName)\n\t{\n\t\tswitch(memberName)\n\t\t{\n\t\t\tcase \"extnID\":\n\t\t\t\treturn \"\";\n\t\t\tcase \"critical\":\n\t\t\t\treturn false;\n\t\t\tcase \"extnValue\":\n\t\t\t\treturn new asn1js.OctetString();\n\t\t\tcase \"parsedValue\":\n\t\t\t\treturn {};\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Invalid member name for Extension class: ${memberName}`);\n\t\t}\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Return value of pre-defined ASN.1 schema for current class\n\t *\n\t * ASN.1 schema:\n\t * ```asn1\n\t * Extension  ::=  SEQUENCE  {\n\t *    extnID      OBJECT IDENTIFIER,\n\t *    critical    BOOLEAN DEFAULT FALSE,\n\t *    extnValue   OCTET STRING\n\t * }\n\t * ```\n\t *\n\t * @param {Object} parameters Input parameters for the schema\n\t * @returns {Object} asn1js schema object\n\t */\n\tstatic schema(parameters = {})\n\t{\n\t\t/**\n\t\t * @type {Object}\n\t\t * @property {string} [blockName]\n\t\t * @property {string} [extnID]\n\t\t * @property {string} [critical]\n\t\t * @property {string} [extnValue]\n\t\t */\n\t\tconst names = getParametersValue(parameters, \"names\", {});\n\n\t\treturn (new asn1js.Sequence({\n\t\t\tname: (names.blockName || \"\"),\n\t\t\tvalue: [\n\t\t\t\tnew asn1js.ObjectIdentifier({ name: (names.extnID || \"\") }),\n\t\t\t\tnew asn1js.Boolean({\n\t\t\t\t\tname: (names.critical || \"\"),\n\t\t\t\t\toptional: true\n\t\t\t\t}),\n\t\t\t\tnew asn1js.OctetString({ name: (names.extnValue || \"\") })\n\t\t\t]\n\t\t}));\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert parsed asn1js object into current class\n\t * @param {!Object} schema\n\t */\n\tfromSchema(schema)\n\t{\n\t\t//region Clear input data first\n\t\tclearProps(schema, [\n\t\t\t\"extnID\",\n\t\t\t\"critical\",\n\t\t\t\"extnValue\"\n\t\t]);\n\t\t//endregion\n\t\t\n\t\t//region Check the schema is valid\n\t\tlet asn1 = asn1js.compareSchema(schema,\n\t\t\tschema,\n\t\t\tExtension.schema({\n\t\t\t\tnames: {\n\t\t\t\t\textnID: \"extnID\",\n\t\t\t\t\tcritical: \"critical\",\n\t\t\t\t\textnValue: \"extnValue\"\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tif(asn1.verified === false)\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extension\");\n\t\t//endregion\n\n\t\t//region Get internal properties from parsed schema\n\t\tthis.extnID = asn1.result.extnID.valueBlock.toString();\n\t\tif(\"critical\" in asn1.result)\n\t\t\tthis.critical = asn1.result.critical.valueBlock.value;\n\t\tthis.extnValue = asn1.result.extnValue;\n\n\t\t//region Get \"parsedValue\" for well-known extensions\n\t\tasn1 = asn1js.fromBER(this.extnValue.valueBlock.valueHex);\n\t\tif(asn1.offset === (-1))\n\t\t\treturn;\n\n\t\tswitch(this.extnID)\n\t\t{\n\t\t\tcase \"2.5.29.9\": // SubjectDirectoryAttributes\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SubjectDirectoryAttributes();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SubjectDirectoryAttributes\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.14\": // SubjectKeyIdentifier\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple OCTETSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.15\": // KeyUsage\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple BITSTRING\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.16\": // PrivateKeyUsagePeriod\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PrivateKeyUsagePeriod();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PrivateKeyUsagePeriod\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.17\": // SubjectAltName\n\t\t\tcase \"2.5.29.18\": // IssuerAltName\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AltName();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AltName\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.19\": // BasicConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new BasicConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated BasicConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.20\": // CRLNumber\n\t\t\tcase \"2.5.29.27\": // BaseCRLNumber (delta CRL indicator)\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.21\": // CRLReason\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple ENUMERATED\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.24\": // InvalidityDate\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple GeneralizedTime\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.28\": // IssuingDistributionPoint\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new IssuingDistributionPoint();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated IssuingDistributionPoint\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.29\": // CertificateIssuer\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames({ schema: asn1.result }); // Should be just a simple\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new GeneralNames();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated GeneralNames\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.30\": // NameConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new NameConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated NameConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.31\": // CRLDistributionPoints\n\t\t\tcase \"2.5.29.46\": // FreshestCRL\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CRLDistributionPoints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CRLDistributionPoints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.32\": // CertificatePolicies\n\t\t\tcase \"1.3.6.1.4.1.311.21.10\": // szOID_APPLICATION_CERT_POLICIES - Microsoft-specific OID\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificatePolicies();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.33\": // PolicyMappings\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyMappings();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificatePolicies\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.35\": // AuthorityKeyIdentifier\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new AuthorityKeyIdentifier();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated AuthorityKeyIdentifier\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.36\": // PolicyConstraints\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new PolicyConstraints();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated PolicyConstraints\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.37\": // ExtKeyUsage\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new ExtKeyUsage();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated ExtKeyUsage\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"2.5.29.54\": // InhibitAnyPolicy\n\t\t\t\tthis.parsedValue = asn1.result; // Should be just a simple INTEGER\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.1\": // AuthorityInfoAccess\n\t\t\tcase \"1.3.6.1.5.5.7.1.11\": // SubjectInfoAccess\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new InfoAccess();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated InfoAccess\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.11129.2.4.2\": // SignedCertificateTimestampList\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new SignedCertificateTimestampList();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated SignedCertificateTimestampList\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.20.2\": // szOID_ENROLL_CERTTYPE_EXTENSION - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple Unicode string\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.2\": // szOID_CERTSRV_PREVIOUS_CERT_HASH - Microsoft-specific extension\n\t\t\t\tthis.parsedValue = asn1.result; // Used to be simple OctetString\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.7\": // szOID_CERTIFICATE_TEMPLATE - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CertificateTemplate();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CertificateTemplate\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.4.1.311.21.1\": // szOID_CERTSRV_CA_VERSION - Microsoft-specific extension\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new CAVersion();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated CAVersion\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"1.3.6.1.5.5.7.1.3\": // QCStatements\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements({ schema: asn1.result });\n\t\t\t\t}\n\t\t\t\tcatch(ex)\n\t\t\t\t{\n\t\t\t\t\tthis.parsedValue = new QCStatements();\n\t\t\t\t\tthis.parsedValue.parsingError = \"Incorrectly formated QCStatements\";\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\t\t//endregion\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convert current object to asn1js object and set correct values\n\t * @returns {Object} asn1js object\n\t */\n\ttoSchema()\n\t{\n\t\t//region Create array for output sequence\n\t\tconst outputArray = [];\n\n\t\toutputArray.push(new asn1js.ObjectIdentifier({ value: this.extnID }));\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\toutputArray.push(new asn1js.Boolean({ value: this.critical }));\n\n\t\toutputArray.push(this.extnValue);\n\t\t//endregion\n\n\t\t//region Construct and return new ASN.1 schema for this object\n\t\treturn (new asn1js.Sequence({\n\t\t\tvalue: outputArray\n\t\t}));\n\t\t//endregion\n\t}\n\t//**********************************************************************************\n\t/**\n\t * Convertion for the class to JSON object\n\t * @returns {Object}\n\t */\n\ttoJSON()\n\t{\n\t\tconst object = {\n\t\t\textnID: this.extnID,\n\t\t\textnValue: this.extnValue.toJSON()\n\t\t};\n\n\t\tif(this.critical !== Extension.defaultValues(\"critical\"))\n\t\t\tobject.critical = this.critical;\n\n\t\tif(\"parsedValue\" in this)\n\t\t{\n\t\t\tif(\"toJSON\" in this.parsedValue)\n\t\t\t\tobject.parsedValue = this.parsedValue.toJSON();\n\t\t}\n\n\t\treturn object;\n\t}\n\t//**********************************************************************************\n}\n//**************************************************************************************\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, clearProps } from \"pvutils\";\r\nimport Extension from \"./Extension.js\";\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Extensions\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Extensions class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {Array.<Extension>}\r\n\t\t * @desc type\r\n\t\t */\r\n\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Extensions.defaultValues(\"extensions\"));\r\n\t\t//endregion\r\n\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Extensions class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @param {boolean} optional Flag that current schema should be optional\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {}, optional = false)\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [extensions]\r\n\t\t * @property {string} [extension]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\toptional,\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\tnew asn1js.Repeated({\r\n\t\t\t\t\tname: (names.extensions || \"\"),\r\n\t\t\t\t\tvalue: Extension.schema(names.extension || {})\r\n\t\t\t\t})\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"extensions\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tExtensions.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\textensions: \"extensions\"\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Extensions\");\r\n\t\t//endregion\r\n\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.extensions = Array.from(asn1.result.extensions, element => new Extension({ schema: element }));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema()\r\n\t{\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\treturn {\r\n\t\t\textensions: Array.from(this.extensions, element => element.toJSON())\r\n\t\t};\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","import * as asn1js from \"asn1js\";\r\nimport { getParametersValue, bufferToHexCodes, clearProps } from \"pvutils\";\r\nimport { getCrypto, getEngine } from \"./common.js\";\r\nimport AlgorithmIdentifier from \"./AlgorithmIdentifier.js\";\r\nimport RelativeDistinguishedNames from \"./RelativeDistinguishedNames.js\";\r\nimport Time from \"./Time.js\";\r\nimport PublicKeyInfo from \"./PublicKeyInfo.js\";\r\nimport Extension from \"./Extension.js\";\r\nimport Extensions from \"./Extensions.js\";\r\n//**************************************************************************************\r\nfunction tbsCertificate(parameters = {})\r\n{\r\n\t//TBSCertificate  ::=  SEQUENCE  {\r\n\t//    version         [0]  EXPLICIT Version DEFAULT v1,\r\n\t//    serialNumber         CertificateSerialNumber,\r\n\t//    signature            AlgorithmIdentifier,\r\n\t//    issuer               Name,\r\n\t//    validity             Validity,\r\n\t//    subject              Name,\r\n\t//    subjectPublicKeyInfo SubjectPublicKeyInfo,\r\n\t//    issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL,\r\n\t//                         -- If present, version MUST be v2 or v3\r\n\t//    extensions      [3]  EXPLICIT Extensions OPTIONAL\r\n\t//    -- If present, version MUST be v3\r\n\t//}\r\n\t\r\n\t/**\r\n\t * @type {Object}\r\n\t * @property {string} [blockName]\r\n\t * @property {string} [tbsCertificateVersion]\r\n\t * @property {string} [tbsCertificateSerialNumber]\r\n\t * @property {string} [signature]\r\n\t * @property {string} [issuer]\r\n\t * @property {string} [tbsCertificateValidity]\r\n\t * @property {string} [notBefore]\r\n\t * @property {string} [notAfter]\r\n\t * @property {string} [subject]\r\n\t * @property {string} [subjectPublicKeyInfo]\r\n\t * @property {string} [tbsCertificateIssuerUniqueID]\r\n\t * @property {string} [tbsCertificateSubjectUniqueID]\r\n\t * @property {string} [extensions]\r\n\t */\r\n\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\r\n\treturn (new asn1js.Sequence({\r\n\t\tname: (names.blockName || \"tbsCertificate\"),\r\n\t\tvalue: [\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateVersion || \"tbsCertificate.version\") }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Integer({ name: (names.tbsCertificateSerialNumber || \"tbsCertificate.serialNumber\") }),\r\n\t\t\tAlgorithmIdentifier.schema(names.signature || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.signature\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.issuer || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.issuer\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Sequence({\r\n\t\t\t\tname: (names.tbsCertificateValidity || \"tbsCertificate.validity\"),\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tTime.schema(names.notBefore || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notBefore\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notBefore\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}),\r\n\t\t\t\t\tTime.schema(names.notAfter || {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\tutcTimeName: \"tbsCertificate.notAfter\",\r\n\t\t\t\t\t\t\tgeneralTimeName: \"tbsCertificate.notAfter\"\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t})\r\n\t\t\t\t]\r\n\t\t\t}),\r\n\t\t\tRelativeDistinguishedNames.schema(names.subject || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subject\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tPublicKeyInfo.schema(names.subjectPublicKeyInfo || {\r\n\t\t\t\tnames: {\r\n\t\t\t\t\tblockName: \"tbsCertificate.subjectPublicKeyInfo\"\r\n\t\t\t\t}\r\n\t\t\t}),\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateIssuerUniqueID || \"tbsCertificate.issuerUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Primitive({\r\n\t\t\t\tname: (names.tbsCertificateSubjectUniqueID || \"tbsCertificate.subjectUniqueID\"),\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t}\r\n\t\t\t}), // IMPLICIT bistring value\r\n\t\t\tnew asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [Extensions.schema(names.extensions || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t}\r\n\t\t\t\t})]\r\n\t\t\t}) // EXPLICIT SEQUENCE value\r\n\t\t]\r\n\t}));\r\n}\r\n//**************************************************************************************\r\n/**\r\n * Class from RFC5280\r\n */\r\nexport default class Certificate\r\n{\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Constructor for Certificate class\r\n\t * @param {Object} [parameters={}]\r\n\t * @param {Object} [parameters.schema] asn1js parsed value to initialize the class from\r\n\t */\r\n\tconstructor(parameters = {})\r\n\t{\r\n\t\t//region Internal properties of the object\r\n\t\t/**\r\n\t\t * @type {ArrayBuffer}\r\n\t\t * @desc ToBeSigned (TBS) part of the certificate\r\n\t\t */\r\n\t\tthis.tbs = getParametersValue(parameters, \"tbs\", Certificate.defaultValues(\"tbs\"));\r\n\t\t/**\r\n\t\t * @type {number}\r\n\t\t * @desc Version number\r\n\t\t */\r\n\t\tthis.version = getParametersValue(parameters, \"version\", Certificate.defaultValues(\"version\"));\r\n\t\t/**\r\n\t\t * @type {Integer}\r\n\t\t * @desc Serial number of the certificate\r\n\t\t */\r\n\t\tthis.serialNumber = getParametersValue(parameters, \"serialNumber\", Certificate.defaultValues(\"serialNumber\"));\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc This field contains the algorithm identifier for the algorithm used by the CA to sign the certificate\r\n\t\t */\r\n\t\tthis.signature = getParametersValue(parameters, \"signature\", Certificate.defaultValues(\"signature\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The issuer field identifies the entity that has signed and issued the certificate\r\n\t\t */\r\n\t\tthis.issuer = getParametersValue(parameters, \"issuer\", Certificate.defaultValues(\"issuer\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period begins\r\n\t\t */\r\n\t\tthis.notBefore = getParametersValue(parameters, \"notBefore\", Certificate.defaultValues(\"notBefore\"));\r\n\t\t/**\r\n\t\t * @type {Time}\r\n\t\t * @desc The date on which the certificate validity period ends\r\n\t\t */\r\n\t\tthis.notAfter = getParametersValue(parameters, \"notAfter\", Certificate.defaultValues(\"notAfter\"));\r\n\t\t/**\r\n\t\t * @type {RelativeDistinguishedNames}\r\n\t\t * @desc The subject field identifies the entity associated with the public key stored in the subject public key field\r\n\t\t */\r\n\t\tthis.subject = getParametersValue(parameters, \"subject\", Certificate.defaultValues(\"subject\"));\r\n\t\t/**\r\n\t\t * @type {PublicKeyInfo}\r\n\t\t * @desc This field is used to carry the public key and identify the algorithm with which the key is used\r\n\t\t */\r\n\t\tthis.subjectPublicKeyInfo = getParametersValue(parameters, \"subjectPublicKeyInfo\", Certificate.defaultValues(\"subjectPublicKeyInfo\"));\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.issuerUniqueID = getParametersValue(parameters, \"issuerUniqueID\", Certificate.defaultValues(\"issuerUniqueID\"));\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {ArrayBuffer}\r\n\t\t\t * @desc The subject and issuer unique identifiers are present in the certificate to handle the possibility of reuse of subject and/or issuer names over time\r\n\t\t\t */\r\n\t\t\tthis.subjectUniqueID = getParametersValue(parameters, \"subjectUniqueID\", Certificate.defaultValues(\"subjectUniqueID\"));\r\n\t\t\r\n\t\tif(\"extensions\" in parameters)\r\n\t\t\t/**\r\n\t\t\t * @type {Array}\r\n\t\t\t * @desc If present, this field is a SEQUENCE of one or more certificate extensions\r\n\t\t\t */\r\n\t\t\tthis.extensions = getParametersValue(parameters, \"extensions\", Certificate.defaultValues(\"extensions\"));\r\n\t\t\r\n\t\t/**\r\n\t\t * @type {AlgorithmIdentifier}\r\n\t\t * @desc The signatureAlgorithm field contains the identifier for the cryptographic algorithm used by the CA to sign this certificate\r\n\t\t */\r\n\t\tthis.signatureAlgorithm = getParametersValue(parameters, \"signatureAlgorithm\", Certificate.defaultValues(\"signatureAlgorithm\"));\r\n\t\t/**\r\n\t\t * @type {BitString}\r\n\t\t * @desc The signatureValue field contains a digital signature computed upon the ASN.1 DER encoded tbsCertificate\r\n\t\t */\r\n\t\tthis.signatureValue = getParametersValue(parameters, \"signatureValue\", Certificate.defaultValues(\"signatureValue\"));\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region If input argument array contains \"schema\" for this object\r\n\t\tif(\"schema\" in parameters)\r\n\t\t\tthis.fromSchema(parameters.schema);\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return default values for all class members\r\n\t * @param {string} memberName String name for a class member\r\n\t */\r\n\tstatic defaultValues(memberName)\r\n\t{\r\n\t\tswitch(memberName)\r\n\t\t{\r\n\t\t\tcase \"tbs\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"version\":\r\n\t\t\t\treturn 0;\r\n\t\t\tcase \"serialNumber\":\r\n\t\t\t\treturn new asn1js.Integer();\r\n\t\t\tcase \"signature\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"issuer\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"notBefore\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"notAfter\":\r\n\t\t\t\treturn new Time();\r\n\t\t\tcase \"subject\":\r\n\t\t\t\treturn new RelativeDistinguishedNames();\r\n\t\t\tcase \"subjectPublicKeyInfo\":\r\n\t\t\t\treturn new PublicKeyInfo();\r\n\t\t\tcase \"issuerUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"subjectUniqueID\":\r\n\t\t\t\treturn new ArrayBuffer(0);\r\n\t\t\tcase \"extensions\":\r\n\t\t\t\treturn [];\r\n\t\t\tcase \"signatureAlgorithm\":\r\n\t\t\t\treturn new AlgorithmIdentifier();\r\n\t\t\tcase \"signatureValue\":\r\n\t\t\t\treturn new asn1js.BitString();\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(`Invalid member name for Certificate class: ${memberName}`);\r\n\t\t}\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Return value of pre-defined ASN.1 schema for current class\r\n\t *\r\n\t * ASN.1 schema:\r\n\t * ```asn1\r\n\t * Certificate  ::=  SEQUENCE  {\r\n\t *    tbsCertificate       TBSCertificate,\r\n\t *    signatureAlgorithm   AlgorithmIdentifier,\r\n\t *    signatureValue       BIT STRING  }\r\n\t * ```\r\n\t *\r\n\t * @param {Object} parameters Input parameters for the schema\r\n\t * @returns {Object} asn1js schema object\r\n\t */\r\n\tstatic schema(parameters = {})\r\n\t{\r\n\t\t/**\r\n\t\t * @type {Object}\r\n\t\t * @property {string} [blockName]\r\n\t\t * @property {string} [tbsCertificate]\r\n\t\t * @property {string} [signatureAlgorithm]\r\n\t\t * @property {string} [signatureValue]\r\n\t\t */\r\n\t\tconst names = getParametersValue(parameters, \"names\", {});\r\n\t\t\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tname: (names.blockName || \"\"),\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsCertificate(names.tbsCertificate),\r\n\t\t\t\tAlgorithmIdentifier.schema(names.signatureAlgorithm || {\r\n\t\t\t\t\tnames: {\r\n\t\t\t\t\t\tblockName: \"signatureAlgorithm\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}),\r\n\t\t\t\tnew asn1js.BitString({ name: (names.signatureValue || \"signatureValue\") })\r\n\t\t\t]\r\n\t\t}));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert parsed asn1js object into current class\r\n\t * @param {!Object} schema\r\n\t */\r\n\tfromSchema(schema)\r\n\t{\r\n\t\t//region Clear input data first\r\n\t\tclearProps(schema, [\r\n\t\t\t\"tbsCertificate\",\r\n\t\t\t\"tbsCertificate.extensions\",\r\n\t\t\t\"tbsCertificate.version\",\r\n\t\t\t\"tbsCertificate.serialNumber\",\r\n\t\t\t\"tbsCertificate.signature\",\r\n\t\t\t\"tbsCertificate.issuer\",\r\n\t\t\t\"tbsCertificate.notBefore\",\r\n\t\t\t\"tbsCertificate.notAfter\",\r\n\t\t\t\"tbsCertificate.subject\",\r\n\t\t\t\"tbsCertificate.subjectPublicKeyInfo\",\r\n\t\t\t\"tbsCertificate.issuerUniqueID\",\r\n\t\t\t\"tbsCertificate.subjectUniqueID\",\r\n\t\t\t\"signatureAlgorithm\",\r\n\t\t\t\"signatureValue\"\r\n\t\t]);\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Check the schema is valid\r\n\t\tconst asn1 = asn1js.compareSchema(schema,\r\n\t\t\tschema,\r\n\t\t\tCertificate.schema({\r\n\t\t\t\tnames: {\r\n\t\t\t\t\ttbsCertificate: {\r\n\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\textensions: {\r\n\t\t\t\t\t\t\t\tnames: {\r\n\t\t\t\t\t\t\t\t\textensions: \"tbsCertificate.extensions\"\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t);\r\n\t\t\r\n\t\tif(asn1.verified === false)\r\n\t\t\tthrow new Error(\"Object's schema was not verified against input data for Certificate\");\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get internal properties from parsed schema\r\n\t\tthis.tbs = asn1.result.tbsCertificate.valueBeforeDecode;\r\n\t\t\r\n\t\tif(\"tbsCertificate.version\" in asn1.result)\r\n\t\t\tthis.version = asn1.result[\"tbsCertificate.version\"].valueBlock.valueDec;\r\n\t\tthis.serialNumber = asn1.result[\"tbsCertificate.serialNumber\"];\r\n\t\tthis.signature = new AlgorithmIdentifier({ schema: asn1.result[\"tbsCertificate.signature\"] });\r\n\t\tthis.issuer = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.issuer\"] });\r\n\t\tthis.notBefore = new Time({ schema: asn1.result[\"tbsCertificate.notBefore\"] });\r\n\t\tthis.notAfter = new Time({ schema: asn1.result[\"tbsCertificate.notAfter\"] });\r\n\t\tthis.subject = new RelativeDistinguishedNames({ schema: asn1.result[\"tbsCertificate.subject\"] });\r\n\t\tthis.subjectPublicKeyInfo = new PublicKeyInfo({ schema: asn1.result[\"tbsCertificate.subjectPublicKeyInfo\"] });\r\n\t\tif(\"tbsCertificate.issuerUniqueID\" in asn1.result)\r\n\t\t\tthis.issuerUniqueID = asn1.result[\"tbsCertificate.issuerUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.subjectUniqueID\" in asn1.result)\r\n\t\t\tthis.subjectUniqueID = asn1.result[\"tbsCertificate.subjectUniqueID\"].valueBlock.valueHex;\r\n\t\tif(\"tbsCertificate.extensions\" in asn1.result)\r\n\t\t\tthis.extensions = Array.from(asn1.result[\"tbsCertificate.extensions\"], element => new Extension({ schema: element }));\r\n\t\t\r\n\t\tthis.signatureAlgorithm = new AlgorithmIdentifier({ schema: asn1.result.signatureAlgorithm });\r\n\t\tthis.signatureValue = asn1.result.signatureValue;\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Create ASN.1 schema for existing values of TBS part for the certificate\r\n\t */\r\n\tencodeTBS()\r\n\t{\r\n\t\t//region Create array for output sequence\r\n\t\tconst outputArray = [];\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 0 // [0]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [\r\n\t\t\t\t\tnew asn1js.Integer({ value: this.version }) // EXPLICIT integer value\r\n\t\t\t\t]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\toutputArray.push(this.serialNumber);\r\n\t\toutputArray.push(this.signature.toSchema());\r\n\t\toutputArray.push(this.issuer.toSchema());\r\n\t\t\r\n\t\toutputArray.push(new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\tthis.notBefore.toSchema(),\r\n\t\t\t\tthis.notAfter.toSchema()\r\n\t\t\t]\r\n\t\t}));\r\n\t\t\r\n\t\toutputArray.push(this.subject.toSchema());\r\n\t\toutputArray.push(this.subjectPublicKeyInfo.toSchema());\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 1 // [1]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.issuerUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Primitive({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 2 // [2]\r\n\t\t\t\t},\r\n\t\t\t\tvalueHex: this.subjectUniqueID\r\n\t\t\t}));\r\n\t\t}\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t{\r\n\t\t\toutputArray.push(new asn1js.Constructed({\r\n\t\t\t\toptional: true,\r\n\t\t\t\tidBlock: {\r\n\t\t\t\t\ttagClass: 3, // CONTEXT-SPECIFIC\r\n\t\t\t\t\ttagNumber: 3 // [3]\r\n\t\t\t\t},\r\n\t\t\t\tvalue: [new asn1js.Sequence({\r\n\t\t\t\t\tvalue: Array.from(this.extensions, element => element.toSchema())\r\n\t\t\t\t})]\r\n\t\t\t}));\r\n\t\t}\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create and return output sequence\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: outputArray\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convert current object to asn1js object and set correct values\r\n\t * @returns {Object} asn1js object\r\n\t */\r\n\ttoSchema(encodeFlag = false)\r\n\t{\r\n\t\tlet tbsSchema = {};\r\n\t\t\r\n\t\t//region Decode stored TBS value\r\n\t\tif(encodeFlag === false)\r\n\t\t{\r\n\t\t\tif(this.tbs.length === 0) // No stored certificate TBS part\r\n\t\t\t\treturn Certificate.schema().value[0];\r\n\t\t\t\r\n\t\t\ttbsSchema = asn1js.fromBER(this.tbs).result;\r\n\t\t}\r\n\t\t//endregion\r\n\t\t//region Create TBS schema via assembling from TBS parts\r\n\t\telse\r\n\t\t\ttbsSchema = this.encodeTBS();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Construct and return new ASN.1 schema for this object\r\n\t\treturn (new asn1js.Sequence({\r\n\t\t\tvalue: [\r\n\t\t\t\ttbsSchema,\r\n\t\t\t\tthis.signatureAlgorithm.toSchema(),\r\n\t\t\t\tthis.signatureValue\r\n\t\t\t]\r\n\t\t}));\r\n\t\t//endregion\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Convertion for the class to JSON object\r\n\t * @returns {Object}\r\n\t */\r\n\ttoJSON()\r\n\t{\r\n\t\tconst object = {\r\n\t\t\ttbs: bufferToHexCodes(this.tbs, 0, this.tbs.byteLength),\r\n\t\t\tserialNumber: this.serialNumber.toJSON(),\r\n\t\t\tsignature: this.signature.toJSON(),\r\n\t\t\tissuer: this.issuer.toJSON(),\r\n\t\t\tnotBefore: this.notBefore.toJSON(),\r\n\t\t\tnotAfter: this.notAfter.toJSON(),\r\n\t\t\tsubject: this.subject.toJSON(),\r\n\t\t\tsubjectPublicKeyInfo: this.subjectPublicKeyInfo.toJSON(),\r\n\t\t\tsignatureAlgorithm: this.signatureAlgorithm.toJSON(),\r\n\t\t\tsignatureValue: this.signatureValue.toJSON()\r\n\t\t};\r\n\t\t\r\n\t\tif((\"version\" in this) && (this.version !== Certificate.defaultValues(\"version\")))\r\n\t\t\tobject.version = this.version;\r\n\t\t\r\n\t\tif(\"issuerUniqueID\" in this)\r\n\t\t\tobject.issuerUniqueID = bufferToHexCodes(this.issuerUniqueID, 0, this.issuerUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"subjectUniqueID\" in this)\r\n\t\t\tobject.subjectUniqueID = bufferToHexCodes(this.subjectUniqueID, 0, this.subjectUniqueID.byteLength);\r\n\t\t\r\n\t\tif(\"extensions\" in this)\r\n\t\t\tobject.extensions = Array.from(this.extensions, element => element.toJSON());\r\n\t\t\r\n\t\treturn object;\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Importing public key for current certificate\r\n\t */\r\n\tgetPublicKey(parameters = null)\r\n\t{\r\n\t\treturn getEngine().subtle.getPublicKey(this.subjectPublicKeyInfo, this.signatureAlgorithm, parameters);\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Get hash value for subject public key (default SHA-1)\r\n\t * @param {String} [hashAlgorithm=SHA-1] Hashing algorithm name\r\n\t */\r\n\tgetKeyHash(hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Get a \"crypto\" extension\r\n\t\tconst crypto = getCrypto();\r\n\t\tif(typeof crypto === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Unable to create WebCrypto object\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn crypto.digest({ name: hashAlgorithm }, new Uint8Array(this.subjectPublicKeyInfo.subjectPublicKey.valueBlock.valueHex));\r\n\t}\r\n\t//**********************************************************************************\r\n\t/**\r\n\t * Make a signature for current value from TBS section\r\n\t * @param {Object} privateKey Private key for \"subjectPublicKeyInfo\" structure\r\n\t * @param {string} [hashAlgorithm=\"SHA-1\"] Hashing algorithm\r\n\t */\r\n\tsign(privateKey, hashAlgorithm = \"SHA-1\")\r\n\t{\r\n\t\t//region Initial checking\r\n\t\t//region Check private key\r\n\t\tif(typeof privateKey === \"undefined\")\r\n\t\t\treturn Promise.reject(\"Need to provide a private key for signing\");\r\n\t\t//endregion\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Initial variables\r\n\t\tlet sequence = Promise.resolve();\r\n\t\tlet parameters;\r\n\t\t\r\n\t\tconst engine = getEngine();\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Get a \"default parameters\" for current algorithm and set correct signature algorithm\r\n\t\tsequence = sequence.then(() => engine.subtle.getSignatureParameters(privateKey, hashAlgorithm));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tparameters = result.parameters;\r\n\t\t\tthis.signature = result.signatureAlgorithm;\r\n\t\t\tthis.signatureAlgorithm = result.signatureAlgorithm;\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Create TBS data for signing\r\n\t\tsequence = sequence.then(() =>\r\n\t\t{\r\n\t\t\tthis.tbs = this.encodeTBS().toBER(false);\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Signing TBS data on provided private key\r\n\t\tsequence = sequence.then(() => engine.subtle.signWithPrivateKey(this.tbs, privateKey, parameters));\r\n\t\t\r\n\t\tsequence = sequence.then(result =>\r\n\t\t{\r\n\t\t\tthis.signatureValue = new asn1js.BitString({ valueHex: result });\r\n\t\t});\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn sequence;\r\n\t}\r\n\t//**********************************************************************************\r\n\tverify(issuerCertificate = null)\r\n\t{\r\n\t\t//region Global variables\r\n\t\tlet subjectPublicKeyInfo = {};\r\n\t\t//endregion\r\n\t\t\r\n\t\t//region Set correct \"subjectPublicKeyInfo\" value\r\n\t\tif(issuerCertificate !== null)\r\n\t\t\tsubjectPublicKeyInfo = issuerCertificate.subjectPublicKeyInfo;\r\n\t\telse\r\n\t\t{\r\n\t\t\tif(this.issuer.isEqual(this.subject)) // Self-signed certificate\r\n\t\t\t\tsubjectPublicKeyInfo = this.subjectPublicKeyInfo;\r\n\t\t}\r\n\t\t\r\n\t\tif((subjectPublicKeyInfo instanceof PublicKeyInfo) === false)\r\n\t\t\treturn Promise.reject(\"Please provide issuer certificate as a parameter\");\r\n\t\t//endregion\r\n\t\t\r\n\t\treturn getEngine().subtle.verifyWithPublicKey(this.tbs, this.signatureValue, subjectPublicKeyInfo, this.signatureAlgorithm);\r\n\t}\r\n\t//**********************************************************************************\r\n}\r\n//**************************************************************************************\r\n","/*!\n * MIT License\n * \n * Copyright (c) 2017-2022 Peculiar Ventures, LLC\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n * \n */\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst ARRAY_BUFFER_NAME = \"[object ArrayBuffer]\";\r\nclass BufferSourceConverter {\r\n    static isArrayBuffer(data) {\r\n        return Object.prototype.toString.call(data) === ARRAY_BUFFER_NAME;\r\n    }\r\n    static toArrayBuffer(data) {\r\n        if (this.isArrayBuffer(data)) {\r\n            return data;\r\n        }\r\n        if (data.byteLength === data.buffer.byteLength) {\r\n            return data.buffer;\r\n        }\r\n        return this.toUint8Array(data).slice().buffer;\r\n    }\r\n    static toUint8Array(data) {\r\n        return this.toView(data, Uint8Array);\r\n    }\r\n    static toView(data, type) {\r\n        if (data.constructor === type) {\r\n            return data;\r\n        }\r\n        if (this.isArrayBuffer(data)) {\r\n            return new type(data);\r\n        }\r\n        if (this.isArrayBufferView(data)) {\r\n            return new type(data.buffer, data.byteOffset, data.byteLength);\r\n        }\r\n        throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\r\n    }\r\n    static isBufferSource(data) {\r\n        return this.isArrayBufferView(data)\r\n            || this.isArrayBuffer(data);\r\n    }\r\n    static isArrayBufferView(data) {\r\n        return ArrayBuffer.isView(data)\r\n            || (data && this.isArrayBuffer(data.buffer));\r\n    }\r\n    static isEqual(a, b) {\r\n        const aView = BufferSourceConverter.toUint8Array(a);\r\n        const bView = BufferSourceConverter.toUint8Array(b);\r\n        if (aView.length !== bView.byteLength) {\r\n            return false;\r\n        }\r\n        for (let i = 0; i < aView.length; i++) {\r\n            if (aView[i] !== bView[i]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    static concat(...args) {\r\n        if (Array.isArray(args[0])) {\r\n            const buffers = args[0];\r\n            let size = 0;\r\n            for (const buffer of buffers) {\r\n                size += buffer.byteLength;\r\n            }\r\n            const res = new Uint8Array(size);\r\n            let offset = 0;\r\n            for (const buffer of buffers) {\r\n                const view = this.toUint8Array(buffer);\r\n                res.set(view, offset);\r\n                offset += view.length;\r\n            }\r\n            if (args[1]) {\r\n                return this.toView(res, args[1]);\r\n            }\r\n            return res.buffer;\r\n        }\r\n        else {\r\n            return this.concat(args);\r\n        }\r\n    }\r\n}\n\nclass Utf8Converter {\r\n    static fromString(text) {\r\n        const s = unescape(encodeURIComponent(text));\r\n        const uintArray = new Uint8Array(s.length);\r\n        for (let i = 0; i < s.length; i++) {\r\n            uintArray[i] = s.charCodeAt(i);\r\n        }\r\n        return uintArray.buffer;\r\n    }\r\n    static toString(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let encodedString = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            encodedString += String.fromCharCode(buf[i]);\r\n        }\r\n        const decodedString = decodeURIComponent(escape(encodedString));\r\n        return decodedString;\r\n    }\r\n}\r\nclass Utf16Converter {\r\n    static toString(buffer, littleEndian = false) {\r\n        const arrayBuffer = BufferSourceConverter.toArrayBuffer(buffer);\r\n        const dataView = new DataView(arrayBuffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < arrayBuffer.byteLength; i += 2) {\r\n            const code = dataView.getUint16(i, littleEndian);\r\n            res += String.fromCharCode(code);\r\n        }\r\n        return res;\r\n    }\r\n    static fromString(text, littleEndian = false) {\r\n        const res = new ArrayBuffer(text.length * 2);\r\n        const dataView = new DataView(res);\r\n        for (let i = 0; i < text.length; i++) {\r\n            dataView.setUint16(i * 2, text.charCodeAt(i), littleEndian);\r\n        }\r\n        return res;\r\n    }\r\n}\r\nclass Convert {\r\n    static isHex(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-z0-9]+$/i.test(data);\r\n    }\r\n    static isBase64(data) {\r\n        return typeof data === \"string\"\r\n            && /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(data);\r\n    }\r\n    static isBase64Url(data) {\r\n        return typeof data === \"string\"\r\n            && /^[a-zA-Z0-9-_]+$/i.test(data);\r\n    }\r\n    static ToString(buffer, enc = \"utf8\") {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.ToUtf8String(buf);\r\n            case \"binary\":\r\n                return this.ToBinary(buf);\r\n            case \"hex\":\r\n                return this.ToHex(buf);\r\n            case \"base64\":\r\n                return this.ToBase64(buf);\r\n            case \"base64url\":\r\n                return this.ToBase64Url(buf);\r\n            case \"utf16le\":\r\n                return Utf16Converter.toString(buf, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buf);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static FromString(str, enc = \"utf8\") {\r\n        if (!str) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        switch (enc.toLowerCase()) {\r\n            case \"utf8\":\r\n                return this.FromUtf8String(str);\r\n            case \"binary\":\r\n                return this.FromBinary(str);\r\n            case \"hex\":\r\n                return this.FromHex(str);\r\n            case \"base64\":\r\n                return this.FromBase64(str);\r\n            case \"base64url\":\r\n                return this.FromBase64Url(str);\r\n            case \"utf16le\":\r\n                return Utf16Converter.fromString(str, true);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(str);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${enc}'`);\r\n        }\r\n    }\r\n    static ToBase64(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        if (typeof btoa !== \"undefined\") {\r\n            const binary = this.ToString(buf, \"binary\");\r\n            return btoa(binary);\r\n        }\r\n        else {\r\n            return Buffer.from(buf).toString(\"base64\");\r\n        }\r\n    }\r\n    static FromBase64(base64) {\r\n        const formatted = this.formatString(base64);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64(formatted)) {\r\n            throw new TypeError(\"Argument 'base64Text' is not Base64 encoded\");\r\n        }\r\n        if (typeof atob !== \"undefined\") {\r\n            return this.FromBinary(atob(formatted));\r\n        }\r\n        else {\r\n            return new Uint8Array(Buffer.from(formatted, \"base64\")).buffer;\r\n        }\r\n    }\r\n    static FromBase64Url(base64url) {\r\n        const formatted = this.formatString(base64url);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isBase64Url(formatted)) {\r\n            throw new TypeError(\"Argument 'base64url' is not Base64Url encoded\");\r\n        }\r\n        return this.FromBase64(this.Base64Padding(formatted.replace(/\\-/g, \"+\").replace(/\\_/g, \"/\")));\r\n    }\r\n    static ToBase64Url(data) {\r\n        return this.ToBase64(data).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/\\=/g, \"\");\r\n    }\r\n    static FromUtf8String(text, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.FromBinary(text);\r\n            case \"utf8\":\r\n                return Utf8Converter.fromString(text);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.fromString(text);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.fromString(text, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static ToUtf8String(buffer, encoding = Convert.DEFAULT_UTF8_ENCODING) {\r\n        switch (encoding) {\r\n            case \"ascii\":\r\n                return this.ToBinary(buffer);\r\n            case \"utf8\":\r\n                return Utf8Converter.toString(buffer);\r\n            case \"utf16\":\r\n            case \"utf16be\":\r\n                return Utf16Converter.toString(buffer);\r\n            case \"utf16le\":\r\n            case \"usc2\":\r\n                return Utf16Converter.toString(buffer, true);\r\n            default:\r\n                throw new Error(`Unknown type of encoding '${encoding}'`);\r\n        }\r\n    }\r\n    static FromBinary(text) {\r\n        const stringLength = text.length;\r\n        const resultView = new Uint8Array(stringLength);\r\n        for (let i = 0; i < stringLength; i++) {\r\n            resultView[i] = text.charCodeAt(i);\r\n        }\r\n        return resultView.buffer;\r\n    }\r\n    static ToBinary(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        let res = \"\";\r\n        for (let i = 0; i < buf.length; i++) {\r\n            res += String.fromCharCode(buf[i]);\r\n        }\r\n        return res;\r\n    }\r\n    static ToHex(buffer) {\r\n        const buf = BufferSourceConverter.toUint8Array(buffer);\r\n        const splitter = \"\";\r\n        const res = [];\r\n        const len = buf.length;\r\n        for (let i = 0; i < len; i++) {\r\n            const char = buf[i].toString(16).padStart(2, \"0\");\r\n            res.push(char);\r\n        }\r\n        return res.join(splitter);\r\n    }\r\n    static FromHex(hexString) {\r\n        let formatted = this.formatString(hexString);\r\n        if (!formatted) {\r\n            return new ArrayBuffer(0);\r\n        }\r\n        if (!Convert.isHex(formatted)) {\r\n            throw new TypeError(\"Argument 'hexString' is not HEX encoded\");\r\n        }\r\n        if (formatted.length % 2) {\r\n            formatted = `0${formatted}`;\r\n        }\r\n        const res = new Uint8Array(formatted.length / 2);\r\n        for (let i = 0; i < formatted.length; i = i + 2) {\r\n            const c = formatted.slice(i, i + 2);\r\n            res[i / 2] = parseInt(c, 16);\r\n        }\r\n        return res.buffer;\r\n    }\r\n    static ToUtf16String(buffer, littleEndian = false) {\r\n        return Utf16Converter.toString(buffer, littleEndian);\r\n    }\r\n    static FromUtf16String(text, littleEndian = false) {\r\n        return Utf16Converter.fromString(text, littleEndian);\r\n    }\r\n    static Base64Padding(base64) {\r\n        const padCount = 4 - (base64.length % 4);\r\n        if (padCount < 4) {\r\n            for (let i = 0; i < padCount; i++) {\r\n                base64 += \"=\";\r\n            }\r\n        }\r\n        return base64;\r\n    }\r\n    static formatString(data) {\r\n        return (data === null || data === void 0 ? void 0 : data.replace(/[\\n\\r\\t ]/g, \"\")) || \"\";\r\n    }\r\n}\r\nConvert.DEFAULT_UTF8_ENCODING = \"utf8\";\n\nfunction assign(target, ...sources) {\r\n    const res = arguments[0];\r\n    for (let i = 1; i < arguments.length; i++) {\r\n        const obj = arguments[i];\r\n        for (const prop in obj) {\r\n            res[prop] = obj[prop];\r\n        }\r\n    }\r\n    return res;\r\n}\r\nfunction combine(...buf) {\r\n    const totalByteLength = buf.map((item) => item.byteLength).reduce((prev, cur) => prev + cur);\r\n    const res = new Uint8Array(totalByteLength);\r\n    let currentPos = 0;\r\n    buf.map((item) => new Uint8Array(item)).forEach((arr) => {\r\n        for (const item2 of arr) {\r\n            res[currentPos++] = item2;\r\n        }\r\n    });\r\n    return res.buffer;\r\n}\r\nfunction isEqual(bytes1, bytes2) {\r\n    if (!(bytes1 && bytes2)) {\r\n        return false;\r\n    }\r\n    if (bytes1.byteLength !== bytes2.byteLength) {\r\n        return false;\r\n    }\r\n    const b1 = new Uint8Array(bytes1);\r\n    const b2 = new Uint8Array(bytes2);\r\n    for (let i = 0; i < bytes1.byteLength; i++) {\r\n        if (b1[i] !== b2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\n\nexports.BufferSourceConverter = BufferSourceConverter;\nexports.Convert = Convert;\nexports.assign = assign;\nexports.combine = combine;\nexports.isEqual = isEqual;\n","/*!\n Copyright (c) Peculiar Ventures, LLC\n*/\n\nfunction getUTCDate(date) {\r\n    return new Date(date.getTime() + (date.getTimezoneOffset() * 60000));\r\n}\r\nfunction getParametersValue(parameters, name, defaultValue) {\r\n    var _a;\r\n    if ((parameters instanceof Object) === false) {\r\n        return defaultValue;\r\n    }\r\n    return (_a = parameters[name]) !== null && _a !== void 0 ? _a : defaultValue;\r\n}\r\nfunction bufferToHexCodes(inputBuffer, inputOffset = 0, inputLength = (inputBuffer.byteLength - inputOffset), insertSpace = false) {\r\n    let result = \"\";\r\n    for (const item of (new Uint8Array(inputBuffer, inputOffset, inputLength))) {\r\n        const str = item.toString(16).toUpperCase();\r\n        if (str.length === 1) {\r\n            result += \"0\";\r\n        }\r\n        result += str;\r\n        if (insertSpace) {\r\n            result += \" \";\r\n        }\r\n    }\r\n    return result.trim();\r\n}\r\nfunction checkBufferParams(baseBlock, inputBuffer, inputOffset, inputLength) {\r\n    if (!(inputBuffer instanceof ArrayBuffer)) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer must be \\\"ArrayBuffer\\\"\";\r\n        return false;\r\n    }\r\n    if (!inputBuffer.byteLength) {\r\n        baseBlock.error = \"Wrong parameter: inputBuffer has zero length\";\r\n        return false;\r\n    }\r\n    if (inputOffset < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputOffset less than zero\";\r\n        return false;\r\n    }\r\n    if (inputLength < 0) {\r\n        baseBlock.error = \"Wrong parameter: inputLength less than zero\";\r\n        return false;\r\n    }\r\n    if ((inputBuffer.byteLength - inputOffset - inputLength) < 0) {\r\n        baseBlock.error = \"End of input reached before message was fully decoded (inconsistent offset and length values)\";\r\n        return false;\r\n    }\r\n    return true;\r\n}\r\nfunction utilFromBase(inputBuffer, inputBase) {\r\n    let result = 0;\r\n    if (inputBuffer.length === 1) {\r\n        return inputBuffer[0];\r\n    }\r\n    for (let i = (inputBuffer.length - 1); i >= 0; i--) {\r\n        result += inputBuffer[(inputBuffer.length - 1) - i] * Math.pow(2, inputBase * i);\r\n    }\r\n    return result;\r\n}\r\nfunction utilToBase(value, base, reserved = (-1)) {\r\n    const internalReserved = reserved;\r\n    let internalValue = value;\r\n    let result = 0;\r\n    let biggest = Math.pow(2, base);\r\n    for (let i = 1; i < 8; i++) {\r\n        if (value < biggest) {\r\n            let retBuf;\r\n            if (internalReserved < 0) {\r\n                retBuf = new ArrayBuffer(i);\r\n                result = i;\r\n            }\r\n            else {\r\n                if (internalReserved < i) {\r\n                    return (new ArrayBuffer(0));\r\n                }\r\n                retBuf = new ArrayBuffer(internalReserved);\r\n                result = internalReserved;\r\n            }\r\n            const retView = new Uint8Array(retBuf);\r\n            for (let j = (i - 1); j >= 0; j--) {\r\n                const basis = Math.pow(2, j * base);\r\n                retView[result - j - 1] = Math.floor(internalValue / basis);\r\n                internalValue -= (retView[result - j - 1]) * basis;\r\n            }\r\n            return retBuf;\r\n        }\r\n        biggest *= Math.pow(2, base);\r\n    }\r\n    return new ArrayBuffer(0);\r\n}\r\nfunction utilConcatBuf(...buffers) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const buffer of buffers) {\r\n        outputLength += buffer.byteLength;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const buffer of buffers) {\r\n        retView.set(new Uint8Array(buffer), prevLength);\r\n        prevLength += buffer.byteLength;\r\n    }\r\n    return retBuf;\r\n}\r\nfunction utilConcatView(...views) {\r\n    let outputLength = 0;\r\n    let prevLength = 0;\r\n    for (const view of views) {\r\n        outputLength += view.length;\r\n    }\r\n    const retBuf = new ArrayBuffer(outputLength);\r\n    const retView = new Uint8Array(retBuf);\r\n    for (const view of views) {\r\n        retView.set(view, prevLength);\r\n        prevLength += view.length;\r\n    }\r\n    return retView;\r\n}\r\nfunction utilDecodeTC() {\r\n    const buf = new Uint8Array(this.valueHex);\r\n    if (this.valueHex.byteLength >= 2) {\r\n        const condition1 = (buf[0] === 0xFF) && (buf[1] & 0x80);\r\n        const condition2 = (buf[0] === 0x00) && ((buf[1] & 0x80) === 0x00);\r\n        if (condition1 || condition2) {\r\n            this.warnings.push(\"Needlessly long format\");\r\n        }\r\n    }\r\n    const bigIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const bigIntView = new Uint8Array(bigIntBuffer);\r\n    for (let i = 0; i < this.valueHex.byteLength; i++) {\r\n        bigIntView[i] = 0;\r\n    }\r\n    bigIntView[0] = (buf[0] & 0x80);\r\n    const bigInt = utilFromBase(bigIntView, 8);\r\n    const smallIntBuffer = new ArrayBuffer(this.valueHex.byteLength);\r\n    const smallIntView = new Uint8Array(smallIntBuffer);\r\n    for (let j = 0; j < this.valueHex.byteLength; j++) {\r\n        smallIntView[j] = buf[j];\r\n    }\r\n    smallIntView[0] &= 0x7F;\r\n    const smallInt = utilFromBase(smallIntView, 8);\r\n    return (smallInt - bigInt);\r\n}\r\nfunction utilEncodeTC(value) {\r\n    const modValue = (value < 0) ? (value * (-1)) : value;\r\n    let bigInt = 128;\r\n    for (let i = 1; i < 8; i++) {\r\n        if (modValue <= bigInt) {\r\n            if (value < 0) {\r\n                const smallInt = bigInt - modValue;\r\n                const retBuf = utilToBase(smallInt, 8, i);\r\n                const retView = new Uint8Array(retBuf);\r\n                retView[0] |= 0x80;\r\n                return retBuf;\r\n            }\r\n            let retBuf = utilToBase(modValue, 8, i);\r\n            let retView = new Uint8Array(retBuf);\r\n            if (retView[0] & 0x80) {\r\n                const tempBuf = retBuf.slice(0);\r\n                const tempView = new Uint8Array(tempBuf);\r\n                retBuf = new ArrayBuffer(retBuf.byteLength + 1);\r\n                retView = new Uint8Array(retBuf);\r\n                for (let k = 0; k < tempBuf.byteLength; k++) {\r\n                    retView[k + 1] = tempView[k];\r\n                }\r\n                retView[0] = 0x00;\r\n            }\r\n            return retBuf;\r\n        }\r\n        bigInt *= Math.pow(2, 8);\r\n    }\r\n    return (new ArrayBuffer(0));\r\n}\r\nfunction isEqualBuffer(inputBuffer1, inputBuffer2) {\r\n    if (inputBuffer1.byteLength !== inputBuffer2.byteLength) {\r\n        return false;\r\n    }\r\n    const view1 = new Uint8Array(inputBuffer1);\r\n    const view2 = new Uint8Array(inputBuffer2);\r\n    for (let i = 0; i < view1.length; i++) {\r\n        if (view1[i] !== view2[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\nfunction padNumber(inputNumber, fullLength) {\r\n    const str = inputNumber.toString(10);\r\n    if (fullLength < str.length) {\r\n        return \"\";\r\n    }\r\n    const dif = fullLength - str.length;\r\n    const padding = new Array(dif);\r\n    for (let i = 0; i < dif; i++) {\r\n        padding[i] = \"0\";\r\n    }\r\n    const paddingString = padding.join(\"\");\r\n    return paddingString.concat(str);\r\n}\r\nconst base64Template = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\r\nconst base64UrlTemplate = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=\";\r\nfunction toBase64(input, useUrlTemplate = false, skipPadding = false, skipLeadingZeros = false) {\r\n    let i = 0;\r\n    let flag1 = 0;\r\n    let flag2 = 0;\r\n    let output = \"\";\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    if (skipLeadingZeros) {\r\n        let nonZeroPosition = 0;\r\n        for (let i = 0; i < input.length; i++) {\r\n            if (input.charCodeAt(i) !== 0) {\r\n                nonZeroPosition = i;\r\n                break;\r\n            }\r\n        }\r\n        input = input.slice(nonZeroPosition);\r\n    }\r\n    while (i < input.length) {\r\n        const chr1 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag1 = 1;\r\n        }\r\n        const chr2 = input.charCodeAt(i++);\r\n        if (i >= input.length) {\r\n            flag2 = 1;\r\n        }\r\n        const chr3 = input.charCodeAt(i++);\r\n        const enc1 = chr1 >> 2;\r\n        const enc2 = ((chr1 & 0x03) << 4) | (chr2 >> 4);\r\n        let enc3 = ((chr2 & 0x0F) << 2) | (chr3 >> 6);\r\n        let enc4 = chr3 & 0x3F;\r\n        if (flag1 === 1) {\r\n            enc3 = enc4 = 64;\r\n        }\r\n        else {\r\n            if (flag2 === 1) {\r\n                enc4 = 64;\r\n            }\r\n        }\r\n        if (skipPadding) {\r\n            if (enc3 === 64) {\r\n                output += `${template.charAt(enc1)}${template.charAt(enc2)}`;\r\n            }\r\n            else {\r\n                if (enc4 === 64) {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}`;\r\n                }\r\n                else {\r\n                    output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            output += `${template.charAt(enc1)}${template.charAt(enc2)}${template.charAt(enc3)}${template.charAt(enc4)}`;\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction fromBase64(input, useUrlTemplate = false, cutTailZeros = false) {\r\n    const template = (useUrlTemplate) ? base64UrlTemplate : base64Template;\r\n    function indexOf(toSearch) {\r\n        for (let i = 0; i < 64; i++) {\r\n            if (template.charAt(i) === toSearch)\r\n                return i;\r\n        }\r\n        return 64;\r\n    }\r\n    function test(incoming) {\r\n        return ((incoming === 64) ? 0x00 : incoming);\r\n    }\r\n    let i = 0;\r\n    let output = \"\";\r\n    while (i < input.length) {\r\n        const enc1 = indexOf(input.charAt(i++));\r\n        const enc2 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc3 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const enc4 = (i >= input.length) ? 0x00 : indexOf(input.charAt(i++));\r\n        const chr1 = (test(enc1) << 2) | (test(enc2) >> 4);\r\n        const chr2 = ((test(enc2) & 0x0F) << 4) | (test(enc3) >> 2);\r\n        const chr3 = ((test(enc3) & 0x03) << 6) | test(enc4);\r\n        output += String.fromCharCode(chr1);\r\n        if (enc3 !== 64) {\r\n            output += String.fromCharCode(chr2);\r\n        }\r\n        if (enc4 !== 64) {\r\n            output += String.fromCharCode(chr3);\r\n        }\r\n    }\r\n    if (cutTailZeros) {\r\n        const outputLength = output.length;\r\n        let nonZeroStart = (-1);\r\n        for (let i = (outputLength - 1); i >= 0; i--) {\r\n            if (output.charCodeAt(i) !== 0) {\r\n                nonZeroStart = i;\r\n                break;\r\n            }\r\n        }\r\n        if (nonZeroStart !== (-1)) {\r\n            output = output.slice(0, nonZeroStart + 1);\r\n        }\r\n        else {\r\n            output = \"\";\r\n        }\r\n    }\r\n    return output;\r\n}\r\nfunction arrayBufferToString(buffer) {\r\n    let resultString = \"\";\r\n    const view = new Uint8Array(buffer);\r\n    for (const element of view) {\r\n        resultString += String.fromCharCode(element);\r\n    }\r\n    return resultString;\r\n}\r\nfunction stringToArrayBuffer(str) {\r\n    const stringLength = str.length;\r\n    const resultBuffer = new ArrayBuffer(stringLength);\r\n    const resultView = new Uint8Array(resultBuffer);\r\n    for (let i = 0; i < stringLength; i++) {\r\n        resultView[i] = str.charCodeAt(i);\r\n    }\r\n    return resultBuffer;\r\n}\r\nconst log2 = Math.log(2);\r\nfunction nearestPowerOf2(length) {\r\n    const base = (Math.log(length) / log2);\r\n    const floor = Math.floor(base);\r\n    const round = Math.round(base);\r\n    return ((floor === round) ? floor : round);\r\n}\r\nfunction clearProps(object, propsArray) {\r\n    for (const prop of propsArray) {\r\n        delete object[prop];\r\n    }\r\n}\n\nexport { arrayBufferToString, bufferToHexCodes, checkBufferParams, clearProps, fromBase64, getParametersValue, getUTCDate, isEqualBuffer, nearestPowerOf2, padNumber, stringToArrayBuffer, toBase64, utilConcatBuf, utilConcatView, utilDecodeTC, utilEncodeTC, utilFromBase, utilToBase };\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}","import _typeof from \"./typeof.js\";\nimport assertThisInitialized from \"./assertThisInitialized.js\";\nexport default function _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n\n  return assertThisInitialized(self);\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}"],"names":["assertBigInt","BigInt","Error","concat","buffers","outputLength","prevLength","i","length","byteLength","retView","Uint8Array","buffer","set","checkBufferParams","baseBlock","inputBuffer","inputOffset","inputLength","error","ViewWriter","constructor","this","items","write","buf","push","final","powers2","digitsString","NAME","VALUE_HEX_VIEW","EMPTY_STRING","EMPTY_BUFFER","ArrayBuffer","EMPTY_VIEW","END_OF_CONTENT_NAME","OCTET_STRING_NAME","BIT_STRING_NAME","HexBlock","BaseClass","_a","args","super","params","isHexOnly","valueHexView","valueHex","slice","value","fromBER","view","endLength","subarray","blockLength","warnings","toBER","sizeOnly","toJSON","LocalBaseBlock","valueBeforeDecode","valueBeforeDecodeView","static","blockName","ValueBlock","TypeError","writer","LocalIdentificationBlock","idBlock","_b","_c","_d","tagClass","tagNumber","isConstructed","firstOctet","number","encodedBuf","encodedView","size","curView","inputView","intBuffer","tagNumberMask","count","intTagNumberBuffer","tagNumberBufferMaxLength","tempBufferView","LocalLengthBlock","lenBlock","isIndefiniteForm","longFormUsed","lenOffset","lengthBufferView","retBuf","typeStore","BaseBlock","name","optional","primitiveSchema","parameters","valueBlockType","valueBlock","resultOffset","_writer","prepareIndefiniteForm","idBlockBuf","valueBlockBuf","lenBlockBuf","object","toString","encoding","onAsciiEncoding","isEqual","other","thisRaw","otherRaw","Constructed","BaseStringBlock","stringValueBlockType","fromString","getValue","setValue","fromBuffer","LocalPrimitiveValueBlock","_a$w","_a$v","_a$u","_a$t","_a$s","_a$r","_a$q","_a$p","_a$o","_a$n","_a$m","_a$l","_a$k","_a$j","_a$i","_a$h","_a$g","_a$f","_a$e","_a$d","_a$c","_a$b","_a$a","_a$9","_a$8","_a$7","_a$6","_a$5","_a$4","_a$3","_a$2","_a$1","Primitive","localFromBER","incomingOffset","returnObject","offset","result","newASN1Type","EndOfContent","Boolean","Integer","BitString","OctetString","Null","ObjectIdentifier","Enumerated","Utf8String","RelativeObjectIdentifier","TIME","Sequence","Set","NumericString","PrintableString","TeletexString","VideotexString","IA5String","UTCTime","GeneralizedTime","GraphicString","VisibleString","GeneralString","UniversalString","CharacterString","BmpString","DATE","TimeOfDay","DateTime","Duration","newObject","inputObject","newType","localChangeType","LocalConstructedValueBlock","currentOffset","indefiniteLength","pop","values","split","map","o","join","LocalEndOfContentValueBlock","override","LocalBooleanValueBlock","octet","LocalOctetStringValueBlock","prototype","call","currentBlockName","asn","e","array","content","LocalBitStringValueBlock","unusedBits","bits","byte","padStart","bitsStr","substring","viewAdd","first","second","c","firstView","secondView","firstViewCopy","firstViewCopyLength","secondViewCopy","secondViewCopyLength","counter","power2","n","p","digits","newValue","viewSub","b","LocalIntegerValueBlock","_valueDec","undefined","valueDec","setValueHex","v","fromDER","expectedLength","toDER","updatedView","firstBit","currentByte","bitNumber","asn1View","flag","byteNumber","charAt","Object","defineProperty","get","toBigInt","bigIntValue","hex","replace","secondInt","convertToDER","integer","convertFromDER","LocalSidValueBlock","isFirstSid","tempView","valueBigInt","bytes","parseInt","len","sidValue","LocalObjectIdentifierValueBlock","sidBlock","retBuffers","valueBuf","string","pos1","pos2","sid","indexOf","plus","parsedSID","isNaN","Number","MAX_SAFE_INTEGER","sidStr","sidArray","LocalRelativeSidValueBlock","LocalRelativeObjectIdentifierValueBlock","LocalStringValueBlock","LocalSimpleStringValueBlock","LocalSimpleStringBlock","String","fromCharCode","apply","inputString","strLen","charCodeAt","LocalUtf8StringValueBlock","ex","LocalBmpStringValueBlock","LocalUniversalStringValueBlock","copyBuffer","isView","valueView","Uint32Array","strLength","codeBuf","codeView","dif","j","valueDate","year","month","day","hour","minute","fromDate","toBuffer","str","inputDate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","toDate","Date","UTC","parserArray","exec","outputArray","Array","toISOString","millisecond","getUTCMilliseconds","parser","isUTC","timeString","dateTimeString","fractionPart","hourDifference","minuteDifference","valueOf","multiplier","differencePosition","differenceString","fractionPointPosition","fractionPartCheck","fractionResult","Math","floor","tempDate","getUTCDay","Any","Choice","Repeated","local","RawData","data","dataView","compareSchema","root","inputData","inputSchema","verified","_result","hasOwnProperty","encodedId","schemaView","admission","maxLength","_optional","arrayRoot","asn1","exports","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","lookup","code","start","end","num","output","base64","ieee754","customInspectSymbol","Symbol","Buffer","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","arg","encodingOrOffset","allocUnsafe","from","isEncoding","actual","arrayView","isInstance","copy","fromArrayBuffer","byteOffset","fromArrayLike","fromArrayView","SharedArrayBuffer","obj","isBuffer","checked","numberIsNaN","type","isArray","fromObject","toPrimitive","assertSize","mustMatch","arguments","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","m","bidirectionalIndexOf","val","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","parsed","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","min","res","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","console","enumerable","poolSize","alloc","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","list","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","trim","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","_arr","ret","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","last","boundsError","readBigUInt64BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","Base","writable","configurable","stack","message","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","input","msg","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","base64clean","src","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","d","s","NaN","rt","log","LN2","AlgorithmIdentifier","algorithmId","defaultValues","algorithmParams","fromSchema","schema","memberName","memberValue","names","algorithmIdentifier","algorithm","toSchema","JSON","stringify","ECNamedCurves","id","namedCurves","nameOrId","register","ECPublicKey","namedCurve","fromJSON","json","find","coordinateLength","crv","convertBuffer","convertBufferView","RSAPublicKey","modulus","publicExponent","PublicKeyInfo","subjectPublicKey","parsedKey","publicKeyASN1","jwk","kty","publicKeyJWK","key","keys","toUpperCase","importKey","publicKey","sequence","Promise","resolve","_this","reject","crypto","then","exportKey","exportedKey","exception","Attribute","setName","element","ECPrivateKey","version","privateKey","compareWithDefault","publicKeyData","crvName","privateKeyJSON","publicKeyJSON","coodinateLength","OtherPrimeInfo","prime","exponent","coefficient","r","t","RSAPrivateKey","privateExponent","prime1","prime2","exponent1","exponent2","otherPrimeInfos","otherPrimeInfosName","otherPrimeInfo","q","dp","dq","qi","oth","PrivateKeyInfo","privateKeyAlgorithm","attributes","privateKeyASN1","EncryptedContentInfo","contentType","contentEncryptionAlgorithm","encryptedContent","constrString","pieceView","_array","_view","sequenceLengthBlock","encryptedValue","_object","RSASSAPSSParams","hashAlgorithm","maskGenAlgorithm","saltLength","trailerField","PBKDF2Params","salt","iterationCount","keyLength","prf","saltPrimitive","saltConstructed","PBES2Params","keyDerivationFunc","encryptionScheme","makePKCS12B2Key","cryptoEngine","password","u","passwordViewInitial","passwordTransformed","passwordTransformedView","D","dView","sLen","ceil","S","sView","saltView","passwordLength","pLen","P","pView","passwordView","sPlusPLength","I","iView","internalSequence","_I","dAndI","dAndIView","roundBuffer","digest","B","bView","k","iRound","sliceStart","sliceLength","chunk","l","resultBuffer","CryptoEngine","subtle","format","keyData","extractable","keyUsages","publicKeyInfo","hash","alg","key_ops","privateKeyInfo","parse","convert","inputFormat","outputFormat","encrypt","decrypt","sign","verify","generateKey","deriveKey","deriveBits","wrapKey","unwrapKey","getRandomValues","getAlgorithmByOID","oid","kdf","getOIDByAlgorithm","getAlgorithmParameters","algorithmName","operation","usages","modulusLength","public","iv","info","iterations","getHashAlgorithm","signatureAlgorithm","encryptEncryptedContentInfo","contentEncryptionOID","pbkdf2OID","hmacOID","hmacHashAlgorithm","ivBuffer","ivView","saltBuffer","contentView","contentToEncrypt","pbkdf2Params","pbes2Parameters","decryptEncryptedContentInfo","encryptedContentInfo","dataBuffer","stampDataWithPassword","hmacAlgorithm","contentToStamp","verifyDataStampedWithPassword","signatureToVerify","contentToVerify","getSignatureParameters","paramsObject","hashAlgorithmOID","pssParameters","signWithPrivateKey","signatureBuffer","rBuffer","rInteger","sBuffer","sInteger","createCMSECDSASignature","fillPublicKeyParameters","shaAlgorithm","algorithmObject","algorithmParamsChecked","curveObject","getPublicKey","publicKeyInfoBuffer","publicKeyInfoView","verifyWithPublicKey","signature","signatureValue","cmsSignature","rValue","sValue","correctedLength","rValueView","rValueBufferCorrected","rValueViewCorrected","sValueView","sValueBufferCorrected","sValueViewCorrected","createECDSASignatureFromCMS","hashAlgo","engine","getEngine","process","g","window","_engine","pid","pkijs","stringPrep","isSpace","cuttedResult","self","engineName","cryptoObject","subtleObject","webkitSubtle","setEngine","AttributeTypeAndValue","typeValue","compareTo","stringBlockNames","isString","thisName","value1","value2","localeCompare","RelativeDistinguishedNames","typesAndValues","repeatedSequence","repeatedSet","typeAndValue","RDN","index","entries","Time","utcTimeName","generalTimeName","SubjectDirectoryAttributes","PrivateKeyUsagePeriod","notBefore","notAfter","localNotBefore","localNotAfter","builtInStandardAttributes","country_name","administration_domain_name","network_address","terminal_identifier","private_domain_name","organization_name","numeric_user_identifier","personal_name","organizational_unit_names","builtInDomainDefinedAttributes","extensionAttributes","GeneralName","directoryName","otherName","rfc822Name","dNSName","x400Address","ediPartyName","uniformResourceIdentifier","iPAddress","registeredID","valueBER","AltName","altNames","BasicConstraints","cA","pathLenConstraint","IssuingDistributionPoint","distributionPoint","onlyContainsUserCerts","onlyContainsCACerts","onlySomeReasons","indirectCRL","onlyContainsAttributeCerts","distributionPointNames","GeneralNames","generalNames","GeneralSubtree","base","minimum","maximum","valueMinimum","valueMaximum","NameConstraints","permittedSubtrees","excludedSubtrees","DistributionPoint","reasons","cRLIssuer","cRLIssuerNames","internalValue","CRLDistributionPoints","distributionPoints","PolicyQualifierInfo","policyQualifierId","qualifier","PolicyInformation","policyIdentifier","policyQualifiers","CertificatePolicies","certificatePolicies","PolicyMapping","issuerDomainPolicy","subjectDomainPolicy","PolicyMappings","mappings","AuthorityKeyIdentifier","keyIdentifier","authorityCertIssuer","authorityCertSerialNumber","PolicyConstraints","requireExplicitPolicy","inhibitPolicyMapping","field1","ber1","int1","field2","ber2","int2","ExtKeyUsage","keyPurposes","AccessDescription","accessMethod","accessLocation","InfoAccess","accessDescriptions","ByteStream","clear","stub","fromUint8Array","fromHexString","hexstring","_buffer","stringLength","hexString","hexMap","Map","temp","toHexString","stream","realloc","append","initialSize","streamViewLength","copyView","insert","isEqualView","findPattern","pattern","backward","patternLength","patternArray","equal","equalStart","findFirstIn","patterns","position","valid","findAllIn","patternFound","findAllPatternIn","findFirstNotIn","left","right","currentLength","findAllNotIn","findFirstSequence","firstIn","skipNotPatterns","firstNotIn","skipPatterns","findAllSequences","findPairedPatterns","leftPattern","rightPattern","currentPositionLeft","leftPatterns","rightPatterns","splice","sort","findPairedArrays","inputLeftPatterns","inputRightPatterns","replacePattern","searchPattern","findAllResult","status","searchPatternPositions","replacePatternPositions","patternDifference","changedBuffer","changedView","currentPosition","_length","_start","appendBlock","prevStart","_stream","resetPosition","gap","appendView","appendChar","char","appendUint16","Uint16Array","appendUint24","appendUint32","getBlock","changeLength","getUint16","block","getInt16","Int16Array","getUint24","getUint32","getInt32","Int32Array","SignedCertificateTimestamp","logID","timestamp","extensions","fromStream","seqStream","extensionsLength","signatureLength","signatureData","toStream","timeBuffer","timeView","baseArray","_hashAlgorithm","_signatureAlgorithm","_signature","async","logs","dataType","logId","publicKeyBase64","log_id","SignedCertificateTimestampList","timestamps","overallLength","timestampsData","timestampStream","CertificateTemplate","templateID","templateMajorVersion","templateMinorVersion","extnID","CAVersion","certificateIndex","keyIndex","tempValue","keyIndexBuffer","keyIndexView8","keyIndexView16","certificateIndexBuffer","certificateIndexView8","certificateIndexView16","QCStatement","QCStatements","Extension","critical","extnValue","parsedValue","parsingError","Extensions","extension","tbsCertificate","tbsCertificateVersion","tbsCertificateSerialNumber","issuer","tbsCertificateValidity","subject","subjectPublicKeyInfo","tbsCertificateIssuerUniqueID","tbsCertificateSubjectUniqueID","Certificate","tbs","serialNumber","issuerUniqueID","subjectUniqueID","encodeTBS","encodeFlag","tbsSchema","getKeyHash","issuerCertificate","BufferSourceConverter","isArrayBuffer","toUint8Array","toView","isArrayBufferView","aView","Utf8Converter","text","unescape","encodeURIComponent","uintArray","encodedString","decodeURIComponent","escape","Utf16Converter","arrayBuffer","toArrayBuffer","DataView","setUint16","Convert","test","enc","ToUtf8String","ToBinary","ToHex","ToBase64","ToBase64Url","FromUtf8String","FromBinary","FromHex","FromBase64","FromBase64Url","btoa","binary","ToString","formatted","formatString","isBase64","atob","base64url","isBase64Url","Base64Padding","DEFAULT_UTF8_ENCODING","resultView","isHex","padCount","getParametersValue","defaultValue","bufferToHexCodes","insertSpace","item","utilFromBase","inputBase","utilToBase","reserved","internalReserved","biggest","basis","utilConcatBuf","utilConcatView","views","utilDecodeTC","condition1","condition2","bigIntBuffer","bigIntView","bigInt","smallIntBuffer","smallIntView","utilEncodeTC","modValue","tempBuf","isEqualBuffer","inputBuffer1","inputBuffer2","view1","view2","padNumber","inputNumber","fullLength","padding","base64Template","base64UrlTemplate","toBase64","useUrlTemplate","skipPadding","skipLeadingZeros","flag1","flag2","template","nonZeroPosition","chr1","chr2","chr3","enc1","enc2","enc3","enc4","fromBase64","cutTailZeros","toSearch","incoming","nonZeroStart","arrayBufferToString","resultString","stringToArrayBuffer","log2","nearestPowerOf2","round","clearProps","propsArray","prop","f","h","w","C","sortIndex","performance","now","unstable_now","z","A","setTimeout","clearTimeout","F","setImmediate","G","callback","startTime","expirationTime","H","J","K","L","M","priorityLevel","navigator","scheduling","isInputPending","bind","N","O","Q","R","MessageChannel","T","U","port2","port1","onmessage","postMessage","unstable_IdlePriority","unstable_ImmediatePriority","unstable_LowPriority","unstable_NormalPriority","unstable_Profiling","unstable_UserBlockingPriority","unstable_cancelCallback","unstable_continueExecution","unstable_forceFrameRate","unstable_getCurrentPriorityLevel","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_requestPaint","unstable_runWithPriority","unstable_scheduleCallback","delay","unstable_shouldYield","unstable_wrapCallback","module","_assertThisInitialized","ReferenceError","asyncGeneratorStep","gen","_next","_throw","done","_asyncToGenerator","err","_classCallCheck","instance","Constructor","_defineProperties","props","descriptor","_createClass","protoProps","staticProps","_defineProperty","_getPrototypeOf","getPrototypeOf","__proto__","_inherits","subClass","superClass","create","_possibleConstructorReturn","_setPrototypeOf","_arrayLikeToArray","arr2","_slicedToArray","_i","iterator","_s","_e","_n","next","minLen","_typeof","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","_construct","Parent","Class","Function","_wrapNativeSuper","_cache","has","Wrapper"],"sourceRoot":""}